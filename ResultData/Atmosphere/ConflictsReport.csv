=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_be05b_732f4/rev_be05b-732f4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_a7a6c_449a8/rev_a7a6c-449a8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d3bd9_87826/rev_d3bd9-87826.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_edbff_dd9d6/rev_edbff-dd9d6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_6dd83_54006/rev_6dd83-54006.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_218ab_90434/rev_218ab-90434.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e78dc_6b0a9/rev_e78dc-6b0a9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_13074_696f4/rev_13074-696f4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_831fe_025b6/rev_831fe-025b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d6aa8_cfd7d/rev_d6aa8-cfd7d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_6e16d_8ea92/rev_6e16d-8ea92.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0efe9_05047/rev_0efe9-05047.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_4daaf_072bb/rev_4daaf-072bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_fe4d1_b34fe/rev_fe4d1-b34fe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_b3301_a404c/rev_b3301-a404c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_762a4_f41e9/rev_762a4-f41e9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_a8014_6bc1d/rev_a8014-6bc1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_11aa3_85704/rev_11aa3-85704.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_70374_9e84c/rev_70374-9e84c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_691b4_c37b6/rev_691b4-c37b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_691b4_3851d/rev_691b4-3851d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_baf7e_1d192/rev_baf7e-1d192.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_56e7a_91ed6/rev_56e7a-91ed6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c34aa_6c3ac/rev_c34aa-6c3ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_5a668_1d410/rev_5a668-1d410.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public Action service(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        Action action = suspended(request, response);
        if (request.getAttribute(WebSocketSupport.WEBSOCKET_SUSPEND) == null) {
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", response);
                suspend(action, request, response);
            }
            else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", response);

                if (supportSession()) {
                    AsyncContext asyncContext =
                            (AsyncContext) request.getSession().getAttribute("org.atmosphere.container.asyncContext");

                    if (asyncContext != null) {
                        asyncContext.complete();
                    }
                }

                Action nextAction = resumed(request, response);
                if (nextAction.type == Action.TYPE.SUSPEND) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879156/fstmerge_var1_4323006477977189987
                    logger.debug("Suspending after resuming response: {}", response);
                    suspend(action, request, response);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879156/fstmerge_base_6443903839068714385
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                        suspend(action, req, res);
                    }
=======
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                    }
                    suspend(action, req, res);                    
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879156/fstmerge_var2_2166495902767179242
                }
            }
        }
        else {
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", response);
            }
            else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resume response: {}", response);
                request.setAttribute(WebSocketSupport.WEBSOCKET_RESUME, "true");
            }
        }
        return action;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/modules/cpr/src/main/java/org/atmosphere/container/Servlet30Support.java
Conflict type: LineBasedMCFd
Conflict body: 
public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        Action action = null;
        try {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);
                suspend(action, req, res);
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);

                int latchId = (req.getAttribute(LATCH) == null ? 0 : (Integer)req.getAttribute(LATCH));
                if (req.getSession(true).getAttribute(LATCH) != null) {
                    latchId = (Integer) req.getSession(true).getAttribute(LATCH);
                }
                CountDownLatch latch = latchs.get(latchId);

                if (latch == null && req.getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) == null) {
                    logger.debug("response wasn't suspended: {}", res);
                    return action;
                }

                latch.countDown();
                                                                  
                Action nextAction = resumed(req, res);
                if (nextAction.type == Action.TYPE.SUSPEND) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879254/fstmerge_var1_4922437298422364924
                    logger.debug("Suspending after resuming response: {}", res);
                    suspend(action, req, res);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879254/fstmerge_base_2859171395256218274
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                        suspend(action, req, res);
                    }
=======
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("Suspending after Resuming" + res);
                    }
                    suspend(action, req, res);                    
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585879254/fstmerge_var2_6928855362111025899
                }
            }
        } finally {
            CometEvent event = (CometEvent) req.getAttribute(TomcatCometSupport.COMET_EVENT);
            if (event != null) {
                event.close();
            }

            HttpEvent he = (HttpEvent) req.getAttribute(JBossWebCometSupport.HTTP_EVENT);
            if (he != null) {
                he.close();
            }
        }
        return action;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void push(final AtmosphereResource<?, ?> resource, final Object msg) {

        synchronized (resource) {
            if (resource.getAtmosphereResourceEvent().isCancelled()) {
                return;
            }

            final AtmosphereResourceEvent event = resource.getAtmosphereResourceEvent();
            event.setMessage(msg);

            if (resource.getAtmosphereResourceEvent() != null && !resource.getAtmosphereResourceEvent().isCancelled()
                    && HttpServletRequest.class.isAssignableFrom(resource.getRequest().getClass())) {
                try {
                    HttpServletRequest.class.cast(resource.getRequest())
                            .setAttribute(CometSupport.MAX_INACTIVE, System.currentTimeMillis());
                }
                catch (Exception t) {
                    // Shield us from any corrupted Request
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585880285/fstmerge_var1_132216998595388084
                    logger.warn("Preventing corruption of a recycled request: resource" + resource, event);
                    resources.remove(resource);
                    return;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585880285/fstmerge_base_6579064904287454144
                    if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
                        LoggerUtils.getLogger().log(Level.FINE, "Preventing corruption of a recycled request", e);
                        resources.remove(r);
                        return;
                    }
=======
                    if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
                        LoggerUtils.getLogger().log(Level.FINE, "Preventing corruption of a recycled request", e);
                    }
                    resources.remove(r);
                    return;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585880285/fstmerge_var2_2571546245306435370
                }
            }

            bc.getAsyncWriteService().execute(new Runnable(){
                @Override
                public void run() {
                    broadcast(resource, event);
                    if (resource instanceof AtmosphereEventLifecycle) {
                        ((AtmosphereEventLifecycle) resource).notifyListeners();
                    }
                }
            });
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void incomingBroadcast() {
        try {
            if (bc.getAtmosphereConfig() != null) {

                // For backward compatibility.
                if (bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JMS_TOPIC);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_NAMESPACE) != null) {
                    namespace = bc.getAtmosphereConfig().getInitParameter(JNDI_NAMESPACE);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_FACTORY_NAME) != null) {
                    factoryName = bc.getAtmosphereConfig().getInitParameter(JNDI_FACTORY_NAME);
                }

                if (bc.getAtmosphereConfig().getInitParameter(JNDI_TOPIC) != null) {
                    topicId = bc.getAtmosphereConfig().getInitParameter(JNDI_TOPIC);
                }
            }

            String id = getID();
            if (id.startsWith("/*")) {
                id = "atmosphere";
            }

            logger.info(String.format("Looking up Connection Factory %s", namespace + factoryName));
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881929/fstmerge_var1_882755593926741119
            logger.info("Looking up topic: {}", topicId);
            Topic topic = (Topic) ctx.lookup("jms/" + topicId);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881929/fstmerge_base_4659829441832601723
            logger.info(String.format("Looking up topic: %s", topicId));
            Topic topic = (Topic) ctx.lookup("jms/" + topicId);
=======
            logger.info(String.format("Looking up topic: %s", topicId));
            Topic topic = (Topic) ctx.lookup(namespace + topicId);

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881929/fstmerge_var2_2624156843898535579
            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            logger.info("Create customer: {}", id);
            String selector = String.format("BroadcasterId = '%s'", id);

            consumer = session.createConsumer(topic, selector);
            consumer.setMessageListener(new MessageListener() {

                @Override
                public void onMessage(Message msg) {
                    try {
                        TextMessage textMessage = (TextMessage) msg;
                        String message = textMessage.getText();

                        if (message != null && bc != null) {
                            broadcastReceivedMessage(message);
                        }
                    }
                    catch (JMSException ex) {
                        logger.warn("failed to broadcast message", ex);
                    }
                }
            });
            publisher = session.createProducer(topic);
            connection.start();

            logger.info("JMS created for topic {}, with filter {}", topicId, selector);
        }
        catch (Throwable ex) {
            throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final Logger logger = LoggerFactory.getLogger(JMSFilter.class); ##FSTMerge## private static Logger logger = LoggerUtils.getLogger(); ##FSTMerge## private final Logger logger = LoggerUtils.getLogger();
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_var1_5266682357362090092
@Override
    public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String){
            String message = (String)o;
            try {
                // Avoid re-broadcasting
                if (!receivedMessages.remove(message)) {
                    publisher.send(session.createTextMessage(message));
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_base_209098359096780668
public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String){
            String message = (String)o;
            try {
                // Avoid re-broadcasting
                if (!receivedMessages.remove(message)) {
                    publisher.send(session.createTextMessage(message));
=======
public BroadcastAction filter(Object originalMessage, Object o) {
        if (o instanceof String) {
            String message = (String) o;
            // Avoid re-broadcasting
            if (!receivedMessages.remove(message)) {
                try {
                    String id = bc.getID();
                    if (id.startsWith("/*")) {
                        id = "atmosphere";
                    }

                    TextMessage textMessage = session.createTextMessage(message.toString());
                    textMessage.setStringProperty("BroadcasterId", id);
                    publisher.send(textMessage);
                } catch (JMSException ex) {
                    logger.log(Level.WARNING, "", ex);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_var2_7284845300295401682
                }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_var1_5266682357362090092
            }
            catch (JMSException ex) {
                logger.warn("failed to publish message", ex);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_base_209098359096780668
            } catch (JMSException ex) {
                logger.log(Level.WARNING, "", ex);
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881966/fstmerge_var2_7284845300295401682
            }
            return new BroadcastAction(message);
        } else {
            return new BroadcastAction(o);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881971/fstmerge_var1_5325928223149026982
@Override
    public Broadcaster getBroadcaster(){
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881971/fstmerge_base_6476083994432087776
public Broadcaster getBroadcaster(){
=======
public Broadcaster getBroadcaster() {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881971/fstmerge_var2_2652028693759881281
        return bc;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881976/fstmerge_var1_3188523255206559135
@Override
    public void setBroadcaster(Broadcaster bc){
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881976/fstmerge_base_7260140971552510337
public void setBroadcaster(Broadcaster bc){
=======
public void setBroadcaster(Broadcaster bc) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881976/fstmerge_var2_9023373338828441214
        this.bc = bc;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881986/fstmerge_var1_6278385822006810547
@Override
    public void onMessage(Message msg) {
        try {
            TextMessage textMessage = (TextMessage) msg;
            String message = textMessage.getText();
            receivedMessages.offer(message);

            if (message != null && bc != null){
                bc.broadcast(message);
            }
        }
        catch (JMSException ex) {
            logger.warn("failed to broadcast message", ex);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881986/fstmerge_base_531219674369905095
public void onMessage(Message msg) {
        try {
            TextMessage textMessage = (TextMessage) msg;
            String message = textMessage.getText();
            receivedMessages.offer(message);

            if (message != null && bc != null){
                bc.broadcast(message);
            }
        } catch (JMSException ex) {
            if (logger.isLoggable(Level.WARNING)){
                logger.log(Level.WARNING,"",ex);
            }

        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585881986/fstmerge_var2_2065999008656498836

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b01c_00562/rev_0b01c-00562/plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d89ee_7229c/rev_d89ee-7229c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_a5a6b_35678/rev_a5a6b-35678.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e89d3_6f22f/rev_e89d3-6f22f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968416/fstmerge_var1_8121381165698807634
public void destroy() {
        releaseExternalResources();
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (bc != null && scope != SCOPE.REQUEST) {
            bc.destroy();
        }

        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }
        resources.clear();
        broadcastOnResume.clear();
        messages.clear();
        delayedBroadcast.clear();
        broadcasterCache = null;
        started.set(false);
        destroyed.set(true);
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968416/fstmerge_base_2999724918635387653
public void destroy() {
        if (notifierFuture != null) {
            notifierFuture.cancel(true);
        }

        if (bc != null && scope != SCOPE.REQUEST) {
            bc.destroy();
        }

        if (broadcasterCache != null) {
            broadcasterCache.stop();
        }
        resources.clear();
        broadcastOnResume.clear();
        messages.clear();
        delayedBroadcast.clear();
        broadcasterCache = null;
        started.set(false);
        destroyed.set(true);
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968416/fstmerge_var2_6152193208634833685

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e89d3_6f22f/rev_e89d3-6f22f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968462/fstmerge_var1_4135523838768394424
protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                try {
                    msg = messages.take();
                    // Leader/follower
                    bc.getExecutorService().submit(this);
                    push(msg);
                }
                catch (Throwable ex) {
                    // Catch all exception to avoid killing this thread.
                    // What if the Throwable is OOME?
                    logger.error("failed to submit broadcast handler runnable to broadcast executor service", ex);
                }
            }
        };
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968462/fstmerge_base_5291219891571868237
protected Runnable getBroadcastHandler() {
        return new Runnable() {
            public void run() {
                Entry msg = null;
                try {
                    msg = messages.take();
                    // Leader/follower
                    bc.getExecutorService().submit(this);
                    push(msg);
                }
                catch (Throwable ex) {
                    // Catch all exception to avoid killing this thread.
                    // What if the Throwable is OOME?
                    logger.error("failed to submit broadcast handler runnable to broadcast executor service", ex);
                }
                finally {
                    if (msg != null) {
                        // TODO dubious logic, future is always instance of Broadcaster future
                        if (msg.future instanceof BroadcasterFuture) {
                            msg.future.done();
                        }
                        else {
                            msg.future.cancel(true);
                        }
                    }
                }
            }
        };
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968462/fstmerge_var2_6887526023037057044

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e89d3_6f22f/rev_e89d3-6f22f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968469/fstmerge_var1_4670052864584508750
protected void push(Entry entry) {
        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

        if (resources.isEmpty()) {
            trackBroadcastMessage(null, entry.message);
            entry.future.done();
            return;
        }

        Object finalMsg = translate(entry.message);
        entry.message = finalMsg;

        if (entry.multipleAtmoResources == null) {
            for (AtmosphereResource<?, ?> r : resources) {
                finalMsg = perRequestFilter(r, entry);
                if (entry.writeLocally) {
                    executeAsyncWrite(r, finalMsg, entry.future);
                }
            }                                                                                                                                                                               
        } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
            finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

            if (entry.writeLocally) {
                executeAsyncWrite((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry.future);
            }
        } else if (entry.multipleAtmoResources instanceof Set) {
            Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
            for (AtmosphereResource<?, ?> r : sub) {
                finalMsg = perRequestFilter(r, entry);
                if (entry.writeLocally) {
                    executeAsyncWrite(r, finalMsg, entry.future);
                }
            }
        }
        entry.message = prevMessage;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968469/fstmerge_base_1702858402219132714
protected void push(Entry msg) {
        String prevMessage = msg.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                // TODO dubious logic, future is always instance of Broadcaster future
                if (!(e.future instanceof BroadcasterFuture)) {
                    e.future.cancel(true);
                }
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && msg.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                    // TODO dubious logic, future is always instance of Broadcaster future
                    if (e.future instanceof BroadcasterFuture) {
                        e.future.done();
                    }
                }
            }
            if (b.length() > 0) {
                msg.message = b.append(msg.message).toString();
            }
        }

        if (resources.isEmpty()) {
            trackBroadcastMessage(null, msg.message);
        }

        Object finalMsg = translate(msg.message);
        msg.message = finalMsg;

        if (msg.multipleAtmoResources == null) {
            for (AtmosphereResource<?, ?> r : resources) {
                finalMsg = perRequestFilter(r, msg);
                if (msg.writeLocally) {
                    push(r, finalMsg);
                }
            }                                                                                                                                                                               
        } else if (msg.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
            finalMsg = perRequestFilter((AtmosphereResource<?, ?>) msg.multipleAtmoResources, msg);

            if (msg.writeLocally) {
                push((AtmosphereResource<?, ?>) msg.multipleAtmoResources, finalMsg);
            }
        } else if (msg.multipleAtmoResources instanceof Set) {
            Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) msg.multipleAtmoResources;
            for (AtmosphereResource<?, ?> r : sub) {
                finalMsg = perRequestFilter(r, msg);
                if (msg.writeLocally) {
                    push(r, finalMsg);
                }
            }
        }
        msg.message = prevMessage;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968469/fstmerge_var2_180798581723875950

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e89d3_6f22f/rev_e89d3-6f22f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968536/fstmerge_var1_4111789096099291160
@Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM. Here we do not call destroy() as application may still have reference to
        // this broadcaster.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
        }
        return r;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968536/fstmerge_base_8718837468666208058
@Override
    public AtmosphereResource<?, ?> removeAtmosphereResource(AtmosphereResource r) {
        if (!resources.contains(r)) {
            return null;
        }
        resources.remove(r);

        // Will help preventing OOM. Here we do not call destroy() as application may still have reference to
        // this broadcaster.
        if (resources.isEmpty()) {
            BroadcasterFactory.getDefault().remove(this, name);
            this.releaseExternalResources();
        }
        return r;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418585968536/fstmerge_var2_951468584584743686

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e89d3_6f22f/rev_e89d3-6f22f/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_ecdda_24b97/rev_ecdda-24b97.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_2fd32_2964d/rev_2fd32-2964d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_52c91_17c96/rev_52c91-17c96.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_df2e1_c0796/rev_df2e1-c0796.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_82471_58edf/rev_82471-58edf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_02c3a_82471/rev_02c3a-82471.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418586204704/fstmerge_var1_4230667833754947228
@Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);

					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418586204704/fstmerge_base_6050201615903993603
=======
@Override
	public RebindResult generateIncrementally(TreeLogger logger, GeneratorContextExt context, String typeName) throws UnableToCompleteException {
		
		TypeOracle typeOracle = context.getTypeOracle();
		
		// Create the CometSerializer impl
		String packageName = "comet";
		String className = typeName.replace('.', '_') + "Impl";
		PrintWriter printWriter = context.tryCreate(logger, packageName, className);
		
		if (printWriter != null) {
			
			try {
				JClassType type = typeOracle.getType(typeName);
				SerialTypes annotation = type.getAnnotation(SerialTypes.class);
				if (annotation == null) {
					logger.log(TreeLogger.ERROR, "No SerialTypes annotation on CometSerializer type: " + typeName);
					throw new UnableToCompleteException();
				}
				
				SerializableTypeOracleBuilder typesSentToBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				SerializableTypeOracleBuilder typesSentFromBrowserBuilder = new SerializableTypeOracleBuilder(logger, context.getPropertyOracle(), typeOracle);
				
				for (Class<? extends Serializable> serializable : annotation.value()) {
					int rank = 0;
					if (serializable.isArray()) {
						while(serializable.isArray()) {
							serializable = (Class<? extends Serializable>) serializable.getComponentType();
							rank++;
						}
					}
						
					JType resolvedType = typeOracle.getType(serializable.getCanonicalName());
					while (rank > 0) {
						resolvedType = typeOracle.getArrayType(resolvedType);
						rank--;
					}
					
					typesSentToBrowserBuilder.addRootType(logger, resolvedType);
                    typesSentFromBrowserBuilder.addRootType(logger, resolvedType);
				}
				
				// Create a resource file to receive all of the serialization information
				// computed by STOB and mark it as private so it does not end up in the
				// output.
				OutputStream pathInfo = context.tryCreateResource(logger, typeName + ".rpc.log");
				PrintWriter writer = new PrintWriter(new OutputStreamWriter(pathInfo));
				writer.write("====================================\n");
				writer.write("Types potentially sent from server:\n");
				writer.write("====================================\n\n");
				writer.flush();
				
				typesSentToBrowserBuilder.setLogOutputWriter(writer);
				SerializableTypeOracle typesSentToBrowser = typesSentToBrowserBuilder.build(logger);

				writer.write("===================================\n");
				writer.write("Types potentially sent from browser:\n");
				writer.write("===================================\n\n");
				writer.flush();
				typesSentFromBrowserBuilder.setLogOutputWriter(writer);
			    SerializableTypeOracle typesSentFromBrowser = typesSentFromBrowserBuilder.build(logger);
				
				writer.close();
				
				if (pathInfo != null) {
					context.commitResource(logger, pathInfo).setPrivate(true);
				}
				
				// Create the serializer
                final String modifiedTypeName = typeName.replace('.', '_');
                TypeSerializerCreator tsc = new TypeSerializerCreator(logger, typesSentFromBrowser, typesSentToBrowser, context, "comet." + modifiedTypeName, modifiedTypeName);
				String realize = tsc.realize(logger);
				
				// Create the CometSerializer impl
				ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
				
				composerFactory.addImport(Serializer.class.getName());
				composerFactory.addImport(SerialMode.class.getName());
				
				composerFactory.setSuperclass(typeName);
				// TODO is the SERIALIZER required for DE RPC?
				SourceWriter sourceWriter = composerFactory.createSourceWriter(context, printWriter);
				sourceWriter.print("private Serializer SERIALIZER = new " + realize + "();");
				sourceWriter.print("protected Serializer getSerializer() {return SERIALIZER;}");
				sourceWriter.print("public SerialMode getMode() {return SerialMode." + annotation.mode().name() + ";}");
                sourceWriter.print("public SerialMode getPushMode() {return SerialMode." + annotation.pushmode().name() + ";}");
				sourceWriter.commit(logger);
				
				if (annotation.mode() == SerialMode.DE_RPC) {
					RpcDataArtifact data = new RpcDataArtifact(type.getQualifiedSourceName());
					for (JType t : typesSentToBrowser.getSerializableTypes()) {
						if (!(t instanceof JClassType)) {
							continue;
						}
						JField[] serializableFields = SerializationUtils.getSerializableFields(context.getTypeOracle(), (JClassType) t);
						
						List<String> names = Lists.create();
						for (int i = 0, j = serializableFields.length; i < j; i++) {
							names = Lists.add(names, serializableFields[i].getName());
						}
						
						data.setFields(SerializationUtils.getRpcTypeName(t), names);
					}
					
					context.commitArtifact(logger, data);
				}
			}
			catch (NotFoundException e) {
				logger.log(TreeLogger.ERROR, "", e);
				throw new UnableToCompleteException();
			}
		}
		
		return new RebindResult(RebindStatus.USE_PARTIAL_CACHED, packageName + '.' + className);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418586204704/fstmerge_var2_4571405697289166949

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_02c3a_82471/rev_02c3a-82471/modules/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/rebind/SerializerGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_31b78_9c0bc/rev_31b78-9c0bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_ef079_fb5d1/rev_ef079-fb5d1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_1cfba_ce984/rev_1cfba-ce984.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_3d62e_b35fc/rev_3d62e-b35fc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_1e2e2_a32a5/rev_1e2e2-a32a5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e22ff_69a76/rev_e22ff-69a76.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_37308_ba9bf/rev_37308-ba9bf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_ff79f_8b62a/rev_ff79f-8b62a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_776af_9e6e2/rev_776af-9e6e2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_30a90_ef70a/rev_30a90-ef70a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_b8a2d_f1dcc/rev_b8a2d-f1dcc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0b27c_dd842/rev_0b27c-dd842.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_ea4f7_aab3e/rev_ea4f7-aab3e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_735b0_c9d5c/rev_735b0-c9d5c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_9a512_4f840/rev_9a512-4f840.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d1b59_92938/rev_d1b59-92938.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_ec9de_2e433/rev_ec9de-2e433.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_6f5ef_300cc/rev_6f5ef-300cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_a7b70_1868f/rev_a7b70-1868f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_03788_20f32/rev_03788-20f32.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_3f030_2c2cf/rev_3f030-2c2cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_befaf_2e3e2/rev_befaf-2e3e2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_dd17e_a412a/rev_dd17e-a412a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_5ab88_01594/rev_5ab88-01594.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_9183e_b13e1/rev_9183e-b13e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_f5ceb_f8747/rev_f5ceb-f8747.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_6260f_52321/rev_6260f-52321.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_72853_8d4cc/rev_72853-8d4cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_975ef_a5482/rev_975ef-a5482.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_204da_87765/rev_204da-87765.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d8a67_89aa8/rev_d8a67-89aa8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_efa62_d8a67/rev_efa62-d8a67.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_dd3b3_1eae5/rev_dd3b3-1eae5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_3cd63_a0c33/rev_3cd63-a0c33.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_f457f_ca685/rev_f457f-ca685.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588019902/fstmerge_var1_6545763587457014666
void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (useResumeAnnotation && !sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null){
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588019902/fstmerge_base_8331685809174734169
void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null){
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588019902/fstmerge_var2_8225237559561340666

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_f457f_ca685/rev_f457f-ca685/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_84a50_1b877/rev_84a50-1b877.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_01078_32e9e/rev_01078-32e9e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192493/fstmerge_var1_5530574831621321338
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192493/fstmerge_base_3551886985881730285
boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
                return true;
            }
            return resumeOnBroadcast;
        }
=======
boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return true;
            }
            return resumeOnBroadcast;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192493/fstmerge_var2_8677001688918050864

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192499/fstmerge_var1_712646897565910177
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192499/fstmerge_base_8669087965216095432
boolean outputJunk(ContainerRequest request, boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
                return false;
            }

            return outputJunk;
        }
=======
boolean outputJunk(ContainerRequest request, boolean outputJunk) {
            boolean webSocketEnabled = false;
            if (servletReq.getHeaders("Connection") != null && servletReq.getHeaders("Connection").hasMoreElements()) {
                String[] e = ((Enumeration<String>) servletReq.getHeaders("Connection")).nextElement().split(",");
                for (String upgrade : e) {
                    if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                        webSocketEnabled = true;
                        break;
                    }
                }
            }

            String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
            if (webSocketEnabled) {
                return false;
            } else if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                return false;
            }

            return outputJunk;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192499/fstmerge_var2_2245671428113255729

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192540/fstmerge_var1_2996255879495989355
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192540/fstmerge_base_2407320367008122856
void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = UUID.randomUUID().toString();

                        // Re-generate a new one with proper scope.
                        Class<Broadcaster> c = null;
                        try {
                            c = (Class<Broadcaster>) Class.forName((String) servletReq.getAttribute(ApplicationConfig.BROADCASTER_CLASS));
                        } catch (Throwable e) {
                            throw new IllegalStateException(e.getMessage());
                        }
                        bc = broadcasterFactory.get(c, id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                }

                if (comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
=======
void suspend(boolean sessionSupported,
                     boolean resumeOnBroadcast,
                     boolean comments,
                     long timeout,
                     ContainerRequest request,
                     ContainerResponse response,
                     Broadcaster bc,
                     AtmosphereResource<HttpServletRequest, HttpServletResponse> r,
                     Suspend.SCOPE localScope) {

            // Force the status code to 200 events independently of the value of the entity (null or not)
            if (response.getStatus() == 204) {
                response.setStatus(200);
            }

            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
                    .getAttribute(ApplicationConfig.BROADCASTER_FACTORY);

            URI location = null;
            // Do not add location header if already there.
            if (!sessionSupported && !resumeOnBroadcast && response.getHttpHeaders().getFirst("Location") == null) {
                String uuid = UUID.randomUUID().toString();

                location = uriInfo.getAbsolutePathBuilder().path(uuid).build("");

                resumeCandidates.put(uuid, r);
                servletReq.setAttribute(RESUME_UUID, uuid);
                servletReq.setAttribute(RESUME_CANDIDATES, resumeCandidates);
            }

            if (bc == null && localScope != Suspend.SCOPE.REQUEST) {
                bc = r.getBroadcaster();
            }

            if (sessionSupported && localScope != Suspend.SCOPE.REQUEST && servletReq.getSession().getAttribute(SUSPENDED_RESOURCE) != null) {
                AtmosphereResource<HttpServletRequest, HttpServletResponse> cached =
                        (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                bc = cached.getBroadcaster();
                // Just in case something went wrong.
                try {
                    bc.removeAtmosphereResource(cached);
                } catch (IllegalStateException ex) {
                    logger.trace(ex.getMessage(), ex);
                }
            }

            if (response.getEntity() instanceof Broadcastable) {
                Broadcastable b = (Broadcastable) response.getEntity();
                bc = b.getBroadcaster();
                response.setEntity(b.getResponseMessage());
            }

            if ((localScope == Suspend.SCOPE.REQUEST) && bc == null) {
                if (bc == null) {
                    try {
                        String id = servletReq.getHeader(X_ATMOSPHERE_TRACKING_ID);
                        if (id == null){
                            id = UUID.randomUUID().toString();
                        }

                        bc = broadcasterFactory.get(id);
                        bc.setScope(Broadcaster.SCOPE.REQUEST);
                    } catch (Exception ex) {
                        logger.error("failed to instantiate broadcaster with factory: " + broadcasterFactory, ex);
                    }
                } else {
                    bc.setScope(Broadcaster.SCOPE.REQUEST);
                }
            }
            configureFilter(bc);
            r.setBroadcaster(bc);

            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);

            if (resumeOnBroadcast) {
                servletReq.setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, new Boolean(true));
            }

            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null) {
                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }
                response.setEntity(null);
                r.suspend(timeout, false);

            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192540/fstmerge_var2_2741409407974329078

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192722/fstmerge_var1_7819419853581290078
public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();
        ContainerResponse cr = null;
        try {
            cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            if (cr != null) {
                cr.setEntity(null);
            }
            e.setMessage(null);
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }

        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192722/fstmerge_base_1491400684023150551
=======
public final static void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e, final Broadcaster broadcaster) {
        HttpServletRequest request = (HttpServletRequest) r.getRequest();

        try {
            ContainerResponse cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
            boolean isCancelled = r.getAtmosphereResourceEvent().isCancelled();

            if (cr == null || isCancelled) {
                logger.error("Retrieving HttpServletRequest {} with ContainerResponse {}", request, cr);
                if (!isCancelled) {
                    logger.error("Unexpected state. ContainerResponse cannot be null or already committed. The connection hasn't been suspended yet");
                } else {
                    logger.error("ContainerResponse already resumed or cancelled. Ignoring");
                }

                if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                    DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
                }
                AsynchronousProcessor.destroyResource(r);
                return;
            }

            // This is required when you change the response's type
            String m = cr.getHttpHeaders().getFirst(HttpHeaders.CONTENT_TYPE).toString();
            if (e.getMessage() instanceof Response) {
                cr.setResponse((Response) e.getMessage());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            } else if (e.getMessage() instanceof List) {
                for (Object msg : (List<Object>) e.getMessage()) {
                    cr.setResponse(Response.ok(msg).build());
                    cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                    cr.write();
                    if (!cr.isCommitted()) {
                        cr.getOutputStream().flush();
                    }
                }
            } else {
                if (e.getMessage() == null) {
                    logger.warn("Broadcasted message is null");
                }

                cr.setResponse(Response.ok(e.getMessage()).build());
                cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                cr.write();
                if (!cr.isCommitted()) {
                    cr.getOutputStream().flush();
                }
            }
        } catch (Throwable t) {
            if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
                DefaultBroadcaster.class.cast(broadcaster).onException(t, r);
            } else {
                onException(t,r);
            }
        } finally {
            Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
            if (resumeOnBroadcast != null && resumeOnBroadcast) {

                String uuid = (String) request.getAttribute(AtmosphereFilter.RESUME_UUID);
                if (uuid != null) {
                    if (request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES) != null) {
                        ((ConcurrentHashMap<String, AtmosphereResource<?, ?>>) request.getAttribute(AtmosphereFilter.RESUME_CANDIDATES)).remove(uuid);
                    }
                }
                r.resume();
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588192722/fstmerge_var2_8802020191474766836

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Conflict type: LineBasedMCFd
Conflict body: 
public final void dispatch(final HttpServletRequest request) throws IOException {
        if (!loggedMsg.getAndSet(true)) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_base_1959990839746232310
            logger.info("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
=======
            logger.debug("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var2_142969581094838222
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_base_1959990839746232310
        WebSocketHttpServletResponse wsr = new WebSocketHttpServletResponse<WebSocket>(webSocket);
=======
        String pathInfo = request.getPathInfo();
        String requestURI = request.getRequestURI();
        if (atmosphereServlet.getAtmosphereConfig().getWebServerName().toLowerCase().indexOf("glassfish") != -1) {
            try {
                pathInfo = pathInfo.substring(pathInfo.indexOf("/", 1));
                requestURI = requestURI.substring(requestURI.indexOf("/", 1));
            } catch (IndexOutOfBoundsException e) {
                // Jersey will not work.
                logger.warn("Unable to patch GlassFish WebSocket http://java.net/jira/browse/GRIZZLY-1114");
            }
        }

        AtmosphereResponse wsr = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, request);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var2_142969581094838222
        AtmosphereRequest r = new AtmosphereRequest.Builder()
                .request(request)
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_base_1959990839746232310
=======
                .pathInfo(pathInfo)
                .requestURI(requestURI)
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var2_142969581094838222
                .headers(configureHeader(request))
                .build();

        request.setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_base_1959990839746232310
=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var2_142969581094838222
        dispatch(r, wsr);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var1_1287453896815923041
        webSocketProtocol.onOpen(webSocket);

        if (webSocket.resource() != null && !webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
            webSocketProtocol.onError(webSocket,
                    new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed:  " + request.getRequestURI(), wsr));
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_base_1959990839746232310
        resource = (AtmosphereResource) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        handler = (AtmosphereHandler) request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
        if (resource == null || !resource.getAtmosphereResourceEvent().isSuspended()) {
            logger.error("No AtmosphereResource has been suspended. The WebSocket will be closed.");
            webSocket.close();
=======
        webSocketProtocol.onOpen(webSocket);

        if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
            webSocketProtocol.onError(webSocket, new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed.", wsr));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193465/fstmerge_var2_142969581094838222
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void invokeWebSocketProtocol(String webSocketMessage) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193469/fstmerge_var1_4862716754187923719
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, webSocketMessage);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            try {
                dispatch(r, w);
            } finally {
                r.destroy();
                w.destroy();
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193469/fstmerge_base_5168387274731174678
        HttpServletRequest r = webSocketProtocol.parseMessage(resource, webSocketMessage);
        dispatch(r, new WebSocketHttpServletResponse<WebSocket>(webSocket));
=======
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, webSocketMessage);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            dispatch(r, w);
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193469/fstmerge_var2_1964253530466271561
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void invokeWebSocketProtocol(byte[] data, int offset, int length) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193474/fstmerge_var1_4115869590890665497
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, data, offset, length);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            try {
                dispatch(r, w);
            } finally {
                r.destroy();
                w.destroy();
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193474/fstmerge_base_3929365145234298024
        HttpServletRequest r = webSocketProtocol.parseMessage(resource, data, offset, length);
        dispatch(r, new WebSocketHttpServletResponse<WebSocket>(webSocket));
=======
        AtmosphereRequest r = webSocketProtocol.onMessage(webSocket, data, offset, length);
        if (r != null) {
            AtmosphereResponse<WebSocket> w = new AtmosphereResponse<WebSocket>(webSocket, webSocketProtocol, r);
            dispatch(r, w);
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193474/fstmerge_var2_7661236678640277469
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void close() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var1_57443927480318358
        AtmosphereResourceImpl resource =
                (AtmosphereResourceImpl) webSocket.resource();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_base_291786031695343181
=======
        AtmosphereResource<HttpServletRequest, HttpServletResponse> resource =
                (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var2_931089090980012192
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var1_57443927480318358
            webSocketProtocol.onClose(webSocket);

            if (resource != null && resource.isInScope()) {
                AtmosphereHandler handler = (AtmosphereHandler) resource.getRequest(false).getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
                AtmosphereResourceEventImpl e = new AtmosphereResourceEventImpl(resource, true, false);
                synchronized (resource) {
                    if (handler != null) {
                        handler.onStateChange(e);
                    }

                    Meteor m = (Meteor) resource.getRequest().getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }

                try {
                    resource.notifyListeners(e);
                    resource.cancel();
                } finally {
                    AsynchronousProcessor.destroyResource(resource);
                }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_base_291786031695343181
            if (handler != null && resource != null) {
                handler.onStateChange(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, false, true));
=======
            webSocketProtocol.onClose(webSocket);

            if (resource != null) {
                AtmosphereHandler handler = (AtmosphereHandler) resource.getRequest().getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
                synchronized (resource) {
                    if (handler != null) {
                        handler.onStateChange(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, false, true));
                    }

                    Meteor m = (Meteor) resource.getRequest().getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }

                try {
                    resource.notifyListeners();
                } finally {
                    AsynchronousProcessor.destroyResource(resource);
                }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var2_931089090980012192
            }
        } catch (IOException e) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_base_291786031695343181
            if (AtmosphereResourceImpl.class.isAssignableFrom(resource.getClass())) {
=======
            if (resource != null && AtmosphereResourceImpl.class.isAssignableFrom(resource.getClass())) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var2_931089090980012192
                AtmosphereResourceImpl.class.cast(resource).onThrowable(e);
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var1_57443927480318358
            logger.warn("Failed invoking atmosphere handler onStateChange()", e);
        } finally {
            if (resource.getRequest() != null && AtmosphereRequest.class.isAssignableFrom(resource.getRequest().getClass())) {
                AtmosphereRequest.class.cast(resource.getRequest()).destroy();
            }

            if (resource.getResponse() != null && AtmosphereResponse.class.isAssignableFrom(resource.getResponse().getClass())) {
                AtmosphereResponse.class.cast(resource.getResponse()).destroy();
            }

            if (webSocket != null) {
                WebSocketAdapter.class.cast(webSocket).setAtmosphereResource(null);
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_base_291786031695343181
            logger.info("Failed invoking atmosphere handler onStateChange()", e);
        }

        if (resource != null) {
            resource.getBroadcaster().removeAtmosphereResource(resource);
=======
            logger.warn("Failed invoking atmosphere handler onStateChange()", e);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193486/fstmerge_var2_931089090980012192
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193504/fstmerge_var1_2750409498719296412
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
        AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource();
        if (resource == null) {
            logger.error("Invalid state. No AtmosphereResource has been suspended");
            return null;
        }
        String pathInfo = resource.getRequest().getPathInfo();
        if (d.startsWith(delimiter)) {
            String[] token = d.split(delimiter);
            pathInfo = token[1];
            d = token[2];
        }
        Map<String,Object> m = new HashMap<String, Object>();
        m.put(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);

        return new AtmosphereRequest.Builder()
                .request(resource.getRequest())
                .method(methodType)
                .contentType(contentType)
                .body(d)
                .attributes(m)
                .pathInfo(pathInfo)
                .headers(WebSocketProcessor.configureHeader(resource.getRequest()))
                .build();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193504/fstmerge_base_4692444811922600031
=======
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
        if (resource == null) {
            logger.error("Invalid state. No AtmosphereResource has been suspended");
            return null;
        }
        String pathInfo = resource.getRequest().getPathInfo();
        if (d.startsWith(delimiter)) {
            String[] token = d.split(delimiter);
            pathInfo = token[1];
            d = token[2];
        }

        return new AtmosphereRequest.Builder()
                .request(resource.getRequest())
                .method(methodType)
                .contentType(contentType)
                .body(d)
                .pathInfo(pathInfo)
                .headers(WebSocketProcessor.configureHeader(resource.getRequest()))
                .build();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193504/fstmerge_var2_229625155250945526

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193512/fstmerge_var1_6530174353605220948
@Override
    public void onOpen(WebSocket webSocket) {
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193512/fstmerge_base_4722932651342836561
=======
@Override
    public void onOpen(WebSocket webSocket) {
        // eurk!!
        this.resource = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193512/fstmerge_var2_793606302031984426

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193521/fstmerge_var1_2041418486171860940
@Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.warn(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193521/fstmerge_base_8303985404712972669
=======
@Override
    public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193521/fstmerge_var2_1265066135254550056

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193539/fstmerge_var1_7176433583233308209
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
        logger.trace("broadcast String");
        webSocket.resource().getBroadcaster().broadcast(data);
        return null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193539/fstmerge_base_4042897704212551262
=======
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
        logger.trace("broadcast String");
        resource.getBroadcaster().broadcast(data);
        return null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193539/fstmerge_var2_4613024113907779545

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193543/fstmerge_var1_3808551622238673193
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        logger.trace("broadcast byte");
        byte[] b = new byte[length];
        System.arraycopy(data, offset, b, 0, length);
        webSocket.resource().getBroadcaster().broadcast(b);
        return null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193543/fstmerge_base_1323634505730991813
=======
@Override
    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        logger.trace("broadcast byte");
        byte[] b = new byte[length];
        System.arraycopy(data, offset, b, 0, length);
        resource.getBroadcaster().broadcast(b);
        return null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193543/fstmerge_var2_5597496033011670564

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193551/fstmerge_var1_127222353320372816
@Override
    public void onOpen(WebSocket webSocket) {
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193551/fstmerge_base_1795290864088306792
=======
@Override
    public void onOpen(WebSocket webSocket) {
        // eurk!!
        this.resource = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193551/fstmerge_var2_6040636331985652210

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private final JettyRequestFix request; ##FSTMerge## ##FSTMerge## private final HttpServletRequest request;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193591/fstmerge_var1_691013605952339854
@Override
    public void onDisconnect() {
        request.destroy();
        logger.trace("WebSocket.onDisconnect");
        webSocketProcessor.close();
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", DISCONNECT, webSocketProcessor.webSocket()));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193591/fstmerge_base_3238068144773500954
=======
@Override
    public void onDisconnect() {
        logger.trace("WebSocket.onDisconnect");
        webSocketProcessor.close();
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", DISCONNECT, webSocketProcessor.webSocket()));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193591/fstmerge_var2_6101471368206838726

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193625/fstmerge_var1_4356326024297456805
@Override
    public void onClose(int closeCode, String message) {
        logger.trace("WebSocket.OnClose.");
        request.destroy();
        if (webSocketProcessor == null) return;

        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CLOSE, webSocketProcessor.webSocket()));
        webSocketProcessor.close();

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193625/fstmerge_base_7490471901062118428
=======
@Override
    public void onClose(int closeCode, String message) {
        logger.trace("WebSocket.OnClose.");
        webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CLOSE, webSocketProcessor.webSocket()));
        webSocketProcessor.close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193625/fstmerge_var2_7538012772106363525

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private final FakeHttpSession httpSession; ##FSTMerge## ##FSTMerge## private final HttpSession httpSession;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193897/fstmerge_var1_5797412978414315918
public GrizzlyApplication(AtmosphereConfig config) {
            this.config = config;
            this.webSocketProtocol = config.getServlet().getWebSocketProtocol();
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193897/fstmerge_base_5633807458373978880
=======
public GrizzlyApplication(AtmosphereConfig config) {
            this.config = config;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193897/fstmerge_var2_1705578432620650121

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
public void onConnect(com.sun.grizzly.websockets.WebSocket w) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_base_4414022352437225126

            if (!BaseServerWebSocket.class.isAssignableFrom(w.getClass())) {
=======
            super.onConnect(w);
            logger.debug("onOpen");
            if (!DefaultWebSocket.class.isAssignableFrom(w.getClass())) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_var2_8788038722750107407
                throw new IllegalStateException();
            }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_var1_2882192204601396167
            DefaultWebSocket webSocket = DefaultWebSocket.class.cast(w);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_base_4414022352437225126
            BaseServerWebSocket webSocket = BaseServerWebSocket.class.cast(w);
=======
            WebSocketProtocol webSocketProtocol;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_var2_8788038722750107407
            try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_var1_2882192204601396167
                webSocketProcessor = new WebSocketProcessor(config.getServlet(), new GrizzlyWebSocket(webSocket), webSocketProtocol);
                webSocketProcessor.dispatch(webSocket.getRequest());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_base_4414022352437225126

                webSocketProcessor = (WebSocketProcessor) GrizzlyWebSocket.class.getClassLoader()
                        .loadClass(config.getServlet().getWebSocketProtocolClassName())
                        .getDeclaredConstructor(new Class[]{AtmosphereServlet.class, WebSocket.class})
                        .newInstance(new Object[]{config.getServlet(), new GrizzlyWebSocket(webSocket)});

                webSocketProcessor.dispatch(new HttpServletRequestWrapper(webSocket.getRequest()));
=======
                webSocketProtocol = (WebSocketProtocol) GlassFishWebSocketSupport.class.getClassLoader()
                        .loadClass(config.getServlet().getWebSocketProtocolClassName()).newInstance();
            } catch (Exception ex) {
                logger.error("Cannot load the WebSocketProtocol {}", config.getServlet().getWebSocketProtocolClassName(), ex);
                webSocketProtocol = new SimpleHttpProtocol();
            }
            webSocketProtocol.configure(config.getServlet().getAtmosphereConfig());

            DefaultWebSocket webSocket = DefaultWebSocket.class.cast(w);
            try {
                webSocketProcessor = new WebSocketProcessor(config.getServlet(), new GrizzlyWebSocket(webSocket), webSocketProtocol);
                webSocketProcessor.dispatch(webSocket.getRequest());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588193901/fstmerge_var2_8788038722750107407
            } catch (Exception e) {
                logger.warn("failed to connect to web socket", e);
            }
        }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public Action resumed(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        AtmosphereResourceImpl r =
                (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
        AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                        request.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194124/fstmerge_var1_7275168972972882065

        synchronized (r) {
            atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            r.setIsInScope(false);
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194124/fstmerge_base_7356797739288870821
        atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
=======

        synchronized(r) {
            atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            r.setIsInScope(false);
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194124/fstmerge_var2_7974878016095697527
        return new Action(Action.TYPE.RESUME);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039
                event.close();
=======
                bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
            } else {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039
                event.close();
=======
                bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (!resumed.remove(event)) {
                logger.debug("Client closed connection: response: {}", res);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039
            event.close();
=======
            bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039
            event.close();
=======
            bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
        } else if (event.getEventType() == EventType.ERROR) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039
            event.close();
=======
            bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
        } else if (event.getEventType() == EventType.END) {
            if (!resumed.remove(event)) {
                /**
                 * Ignore END (the application just read the complete InputStream
                 */
                //action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
                bz51881(event);
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var1_3768338213528558174
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_base_3634274124606445039

            event.close();
=======

            bz51881(event);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194137/fstmerge_var2_2671019681066971389
        }
        return action;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
        synchronized (r) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194658/fstmerge_var1_5002867681789506139
            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194658/fstmerge_base_5409312597567681040
            executeAsyncWrite(r, finalMsg, entry.future);
=======
            executeAsyncWrite(new AsyncWriteToken(r, entry.message, entry.future, entry.originalMessage));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588194658/fstmerge_var2_3871138966288219486
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
public DefaultBroadcaster(String name, URI uri, AtmosphereServlet.AtmosphereConfig config) {
        this.name = name;
        this.uri = uri;
        this.config = config;

        broadcasterCache = new DefaultBroadcasterCache();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195629/fstmerge_var1_7911960880828275056
        bc = createBroadcasterConfig(config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195629/fstmerge_base_7240129452605685977
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
=======
        bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
        String s = config.getInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY);
        if (s != null) {
            if (s.equalsIgnoreCase("afterFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
            } else if (s.equalsIgnoreCase("beforeFilter")) {
                cacheStrategy = BroadcasterCache.STRATEGY.BEFORE_FILTER;
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195629/fstmerge_var2_2843142650719720121
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void setBroadcasterLifeCyclePolicy(final BroadcasterLifeCyclePolicy lifeCyclePolicy) {
        this.lifeCyclePolicy = lifeCyclePolicy;
        if (currentLifecycleTask != null) {
            currentLifecycleTask.cancel(false);
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_base_248348576640406414
        if (bc.getScheduledExecutorService() == null) {
=======
        if (bc != null && bc.getScheduledExecutorService() == null) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_var2_2656310992862647038
            logger.error("No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work.", getID());
            return;
        }

        if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME
                || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_base_248348576640406414
=======
            recentActivity.set(false);

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_var2_2656310992862647038
            int time = lifeCyclePolicy.getTimeout();
            if (time == -1) {
                throw new IllegalStateException("BroadcasterLifeCyclePolicy time is not set");
            }

            final AtomicReference<Future<?>> ref = new AtomicReference<Future<?>>();
            currentLifecycleTask = bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable() {

                @Override
                public void run() {
                    try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_var1_2461093245125327637

                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_base_248348576640406414
                        if (resources.isEmpty()) {
=======
                        // Check for activity since the last execution.
                        if (recentActivity.getAndSet(false)) {
                            return;
                        } else if (resources.isEmpty()) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_var2_2656310992862647038
                            if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                releaseExternalResources();
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}", getID());
                            } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) {
                                notifyEmptyListener();
                                notifyIdleListener();

                                destroy(false);
                                logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}", getID());
                            }
                        } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) {
                            notifyIdleListener();

                            destroy(true);
                            logger.debug("Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}", getID());
                        }
                    } catch (Throwable t) {
                        if (destroyed.get()) {
                            logger.trace("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        } else {
                            logger.warn("Scheduled BroadcasterLifeCyclePolicy exception", t);
                        }
                    }
                }

                void destroy(boolean resume) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_base_248348576640406414
                    notifyDestroyListener();
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195673/fstmerge_var2_2656310992862647038

                    if (resume) {
                        logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());
                        resumeAll();
                    }

                    DefaultBroadcaster.this.destroy();
                    /**
                     * The value may be null if the timeout is too low. Hopefully next execution will
                     * cancel the task properly.
                     */
                    if (ref.get() != null) {
                        currentLifecycleTask.cancel(true);
                    }
                }

            }, time, time, lifeCyclePolicy.getTimeUnit());
            ref.set(currentLifecycleTask);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void push(Entry entry) {

        if (destroyed.get()) {
            return;
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_base_3460549462434613983
=======
        recentActivity.set(true);

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var2_8836575588224466547
        String prevMessage = entry.message.toString();
        if (!delayedBroadcast.isEmpty()) {
            Iterator<Entry> i = delayedBroadcast.iterator();
            StringBuilder b = new StringBuilder();
            while (i.hasNext()) {
                Entry e = i.next();
                e.future.cancel(true);
                try {
                    // Append so we do a single flush
                    if (e.message instanceof String
                            && entry.message instanceof String) {
                        b.append(e.message);
                    } else {
                        push(e);
                    }
                } finally {
                    i.remove();
                }
            }

            if (b.length() > 0) {
                entry.message = b.append(entry.message).toString();
            }
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var1_8733737371906537552
        Object finalMsg = translate(entry.message);

        if (finalMsg == null) {
            logger.trace("Broascast message was null {}", finalMsg);
            return;
        }

        Object prevM = entry.originalMessage;
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);

        if (entry.originalMessage == null) {
            logger.trace("Broascast message was null {}", prevM);
            return;
        }

        entry.message = finalMsg;

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_base_3460549462434613983
=======
        Object finalMsg = translate(entry.message);
        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);
        entry.message = finalMsg;

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var2_8836575588224466547
        if (resources.isEmpty()) {
            logger.debug("Broadcaster {} doesn't have any associated resource", getID());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var1_8733737371906537552

            AtmosphereResource<?, ?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_base_3460549462434613983
            trackBroadcastMessage(null, entry.message);
=======

            AtmosphereResource<?,?> r = null;
            if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {
                r = AtmosphereResource.class.cast(entry.multipleAtmoResources);
            }
            trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? entry.message : entry.originalMessage);

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var2_8836575588224466547
            if (entry.future != null) {
                entry.future.done();
            }
            return;
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_base_3460549462434613983
        Object finalMsg = translate(entry.message);
        entry.message = finalMsg;
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195713/fstmerge_var2_8836575588224466547
        try {
            if (entry.multipleAtmoResources == null) {
                for (AtmosphereResource<?, ?> r : resources) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            } else if (entry.multipleAtmoResources instanceof AtmosphereResource<?, ?>) {
                finalMsg = perRequestFilter((AtmosphereResource<?, ?>) entry.multipleAtmoResources, entry);

                if (finalMsg == null) {
                    logger.debug("Skipping broadcast delivery resource {} ", entry.multipleAtmoResources);
                    return;
                }

                if (entry.writeLocally) {
                    queueWriteIO((AtmosphereResource<?, ?>) entry.multipleAtmoResources, finalMsg, entry);
                }
            } else if (entry.multipleAtmoResources instanceof Set) {
                Set<AtmosphereResource<?, ?>> sub = (Set<AtmosphereResource<?, ?>>) entry.multipleAtmoResources;
                for (AtmosphereResource<?, ?> r : sub) {
                    finalMsg = perRequestFilter(r, entry);

                    if (finalMsg == null) {
                        logger.debug("Skipping broadcast delivery resource {} ", r);
                        continue;
                    }

                    if (entry.writeLocally) {
                        queueWriteIO(r, finalMsg, entry);
                    }
                }
            }
            entry.message = prevMessage;
        } catch (InterruptedException ex) {
            logger.debug(ex.getMessage(), ex);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195733/fstmerge_var1_1924037552461524883
protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
        try {
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
            token.destroy();
            event.setMessage(null);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195733/fstmerge_base_5017404155148961538
=======
protected void executeAsyncWrite(final AsyncWriteToken token) {
        boolean notifyListeners = true;
        boolean lostCandidate = false;

        try {
            final AtmosphereResourceEventImpl event = (AtmosphereResourceEventImpl) token.resource.getAtmosphereResourceEvent();
            event.setMessage(token.msg);

            // Check again to make sure we are still valid. Remove and silently ignore.
            if (!AtmosphereResourceImpl.class.cast(token.resource).isInScope()) {
                resources.remove(token.resource);
                lostCandidate = true;
                return;
            }

            try {
                HttpServletRequest.class.cast(token.resource.getRequest())
                        .setAttribute(MAX_INACTIVE, System.currentTimeMillis());
            } catch (Throwable t) {
                logger.error("Invalid AtmosphereResource state {}", event);
                logger.error("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                logger.error("", t);
                // The Request/Response associated with the AtmosphereResource has already been written and commited
                removeAtmosphereResource(token.resource);
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(token.resource);
                event.setCancelled(true);
                event.setThrowable(t);
                lostCandidate = true;
                return;
            }

            HttpServletRequest.class.cast(token.resource.getRequest()).setAttribute(ASYNC_TOKEN, token);
            broadcast(token.resource, event);
        } finally {
            if (notifyListeners) {
                token.resource.notifyListeners();
            }

            if (token.future != null) {
                token.future.done();
            }

            if (lostCandidate) {
                cacheLostMessage(token.resource);
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588195733/fstmerge_var2_288210883666256930

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ Object originalMessage; ##FSTMerge## ##FSTMerge## final Object originalMessage;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
private void addMapping(String path, AtmosphereHandlerWrapper w) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196454/fstmerge_var1_2721579999309280776
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196454/fstmerge_base_8369764994498618347
        // We are using JAXRS mapping algorithm.
        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
=======
        // We are using JAXRS mapping algorithm.

        if (path.contains("*")) {
            path = path.replace("*", "[/a-zA-Z0-9-&=;\\?]+");
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196454/fstmerge_var2_4439668202242920629
        atmosphereHandlers.put(path, w);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196454/fstmerge_base_8369764994498618347

=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196454/fstmerge_var2_4439668202242920629
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Conflict type: LineBasedMCFd
Conflict body: 
public void resume() {
        // Strangely but possible two thread try to resume at the same time.
        try {
            synchronized (event) {
                if (!isResumed && isInScope) {
                    action.type = AtmosphereServlet.Action.TYPE.RESUME;
                    isResumed = true;

                    try {
                        logger.debug("Resuming {}", getRequest());
                    } catch (Throwable ex) {
                        // Jetty NPE toString()
                        // Ignore
                        // Stop here as the request object as becomes invalid.
                        return;
                    }

                    // We need it as Jetty doesn't support timeout
                    Broadcaster b = getBroadcaster(false);
                    if (!b.isDestroyed() && b instanceof DefaultBroadcaster) {
                        ((DefaultBroadcaster) b).broadcastOnResume(this);
                    }

                    notifyListeners();
                    listeners.clear();

                    try {
                        if (!b.isDestroyed()) {
                            broadcaster.removeAtmosphereResource(this);
                        }
                    } catch (IllegalStateException ex) {
                        logger.warn("Unable to resume", this);
                        logger.debug(ex.getMessage(), ex);
                    }

                    if (b.getScope() == Broadcaster.SCOPE.REQUEST) {
                        logger.debug("Broadcaster's scope is set to request, destroying it {}", b.getID());
                        b.destroy();
                    }

                    // Resuming here means we need to pull away from all other Broadcaster, if they exists.
                    if (BroadcasterFactory.getDefault() != null) {
                        BroadcasterFactory.getDefault().removeAllAtmosphereResource(this);
                    }

                    try {
                        req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                        Meteor m = (Meteor) req.getAttribute(METEOR);
                        if (m != null) {
                            m.destroy();
                        }
                    } catch (Exception ex) {
                        logger.debug("Cannot resume an already resumed/cancelled request");
                    }

                    if (req.getAttribute(PRE_SUSPEND) == null) {
                        cometSupport.action(this);
                    }
                } else {
                    logger.debug("Cannot resume an already resumed/cancelled request {}", getRequest());
                }

                if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
                    AtmosphereResponse.class.cast(response).destroy();
                }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196781/fstmerge_var1_6937351795265227740
                if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
                    AtmosphereRequest.class.cast(req).destroy();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196781/fstmerge_base_4556694059980293093
                try {
                    req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                } catch (Exception ex) {
                    logger.debug("Cannot resume an already resumed/cancelled request");
                }
                if (req.getAttribute(PRE_SUSPEND) == null) {
                    cometSupport.action(this);
=======
                try {
                    req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                    Meteor m = (Meteor) req.getAttribute(METEOR);
                    if (m!= null) {
                        m.destroy();
                    }
                } catch (Exception ex) {
                    logger.debug("Cannot resume an already resumed/cancelled request");
                }

                if (req.getAttribute(PRE_SUSPEND) == null) {
                    cometSupport.action(this);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196781/fstmerge_var2_8584901282579666848
                }
            }
        } catch (Throwable t) {
            logger.trace("Wasn't able to resume a connection {}", this, t);
        } finally {
            event.setMessage(null);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
public void notifyListeners(AtmosphereResourceEvent event) {
        if (listeners.size() > 0) {
            logger.trace("Invoking listener with {}", event);
        } else {
            return;
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196889/fstmerge_var1_1618668386810032136
        Action oldAction = action;
        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }

            if (oldAction.type != action.type) {
                action().type = Action.TYPE.CREATED;
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196889/fstmerge_base_885009013716492710
        if (event.isResuming() || event.isResumedOnTimeout()) {
            onResume(event);
        } else if (event.isCancelled()) {
            onDisconnect(event);
        } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
            onSuspend(event);
        } else if (event.throwable() != null) {
            onThrowable(event);
        } else {
            onBroadcast(event);
=======
        try {
            if (event.isResuming() || event.isResumedOnTimeout()) {
                onResume(event);
            } else if (event.isCancelled()) {
                onDisconnect(event);
            } else if (!isSuspendEvent.getAndSet(true) && event.isSuspended()) {
                onSuspend(event);
            } else if (event.throwable() != null) {
                onThrowable(event);
            } else {
                onBroadcast(event);
            }
        } catch (Throwable t) {
            logger.trace("Listener error {}", t);
            AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
            try {
                onThrowable(event);
            } catch (Throwable t2) {
                logger.warn("Listener error {}", t2);
            }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588196889/fstmerge_var2_6214027508154489794
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197105/fstmerge_var1_2899987860973699501
private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);

            if (b.getBroadcasterConfig() == null) {
                b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            }

            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197105/fstmerge_base_7577279271487881923
=======
private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id) throws BroadcasterCreationException {
        try {
            Broadcaster b = c.getConstructor(String.class, AtmosphereServlet.AtmosphereConfig.class).newInstance(id.toString(), config);
            InjectorProvider.getInjector().inject(b);
            b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
            b.setBroadcasterLifeCyclePolicy(policy);
            if (DefaultBroadcaster.class.isAssignableFrom(clazz)) {
                DefaultBroadcaster.class.cast(b).start();
            }
            return b;
        } catch (Throwable t) {
            throw new BroadcasterCreationException(t);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197105/fstmerge_var2_7590790715842637536

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
public boolean remove(Broadcaster b, Object id) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197114/fstmerge_var1_1852484389665602700
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} factory size now {} ", id, store.size());
        }
        return removed;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197114/fstmerge_base_1855786036706146090
        logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
        return store.remove(id) != null ? true : (store.remove(b.getID()) != null);
=======
        boolean removed = store.remove(id, b);
        if (removed) {
            logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
        }
        return removed;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197114/fstmerge_var2_2912545372378049294
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_base_2414464820349022350
        Broadcaster b = getBroadcaster(id);
=======
        Broadcaster b = store.get(id);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_var2_2323241887518382256
        if (b != null && !c.isAssignableFrom(b.getClass())) {
            String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_base_2414464820349022350
            logger.debug("{}", msg);
=======
            logger.debug(msg);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_var2_2323241887518382256
            throw new IllegalStateException(msg);
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_var1_4716843378461270560
        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }

            b = store.get(id);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_base_2414464820349022350
        if ((b == null && createIfNull) || (b !=null && b.isDestroyed())) {
            b = get(c, id);
=======
        if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {
            if (b != null) {
                logger.debug("Removing destroyed Broadcaster {}", b.getID());
                store.remove(b.getID(), b);
            }
            if (store.putIfAbsent(id, createBroadcaster(c, id)) == null) {
                logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
            }
            b = store.get(id);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197131/fstmerge_var2_2323241887518382256
        }

        return b;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private A asyncIOWriter; ##FSTMerge## ##FSTMerge## private final A asyncIOWriter;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private AsyncProtocol asyncProtocol; ##FSTMerge## ##FSTMerge## private final AsyncProtocol asyncProtocol;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private HttpServletRequest atmosphereRequest; ##FSTMerge## ##FSTMerge## private final HttpServletRequest atmosphereRequest;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197740/fstmerge_var1_1190892926647760813
@Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }
        };
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197740/fstmerge_base_1712183767377878496
=======
@Override
    public ServletOutputStream getOutputStream() throws IOException {
        return new ServletOutputStream() {

            public void write(int i) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, new byte[]{(byte) i}, 0, 1));
                } else {
                    asyncIOWriter.write(new byte[]{(byte) i});
                }
            }


            public void write(byte[] bytes) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    asyncIOWriter.write(asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, 0, bytes.length));
                } else {
                    asyncIOWriter.write(bytes);
                }
            }

            public void write(byte[] bytes, int start, int offset) throws java.io.IOException {
                if (asyncProtocol.inspectResponse()) {
                    byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
                    asyncIOWriter.write(b, 0, b.length);
                } else {
                    asyncIOWriter.write(bytes, start, offset);
                }
            }

        };
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197740/fstmerge_var2_5396429930403170656

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197970/fstmerge_var1_1973916904210883133
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197970/fstmerge_base_4328147954457186307
protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.debug("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    }
=======
protected AtmosphereHandlerWrapper map(String path) {
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            final Map<String, String> m = new HashMap<String, String>();
            for (Map.Entry<String, AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                UriTemplate t = new UriTemplate(e.getKey());
                logger.trace("Trying to map {} to {}", t, path);
                if (t.match(path, m)) {
                    atmosphereHandlerWrapper = e.getValue();
                    logger.trace("Mapped {} to {}", t, e.getValue());
                    break;
                }
            }
        }
        return atmosphereHandlerWrapper;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197970/fstmerge_var2_1236752446636030004

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_var1_4719843723516809542
        String path = req.getServletPath();
        if (path == null || path.length() == 0) {
            path = "/";
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_base_6019335088908924975
        String path = req.getServletPath() + req.getPathInfo();
        if (path == null || path.length() <= 1) {
            path = "/all";
=======
        String path;
        if (req.getPathInfo() != null) {
            path = req.getServletPath() + req.getPathInfo();
        } else {
            path = req.getServletPath();
        }
        if (path == null || path.length() <= 1) {
            path = "/all";
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_var2_2307940804817336290
        }

        // The Algorithm as been fixed in 0.9
        AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path);
        if (atmosphereHandlerWrapper == null) {
            // Try the /*
            if (!path.endsWith("/")) {
                path += "/*";
            } else {
                path += "*";
            }
            atmosphereHandlerWrapper = config.handlers().get(path);
            if (atmosphereHandlerWrapper == null) {
                atmosphereHandlerWrapper = config.handlers().get("/*");
                if (atmosphereHandlerWrapper == null) {

                    if (req.getPathInfo() != null) {
                        // Try appending the pathInfo
                        path = req.getServletPath() + req.getPathInfo();
                    }

                    atmosphereHandlerWrapper = config.handlers().get(path);
                    if (atmosphereHandlerWrapper == null) {
                        String ppath = path;
                        path = path.substring(0, path.lastIndexOf("/")) + "/*";

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_var1_4719843723516809542
                        atmosphereHandlerWrapper = config.handlers().get(path);
                        if (atmosphereHandlerWrapper == null) {
                            path = ppath;
                            if (!path.endsWith("/")) {
                                path += "/*";
                            } else {
                                path += "*";
                            }
                            atmosphereHandlerWrapper = config.handlers().get(path);
                            if (atmosphereHandlerWrapper == null) {
                                logger.warn("No AtmosphereHandler maps request for {}", path);
                                for (String m : config.handlers().keySet()) {
                                    logger.warn("\tAtmosphereHandler registered: {}", m);
                                }
                                throw new ServletException("No AtmosphereHandler maps request for " + path);
                            }
                        }
                    }
                }
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_base_6019335088908924975
        if (atmosphereHandlerWrapper == null){
            throw new ServletException("No AtmosphereHandler maps request for " + path);
=======
        if (atmosphereHandlerWrapper == null) {
            throw new ServletException("No AtmosphereHandler maps request for " + path);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197975/fstmerge_var2_2307940804817336290
        }
        config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                atmosphereHandlerWrapper.broadcaster.getID());
        return atmosphereHandlerWrapper;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public Action timedout(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) request.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                request.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Timing out the connection for request {}", request);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
        AtmosphereResourceImpl re;
        long l = (Long) request.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        request.setAttribute(MAX_INACTIVE, (long) -1);
=======
        AtmosphereResourceImpl r;
        long l = (Long) request.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        request.setAttribute(MAX_INACTIVE, (long) -1);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
            // Something went wrong.
            if (request == null || response == null) {
                logger.warn("Invalid Request/Response: {}/{}", request, response);
                return timedoutAction;
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
        // Something went wrong.
        if (request == null || response == null) {
            logger.warn("Invalid Request/Response: {}/{}", request, response);
            return timedoutAction;
        }
=======
        logger.debug("Timing out the connection for request {}", request);

        // Something went wrong.
        if (request == null || response == null) {
            logger.warn("Invalid Request/Response: {}/{}", request, response);
            return timedoutAction;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
            r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
        re = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
=======
        r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
            if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
        if (re != null && re.getAtmosphereResourceEvent().isSuspended()) {
            re.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);
=======
        if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
            r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
                Broadcaster b = r.getBroadcaster();
                if (b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(r);
                }

                if (request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                    r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                            (Boolean) request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
                }

                invokeAtmosphereHandler(r);

                try {
                    response.getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        response.getWriter().close();
                    } catch (Throwable t2) {
                    }
                }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
            Broadcaster b = re.getBroadcaster();
            if (b instanceof DefaultBroadcaster) {
                ((DefaultBroadcaster) b).broadcastOnResume(re);
=======
            Broadcaster b = r.getBroadcaster();
            if (b instanceof DefaultBroadcaster) {
                ((DefaultBroadcaster) b).broadcastOnResume(r);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var1_1598963567208533565
        } catch (Throwable t) {
            logger.error("failed to timeout resource {}", r, t);
        } finally {
            try {
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
                }
            } catch (Throwable t) {
                logger.trace("timedout", t);
            } finally {
                if (r != null) {
                    destroyResource(r);
                }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826

            if (re.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                re.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                        (Boolean) re.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
=======

            if (r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                        (Boolean) r.getRequest().getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
            }
            invokeAtmosphereHandler(r);
            try {
                r.getResponse().getOutputStream().close();
            } catch (Throwable t) {
                try {
                    r.getResponse().getWriter().close();
                } catch (Throwable t2) {
                }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_base_5472410524740936826
            invokeAtmosphereHandler(re);
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197983/fstmerge_var2_2949642078461358274
        }

        return timedoutAction;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
        if (!r.isInScope()) return;

        HttpServletRequest req = r.getRequest(false);
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
            if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197988/fstmerge_var1_5491541014555441885

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197988/fstmerge_base_809102927412052681
                atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
            } else {
                r.getResponse().flushBuffer();
=======

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
                    r.setIsInScope(false);

                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197988/fstmerge_var2_543279996072580259
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197994/fstmerge_var1_1680738899135768141
public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        try {
            r.removeEventListeners();
            try {
                AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
            } catch (IllegalStateException ex) {
                logger.trace(ex.getMessage(), ex);
            }
            if (BroadcasterFactory.getDefault() != null) {
                BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
            }
        } catch (Throwable t) {
            logger.trace("destroyResource", t);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197994/fstmerge_base_8209489805409274004
=======
public static void destroyResource(AtmosphereResource<?, ?> r) {
        if (r == null) return;

        r.removeEventListeners();
        try {
            AtmosphereResourceImpl.class.cast(r).getBroadcaster(false).removeAtmosphereResource(r);
        } catch (IllegalStateException ex) {
            logger.trace(ex.getMessage(), ex);
        }
        if (BroadcasterFactory.getDefault() != null) {
            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197994/fstmerge_var2_450202830680678737

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var1_3764271584321417283
        AtmosphereResourceImpl r = null;
        try {
            if (trackActiveRequest) {
                long l = (Long) req.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                req.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug("Cancelling the connection for request {}", req);

            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_base_3206972272277294855
        AtmosphereResourceImpl re = null;
        long l = (Long) req.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }
        req.setAttribute(MAX_INACTIVE, (long) -1);
=======
        AtmosphereResourceImpl r = null;
        long l = (Long) req.getAttribute(MAX_INACTIVE);
        if (l == -1) {
            // The closedDetector closed the connection.
            return timedoutAction;
        }

        logger.debug("Cancelling the connection for request {}", req);

        req.setAttribute(MAX_INACTIVE, (long) -1);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var2_6482826119492986993

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var1_3764271584321417283
                r.setIsInScope(false);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_base_3206972272277294855
        try {
            re = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (re != null) {
                re.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(re);
                re.setIsInScope(false);
=======
        try {
            r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
            if (r != null) {
                r.getAtmosphereResourceEvent().setCancelled(true);
                invokeAtmosphereHandler(r);

                try {
                    r.getResponse().sendError(503);
                    r.getResponse().getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        r.getResponse().getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                r.setIsInScope(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var2_6482826119492986993
            }
        } catch (Throwable ex) {
            // Something wrong happenned, ignore the exception
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_base_3206972272277294855
            logger.debug("failed to cancel resource: " + re, ex);
=======
            logger.debug("failed to cancel resource: " + r, ex);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var2_6482826119492986993
        } finally {
            try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var1_3764271584321417283
                if (r != null) {
                    r.cancel();
                    r.notifyListeners();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_base_3206972272277294855
                aliveRequests.remove(req);
                if (re != null) {
                    re.notifyListeners();
=======
                aliveRequests.remove(req);
                if (r != null) {
                    r.notifyListeners();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var2_6482826119492986993
                }
            } catch (Throwable t) {
                logger.trace("cancel", t);
            } finally {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_base_3206972272277294855
                if (re != null) {
                    destroyResource(re);
=======
                if (r != null) {
                    destroyResource(r);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588197999/fstmerge_var2_6482826119492986993
                }
            }
        }

        return cancelledAction;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198402/fstmerge_var1_624863901089156571
@Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        assert factory.lookup(DefaultBroadcaster.class, id, true) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198402/fstmerge_base_8856338576564002466
=======
@Test
    public void testLookup_Class_Object() {
        String id = "id";
        String id2 = "foo";
        Broadcaster b = factory.get(id);
        assert factory.lookup(DefaultBroadcaster.class, id) != null;
        assert factory.lookup(DefaultBroadcaster.class, id2) == null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198402/fstmerge_var2_1027559273819986630

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public BroadcastFilter.BroadcastAction filter(Object originalMessage, Object o) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198541/fstmerge_var1_1309068037461661664
        String contents = originalMessage.toString();

        if (!(receivedMessages.remove(contents))) {
            jedisPublisher.publish(bc.getID(), contents);
            return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198541/fstmerge_base_3040897265012985716
        if (!(receivedMessages.remove(originalMessage.toString()))) {
            jedisPublisher.publish(bc.getID(), originalMessage.toString());
=======
        String contents = originalMessage.toString();

        if (!(receivedMessages.remove(contents))) {
            jedisPublisher.publish(bc.getID(), contents);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588198541/fstmerge_var2_3908946280579643152
        }
        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.ABORT, o);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_c044f_2cf68/rev_c044f-2cf68/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e7bf4_6d605/rev_e7bf4-6d605.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588258512/fstmerge_var1_8559901844295496257
void executeSuspend(AtmosphereResource r,
                            long timeout,
                            boolean comments,
                            boolean resumeOnBroadcast,
                            URI location,
                            ContainerRequest request,
                            ContainerResponse response,
                            boolean flushEntity) {

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            configureFilter(r.getBroadcaster());
            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);
            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    String[] jettyVersion = serverInfo.substring(6).split("\\.");
                    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                    eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                            || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null && flushEntity) {
                    try {
                        if (Callable.class.isAssignableFrom(entity.getClass())) {
                            entity = Callable.class.cast(entity).call();
                        }
                    } catch (Throwable t) {
                        logger.error("Error executing callable {}", entity);
                        entity = null;
                    }

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }

                response.setEntity(null);
                r.suspend(timeout, false);
            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588258512/fstmerge_base_4700267734504144396
=======
void executeSuspend(AtmosphereResource r,
                            long timeout,
                            boolean comments,
                            boolean resumeOnBroadcast,
                            URI location,
                            ContainerRequest request,
                            ContainerResponse response,
                            boolean flushEntity) {

            boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
            configureFilter(r.getBroadcaster());
            if (sessionSupported) {
                servletReq.getSession().setAttribute(SUSPENDED_RESOURCE, r);
                servletReq.getSession().setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
            }

            servletReq.setAttribute(SUSPENDED_RESOURCE, r);
            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);

            logger.debug("Linked HttpServletRequest {} with ContainerResponse {}", servletReq, response);
            // Set the content-type based on the returned entity.
            try {
                MediaType contentType = response.getMediaType();
                if (contentType == null && response.getEntity() != null) {
                    LinkedList<MediaType> l = new LinkedList<MediaType>();
                    // Will retrun the first
                    l.add(request.getAcceptableMediaType(new LinkedList<MediaType>()));
                    contentType = response.getMessageBodyWorkers().getMessageBodyWriterMediaType(
                            response.getEntity().getClass(),
                            response.getEntityType(),
                            response.getAnnotations(),
                            l);

                    if (contentType == null ||
                            contentType.isWildcardType() || contentType.isWildcardSubtype())
                        contentType = MediaType.APPLICATION_OCTET_STREAM_TYPE;
                }

                Object entity = response.getEntity();

                Response.ResponseBuilder b = Response.ok();
                b = configureHeaders(b);
                if (entity != null) {
                    b = b.header("Content-Type", contentType != null ?
                            contentType.toString() : "text/html; charset=ISO-8859-1");
                    servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
                }

                boolean eclipse362468 = false;
                String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();
                if (serverInfo.indexOf("jetty") != -1) {
                    try {
                        String[] jettyVersion = serverInfo.substring(6).split("\\.");
                        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468
                        eclipse362468 = ((Integer.valueOf(jettyVersion[0]) == 8 && Integer.valueOf(jettyVersion[1]) == 0 && Integer.valueOf(jettyVersion[2]) > 1))
                                || ((Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) == 5 && Integer.valueOf(jettyVersion[2]) == 4));
                    } catch (Throwable t) {
                        logger.warn("Unable to parse server name {}", serverInfo);
                    }

                    if (comments && eclipse362468) {
                        logger.debug("Padding response is disabled to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=362468");
                    }
                }

                if (!eclipse362468 && comments && !resumeOnBroadcast) {
                    String padding = (String) servletReq.getAttribute(ApplicationConfig.STREAMING_PADDING_MODE);
                    String paddingData = AtmosphereResourceImpl.createStreamingPadding(padding);

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                        location = null;
                    }
                    response.setResponse(b.entity(paddingData).build());
                    response.write();
                }

                if (entity != null && flushEntity) {
                    try {
                        if (Callable.class.isAssignableFrom(entity.getClass())) {
                            entity = Callable.class.cast(entity).call();
                        }
                    } catch (Throwable t) {
                        logger.error("Error executing callable {}", entity);
                        entity = null;
                    }

                    if (location != null) {
                        b = b.header(HttpHeaders.LOCATION, location);
                    }
                    response.setResponse(b.entity(entity).build());
                    response.write();
                }

                response.setEntity(null);
                r.suspend(timeout, false);
            } catch (IOException ex) {
                throw new WebApplicationException(ex);
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588258512/fstmerge_var2_2336620306175364322

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e7bf4_6d605/rev_e7bf4-6d605/modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Conflict type: LineBasedMCFd
Conflict body: 
void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_base_5616342352655008306
        HttpServletRequest req = r.getRequest();
        HttpServletResponse response = r.getResponse();
=======
        if (!r.isInScope()) return;

        HttpServletRequest req = r.getRequest(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var2_7511991468055725739
        String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);

        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_base_5616342352655008306
            if (!r.getResponse().equals(response)) {
                logger.warn("Invalid response: {}", response);
            } else if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
=======
            if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var2_7511991468055725739
                AtmosphereHandler<HttpServletRequest, HttpServletResponse> atmosphereHandler =
                        (AtmosphereHandler<HttpServletRequest, HttpServletResponse>)
                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);

                synchronized (r) {
                    atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var1_2209900832279212737
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_base_5616342352655008306
                    r.setIsInScope(false);

=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var2_7511991468055725739
                    Meteor m = (Meteor) req.getAttribute(AtmosphereResourceImpl.METEOR);
                    if (m != null) {
                        m.destroy();
                    }
                }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var1_2209900832279212737

                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_base_5616342352655008306
=======
                req.removeAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
                r.setIsInScope(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var2_7511991468055725739
            }
        } catch (IOException ex) {
            try {
                r.onThrowable(ex);
            } catch (Throwable t) {
                logger.warn("failed calling onThrowable()", ex);
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_base_5616342352655008306
        } finally {
            try {
                aliveRequests.remove(req);
                r.notifyListeners();
            } finally {
                destroyResource(r);
            }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588263922/fstmerge_var2_7511991468055725739
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e7bf4_6d605/rev_e7bf4-6d605/modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_4cfc1_de51f/rev_4cfc1-de51f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_d1ef6_1c0ed/rev_d1ef6-1c0ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e6240_b7cca/rev_e6240-b7cca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_0514b_69c0e/rev_0514b-69c0e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_4a7fc_dabb0/rev_4a7fc-dabb0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public JMSBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
        super(id, null, config);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565218/fstmerge_var1_5819130829153212163
        setUp();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565218/fstmerge_base_688296937817139211
=======
        configure(config);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565218/fstmerge_var2_6994768802100274241
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_4a7fc_dabb0/rev_4a7fc-dabb0/extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565221/fstmerge_var1_1291227867522546884
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565221/fstmerge_base_3675259483920953305
public synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
        try {
            // For backward compatibility.
            if (config.getInitParameter(JMS_TOPIC) != null) {
                topicId = config.getInitParameter(JMS_TOPIC);
            }

            if (config.getInitParameter(JNDI_NAMESPACE) != null) {
                namespace = config.getInitParameter(JNDI_NAMESPACE);
            }

            if (config.getInitParameter(JNDI_FACTORY_NAME) != null) {
                factoryName = config.getInitParameter(JNDI_FACTORY_NAME);
            }

            if (config.getInitParameter(JNDI_TOPIC) != null) {
                topicId = config.getInitParameter(JNDI_TOPIC);
            }

            logger.info("Looking up Connection Factory {}", namespace + factoryName);
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info("Looking up topic: {}", topicId);
            topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            publisher = session.createProducer(topic);
            connection.start();
            logger.info("JMS created for topic {}", topicId);
            // Unfortunately we need the getID() to complete the configuration
            // But setID() is called after configure(), therefore we do the
            // rest of the configuration in incomingBroadcast() (which is called
            // once during configuration). We cannot do all the configuration in
            // incomingBroadcast() though, as using bc.getAtmosphereConfig() would
            // introduce a race condition (the configuration is loaded in a different
            // thread).

            // Notify the async running thread on incomingBroadcast()
            this.notify();
        } catch (Exception e) {
            String msg = "Unable to configure JMSBroadcaster";
            logger.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    }
=======
private synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
        try {
            // For backward compatibility.
            if (config.getInitParameter(JMS_TOPIC) != null) {
                topicId = config.getInitParameter(JMS_TOPIC);
            }

            if (config.getInitParameter(JNDI_NAMESPACE) != null) {
                namespace = config.getInitParameter(JNDI_NAMESPACE);
            }

            if (config.getInitParameter(JNDI_FACTORY_NAME) != null) {
                factoryName = config.getInitParameter(JNDI_FACTORY_NAME);
            }

            if (config.getInitParameter(JNDI_TOPIC) != null) {
                topicId = config.getInitParameter(JNDI_TOPIC);
            }

            logger.info("Looking up Connection Factory {}", namespace + factoryName);
            Context ctx = new InitialContext();
            ConnectionFactory connectionFactory = (ConnectionFactory) ctx.lookup(namespace + factoryName);

            logger.info("Looking up topic: {}", topicId);
            topic = (Topic) ctx.lookup(namespace + topicId);

            connection = connectionFactory.createConnection();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            publisher = session.createProducer(topic);
            connection.start();
            logger.info("JMS created for topic {}", topicId);
            // Unfortunately we need the getID() to complete the configuration
            // But setID() is called after configure(), therefore we do the
            // rest of the configuration in incomingBroadcast() (which is called
            // once during configuration). We cannot do all the configuration in
            // incomingBroadcast() though, as using bc.getAtmosphereConfig() would
            // introduce a race condition (the configuration is loaded in a different
            // thread).

            // Notify the async running thread on incomingBroadcast()
            this.notify();
        } catch (Exception e) {
            String msg = "Unable to configure JMSBroadcaster";
            logger.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588565221/fstmerge_var2_6291569115835609516

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_4a7fc_dabb0/rev_4a7fc-dabb0/extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_1d0b9_3e587/rev_1d0b9-3e587.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e6941_eb422/rev_e6941-eb422.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_939d8_fcfa5/rev_939d8-fcfa5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_e6a6b_af16c/rev_e6a6b-af16c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_302a0_5b566/rev_302a0-5b566.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_69850_841cb/rev_69850-841cb.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588931523/fstmerge_var1_7876236418289832289
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588931523/fstmerge_base_1766503461399823811
public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }
        }
        return action;
    }
=======
public Action service(HttpServletRequest req, HttpServletResponse res)
            throws IOException, ServletException {

        CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);

        // Comet is not enabled.
        if (event == null) {
            throw unableToDetectComet;
        }

        Action action = null;
        // For now, we are just interested in CometEvent.READ
        if (event.getEventType() == EventType.BEGIN) {
            action = suspended(req, res);
            if (action.type == Action.TYPE.SUSPEND) {
                logger.debug("Suspending response: {}", res);

                // Do nothing except setting the times out
                try {
                    if (action.timeout != -1) {
                        event.setTimeout((int) action.timeout);
                    } else {
                        event.setTimeout(Integer.MAX_VALUE);
                    }
                    req.setAttribute(SUSPENDED, true);
                } catch (UnsupportedOperationException ex) {
                    // Swallow s Tomcat APR isn't supporting time out
                    // TODO: Must implement the same functionality using a Scheduler
                }
            } else if (action.type == Action.TYPE.RESUME) {
                logger.debug("Resuming response: {}", res);
                event.close();
            } else {
                event.close();
            }
        } else if (event.getEventType() == EventType.READ) {
            // Not implemented
        } else if (event.getEventSubType() == CometEvent.EventSubType.CLIENT_DISCONNECT) {
            logger.debug("Client closed connection: response: {}", res);

            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.debug("Cancelling response: {}", res);
            }

            event.close();
        } else if (event.getEventSubType() == CometEvent.EventSubType.TIMEOUT) {
            logger.debug("Timing out response: {}", res);

            action = timedout(req, res);
            event.close();
        } else if (event.getEventType() == EventType.ERROR) {
            event.close();
        } else if (event.getEventType() == EventType.END) {
            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                req.setAttribute(SUSPENDED, null);
                action = cancelled(req, res);
            } else {
                logger.trace("Cancelling response: {}", res);
            }
        }
        return action;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588931523/fstmerge_var2_1405008752745604491

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_69850_841cb/rev_69850-841cb/modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588934668/fstmerge_var1_988794258948122628
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588934668/fstmerge_base_469227381881100031
protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        webSocketProtocol.configure(config);
    }
=======
protected void initWebSocketProtocol() {
        try {
            webSocketProtocol = (WebSocketProtocol) JettyWebSocketHandler.class.getClassLoader()
                    .loadClass(webSocketProtocolClassName).newInstance();
        } catch (Exception ex) {
            logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
            webSocketProtocol = new SimpleHttpProtocol();
        }
        InjectorProvider.getInjector().inject(webSocketProtocol);
        webSocketProtocol.configure(config);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1418588934668/fstmerge_var2_1231600408737222688

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_69850_841cb/rev_69850-841cb/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_7a150_93d7c/rev_7a150-93d7c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_b329b_4c0b2/rev_b329b-4c0b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_93564_08034/rev_93564-08034.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_957cc_019e6/rev_957cc-019e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_47593_cde6f/rev_47593-cde6f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_9885f_7726e/rev_9885f-7726e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_b23f6_13efe/rev_b23f6-13efe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_f7804_5bae3/rev_f7804-5bae3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_b68f6_d33c3/rev_b68f6-d33c3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_45e1e_12afc/rev_45e1e-12afc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_6ee21_4a387/rev_6ee21-4a387.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_dec25_73014/rev_dec25-73014.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/atmosphere/revisions/rev_3c4ea_f4416/rev_3c4ea-f4416.revisions

=========================================================