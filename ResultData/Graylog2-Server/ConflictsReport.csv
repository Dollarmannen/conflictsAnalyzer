==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a24fd_96c0f/rev_a24fd-96c0f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d37e0_a46c9/rev_d37e0-a46c9.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488174664/fstmerge_var1_1774075627706639065
@Override public void run() {
        while(true) {
            Connection connection = null;
            Channel channel = null;
            QueueingConsumer consumer = new QueueingConsumer(channel);
            
            try {
                connection = broker.getConnection();
                channel = connection.createChannel();
                channel.basicConsume(this.queue.getName(), false, consumer);
            } catch (Exception e) {
                Log.crit("AMQP queue '" + this.queue + "': Could not connect to AMQP broker or channel (Make sure that "
                        + "the queue exists. Retrying in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");
                
                // Retry after waiting for SLEEP_INTERVAL seconds.
                try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                continue;
            }

            while (true) {
                try {
                    QueueingConsumer.Delivery delivery;
                    try {
                        delivery = consumer.nextDelivery();
                    } catch (InterruptedException ie) {
                        continue;
                    }

                    System.out.println("HANDLED MESSAGE: " + new String(delivery.getBody()));

                    try {
                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
                    } catch (IOException e) {
                        Log.crit("Could not ack AMQP message: " + e.toString());
                    }
                } catch(Exception e) {
                    // Error while receiving. i.e. when AMQP broker breaks down.
                    Log.crit("AMQP queue '" + this.queue + "': Error while subscribed (rebuilding connection "
                            + "in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");

                    // Better close connection stuff it is still active.
                    try {
                        channel.close();
                        connection.close();
                    } catch (IOException ex) {
                        // I don't care.
                    } catch (AlreadyClosedException ex) {
                        // I don't care.
                    }

                    // Retry after waiting for SLEEP_INTERVAL seconds.
                    try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                    break;
                }
            }
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488174664/fstmerge_base_8318220217284744290
=======
@Override public void run() {
        while(true) {
            Connection connection = null;
            Channel channel = null;
            QueueingConsumer consumer = new QueueingConsumer(channel);
            
            try {
                connection = broker.getConnection();
                channel = connection.createChannel();
                channel.basicConsume(this.queue.getName(), false, consumer);

                Log.info("Successfully connected to queue '" + this.queue.getName() + "'");
            } catch (Exception e) {
                Log.crit("AMQP queue '" + this.queue.getName() + "': Could not connect to AMQP broker or channel (Make sure that "
                        + "the queue exists. Retrying in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");
                
                // Retry after waiting for SLEEP_INTERVAL seconds.
                try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                continue;
            }

            while (true) {
                try {
                    QueueingConsumer.Delivery delivery;
                    try {
                        delivery = consumer.nextDelivery();
                    } catch (InterruptedException ie) {
                        continue;
                    }

                    // Handle the message. (Store in MongoDB etc)
                    try {
                        handleMessage(delivery.getBody());
                    } catch(Exception e) {
                        Log.crit("Could not handle AMQP message: " + e.toString());
                    }

                    try {
                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
                    } catch (IOException e) {
                        Log.crit("Could not ack AMQP message: " + e.toString());
                    }
                } catch(Exception e) {
                    // Error while receiving. i.e. when AMQP broker breaks down.
                    Log.crit("AMQP queue '" + this.queue.getName() + "': Error while subscribed (rebuilding connection "
                            + "in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");

                    // Better close connection stuff it is still active.
                    try {
                        channel.close();
                        connection.close();
                    } catch (IOException ex) {
                        // I don't care.
                    } catch (AlreadyClosedException ex) {
                        // I don't care.
                    }

                    // Retry after waiting for SLEEP_INTERVAL seconds.
                    try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                    break;
                }
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488174664/fstmerge_var2_1308202489249399320

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d37e0_a46c9/rev_d37e0-a46c9/src/main/java/org/graylog2/messagehandlers/amqp/AMQPSubscriberThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e46cb_2de82/rev_e46cb-2de82.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488180038/fstmerge_var1_66249482883814655
public void event(SyslogServerIF syslogServer, SyslogServerEventIF event) {
        // Yeah, syslog.
        event.setFacility(event.getFacility()/8);

        // Print out debug information.
        if (Main.debugMode) {
            Log.info("Received syslog message (via AMQP): " + event.getMessage());
            Log.info("Host: " + event.getHost());
            Log.info("Facility: " + event.getFacility() + " (" + Tools.syslogFacilityToReadable(event.getFacility()) + ")");
            Log.info("Level: " + event.getLevel() + " (" + Tools.syslogLevelToReadable(event.getLevel()) + ")");
            Log.info("Raw: " + new String(event.getRaw()));
            Log.info("=======");
        }

        // Insert into database.
        try {
            // Connect to database.
            MongoBridge m = new MongoBridge();

            m.insert(event);

            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), event);

            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), event);
        } catch (Exception e) {
            Log.crit("Could not insert syslog event into database: " + e.toString());
        }

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488180038/fstmerge_base_128018235158472854
public void event(SyslogServerIF syslogServer, SyslogServerEventIF event) {
        // Yeah, syslog.
        event.setFacility(event.getFacility()/8);

        // Print out debug information.
        if (Main.debugMode) {
            Log.info("Received message: " + event.getMessage());
            Log.info("Host: " + event.getHost());
            Log.info("Facility: " + event.getFacility() + " (" + Tools.syslogFacilityToReadable(event.getFacility()) + ")");
            Log.info("Level: " + event.getLevel() + " (" + Tools.syslogLevelToReadable(event.getLevel()) + ")");
            Log.info("Raw: " + new String(event.getRaw()));
            Log.info("=======");
        }

        // Insert into database.
        try {
            // Connect to database.
            MongoBridge m = new MongoBridge();

            m.insert(event);

            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), event);

            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), event);
        } catch (Exception e) {
            Log.crit("Could not insert syslog event into database: " + e.toString());
        }

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488180038/fstmerge_var2_2640440512996468577

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e46cb_2de82/rev_e46cb-2de82/src/main/java/org/graylog2/messagehandlers/syslog/SyslogEventHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6b28c_ce6b9/rev_6b28c-ce6b9.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override public void run() {
        try {
            GELFClientHandlerIF client = null;
            if (GELF.isChunkedMessage(this.receivedGelfSentence)) {
                Log.info("Received message is chunked. Handling now.");
                client = new ChunkedGELFClientHandler(this.receivedGelfSentence);
            } else {
                Log.info("Received message is not chunked. Handling now.");
                client = new SimpleGELFClientHandler(this.receivedGelfSentence);
            }
            client.handle();
        } catch (InvalidGELFTypeException e) {
            Log.crit("Invalid GELF type in message: " + e.toString());
        } catch (InvalidGELFHeaderException e) {
            Log.crit("Invalid GELF header in message: " + e.toString());
        } catch (InvalidGELFCompressionMethodException e) {
            Log.crit("Invalid compression method of GELF message: " + e.toString());
        } catch (java.util.zip.DataFormatException e) {
            Log.crit("Invalid compression data format in GELF message: " + e.toString());
        } catch (java.io.UnsupportedEncodingException e) {
            Log.crit("Invalid enconding of GELF message: " + e.toString());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488182938/fstmerge_var1_93276129060478745
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488182938/fstmerge_base_441790712139925978
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
        } catch (jave.io.EOFException e) {
            Log.crit("EOF Exception while handling GELF message: " + e.toString());
        } catch (java.net.SocketException e) {
            Log.crit("SocketException while handling GELF message: " + e.toString());
=======
        } catch (java.io.EOFException e) {
            Log.crit("EOF Exception while handling GELF message: " + e.toString());
        } catch (java.net.SocketException e) {
            Log.crit("SocketException while handling GELF message: " + e.toString());
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488182938/fstmerge_var2_5064567752533579207
        } catch (Exception e) {
            Log.crit("Exception caught while handling GELF message: " + e.toString());
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6b28c_ce6b9/rev_6b28c-ce6b9/src/main/java/org/graylog2/messagehandlers/gelf/GELFClientHandlerThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f8df5_3ee13/rev_f8df5-3ee13.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean handle() {
        try {
             // Fills properties with values from JSON.
            try { this.parse(); } catch(Exception e) {
                Log.warn("Could not parse GELF JSON: " + e.toString() + " - clientMessage was: " + this.clientMessage);
                return false;
            }

            // Add AMQP receiver queue as additional field if set.
            if (this.getAmqpReceiverQueue() != null) {
                this.message.addAdditionalData("_amqp_queue", this.getAmqpReceiverQueue());
            }

            // Store in MongoDB.
            // Connect to database.
            MongoBridge m = new MongoBridge();

            // Log if we are in debug mode.
            Log.info("Got GELF message: " + this.message.toString());

            // Insert message into MongoDB.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var1_519762813833355487
            m.insertGelfMessage(this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_base_1547235052266956971
            m.insertGelfMessage(message);
=======
            boolean filterOut = ReceiveHookManager.preProcess(new GELFMessageFilterHook(), message);
            if( filterOut ) {
            	if(Main.debugMode)
            		Syslog.getInstance("udp").debug("Not inserting event into database.");
            } else {
                m.insertGelfMessage(message);
                // This is doing the upcounting for statistics.
                ReceiveHookManager.postProcess(new MessageCounterHook(), message);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var2_958053567678437863

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var1_519762813833355487
            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_base_1547235052266956971
            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), message);
=======
                // Counts up host in hosts collection.
                ReceiveHookManager.postProcess(new HostUpsertHook(), message);
            }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var2_958053567678437863

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var1_519762813833355487
            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_base_1547235052266956971
            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), message);
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488185820/fstmerge_var2_958053567678437863
        } catch(Exception e) {
            Log.warn("Could not handle GELF client: " + e.toString());
            return false;
        }

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f8df5_3ee13/rev_f8df5-3ee13/src/main/java/org/graylog2/messagehandlers/gelf/SimpleGELFClientHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e09e9_b0bbb/rev_e09e9-b0bbb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5b0ee_72a1f/rev_5b0ee-72a1f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3612b_782a1/rev_3612b-782a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_59216_84154/rev_59216-84154.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean forward(GELFMessage message) throws MessageForwarderConfigurationException {
        if (this.host.isEmpty() || this.port <= 0) {
            throw new MessageForwarderConfigurationException("Host is empty or port is invalid.");
        }
        
        if (message.isChunked()) {
            LOG.info("Forwarding a chunked message.");
            for (GELFClientChunk chunk : message.getMessageChunks().values()) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_var1_4321843346050864582
                LOG.info("Forwarding chunked GELF message chunk:" + chunk.toString());
                this.send(chunk.getRaw());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_base_5292114262492710571
                LOG.info("Fowarding chunked GELF message chunk: <" + chunk.getHash() + ">");
                this.send(chunk.getData());
=======
                LOG.info("Fowarding chunked GELF message chunk: <" + chunk.getHash() + ">");
                this.succeeded = this.send(chunk.getRaw());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_var2_3596964938985637269
            }
        } else {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_var1_4321843346050864582
            this.succeeded = this.send(message.getRaw());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_base_5292114262492710571
            // TODO: THIS NEEDS TO BE GZIPPED.
            this.succeeded = this.send(message.getShortMessage().getBytes());
=======
            this.succeeded = this.send(message.getShortMessage().getBytes());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488203438/fstmerge_var2_3596964938985637269
        }

        return this.succeeded;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_59216_84154/rev_59216-84154/src/main/java/org/graylog2/forwarders/forwarders/GELFMessageForwarder.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f2151_0a991/rev_f2151-0a991.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8d7db_3a886/rev_8d7db-3a886.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_aa31a_62c46/rev_aa31a-62c46.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1ccfa_1a733/rev_1ccfa-1a733.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a24fd_96c0f/rev_a24fd-96c0f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d37e0_a46c9/rev_d37e0-a46c9.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488745965/fstmerge_var1_5926687117515882391
@Override public void run() {
        while(true) {
            Connection connection = null;
            Channel channel = null;
            QueueingConsumer consumer = new QueueingConsumer(channel);
            
            try {
                connection = broker.getConnection();
                channel = connection.createChannel();
                channel.basicConsume(this.queue.getName(), false, consumer);
            } catch (Exception e) {
                Log.crit("AMQP queue '" + this.queue + "': Could not connect to AMQP broker or channel (Make sure that "
                        + "the queue exists. Retrying in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");
                
                // Retry after waiting for SLEEP_INTERVAL seconds.
                try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                continue;
            }

            while (true) {
                try {
                    QueueingConsumer.Delivery delivery;
                    try {
                        delivery = consumer.nextDelivery();
                    } catch (InterruptedException ie) {
                        continue;
                    }

                    System.out.println("HANDLED MESSAGE: " + new String(delivery.getBody()));

                    try {
                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
                    } catch (IOException e) {
                        Log.crit("Could not ack AMQP message: " + e.toString());
                    }
                } catch(Exception e) {
                    // Error while receiving. i.e. when AMQP broker breaks down.
                    Log.crit("AMQP queue '" + this.queue + "': Error while subscribed (rebuilding connection "
                            + "in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");

                    // Better close connection stuff it is still active.
                    try {
                        channel.close();
                        connection.close();
                    } catch (IOException ex) {
                        // I don't care.
                    } catch (AlreadyClosedException ex) {
                        // I don't care.
                    }

                    // Retry after waiting for SLEEP_INTERVAL seconds.
                    try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                    break;
                }
            }
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488745965/fstmerge_base_484880245841413149
=======
@Override public void run() {
        while(true) {
            Connection connection = null;
            Channel channel = null;
            QueueingConsumer consumer = new QueueingConsumer(channel);
            
            try {
                connection = broker.getConnection();
                channel = connection.createChannel();
                channel.basicConsume(this.queue.getName(), false, consumer);

                Log.info("Successfully connected to queue '" + this.queue.getName() + "'");
            } catch (Exception e) {
                Log.crit("AMQP queue '" + this.queue.getName() + "': Could not connect to AMQP broker or channel (Make sure that "
                        + "the queue exists. Retrying in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");
                
                // Retry after waiting for SLEEP_INTERVAL seconds.
                try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                continue;
            }

            while (true) {
                try {
                    QueueingConsumer.Delivery delivery;
                    try {
                        delivery = consumer.nextDelivery();
                    } catch (InterruptedException ie) {
                        continue;
                    }

                    // Handle the message. (Store in MongoDB etc)
                    try {
                        handleMessage(delivery.getBody());
                    } catch(Exception e) {
                        Log.crit("Could not handle AMQP message: " + e.toString());
                    }

                    try {
                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
                    } catch (IOException e) {
                        Log.crit("Could not ack AMQP message: " + e.toString());
                    }
                } catch(Exception e) {
                    // Error while receiving. i.e. when AMQP broker breaks down.
                    Log.crit("AMQP queue '" + this.queue.getName() + "': Error while subscribed (rebuilding connection "
                            + "in " + SLEEP_INTERVAL + " seconds. (" + e.toString() + ")");

                    // Better close connection stuff it is still active.
                    try {
                        channel.close();
                        connection.close();
                    } catch (IOException ex) {
                        // I don't care.
                    } catch (AlreadyClosedException ex) {
                        // I don't care.
                    }

                    // Retry after waiting for SLEEP_INTERVAL seconds.
                    try { Thread.sleep(SLEEP_INTERVAL*1000); } catch(InterruptedException foo) {}
                    break;
                }
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488745965/fstmerge_var2_7267436820438226452

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d37e0_a46c9/rev_d37e0-a46c9/src/main/java/org/graylog2/messagehandlers/amqp/AMQPSubscriberThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e46cb_2de82/rev_e46cb-2de82.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488748743/fstmerge_var1_5159564768286138675
public void event(SyslogServerIF syslogServer, SyslogServerEventIF event) {
        // Yeah, syslog.
        event.setFacility(event.getFacility()/8);

        // Print out debug information.
        if (Main.debugMode) {
            Log.info("Received syslog message (via AMQP): " + event.getMessage());
            Log.info("Host: " + event.getHost());
            Log.info("Facility: " + event.getFacility() + " (" + Tools.syslogFacilityToReadable(event.getFacility()) + ")");
            Log.info("Level: " + event.getLevel() + " (" + Tools.syslogLevelToReadable(event.getLevel()) + ")");
            Log.info("Raw: " + new String(event.getRaw()));
            Log.info("=======");
        }

        // Insert into database.
        try {
            // Connect to database.
            MongoBridge m = new MongoBridge();

            m.insert(event);

            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), event);

            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), event);
        } catch (Exception e) {
            Log.crit("Could not insert syslog event into database: " + e.toString());
        }

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488748743/fstmerge_base_6639870007077464723
public void event(SyslogServerIF syslogServer, SyslogServerEventIF event) {
        // Yeah, syslog.
        event.setFacility(event.getFacility()/8);

        // Print out debug information.
        if (Main.debugMode) {
            Log.info("Received message: " + event.getMessage());
            Log.info("Host: " + event.getHost());
            Log.info("Facility: " + event.getFacility() + " (" + Tools.syslogFacilityToReadable(event.getFacility()) + ")");
            Log.info("Level: " + event.getLevel() + " (" + Tools.syslogLevelToReadable(event.getLevel()) + ")");
            Log.info("Raw: " + new String(event.getRaw()));
            Log.info("=======");
        }

        // Insert into database.
        try {
            // Connect to database.
            MongoBridge m = new MongoBridge();

            m.insert(event);

            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), event);

            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), event);
        } catch (Exception e) {
            Log.crit("Could not insert syslog event into database: " + e.toString());
        }

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488748743/fstmerge_var2_438144700631411756

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e46cb_2de82/rev_e46cb-2de82/src/main/java/org/graylog2/messagehandlers/syslog/SyslogEventHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6b28c_ce6b9/rev_6b28c-ce6b9.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override public void run() {
        try {
            GELFClientHandlerIF client = null;
            if (GELF.isChunkedMessage(this.receivedGelfSentence)) {
                Log.info("Received message is chunked. Handling now.");
                client = new ChunkedGELFClientHandler(this.receivedGelfSentence);
            } else {
                Log.info("Received message is not chunked. Handling now.");
                client = new SimpleGELFClientHandler(this.receivedGelfSentence);
            }
            client.handle();
        } catch (InvalidGELFTypeException e) {
            Log.crit("Invalid GELF type in message: " + e.toString());
        } catch (InvalidGELFHeaderException e) {
            Log.crit("Invalid GELF header in message: " + e.toString());
        } catch (InvalidGELFCompressionMethodException e) {
            Log.crit("Invalid compression method of GELF message: " + e.toString());
        } catch (java.util.zip.DataFormatException e) {
            Log.crit("Invalid compression data format in GELF message: " + e.toString());
        } catch (java.io.UnsupportedEncodingException e) {
            Log.crit("Invalid enconding of GELF message: " + e.toString());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488763324/fstmerge_var1_188263417529124592
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488763324/fstmerge_base_8059519606896621056
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
        } catch (jave.io.EOFException e) {
            Log.crit("EOF Exception while handling GELF message: " + e.toString());
        } catch (java.net.SocketException e) {
            Log.crit("SocketException while handling GELF message: " + e.toString());
=======
        } catch (java.io.EOFException e) {
            Log.crit("EOF Exception while handling GELF message: " + e.toString());
        } catch (java.net.SocketException e) {
            Log.crit("SocketException while handling GELF message: " + e.toString());
        } catch (java.io.IOException e) {
            Log.crit("IO Error while handling GELF message: " + e.toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488763324/fstmerge_var2_7889295310264426102
        } catch (Exception e) {
            Log.crit("Exception caught while handling GELF message: " + e.toString());
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6b28c_ce6b9/rev_6b28c-ce6b9/src/main/java/org/graylog2/messagehandlers/gelf/GELFClientHandlerThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f8df5_3ee13/rev_f8df5-3ee13.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean handle() {
        try {
             // Fills properties with values from JSON.
            try { this.parse(); } catch(Exception e) {
                Log.warn("Could not parse GELF JSON: " + e.toString() + " - clientMessage was: " + this.clientMessage);
                return false;
            }

            // Add AMQP receiver queue as additional field if set.
            if (this.getAmqpReceiverQueue() != null) {
                this.message.addAdditionalData("_amqp_queue", this.getAmqpReceiverQueue());
            }

            // Store in MongoDB.
            // Connect to database.
            MongoBridge m = new MongoBridge();

            // Log if we are in debug mode.
            Log.info("Got GELF message: " + this.message.toString());

            // Insert message into MongoDB.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var1_3451929635651245247
            m.insertGelfMessage(this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_base_8268047117179607075
            m.insertGelfMessage(message);
=======
            boolean filterOut = ReceiveHookManager.preProcess(new GELFMessageFilterHook(), message);
            if( filterOut ) {
            	if(Main.debugMode)
            		Syslog.getInstance("udp").debug("Not inserting event into database.");
            } else {
                m.insertGelfMessage(message);
                // This is doing the upcounting for statistics.
                ReceiveHookManager.postProcess(new MessageCounterHook(), message);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var2_2959578443835705941

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var1_3451929635651245247
            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_base_8268047117179607075
            // This is doing the upcounting for statistics.
            ReceiveHookManager.postProcess(new MessageCounterHook(), message);
=======
                // Counts up host in hosts collection.
                ReceiveHookManager.postProcess(new HostUpsertHook(), message);
            }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var2_2959578443835705941

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var1_3451929635651245247
            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), this.message);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_base_8268047117179607075
            // Counts up host in hosts collection.
            ReceiveHookManager.postProcess(new HostUpsertHook(), message);
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488767652/fstmerge_var2_2959578443835705941
        } catch(Exception e) {
            Log.warn("Could not handle GELF client: " + e.toString());
            return false;
        }

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f8df5_3ee13/rev_f8df5-3ee13/src/main/java/org/graylog2/messagehandlers/gelf/SimpleGELFClientHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e09e9_b0bbb/rev_e09e9-b0bbb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5b0ee_72a1f/rev_5b0ee-72a1f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3612b_782a1/rev_3612b-782a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_59216_84154/rev_59216-84154.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean forward(GELFMessage message) throws MessageForwarderConfigurationException {
        if (this.host.isEmpty() || this.port <= 0) {
            throw new MessageForwarderConfigurationException("Host is empty or port is invalid.");
        }
        
        if (message.isChunked()) {
            LOG.info("Forwarding a chunked message.");
            for (GELFClientChunk chunk : message.getMessageChunks().values()) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_var1_2055245950343134545
                LOG.info("Forwarding chunked GELF message chunk:" + chunk.toString());
                this.send(chunk.getRaw());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_base_9184047003912413622
                LOG.info("Fowarding chunked GELF message chunk: <" + chunk.getHash() + ">");
                this.send(chunk.getData());
=======
                LOG.info("Fowarding chunked GELF message chunk: <" + chunk.getHash() + ">");
                this.succeeded = this.send(chunk.getRaw());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_var2_1814987171569868056
            }
        } else {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_var1_2055245950343134545
            this.succeeded = this.send(message.getRaw());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_base_9184047003912413622
            // TODO: THIS NEEDS TO BE GZIPPED.
            this.succeeded = this.send(message.getShortMessage().getBytes());
=======
            this.succeeded = this.send(message.getShortMessage().getBytes());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488785527/fstmerge_var2_1814987171569868056
        }

        return this.succeeded;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_59216_84154/rev_59216-84154/src/main/java/org/graylog2/forwarders/forwarders/GELFMessageForwarder.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f2151_0a991/rev_f2151-0a991.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8d7db_3a886/rev_8d7db-3a886.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_aa31a_62c46/rev_aa31a-62c46.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1ccfa_1a733/rev_1ccfa-1a733.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d01be_57b3d/rev_d01be-57b3d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ba300_be284/rev_ba300-be284.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_41c25_aa930/rev_41c25-aa930.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1a372_f9710/rev_1a372-f9710.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8925e_a4c59/rev_8925e-a4c59.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_72981_2269b/rev_72981-2269b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4a678_1ac61/rev_4a678-1ac61.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7dc70_a542b/rev_7dc70-a542b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_911b6_7d15a/rev_911b6-7d15a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b9d84_ca977/rev_b9d84-ca977.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ee836_1c0b7/rev_ee836-1c0b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_dad72_1e8dc/rev_dad72-1e8dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_98ceb_c0f23/rev_98ceb-c0f23.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6c4b8_f9fb8/rev_6c4b8-f9fb8.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488908864/fstmerge_var1_7472955061727497167
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488908864/fstmerge_base_6893610538898186467
private static void initializeGELFThreads(int gelfPort) {
        GELFMainThread gelfThread = new GELFMainThread(gelfPort);
        gelfThread.start();

        ChunkedGELFClientManagerThread gelfManager = new ChunkedGELFClientManagerThread();
        gelfManager.start();

        LOG.info("GELF threads started");
    }
=======
private static void initializeGELFThreads(int gelfPort) {
        GELFMainThread gelfThread = new GELFMainThread(gelfPort);
        gelfThread.start();

        ChunkedGELFClientManagerThread gelfManager = new ChunkedGELFClientManagerThread(ChunkedGELFClientManager.getInstance());
        gelfManager.start();

        LOG.info("GELF threads started");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488908864/fstmerge_var2_7768653985271395133

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6c4b8_f9fb8/rev_6c4b8-f9fb8/src/main/java/org/graylog2/Main.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
@Override
    public void run() {
        try {
            Map<String, ChunkedGELFMessage> messageMap = ChunkedGELFClientManager.getInstance().getMessageMap();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
@Override public void run() {
        // Run forever.
        while (true) {
            try {
                Map<String, ChunkedGELFMessage> messageMap = ChunkedGELFClientManager.getInstance().getMessageMap();
=======
@Override
    public void run() {
        // Run forever.
        while (true) {
            try {
                ConcurrentMap<String, ChunkedGELFMessage> messageMap = gelfClientManager.getMessageMap();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
            for (Map.Entry<String, ChunkedGELFMessage> entry : messageMap.entrySet()) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
                for(Map.Entry<String, ChunkedGELFMessage> entry : messageMap.entrySet()) {
=======
                for (ConcurrentMap.Entry<String, ChunkedGELFMessage> entry : messageMap.entrySet()) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271

                String messageId = entry.getKey();
                ChunkedGELFMessage message = entry.getValue();

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
                int fiveSecondsAgo = (int) (System.currentTimeMillis() / 1000) - 5;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
                    int fiveSecondsAgo = (int) (System.currentTimeMillis()/1000)-5;
=======
                    int fiveSecondsAgo = (int) (System.currentTimeMillis() / 1000) - 5;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
                try {
                    if (message.getFirstChunkArrival() < fiveSecondsAgo) {
                        this.dropMessage(messageId, "Did not completely arrive in time.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
                    try {
                        if (message.getFirstChunkArrival() < fiveSecondsAgo) {
                            this.dropMessage(messageId, "Did not completely arrive in time.");
                        }
                    } catch (EmptyGELFMessageException e) {
                        // getFirstChunkArrival() did not work because first part did not arrive yet. Drop anyways.
                        this.dropMessage(messageId, "First chunk did not arrive.");
=======
                    try {
                        if (message.getFirstChunkArrival() < fiveSecondsAgo) {
                            dropMessage(messageId, "Did not completely arrive in time.");
                        }
                    } catch (EmptyGELFMessageException e) {
                        // getFirstChunkArrival() did not work because first part did not arrive yet. Drop anyways.
                        dropMessage(messageId, "First chunk did not arrive.");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271
                    }
                } catch (EmptyGELFMessageException e) {
                    // getFirstChunkArrival() did not work because first part did not arrive yet. Drop anyways.
                    this.dropMessage(messageId, "First chunk did not arrive.");
                }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
                
            } catch (Exception e) {
                LOG.warn("Error in ChunkedGELFClientManagerThread: " + e.getMessage(), e);
=======

            } catch (Exception e) {
                LOG.warn("Error in ChunkedGELFClientManagerThread: " + e.getMessage(), e);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271
            }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var1_7184106717268575931
        } catch (Exception e) {
            LOG.warn("Error in ChunkedGELFClientManagerThread: " + e.getMessage(), e);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_base_956217830668115065
           // Run every 10 seconds.
           try { Thread.sleep(10000); } catch(InterruptedException e) {}
=======
            // Run every 10 seconds.
            try {
                Thread.sleep(RUN_INTERVAL);
            } catch (InterruptedException e) {
            }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415488909918/fstmerge_var2_6003906349215615271
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6c4b8_f9fb8/rev_6c4b8-f9fb8/src/main/java/org/graylog2/periodical/ChunkedGELFClientManagerThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_bddd2_e5491/rev_bddd2-e5491.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7f5c7_6a55a/rev_7f5c7-6a55a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_105a9_476aa/rev_105a9-476aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2a5fd_c8f28/rev_2a5fd-c8f28.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96b5d_d2596/rev_96b5d-d2596.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ac2da_8f576/rev_ac2da-8f576.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_dc601_b4cbf/rev_dc601-b4cbf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_49eab_3a91f/rev_49eab-3a91f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6ad46_683d3/rev_6ad46-683d3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_beba4_9dbd7/rev_beba4-9dbd7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b165a_beba4/rev_b165a-beba4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_033d0_7b527/rev_033d0-7b527.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2e7e8_56174/rev_2e7e8-56174.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_01c9f_6980c/rev_01c9f-6980c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e5812_d0c65/rev_e5812-d0c65.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_64f38_0c049/rev_64f38-0c049.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_61bad_e3994/rev_61bad-e3994.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_04909_9df8d/rev_04909-9df8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8b3ee_5de9c/rev_8b3ee-5de9c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1d442_bdb76/rev_1d442-bdb76.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a82e0_3a410/rev_a82e0-3a410.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b257a_d412b/rev_b257a-d412b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_662d8_2fb38/rev_662d8-2fb38.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fb424_7a197/rev_fb424-7a197.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1f768_4aa76/rev_1f768-4aa76.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_deb4e_f58ab/rev_deb4e-f58ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ff535_ab6fd/rev_ff535-ab6fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ce7e1_ff535/rev_ce7e1-ff535.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7a791_72b75/rev_7a791-72b75.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d9b58_99654/rev_d9b58-99654.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d3191_177f1/rev_d3191-177f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_35544_cd9fd/rev_35544-cd9fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_20e1a_2c01f/rev_20e1a-2c01f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a39c1_cf31b/rev_a39c1-cf31b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d99cc_7bc45/rev_d99cc-7bc45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_97afd_81bde/rev_97afd-81bde.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_40474_7f77f/rev_40474-7f77f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fa129_219e3/rev_fa129-219e3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a04d5_ad3b3/rev_a04d5-ad3b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_558a6_4da92/rev_558a6-4da92.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_84b93_68ffb/rev_84b93-68ffb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3ca40_db38c/rev_3ca40-db38c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c4540_7b481/rev_c4540-7b481.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_39ccb_f3a4e/rev_39ccb-f3a4e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_25bc2_243fd/rev_25bc2-243fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a9c1d_03b29/rev_a9c1d-03b29.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f9b56_6df82/rev_f9b56-6df82.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7f97b_741f1/rev_7f97b-741f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_eaa70_2cb70/rev_eaa70-2cb70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6218e_83c4d/rev_6218e-83c4d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_43f1b_c6195/rev_43f1b-c6195.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7d11b_28dd2/rev_7d11b-28dd2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_76771_20e54/rev_76771-20e54.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_09d41_9018e/rev_09d41-9018e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8f4cd_df215/rev_8f4cd-df215.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1a3f8_1e00d/rev_1a3f8-1e00d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_620cd_d3882/rev_620cd-d3882.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fa3cc_7b39b/rev_fa3cc-7b39b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1ec83_ac768/rev_1ec83-ac768.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516245/fstmerge_var1_4011978416688309464
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516245/fstmerge_base_3760345405724662420
@Override
    public Map<String, Stream> getEnabledStreams() {
        Map<String, Stream> streams = Maps.newHashMap();
        for (Stream stream : StreamImpl.fetchAllEnabled(this)) {
            streams.put(stream.getId().toString(), stream);
        }
        
        return streams;
    }
=======
@Override
    public Map<String, Stream> getEnabledStreams() {
        Map<String, Stream> streams = Maps.newHashMap();
        for (Stream stream : StreamImpl.loadAllEnabled(this)) {
            streams.put(stream.getId().toString(), stream);
        }
        
        return streams;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516245/fstmerge_var2_4272365785948509880

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/Core.java
Conflict type: ImplementList
Conflict body: 
~~FSTMerge~~ ##FSTMerge## implements Stream ##FSTMerge## implements Stream, Persistable
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516876/fstmerge_var1_42964344899208254
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516876/fstmerge_base_4628603620700252121
public Set<Map<String, String>> getOutputConfigurations(String className) {
        
        return outputs.get(className);
    }
=======
public Set<Map<String, String>> getOutputConfigurations(String className) {
    	return null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516876/fstmerge_var2_4765917980972173375

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516879/fstmerge_var1_1420517947794038475
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516879/fstmerge_base_4220390460108920797
public boolean hasConfiguredOutputs(String typeClass) {
        Set<Map<String, String>> oc = getOutputConfigurations(typeClass);
        if (oc == null) {
            return false;
        }
        
        return !oc.isEmpty();
    }
=======
public boolean hasConfiguredOutputs(String typeClass) {
    	return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516879/fstmerge_var2_6289585469059726064

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516883/fstmerge_var1_5467190731705836924
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516883/fstmerge_base_571857105553604804
public boolean inAlarmGracePeriod() {
        int now = Tools.getUTCTimestamp();
        int graceLine = lastAlarm+(alarmPeriod*60)-1;
        LOG.debug("Last alarm of stream <{}> was at [{}]. Grace period ends at [{}]. It now is [{}].",
                new Object[] { getId(), lastAlarm, graceLine, now });
        return now <= graceLine;
    }
=======
public boolean inAlarmGracePeriod() {
    	return true;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516883/fstmerge_var2_5958924335642161629

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516886/fstmerge_var1_3038166036710325640
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516886/fstmerge_base_7257417728451179502
public void setLastAlarm(int timestamp, Core server) {
        DBCollection coll = server.getMongoConnection().getDatabase().getCollection("streams");
        DBObject query = new BasicDBObject();
        query.put("_id", this.id);
        
        DBObject stream = coll.findOne(query);
        stream.put("last_alarm", timestamp);

        coll.update(query, stream);
    }
=======
public void setLastAlarm(int timestamp, Core server) {
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516886/fstmerge_var2_3020222492669380853

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516890/fstmerge_var1_6414334622769768495
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516890/fstmerge_base_7967733649042746710
public Set<String> getAlarmCallbacks() {
        if (this.alarmCallbacks != null) {
            return this.alarmCallbacks;
        }
        
        Set<String> callbacks = Sets.newTreeSet();
        BasicDBList objs = (BasicDBList) this.mongoObject.get("alarm_callbacks");
        
        if (objs != null) {
            for (Object obj : objs) {
                String typeclass = (String) obj;
                if (typeclass != null && !typeclass.isEmpty()) {
                    callbacks.add(typeclass);
                }
            }
        }
        
        this.alarmCallbacks = callbacks;
        return callbacks;
    }
=======
public Set<String> getAlarmCallbacks() {
    	return Sets.newHashSet();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516890/fstmerge_var2_7697723332479887315

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516893/fstmerge_var1_8509632144182230471
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516893/fstmerge_base_6283648368477677062
public static Map<String, String> nameMap(Core server) {
        Map<String, String> streams = Maps.newHashMap();
        
        for(Stream stream : fetchAllEnabled(server)) {
            streams.put(stream.getId().toString(), stream.getTitle());
        }
        
        return streams;
    }
=======
public static Map<String, String> nameMap(Core server) {
    	return Maps.newHashMap();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516893/fstmerge_var2_2711493175570572872

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516896/fstmerge_var1_1550724759728630547
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516896/fstmerge_base_8843509522835374639
@Override
    public List<StreamRule> getStreamRules() {
        if (this.streamRules != null) {
            return this.streamRules;
        }

        List<StreamRule> rules = Lists.newArrayList();

        BasicDBList rawRules = (BasicDBList) this.mongoObject.get("streamrules");
        if (rawRules != null && rawRules.size() > 0) {
            for (Object ruleObj : rawRules) {
                try {
                    StreamRule rule = new StreamRuleImpl((DBObject) ruleObj);
                    rules.add(rule);
                } catch (Exception e) {
                    LOG.warn("Skipping stream rule in Stream.getStreamRules(): " + e.getMessage(), e);
                }
            }
        }

        this.streamRules = rules;
        return rules;
    }
=======
@Override
	public List<StreamRule> getStreamRules() {
		// TODO Auto-generated method stub
		return null;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516896/fstmerge_var2_1667357074920521084

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516900/fstmerge_var1_4256031350156029022
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516900/fstmerge_base_3736821363751944379
@Override
    public int getAlarmTimespan() {
        return alarmTimespan;
    }
=======
@Override
	public int getAlarmTimespan() {
		// TODO Auto-generated method stub
		return 0;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516900/fstmerge_var2_213705790002544416

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516903/fstmerge_var1_8615886840747248375
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516903/fstmerge_base_1883578103223736300
@Override
    public int getAlarmMessageLimit() {
        return alarmMessageLimit;
    }
=======
@Override
	public int getAlarmMessageLimit() {
		// TODO Auto-generated method stub
		return 0;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516903/fstmerge_var2_7902573296441202377

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516907/fstmerge_var1_5157614058796906884
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516907/fstmerge_base_5904211207937298798
@Override
    public int getAlarmPeriod() {
        return alarmPeriod;
    }
=======
@Override
	public int getAlarmPeriod() {
		// TODO Auto-generated method stub
		return 0;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516907/fstmerge_var2_4517333823989576886

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516910/fstmerge_var1_1795595334757531400
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516910/fstmerge_base_3247934992072809020
@Override
    public Set<AlarmReceiver> getAlarmReceivers(GraylogServer server) {
        Core core = (Core) server;

        Set<User> users;
        
        if (alarmForce) {
            // Alarm notification is forced for all users. Fetch them all.
            users = User.fetchAll(core);
        } else {
            // Fetch only users that have subscribed to alarms of this stream.
            Map<String, Object> conditions = Maps.newHashMap();
            Map<String, Set<ObjectId>> userCondition = Maps.newHashMap();
            userCondition.put("$in", getAlarmedUserIds(core));
            conditions.put("_id", userCondition);
            users = User.fetchAll(core, conditions);
        }
        
        return usersToAlarmReceivers(users);
    }
=======
@Override
	public Set<AlarmReceiver> getAlarmReceivers(GraylogServer server) {
		// TODO Auto-generated method stub
		return null;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516910/fstmerge_var2_8666053893366122981

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516914/fstmerge_var1_3051580323934954000
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516914/fstmerge_base_2879515940999530686
@Override
    public String toString() {
        this.getStreamRules();
        return this.id.toString() + ":" + this.title;
    }
=======
@Override
    public String toString() {
        this.getStreamRules();
        return this.id.toString() + ":" + this.getTitle();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516914/fstmerge_var2_5098090470667485728

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516917/fstmerge_var1_8843825523666291517
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516917/fstmerge_base_1607009359547391532
@Override
    public ObjectId getId() {
        return id;
    }
=======
@Override
	public ObjectId getId() {
		return this.id;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516917/fstmerge_var2_2974680464402832226

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516921/fstmerge_var1_7966658118599323076
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516921/fstmerge_base_3011243430109886360
@Override
    public String getTitle() {
        return title;
    }
=======
@Override
	public String getTitle() {
		return (String) fields.get("title");
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516921/fstmerge_var2_2128109625097211835

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516928/fstmerge_var1_6705096613170359993
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516928/fstmerge_base_4449250909056322096
public List<Stream> route(Core server, Message msg) {
        List<Stream> matches = Lists.newArrayList();
        Set<Stream> streams = StreamImpl.fetchAllEnabled(server);

        for (Stream stream : streams) {
            boolean missed = false;

            if (stream.getStreamRules().isEmpty()) {
                continue;
            }

            for (StreamRule rule : stream.getStreamRules()) {
                try {
                    StreamRuleMatcher matcher = StreamRuleMatcherFactory.build(rule.getRuleType());
                    if (!matchStreamRule(msg, matcher, rule)) {
                        missed = true;
                        break;
                    }
                } catch (InvalidStreamRuleTypeException e) {
                    LOG.warn("Invalid stream rule type. Skipping matching for this rule. " + e.getMessage(), e);
                }
            }

            // All rules were matched.
            if (!missed) {
                matches.add(stream);
            }
        }

        return matches;
    }
=======
public List<Stream> route(Core server, Message msg) {
        List<Stream> matches = Lists.newArrayList();
        List<Stream> streams = StreamImpl.loadAllEnabled(server);

        for (Stream stream : streams) {
            boolean missed = false;

            if (stream.getStreamRules().isEmpty()) {
                continue;
            }

            for (StreamRule rule : stream.getStreamRules()) {
                try {
                    StreamRuleMatcher matcher = StreamRuleMatcherFactory.build(rule.getRuleType());
                    if (!matchStreamRule(msg, matcher, rule)) {
                        missed = true;
                        break;
                    }
                } catch (InvalidStreamRuleTypeException e) {
                    LOG.warn("Invalid stream rule type. Skipping matching for this rule. " + e.getMessage(), e);
                }
            }

            // All rules were matched.
            if (!missed) {
                matches.add(stream);
            }
        }

        return matches;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489516928/fstmerge_var2_720893604035894620

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/streams/StreamRouter.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private Mongo m; ##FSTMerge## private MongoClient m;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/database/MongoConnection.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517071/fstmerge_var1_6545263990374135707
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517071/fstmerge_base_1596344952809700201
public synchronized Mongo connect() {
        if (m == null) {
            MongoOptions options = new MongoOptions();
            options.connectionsPerHost = maxConnections;
            options.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockMultiplier;

            try {

                // Connect to replica servers if given. Else the standard way to one server.
                if (replicaServers != null && replicaServers.size() > 0) {
                    m = new Mongo(replicaServers, options);
                } else {
                    ServerAddress address = new ServerAddress(host, port);
                    m = new Mongo(address, options);
                }
                db = m.getDB(database);

                // Try to authenticate if configured.
                if (useAuth) {
                    if(!db.authenticate(username, password.toCharArray())) {
                        throw new RuntimeException("Could not authenticate to database '" + database + "' with user '" + username + "'.");
                    }
                }
            } catch (MongoException.Network e) {
                throw e;
            } catch (UnknownHostException e) {
                throw new RuntimeException("Cannot resolve host name for MongoDB", e);
            }
        }
        return m;
    }
=======
public synchronized MongoClient connect() {
        if (m == null) {
            Builder options = new MongoClientOptions.Builder();
            options.connectionsPerHost(maxConnections);
            options.threadsAllowedToBlockForConnectionMultiplier(threadsAllowedToBlockMultiplier);

            try {

                // Connect to replica servers if given. Else the standard way to one server.
                if (replicaServers != null && replicaServers.size() > 0) {
                    m = new MongoClient(replicaServers, options.build());
                } else {
                    ServerAddress address = new ServerAddress(host, port);
                    m = new MongoClient(address, options.build());
                }
                db = m.getDB(database);

                // Try to authenticate if configured.
                if (useAuth) {
                    if(!db.authenticate(username, password.toCharArray())) {
                        throw new RuntimeException("Could not authenticate to database '" + database + "' with user '" + username + "'.");
                    }
                }
            } catch (MongoException.Network e) {
                throw e;
            } catch (UnknownHostException e) {
                throw new RuntimeException("Cannot resolve host name for MongoDB", e);
            }
        }
        return m;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517071/fstmerge_var2_3438520836368624081

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/database/MongoConnection.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517571/fstmerge_var1_4734395042984746644
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517571/fstmerge_base_7010463430257144316
@GET @Path("/{messageId}")
    @Produces(MediaType.APPLICATION_JSON)
    public String search(@PathParam("index") String index, @PathParam("messageId") String messageId, @QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");

        if (messageId == null || messageId.isEmpty()) {
        	LOG.error("Missing parameters. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        ResultMessage m;
		try {
			m = core.getIndexer().messages().get(messageId, index);
		} catch (IndexMissingException e) {
        	LOG.error("Index does not exist. Returning HTTP 404.");
        	throw new WebApplicationException(404);
		} catch (DocumentNotFoundException e) {
        	LOG.error("Message does not exist. Returning HTTP 404.");
        	throw new WebApplicationException(404);
		}
        
        Gson gson = new Gson();
        
        if (prettyPrint) {
            gson = new GsonBuilder().setPrettyPrinting().create();
        }
        
        return gson.toJson(m);
    }
=======
@GET @Path("/{messageId}")
    @Produces(MediaType.APPLICATION_JSON)
    public String search(@PathParam("index") String index, @PathParam("messageId") String messageId, @QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");

        if (messageId == null || messageId.isEmpty()) {
        	LOG.error("Missing parameters. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        ResultMessage m;
		try {
			m = core.getIndexer().messages().get(messageId, index);
		} catch (IndexMissingException e) {
        	LOG.error("Index does not exist. Returning HTTP 404.");
        	throw new WebApplicationException(404);
		} catch (DocumentNotFoundException e) {
        	LOG.error("Message does not exist. Returning HTTP 404.");
        	throw new WebApplicationException(404);
		}
        
        return json(m, prettyPrint);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517571/fstmerge_var2_6047585420509694277

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/rest/resources/messages/MessageResource.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517575/fstmerge_var1_3372736937962380212
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517575/fstmerge_base_7763445120232754691
@GET @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    public String system(@QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");

        Gson gson = new Gson();
        
        if (prettyPrint) {
            gson = new GsonBuilder().setPrettyPrinting().create();
        }
        
        Map<String, Object> result = Maps.newHashMap();
        result.put("facility", "graylog2-server");
        result.put("codename", Core.GRAYLOG2_CODENAME);
        result.put("server_id", core.getServerId());
       	result.put("version", Core.GRAYLOG2_VERSION);
       	result.put("started_at", core.getStartedAt());
        
        return gson.toJson(result);
    }
=======
@GET @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    public String system(@QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");

        Map<String, Object> result = Maps.newHashMap();
        result.put("facility", "graylog2-server");
        result.put("codename", Core.GRAYLOG2_CODENAME);
        result.put("server_id", core.getServerId());
       	result.put("version", Core.GRAYLOG2_VERSION);
       	result.put("started_at", core.getStartedAt());
        
        return json(result, prettyPrint);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517575/fstmerge_var2_8659137711204096640

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/rest/resources/system/SystemResource.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517579/fstmerge_var1_6679837163824796222
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517579/fstmerge_base_7974940439275151517
@GET @Path("/total")
    @Produces(MediaType.APPLICATION_JSON)
    public String histogram(@QueryParam("interval") String interval, @QueryParam("timerange") int timerange, @QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");
        interval = interval.toUpperCase();

        if (timerange <= 0) {
        	LOG.error("Invalid timerange. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        try {
        	Indexer.DateHistogramInterval.valueOf(interval);
        } catch (IllegalArgumentException e) {
        	LOG.error("Invalid interval type. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        DateHistogramResult dhr = core.getIndexer().counts().totalCount(Indexer.DateHistogramInterval.valueOf(interval), timerange);

        Gson gson = new Gson();
        
        if (prettyPrint) {
            gson = new GsonBuilder().setPrettyPrinting().create();
        }
        
        Map<String, Object> result = Maps.newHashMap();
        result.put("query", dhr.getOriginalQuery());
        result.put("interval", dhr.getInterval().toString().toLowerCase());
        result.put("results", dhr.getResults());
        result.put("time", dhr.took().millis());
        
        return gson.toJson(result);
    }
=======
@GET @Path("/total")
    @Produces(MediaType.APPLICATION_JSON)
    public String histogram(@QueryParam("interval") String interval, @QueryParam("timerange") int timerange, @QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");
        interval = interval.toUpperCase();

        if (timerange <= 0) {
        	LOG.error("Invalid timerange. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        try {
        	Indexer.DateHistogramInterval.valueOf(interval);
        } catch (IllegalArgumentException e) {
        	LOG.error("Invalid interval type. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        DateHistogramResult dhr = core.getIndexer().counts().totalCount(Indexer.DateHistogramInterval.valueOf(interval), timerange);

        Map<String, Object> result = Maps.newHashMap();
        result.put("query", dhr.getOriginalQuery());
        result.put("interval", dhr.getInterval().toString().toLowerCase());
        result.put("results", dhr.getResults());
        result.put("time", dhr.took().millis());
        
        return json(result, prettyPrint);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489517579/fstmerge_var2_5940536545819143816

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/rest/resources/count/CountResource.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518303/fstmerge_var1_4524705572407022870
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518303/fstmerge_base_6391504670139239862
public SearchResult(SearchHits searchHits, String originalQuery, TimeValue took) {
		this.originalQuery = originalQuery;
		this.hits = searchHits;
		this.took = took;
		
		this.totalResults = (int) searchHits.getTotalHits();
	}
=======
public SearchResult(SearchHits searchHits, String originalQuery, TimeValue took) {
		this.originalQuery = originalQuery;
		this.results = buildResults(searchHits);
		this.fields = extractFields(searchHits);
		this.took = took;
		
		this.totalResults = (int) searchHits.getTotalHits();
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518303/fstmerge_var2_3438695854558390437

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/indexer/results/SearchResult.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518320/fstmerge_var1_3565369998641996086
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518320/fstmerge_base_4437117964039223061
public List<ResultMessage> getResults() {
		List<ResultMessage> r = Lists.newArrayList();
		
		Iterator<SearchHit> i = hits.iterator();
		while(i.hasNext()) {
			r.add(ResultMessage.parseFromSource(i.next()));
		}
		
		return r;
	}
=======
public List<ResultMessage> getResults() {
		return results;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518320/fstmerge_var2_8566756316572152337

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/indexer/results/SearchResult.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518330/fstmerge_var1_5668444528406854611
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518330/fstmerge_base_8540617877118566373
public DateHistogramResult totalCount(Indexer.DateHistogramInterval interval, int timerange) {
		String from = Tools.buildElasticSearchTimeFormat(Tools.getUTCTimestamp()-timerange);
		FilterBuilder timestampFilter = FilterBuilders.rangeFilter("timestamp").from(from);
		
		DateHistogramFacetBuilder fb = FacetBuilders.dateHistogramFacet("histogram")
				.field("timestamp")
				.facetFilter(timestampFilter)
				.interval(interval.toString().toLowerCase());
		
		SearchRequestBuilder srb = c.prepareSearch();
		srb.setIndices(server.getDeflector().getAllDeflectorIndexNames()); // XXX 020: have a method that builds time ranged index requests
		srb.setQuery(matchAllQuery());
		srb.addFacet(fb);
		
		SearchResponse r = c.search(srb.request()).actionGet();
		return new DateHistogramResult((DateHistogramFacet) r.facets().facet("histogram"), "match_all", interval, r.took());
	}
=======
public DateHistogramResult totalCount(Indexer.DateHistogramInterval interval, int timerange) {
		DateHistogramFacetBuilder fb = FacetBuilders.dateHistogramFacet("histogram")
				.field("timestamp")
				.facetFilter(IndexHelper.getTimestampRangeFilter(timerange))
				.interval(interval.toString().toLowerCase());
		
		SearchRequestBuilder srb = c.prepareSearch();
		srb.setIndices(server.getDeflector().getAllDeflectorIndexNames()); // XXX 020: have a method that builds time ranged index requests
		srb.setQuery(matchAllQuery());
		srb.addFacet(fb);
		
		SearchResponse r = c.search(srb.request()).actionGet();
		return new DateHistogramResult((DateHistogramFacet) r.facets().facet("histogram"), "match_all", interval, r.took());
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518330/fstmerge_var2_8301091137626066085

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/indexer/counts/Counts.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518351/fstmerge_var1_533727691559776191
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518351/fstmerge_base_2083450243672029807
public Map<String, Object> collect() {
        Map<String, Object> info = Maps.newHashMap();
        
        info.put("version", Core.GRAYLOG2_VERSION);
        info.put("number_of_loaded_modules", numberOfLoadedModules());
        info.put("number_of_elasticsearch_nodes", server.getIndexer().getNumberOfNodesInCluster());
        info.put("number_of_graylog2_server_nodes", server.cluster().getActiveNodeCount());
        info.put("number_of_total_messages", server.getIndexer().getTotalNumberOfMessagesInIndices());
        info.put("number_of_indices", server.getDeflector().getAllDeflectorIndices().size());
        info.put("number_of_streams", StreamImpl.fetchAllEnabled(server).size());
        info.put("number_of_stream_rules", numberOfStreamRules());
        info.put("number_of_blacklist_rules", Blacklist.fetchAll().size());
        info.put("total_index_size", server.getIndexer().getTotalIndexSize());
        
        return info;
    }
=======
public Map<String, Object> collect() {
        Map<String, Object> info = Maps.newHashMap();
        
        info.put("version", Core.GRAYLOG2_VERSION);
        info.put("number_of_loaded_modules", numberOfLoadedModules());
        info.put("number_of_elasticsearch_nodes", server.getIndexer().getNumberOfNodesInCluster());
        info.put("number_of_graylog2_server_nodes", server.cluster().getActiveNodeCount());
        info.put("number_of_total_messages", server.getIndexer().getTotalNumberOfMessagesInIndices());
        info.put("number_of_indices", server.getDeflector().getAllDeflectorIndices().size());
        info.put("number_of_streams", StreamImpl.loadAllEnabled(server).size());
        info.put("number_of_stream_rules", numberOfStreamRules());
        info.put("number_of_blacklist_rules", Blacklist.fetchAll().size());
        info.put("total_index_size", server.getIndexer().getTotalIndexSize());
        
        return info;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518351/fstmerge_var2_5115388225782983983

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/systeminformation/AnonymousInformationCollector.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518360/fstmerge_var1_7886626029510461325
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518360/fstmerge_base_4852630378465910977
private int numberOfStreamRules() {
        int rules = 0;
        for (Stream stream : StreamImpl.fetchAllEnabled(server)) {
            rules =+ stream.getStreamRules().size();
        }
            
        return rules;
    }
=======
private int numberOfStreamRules() {
        int rules = 0;
        for (Stream stream : StreamImpl.loadAllEnabled(server)) {
            rules =+ stream.getStreamRules().size();
        }
            
        return rules;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518360/fstmerge_var2_3833773881819504905

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/systeminformation/AnonymousInformationCollector.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518395/fstmerge_var1_4401475537802226029
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518395/fstmerge_base_4623008500634076141
@Override
    public void run() {
        Map<String, Object> onlyAlerted = Maps.newHashMap();
        onlyAlerted.put("alarm_active", true);
        
        Set<Stream> streams = StreamImpl.fetchAllEnabled(graylogServer, onlyAlerted);
        
        if (streams.isEmpty()) {
            LOG.debug("No alertable streams found. Not doing anything more.");
            return;
        }
                
        for (Stream streamIF : streams) {
            StreamImpl stream = (StreamImpl) streamIF;
            StreamAlarmChecker checker = new StreamAlarmChecker(graylogServer, stream); 

            // Skip if limit and timespan have been configured for this stream.
            if (!checker.fullyConfigured()) {
                LOG.debug("Skipping alarm scan for stream <{}> - Timespan or limit not set.", stream.getId());
                continue;
            }
            
            // Is the stream over limit?
            if (checker.overLimit()) {
                // Are we still in grace period?
                if (stream.inAlarmGracePeriod()) {
                    LOG.debug("Stream <{}> is over alarm limit but in grace period. Skipping.", stream.getId());
                    continue;
                }
                
                int messageCount = checker.getMessageCount();
                
                LOG.debug("Stream <{}> is over alarm limit. Sending alerts.", stream.getId());
                
                // Update last alarm timestamp.
                stream.setLastAlarm(Tools.getUTCTimestamp(), graylogServer);
                
                MessageCountAlarm alarm = new MessageCountAlarm(stream, stream.getAlarmReceivers(graylogServer));
                alarm.setMessageCount(messageCount);
                alarm.setTopic("Stream message count alert: [" + stream.getTitle() + "]");
                alarm.setDescription("Stream [" + stream.getTitle() + "] received " + messageCount
                        + " messages in the last " + stream.getAlarmTimespan() + " minutes."
                        + " Limit: " + stream.getAlarmMessageLimit());

                // Send using all transports.
                sendMessages(alarm, stream);

                // Call all callbacks. Brace, brace, brace!
                callCallbacks(alarm, stream);

                
            } else {
                LOG.debug("Stream <{}> is not over alarm limit.", stream.getId());
            }

        }
    }
=======
@Override
    public void run() {
        Map<String, Object> onlyAlerted = Maps.newHashMap();
        onlyAlerted.put("alarm_active", true);
        
        List<Stream> streams = StreamImpl.loadAllEnabled(graylogServer, onlyAlerted);
        
        if (streams.isEmpty()) {
            LOG.debug("No alertable streams found. Not doing anything more.");
            return;
        }
                
        for (Stream streamIF : streams) {
            StreamImpl stream = (StreamImpl) streamIF;
            StreamAlarmChecker checker = new StreamAlarmChecker(graylogServer, stream); 

            // Skip if limit and timespan have been configured for this stream.
            if (!checker.fullyConfigured()) {
                LOG.debug("Skipping alarm scan for stream <{}> - Timespan or limit not set.", stream.getId());
                continue;
            }
            
            // Is the stream over limit?
            if (checker.overLimit()) {
                // Are we still in grace period?
                if (stream.inAlarmGracePeriod()) {
                    LOG.debug("Stream <{}> is over alarm limit but in grace period. Skipping.", stream.getId());
                    continue;
                }
                
                int messageCount = checker.getMessageCount();
                
                LOG.debug("Stream <{}> is over alarm limit. Sending alerts.", stream.getId());
                
                // Update last alarm timestamp.
                stream.setLastAlarm(Tools.getUTCTimestamp(), graylogServer);
                
                MessageCountAlarm alarm = new MessageCountAlarm(stream, stream.getAlarmReceivers(graylogServer));
                alarm.setMessageCount(messageCount);
                alarm.setTopic("Stream message count alert: [" + stream.getTitle() + "]");
                alarm.setDescription("Stream [" + stream.getTitle() + "] received " + messageCount
                        + " messages in the last " + stream.getAlarmTimespan() + " minutes."
                        + " Limit: " + stream.getAlarmMessageLimit());

                // Send using all transports.
                sendMessages(alarm, stream);

                // Call all callbacks. Brace, brace, brace!
                callCallbacks(alarm, stream);

                
            } else {
                LOG.debug("Stream <{}> is not over alarm limit.", stream.getId());
            }

        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489518395/fstmerge_var2_8366172390579992893

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33a8a_74cae/rev_33a8a-74cae/src/main/java/org/graylog2/periodical/AlarmScannerThread.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a02ea_24b29/rev_a02ea-24b29.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@GET @Path("/{streamId}")
    @Produces(MediaType.APPLICATION_JSON)
    public String get(@PathParam("streamId") String streamId, @QueryParam("pretty") boolean prettyPrint) {
        Core core = (Core) rc.getProperty("core");

        if (streamId == null || streamId.isEmpty()) {
        	LOG.error("Missing streamId. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }

        StreamImpl stream;
        try {
        	stream = StreamImpl.load(loadObjectId(streamId), core);
        } catch (NotFoundException e) {
        	throw new WebApplicationException(404);
        }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537122/fstmerge_var1_9097536540869575371

        try {
            if (prettyPrint) {
                return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(stream.asMap());
            } else {
                return objectMapper.writeValueAsString(stream.asMap());
            }
        } catch (JsonProcessingException e) {
            LOG.error("Error while generating JSON", e);
            throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537122/fstmerge_base_7774023135334425394
        
        return json(stream.asMap(), prettyPrint);
=======

        return json(stream.asMap(), prettyPrint);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537122/fstmerge_var2_4944061724233255715
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a02ea_24b29/rev_a02ea-24b29/graylog2-server/src/main/java/org/graylog2/rest/resources/streams/StreamResource.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537131/fstmerge_var1_5979045147261037303
@POST @Path("/")
    @Consumes(MediaType.APPLICATION_JSON) 
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(String body) {
        Core core = (Core) rc.getProperty("core");

        if (body == null || body.isEmpty()) {
        	LOG.error("Missing parameters. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }

        CreateRequest cr;
        try {
            cr = objectMapper.readValue(body, CreateRequest.class);
        } catch(Exception e) {
        	LOG.error("Malformed JSON. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }

        // Create stream.
        Map<String, Object> streamData = Maps.newHashMap();
        streamData.put("title", cr.title);
        streamData.put("creator_user_id", cr.creatorUserId);
        streamData.put("created_at", new Date());
        
        StreamImpl stream = new StreamImpl(streamData, core);
        ObjectId id = stream.save();

        Map<String, Object> result = Maps.newHashMap();
        result.put("stream_id", id.toStringMongod());

        try {
            return Response.status(Status.CREATED).entity(objectMapper.writeValueAsString(result)).build();
        } catch (JsonProcessingException e) {
            LOG.error("Error while generating JSON", e);
            throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537131/fstmerge_base_762055574384395574
@POST @Path("/")
    @Consumes(MediaType.APPLICATION_JSON) 
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(String body) {
        Core core = (Core) rc.getProperty("core");

        if (body == null || body.isEmpty()) {
        	LOG.error("Missing parameters. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }

        CreateRequest cr;
        try {
        	cr = new Gson().fromJson(body, CreateRequest.class);
        } catch(JsonSyntaxException e) {
        	LOG.error("Malformed JSON. Returning HTTP 400.");
        	throw new WebApplicationException(400);
        }
        
        // Create stream.
        Map<String, Object> streamData = Maps.newHashMap();
        streamData.put("title", cr.title);
        streamData.put("creator_user_id", cr.creatorUserId);
        streamData.put("created_at", new Date());
        
        StreamImpl stream = new StreamImpl(streamData, core);
        ObjectId id = stream.save();

        Map<String, Object> result = Maps.newHashMap();
        result.put("stream_id", id.toStringMongod());

        return Response.status(Status.CREATED).entity(json(result)).build();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415489537131/fstmerge_var2_7610683225599287874

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a02ea_24b29/rev_a02ea-24b29/graylog2-server/src/main/java/org/graylog2/rest/resources/streams/StreamResource.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ @JsonProperty("creator_user_id")
	public String creatorUserId; ##FSTMerge## @SerializedName("creator_user_id")
	public String creatorUserId; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a02ea_24b29/rev_a02ea-24b29/graylog2-server/src/main/java/org/graylog2/rest/resources/streams/requests/CreateRequest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3fd24_e4bb8/rev_3fd24-e4bb8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6706e_804ec/rev_6706e-804ec.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_cdd70_f7b8e/rev_cdd70-f7b8e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_addb0_8cac3/rev_addb0-8cac3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2baae_88cd0/rev_2baae-88cd0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f5615_f5e06/rev_f5615-f5e06.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_eddc1_5d8e4/rev_eddc1-5d8e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_280b3_c02dd/rev_280b3-c02dd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_eef3d_3bb91/rev_eef3d-3bb91.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_23a22_ca105/rev_23a22-ca105.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_daa37_c0229/rev_daa37-c0229.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_38557_b20f2/rev_38557-b20f2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9b69a_72efb/rev_9b69a-72efb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a470e_ba4af/rev_a470e-ba4af.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1008f_ea180/rev_1008f-ea180.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_25370_fa311/rev_25370-fa311.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_6bde4_42ea1/rev_6bde4-42ea1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_33c29_eaa96/rev_33c29-eaa96.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c23c7_3b17a/rev_c23c7-3b17a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b2cdb_d58e2/rev_b2cdb-d58e2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_0d98b_28575/rev_0d98b-28575.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c5936_dfe77/rev_c5936-dfe77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_290ef_c3896/rev_290ef-c3896.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_74b99_e18ad/rev_74b99-e18ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_411e8_44275/rev_411e8-44275.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_0814d_28cdc/rev_0814d-28cdc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_0050d_904a1/rev_0050d-904a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_cdead_8df85/rev_cdead-8df85.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final Version VERSION = v0_20_0; ##FSTMerge## public static final Version VERSION = v0_20_0_RC_1_1; ##FSTMerge## public static final Version VERSION = v0_20_1_SNAPSHOT;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4/graylog2-server/src/main/java/org/graylog2/ServerVersion.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

        // So jung kommen wir nicht mehr zusammen.

        final CommandLineArguments commandLineArguments = new CommandLineArguments();
        final JCommander jCommander = new JCommander(commandLineArguments, args);
        jCommander.setProgramName("graylog2");

        if (commandLineArguments.isShowHelp()) {
            jCommander.usage();
            System.exit(0);
        }

        if (commandLineArguments.isShowVersion()) {
            System.out.println("Graylog2 Server " + Core.GRAYLOG2_VERSION);
            System.out.println("JRE: " + Tools.getSystemInformation());
            System.exit(0);
        }
        
        String configFile = commandLineArguments.getConfigFile();
        LOG.info("Using config file: {}", configFile);

        final Configuration configuration = getConfiguration(configFile);

        if (configuration.getPasswordSecret().isEmpty()) {
            LOG.error("No password secret set. Please define password_secret in your graylog2.conf.");
            System.exit(1);
        }

        if (commandLineArguments.isInstallPlugin()) {
            System.out.println("Plugin installation requested.");
            PluginInstaller installer = new PluginInstaller(
                    commandLineArguments.getPluginShortname(),
                    commandLineArguments.getPluginVersion(),
                    commandLineArguments.isForcePlugin()
            );
            
            installer.install();
            System.exit(0);
        }

        // Are we in debug mode?
        Level logLevel = Level.INFO;
        if (commandLineArguments.isDebug()) {
            LOG.info("Running in Debug mode");
            logLevel = Level.DEBUG;
        }

        List<Module> bindingsModules = getBindingsModules(new ServerBindings(configuration));
        Injector injector = Guice.createInjector(bindingsModules);

        // This is holding all our metrics.
        final MetricRegistry metrics = injector.getInstance(MetricRegistry.class);

        // Report metrics via JMX.
        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();
        reporter.start();

        InstrumentedAppender logMetrics = new InstrumentedAppender(metrics);
        logMetrics.activateOptions();
        org.apache.log4j.Logger.getRootLogger().setLevel(logLevel);
        org.apache.log4j.Logger.getLogger(Main.class.getPackage().getName()).setLevel(logLevel);
        org.apache.log4j.Logger.getRootLogger().addAppender(logMetrics);

        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();

        LOG.info("Graylog2 {} starting up. (JRE: {})", Core.GRAYLOG2_VERSION, Tools.getSystemInformation());

        // If we only want to check our configuration, we just initialize the rules engine to check if the rules compile
        if (commandLineArguments.isConfigTest()) {
            Core server = injector.getInstance(Core.class);
            server.setConfiguration(configuration);
            DroolsInitializer drools = new DroolsInitializer();
            try {
                drools.initialize(server, null);
            } catch (InitializerConfigurationException e) {
                LOG.error("Drools initialization failed.", e);
            }
            // rules have been checked, exit gracefully
            System.exit(0);
        }

        // Do not use a PID file if the user requested not to
        if (!commandLineArguments.isNoPidFile()) {
            savePidFile(commandLineArguments.getPidFile());
        }

        // Le server object. This is where all the magic happens.
        Core server = injector.getInstance(Core.class);
        server.initialize();

        // Register this node.
        Node.registerServer(server, configuration.isMaster(), configuration.getRestTransportUri());

        Node thisNode = null;
        try {
            thisNode = Node.thisNode(server);
        } catch (NodeNotFoundException e) {
            throw new RuntimeException("Did not find own node. This should never happen.", e);
        }
        if (configuration.isMaster() && !thisNode.isOnlyMaster()) {
            LOG.warn("Detected another master in the cluster. Retrying in {} seconds to make sure it is not "
                    + "an old stale instance.", Node.PING_TIMEOUT);
            try {
                Thread.sleep(Node.PING_TIMEOUT*1000);
            } catch (InterruptedException e) { /* nope */ }
            
            if (!thisNode.isOnlyMaster()) {
                // All devils here.
                String what = "Detected other master node in the cluster! Starting as non-master! "
                        + "This is a mis-configuration you should fix.";
                LOG.warn(what);
                server.getActivityWriter().write(new Activity(what, Main.class));

                // Write a notification.
                Notification.buildNow(server)
                        .addType(Notification.Type.MULTI_MASTER)
                        .addSeverity(Notification.Severity.URGENT)
                        .publishIfFirst();

                configuration.setIsMaster(false);
            } else {
                LOG.warn("Stale master has gone. Starting as master.");
            }
        }
        
        // Enable local mode?
        if (commandLineArguments.isLocal() || commandLineArguments.isDebug()) {
            // In local mode, systemstats are sent to localhost for example.
            LOG.info("Running in local mode");
            server.setLocalMode(true);
        }

        // Are we in stats mode?
        if (commandLineArguments.isStats()) {
            LOG.info("Printing system utilization information.");
            server.setStatsMode(true);
        }

        // Register standard inputs.
        server.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        server.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        server.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        server.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        server.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        server.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        server.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        server.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        server.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        server.inputs().register(JsonPathInput.class, JsonPathInput.NAME);
        server.inputs().register(KafkaInput.class, KafkaInput.NAME);
        server.inputs().register(RadioInput.class, RadioInput.NAME);

        // Register initializers.
        server.initializers().register(new DroolsInitializer());
        server.initializers().register(new HostCounterCacheWriterInitializer());
        server.initializers().register(injector.getInstance(ThroughputCounterInitializer.class));
        server.initializers().register(new NodePingInitializer());
        server.initializers().register(new AlarmScannerInitializer());
        server.initializers().register(new DeflectorThreadsInitializer());
        server.initializers().register(new AnonymousInformationCollectorInitializer());
        if (configuration.performRetention() && commandLineArguments.performRetention())
            server.initializers().register(new IndexRetentionInitializer());
        if (commandLineArguments.isStats())
            server.initializers().register(new StatisticsPrinterInitializer());
        server.initializers().register(new MasterCacheWorkersInitializer());
        server.initializers().register(new ClusterHealthCheckInitializer());
        server.initializers().register(new StreamThroughputCounterInitializer());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467694/fstmerge_var1_2167581333232138061
        server.initializers().register(new VersionCheckInitializer());
        server.initializers().register(new DeadLetterInitializer());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467694/fstmerge_base_1488828944517359355
=======
        server.initializers().register(new VersionCheckInitializer());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467694/fstmerge_var2_5767345455452507537

        // Register message filters. (Order is important here)
        final FilterRegistry filterRegistry = injector.getInstance(FilterRegistry.class);
        filterRegistry.register(new StaticFieldFilter());
        filterRegistry.register(new ExtractorFilter());
        filterRegistry.register(new BlacklistFilter());
        filterRegistry.register(new StreamMatcherFilter());
        filterRegistry.register(new RewriteFilter());

        // Register outputs.
        server.outputs().register(new ElasticSearchOutput(server));

        // Start services.
        server.run();

        // Start REST API.
        try {
            server.startRestApi();
        } catch(Exception e) {
            LOG.error("Could not start REST API on <{}>. Terminating.", configuration.getRestListenUri(), e);
            System.exit(1);
        }

        server.getActivityWriter().write(new Activity("Started up.", Main.class));
        LOG.info("Graylog2 up and running.");

        // Block forever.
        try {
            while (true) {
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            return;
        } finally {
            LOG.info("Graylog2 {} exiting.", Core.GRAYLOG2_VERSION);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4/graylog2-server/src/main/java/org/graylog2/Main.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467943/fstmerge_var1_7875128204305666729
public void initialize(Configuration configuration, MetricRegistry metrics) {
    	startedAt = new DateTime(DateTimeZone.UTC);

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        this.metricRegistry = metrics;
        this.configuration = configuration; // TODO use dependency injection

        if (configuration.isMetricsCollectionEnabled()) {
            metricsReporter = MongoDbMetricsReporter.forRegistry(this, metricRegistry).build();
            metricsReporter.start(1, TimeUnit.SECONDS);
        }

        if (this.configuration.getRestTransportUri() == null) {
                String guessedIf;
                try {
                    guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
                } catch (Exception e) {
                    LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2.conf.", e);
                    throw new RuntimeException("No rest_transport_uri.");
                }

                String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
                LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
                this.configuration.setRestTransportUri(transportStr);
        }

        mongoConnection = new MongoConnection();    // TODO use dependency injection
        mongoConnection.setUser(configuration.getMongoUser());
        mongoConnection.setPassword(configuration.getMongoPassword());
        mongoConnection.setHost(configuration.getMongoHost());
        mongoConnection.setPort(configuration.getMongoPort());
        mongoConnection.setDatabase(configuration.getMongoDatabase());
        mongoConnection.setUseAuth(configuration.isMongoUseAuth());
        mongoConnection.setMaxConnections(configuration.getMongoMaxConnections());
        mongoConnection.setThreadsAllowedToBlockMultiplier(configuration.getMongoThreadsAllowedToBlockMultiplier());
        mongoConnection.setReplicaSet(configuration.getMongoReplicaSet());

        mongoBridge = new MongoBridge(this);
        mongoBridge.setConnection(mongoConnection); // TODO use dependency injection
        mongoConnection.connect();

        initializers = new Initializers(this);
        inputs = new InputRegistry(this);
        outputs = new OutputRegistry(this);

        if (isMaster()) {
            dashboards = new DashboardRegistry(this);
            dashboards.loadPersisted();
        }

        activityWriter = new ActivityWriter(this);

        systemJobManager = new SystemJobManager(this);

        hostCounterCache = new HostCounterCacheImpl();
        
        inputCache = new BasicCache();
        outputCache = new BasicCache();
    
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        outputBuffer = new OutputBuffer(this, outputCache);
        outputBuffer.initialize();

        gelfChunkManager = new GELFChunkManager(this);

        // Make sure that the index failures collection is always created capped.
        if(!mongoConnection.getDatabase().collectionExists(IndexFailure.COLLECTION)) {
            DBObject options = BasicDBObjectBuilder.start()
                    .add("capped", true)
                    .add("size", 52428800) // 50MB max size.
                    .get();

            mongoConnection.getDatabase().createCollection(IndexFailure.COLLECTION, options);
        }

        indexer = new Indexer(this);
        indexer.start();

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                activityWriter.write(new Activity("Shutting down.", GraylogServer.class));
                if (Core.this.configuration.isMetricsCollectionEnabled() && metricsReporter != null) {
                    metricsReporter.stop();
                }
            }
        });
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467943/fstmerge_base_1861439408058222311
public void initialize(Configuration configuration, MetricRegistry metrics) {
    	startedAt = new DateTime(DateTimeZone.UTC);

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        this.metricRegistry = metrics;
        this.configuration = configuration; // TODO use dependency injection

        if (configuration.isMetricsCollectionEnabled()) {
            metricsReporter = MongoDbMetricsReporter.forRegistry(this, metricRegistry).build();
            metricsReporter.start(1, TimeUnit.SECONDS);
        }

        if (this.configuration.getRestTransportUri() == null) {
                String guessedIf;
                try {
                    guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
                } catch (Exception e) {
                    LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2.conf.", e);
                    throw new RuntimeException("No rest_transport_uri.");
                }

                String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
                LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
                this.configuration.setRestTransportUri(transportStr);
        }

        mongoConnection = new MongoConnection();    // TODO use dependency injection
        mongoConnection.setUser(configuration.getMongoUser());
        mongoConnection.setPassword(configuration.getMongoPassword());
        mongoConnection.setHost(configuration.getMongoHost());
        mongoConnection.setPort(configuration.getMongoPort());
        mongoConnection.setDatabase(configuration.getMongoDatabase());
        mongoConnection.setUseAuth(configuration.isMongoUseAuth());
        mongoConnection.setMaxConnections(configuration.getMongoMaxConnections());
        mongoConnection.setThreadsAllowedToBlockMultiplier(configuration.getMongoThreadsAllowedToBlockMultiplier());
        mongoConnection.setReplicaSet(configuration.getMongoReplicaSet());

        mongoBridge = new MongoBridge(this);
        mongoBridge.setConnection(mongoConnection); // TODO use dependency injection
        mongoConnection.connect();

        initializers = new Initializers(this);
        inputs = new InputRegistry(this);
        outputs = new OutputRegistry(this);

        if (isMaster()) {
            dashboards = new DashboardRegistry(this);
            dashboards.loadPersisted();
        }

        activityWriter = new ActivityWriter(this);

        systemJobManager = new SystemJobManager(this);

        hostCounterCache = new HostCounterCacheImpl();
        
        inputCache = new BasicCache();
        outputCache = new BasicCache();
    
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        outputBuffer = new OutputBuffer(this, outputCache);
        outputBuffer.initialize();

        gelfChunkManager = new GELFChunkManager(this);

        indexer = new Indexer(this);
        indexer.start();

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                activityWriter.write(new Activity("Shutting down.", GraylogServer.class));
                if (Core.this.configuration.isMetricsCollectionEnabled() && metricsReporter != null) {
                    metricsReporter.stop();
                }
            }
        });
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490467943/fstmerge_var2_343445247336764522

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4/graylog2-server/src/main/java/org/graylog2/Core.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void run() {
        LOG.debug("Running alert checks.");

        List<Stream> alertedStreams = StreamImpl.loadAllWithConfiguredAlertConditions(server);

        LOG.debug("There are {} streams with configured alert conditions.", alertedStreams.size());

        // Load all streams that have configured alert conditions.
        for (Stream streamIF : alertedStreams) {
            StreamImpl stream = (StreamImpl) streamIF;

            LOG.debug("Stream [{}] has [{}] configured alert conditions.", stream, stream.getAlertConditions().size());

            // Check if a threshold is reached.
            for (AlertCondition alertCondition : stream.getAlertConditions()) {
                try {
                    AlertCondition.CheckResult result = alertCondition.triggered();
                    if (result.isTriggered()) {
                        // Alert is triggered!
                        LOG.info("Alert condition [{}] is triggered. Sending alerts.", alertCondition);

                        // Persist alert.
                        Alert alert = Alert.factory(result, server);
                        alert.save();

                        // Send alerts.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490472275/fstmerge_var1_7624568900221361270
                        if (stream.getAlertReceivers().size() > 0) {
                            try {
                                AlertSender sender = new AlertSender(server);
                                sender.sendEmails(stream, result);
                            } catch (TransportConfigurationException e) {
                                LOG.warn("Stream [{}] has alert receivers and is triggered, but email transport is not configured.", stream);
                            } catch (Exception e) {
                                LOG.error("Stream [{}] has alert receivers and is triggered, but sending emails failed: ", stream, e);
                            }
                        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490472275/fstmerge_base_6545128511502323397
                        AlertSender sender = new AlertSender(server);
                        sender.sendEmails(stream, result);
=======
                        if (stream.getAlertReceivers().size() > 0) {
                            try {
                                AlertSender sender = new AlertSender(server);
                                sender.sendEmails(stream, result);
                            } catch (TransportConfigurationException e) {
                                Notification notification = Notification.buildNow(server)
                                        .addThisNode()
                                        .addType(Notification.Type.EMAIL_TRANSPORT_CONFIGURATION_INVALID)
                                        .addDetail("stream_id", stream.getId())
                                        .addDetail("exception", e);
                                notification.publishIfFirst();
                                LOG.warn("Stream [{}] has alert receivers and is triggered, but email transport is not configured.", stream);
                            } catch (Exception e) {
                                Notification notification = Notification.buildNow(server)
                                        .addThisNode()
                                        .addType(Notification.Type.EMAIL_TRANSPORT_FAILED)
                                        .addDetail("stream_id", stream.getId())
                                        .addDetail("exception", e);
                                notification.publishIfFirst();
                                LOG.error("Stream [{}] has alert receivers and is triggered, but sending emails failed", stream, e);
                            }
                        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490472275/fstmerge_var2_6500249484513960939
                    } else {
                        // Alert not triggered.
                        LOG.debug("Alert condition [{}] is triggered.", alertCondition);
                    }
                } catch(Exception e) {
                    LOG.error("Skipping alert check that threw an exception.", e);
                    continue;
                }
            }

        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4/graylog2-server/src/main/java/org/graylog2/periodical/AlertScannerThread.java
Conflict type: LineBasedMCFd
Conflict body: 
public void messageReceived(GELFMessage message, MessageInput sourceInput) throws BufferOutOfCapacityException {
        String metricName = sourceInput.getUniqueReadableId();

        metricRegistry.meter(name(metricName, "incomingMessages")).mark();

        // Convert to LogMessage
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490475161/fstmerge_base_2349854593490977447
        Message lm = parse(message.getJSON(), sourceInput);
=======
        Message lm = null;
        try {
            lm = parse(message.getJSON(), sourceInput);
        } catch (IllegalStateException e) {
            LOG.error("Corrupt or invalid message received: ", e);
            return;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490475161/fstmerge_var2_927308335297386284

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490475161/fstmerge_var1_3222132030122479096
        if (lm == null || !lm.isComplete()) {
            server.metrics().meter(name(metricName, "incompleteMessages")).mark();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490475161/fstmerge_base_2349854593490977447
        if (!lm.isComplete()) {
            server.metrics().meter(name(metricName, "incompleteMessages")).mark();
=======
        if (lm == null || !lm.isComplete()) {
            metricRegistry.meter(name(metricName, "incompleteMessages")).mark();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490475161/fstmerge_var2_927308335297386284
            LOG.debug("Skipping incomplete message.");
            return;
        }

        // Add to process buffer.
        LOG.debug("Adding received GELF message <{}> to process buffer: {}", lm.getId(), lm);
        metricRegistry.meter(name(metricName, "processedMessages")).mark();
        server.getProcessBuffer().insertCached(lm, sourceInput);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_acad8_bb2d4/rev_acad8-bb2d4/graylog2-inputs/src/main/java/org/graylog2/inputs/gelf/gelf/GELFProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c13cf_a6be1/rev_c13cf-a6be1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final Version VERSION = v0_20_2_SNAPSHOT; ##FSTMerge## public static final Version VERSION = v0_20_0; ##FSTMerge## public static final Version VERSION = v0_20_1_SNAPSHOT;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c13cf_a6be1/rev_c13cf-a6be1/graylog2-server/src/main/java/org/graylog2/ServerVersion.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c13cf_765c1/rev_c13cf-765c1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_67e3f_0163a/rev_67e3f-0163a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4090c_c5b8f/rev_4090c-c5b8f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

        // So jung kommen wir nicht mehr zusammen.

        final CommandLineArguments commandLineArguments = new CommandLineArguments();
        final JCommander jCommander = new JCommander(commandLineArguments, args);
        jCommander.setProgramName("graylog2");

        if (commandLineArguments.isShowHelp()) {
            jCommander.usage();
            System.exit(0);
        }

        if (commandLineArguments.isShowVersion()) {
            System.out.println("Graylog2 Server " + Core.GRAYLOG2_VERSION);
            System.out.println("JRE: " + Tools.getSystemInformation());
            System.exit(0);
        }
        
        String configFile = commandLineArguments.getConfigFile();
        LOG.info("Using config file: {}", configFile);

        final Configuration configuration = getConfiguration(configFile);

        if (configuration.getPasswordSecret().isEmpty()) {
            LOG.error("No password secret set. Please define password_secret in your graylog2.conf.");
            System.exit(1);
        }

        if (commandLineArguments.isInstallPlugin()) {
            System.out.println("Plugin installation requested.");
            PluginInstaller installer = new PluginInstaller(
                    commandLineArguments.getPluginShortname(),
                    commandLineArguments.getPluginVersion(),
                    commandLineArguments.isForcePlugin()
            );
            
            installer.install();
            System.exit(0);
        }

        // Are we in debug mode?
        Level logLevel = Level.INFO;
        if (commandLineArguments.isDebug()) {
            LOG.info("Running in Debug mode");
            logLevel = Level.DEBUG;
        }

        List<Module> bindingsModules = getBindingsModules(new ServerBindings(configuration));
        Injector injector = Guice.createInjector(bindingsModules);

        // This is holding all our metrics.
        final MetricRegistry metrics = injector.getInstance(MetricRegistry.class);

        // Report metrics via JMX.
        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();
        reporter.start();

        InstrumentedAppender logMetrics = new InstrumentedAppender(metrics);
        logMetrics.activateOptions();
        org.apache.log4j.Logger.getRootLogger().setLevel(logLevel);
        org.apache.log4j.Logger.getLogger(Main.class.getPackage().getName()).setLevel(logLevel);
        org.apache.log4j.Logger.getRootLogger().addAppender(logMetrics);

        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();

        LOG.info("Graylog2 {} starting up. (JRE: {})", Core.GRAYLOG2_VERSION, Tools.getSystemInformation());

        // If we only want to check our configuration, we just initialize the rules engine to check if the rules compile
        if (commandLineArguments.isConfigTest()) {
            Core server = injector.getInstance(Core.class);
            server.setConfiguration(configuration);
            DroolsInitializer drools = new DroolsInitializer();
            try {
                drools.initialize(server, null);
            } catch (InitializerConfigurationException e) {
                LOG.error("Drools initialization failed.", e);
            }
            // rules have been checked, exit gracefully
            System.exit(0);
        }

        // Do not use a PID file if the user requested not to
        if (!commandLineArguments.isNoPidFile()) {
            savePidFile(commandLineArguments.getPidFile());
        }

        // Le server object. This is where all the magic happens.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var1_8522330374673754586
        Core server = new Core();
        server.setLifecycle(Lifecycle.STARTING);

        server.initialize(configuration, metrics);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_base_3871355694584290908
        Core server = new Core();
        server.initialize(configuration, metrics);
=======
        Core server = injector.getInstance(Core.class);
        server.setLifecycle(Lifecycle.STARTING);

        server.initialize();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var2_3120454582785484837

        // Register this node.
        Node.registerServer(server, configuration.isMaster(), configuration.getRestTransportUri());

        Node thisNode = null;
        try {
            thisNode = Node.thisNode(server);
        } catch (NodeNotFoundException e) {
            throw new RuntimeException("Did not find own node. This should never happen.", e);
        }
        if (configuration.isMaster() && !thisNode.isOnlyMaster()) {
            LOG.warn("Detected another master in the cluster. Retrying in {} seconds to make sure it is not "
                    + "an old stale instance.", Node.PING_TIMEOUT);
            try {
                Thread.sleep(Node.PING_TIMEOUT*1000);
            } catch (InterruptedException e) { /* nope */ }
            
            if (!thisNode.isOnlyMaster()) {
                // All devils here.
                String what = "Detected other master node in the cluster! Starting as non-master! "
                        + "This is a mis-configuration you should fix.";
                LOG.warn(what);
                server.getActivityWriter().write(new Activity(what, Main.class));

                // Write a notification.
                Notification.buildNow(server)
                        .addType(Notification.Type.MULTI_MASTER)
                        .addSeverity(Notification.Severity.URGENT)
                        .publishIfFirst();

                configuration.setIsMaster(false);
            } else {
                LOG.warn("Stale master has gone. Starting as master.");
            }
        }
        
        // Enable local mode?
        if (commandLineArguments.isLocal() || commandLineArguments.isDebug()) {
            // In local mode, systemstats are sent to localhost for example.
            LOG.info("Running in local mode");
            server.setLocalMode(true);
        }

        // Are we in stats mode?
        if (commandLineArguments.isStats()) {
            LOG.info("Printing system utilization information.");
            server.setStatsMode(true);
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_base_3871355694584290908
=======

        if (!commandLineArguments.performRetention()) {
            configuration.setPerformRetention(false);
        }

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var2_3120454582785484837
        // propagate default size to input plugins
        MessageInput.setDefaultRecvBufferSize(configuration.getUdpRecvBufferSizes());

        // Register standard inputs.
        server.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        server.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        server.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        server.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        server.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        server.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        server.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        server.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        server.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        server.inputs().register(JsonPathInput.class, JsonPathInput.NAME);
        server.inputs().register(KafkaInput.class, KafkaInput.NAME);
        server.inputs().register(RadioInput.class, RadioInput.NAME);

        // Register initializers.
        server.initializers().register(new DroolsInitializer());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_base_3871355694584290908
        server.initializers().register(new HostCounterCacheWriterInitializer());
        server.initializers().register(new ThroughputCounterInitializer());
        server.initializers().register(new NodePingInitializer());
        server.initializers().register(new AlarmScannerInitializer());
        server.initializers().register(new DeflectorThreadsInitializer());
        server.initializers().register(new AnonymousInformationCollectorInitializer());
        if (configuration.performRetention() && commandLineArguments.performRetention()) {
            server.initializers().register(new IndexRetentionInitializer());
        }
        if (commandLineArguments.isStats()) { server.initializers().register(new StatisticsPrinterInitializer()); }
        server.initializers().register(new MasterCacheWorkersInitializer());
        server.initializers().register(new ClusterHealthCheckInitializer());
        server.initializers().register(new StreamThroughputCounterInitializer());
        server.initializers().register(new VersionCheckInitializer());
        server.initializers().register(new DeadLetterInitializer());
=======
        server.initializers().register(new PeriodicalsInitializer());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var2_3120454582785484837

        // Register message filters. (Order is important here)
        final FilterRegistry filterRegistry = injector.getInstance(FilterRegistry.class);
        filterRegistry.register(new StaticFieldFilter());
        filterRegistry.register(new ExtractorFilter());
        filterRegistry.register(new BlacklistFilter());
        filterRegistry.register(new StreamMatcherFilter());
        filterRegistry.register(new RewriteFilter());

        // Register outputs.
        server.outputs().register(new ElasticSearchOutput(server));

        // Start services.
        server.run();

        // Start REST API.
        try {
            server.startRestApi();
        } catch(Exception e) {
            LOG.error("Could not start REST API on <{}>. Terminating.", configuration.getRestListenUri(), e);
            System.exit(1);
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_base_3871355694584290908
=======
        server.setLifecycle(Lifecycle.RUNNING);

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var2_3120454582785484837
        server.getActivityWriter().write(new Activity("Started up.", Main.class));
        LOG.info("Graylog2 up and running.");

        // Block forever.
        try {
            while (true) {
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            return;
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_base_3871355694584290908
        } finally {
            LOG.info("Graylog2 {} exiting.", Core.GRAYLOG2_VERSION);
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662902/fstmerge_var2_3120454582785484837
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4090c_c5b8f/rev_4090c-c5b8f/graylog2-server/src/main/java/org/graylog2/Main.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void run() {

        gelfChunkManager.start();
        BlacklistCache.initialize(this);

        // Set up deflector.
        LOG.info("Setting up deflector.");
        deflector = new Deflector(this);
        deflector.setUp();

        scheduler = Executors.newScheduledThreadPool(SCHEDULED_THREADS_POOL_SIZE,
                new ThreadFactoryBuilder()
                        .setNameFormat("scheduled-%d")
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662919/fstmerge_base_3501603236411601384
=======
                        .setDaemon(false)
                        .build()
        );

        daemonScheduler = Executors.newScheduledThreadPool(SCHEDULED_THREADS_POOL_SIZE,
                new ThreadFactoryBuilder()
                        .setNameFormat("scheduled-%d")
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662919/fstmerge_var2_4985469569322152956
                        .setDaemon(true)
                        .build()
        );

        // Load and register plugins.
        registerPlugins(MessageInput.class, "inputs");

        // Ramp it all up. (both plugins and built-in types)
        initializers().initialize();
        outputs().initialize();

        // Load persisted inputs.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662919/fstmerge_var1_1713376714711991715
        inputs().launchPersisted();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662919/fstmerge_base_3501603236411601384
        inputs().launchPersisted();

        /*
        // Initialize all registered inputs.
        for (MessageInput input : this.inputs) {
            try {
                // This is a plugin. Initialize with custom config from Mongo.
                input.initialize(PluginConfiguration.load(this, input.getClass().getCanonicalName()), this);
                LOG.debug("Initialized input: {}", input.getName());
            } catch (MessageInputConfigurationException e) {
                LOG.error("Could not initialize input <{}>.", input.getClass().getCanonicalName(), e);
            }
        }}
        */
=======
        inputs().launchAllPersisted();

        /*
        // Initialize all registered inputs.
        for (MessageInput input : this.inputs) {
            try {
                // This is a plugin. Initialize with custom config from Mongo.
                input.initialize(PluginConfiguration.load(this, input.getClass().getCanonicalName()), this);
                LOG.debug("Initialized input: {}", input.getName());
            } catch (MessageInputConfigurationException e) {
                LOG.error("Could not initialize input <{}>.", input.getClass().getCanonicalName(), e);
            }
        }}
        */
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490662919/fstmerge_var2_4985469569322152956
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4090c_c5b8f/rev_4090c-c5b8f/graylog2-server/src/main/java/org/graylog2/Core.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490663197/fstmerge_var1_5284918711649419301
public void initialize(Configuration configuration, MetricRegistry metrics) {
    	startedAt = new DateTime(DateTimeZone.UTC);

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        this.metricRegistry = metrics;
        this.configuration = configuration; // TODO use dependency injection

        if (configuration.isMetricsCollectionEnabled()) {
            metricsReporter = MongoDbMetricsReporter.forRegistry(this, metricRegistry).build();
            metricsReporter.start(1, TimeUnit.SECONDS);
        }

        if (this.configuration.getRestTransportUri() == null) {
                String guessedIf;
                try {
                    guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
                } catch (Exception e) {
                    LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2.conf.", e);
                    throw new RuntimeException("No rest_transport_uri.");
                }

                String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
                LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
                this.configuration.setRestTransportUri(transportStr);
        }

        mongoConnection = new MongoConnection();    // TODO use dependency injection
        mongoConnection.setUser(configuration.getMongoUser());
        mongoConnection.setPassword(configuration.getMongoPassword());
        mongoConnection.setHost(configuration.getMongoHost());
        mongoConnection.setPort(configuration.getMongoPort());
        mongoConnection.setDatabase(configuration.getMongoDatabase());
        mongoConnection.setUseAuth(configuration.isMongoUseAuth());
        mongoConnection.setMaxConnections(configuration.getMongoMaxConnections());
        mongoConnection.setThreadsAllowedToBlockMultiplier(configuration.getMongoThreadsAllowedToBlockMultiplier());
        mongoConnection.setReplicaSet(configuration.getMongoReplicaSet());

        mongoBridge = new MongoBridge(this);
        mongoBridge.setConnection(mongoConnection); // TODO use dependency injection
        mongoConnection.connect();

        initializers = new Initializers(this);
        inputs = new InputRegistry(this);
        outputs = new OutputRegistry(this);
        periodicals = new Periodicals(this);

        if (isMaster()) {
            dashboards = new DashboardRegistry(this);
            dashboards.loadPersisted();
        }

        activityWriter = new ActivityWriter(this);

        systemJobManager = new SystemJobManager(this);

        inputCache = new BasicCache();
        outputCache = new BasicCache();
    
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        outputBuffer = new OutputBuffer(this, outputCache);
        outputBuffer.initialize();

        gelfChunkManager = new GELFChunkManager(this);

        // Make sure that the index failures collection is always created capped.
        if(!mongoConnection.getDatabase().collectionExists(IndexFailure.COLLECTION)) {
            DBObject options = BasicDBObjectBuilder.start()
                    .add("capped", true)
                    .add("size", 52428800) // 50MB max size.
                    .get();

            mongoConnection.getDatabase().createCollection(IndexFailure.COLLECTION, options);
        }

        indexer = new Indexer(this);
        indexer.start();

        final Core core = this;
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                String msg = "SIGNAL received. Shutting down.";
                LOG.info(msg);
                activityWriter.write(new Activity(msg, Core.class));

                GracefulShutdown gs = new GracefulShutdown(core);
                gs.run();
            }
        });
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490663197/fstmerge_base_6645509386277353890
public void initialize(Configuration configuration, MetricRegistry metrics) {
    	startedAt = new DateTime(DateTimeZone.UTC);

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        this.metricRegistry = metrics;
        this.configuration = configuration; // TODO use dependency injection

        if (configuration.isMetricsCollectionEnabled()) {
            metricsReporter = MongoDbMetricsReporter.forRegistry(this, metricRegistry).build();
            metricsReporter.start(1, TimeUnit.SECONDS);
        }

        if (this.configuration.getRestTransportUri() == null) {
                String guessedIf;
                try {
                    guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
                } catch (Exception e) {
                    LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2.conf.", e);
                    throw new RuntimeException("No rest_transport_uri.");
                }

                String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
                LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
                this.configuration.setRestTransportUri(transportStr);
        }

        mongoConnection = new MongoConnection();    // TODO use dependency injection
        mongoConnection.setUser(configuration.getMongoUser());
        mongoConnection.setPassword(configuration.getMongoPassword());
        mongoConnection.setHost(configuration.getMongoHost());
        mongoConnection.setPort(configuration.getMongoPort());
        mongoConnection.setDatabase(configuration.getMongoDatabase());
        mongoConnection.setUseAuth(configuration.isMongoUseAuth());
        mongoConnection.setMaxConnections(configuration.getMongoMaxConnections());
        mongoConnection.setThreadsAllowedToBlockMultiplier(configuration.getMongoThreadsAllowedToBlockMultiplier());
        mongoConnection.setReplicaSet(configuration.getMongoReplicaSet());

        mongoBridge = new MongoBridge(this);
        mongoBridge.setConnection(mongoConnection); // TODO use dependency injection
        mongoConnection.connect();

        initializers = new Initializers(this);
        inputs = new InputRegistry(this);
        outputs = new OutputRegistry(this);

        if (isMaster()) {
            dashboards = new DashboardRegistry(this);
            dashboards.loadPersisted();
        }

        activityWriter = new ActivityWriter(this);

        systemJobManager = new SystemJobManager(this);

        hostCounterCache = new HostCounterCacheImpl();
        
        inputCache = new BasicCache();
        outputCache = new BasicCache();
    
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        outputBuffer = new OutputBuffer(this, outputCache);
        outputBuffer.initialize();

        gelfChunkManager = new GELFChunkManager(this);

        // Make sure that the index failures collection is always created capped.
        if(!mongoConnection.getDatabase().collectionExists(IndexFailure.COLLECTION)) {
            DBObject options = BasicDBObjectBuilder.start()
                    .add("capped", true)
                    .add("size", 52428800) // 50MB max size.
                    .get();

            mongoConnection.getDatabase().createCollection(IndexFailure.COLLECTION, options);
        }

        indexer = new Indexer(this);
        indexer.start();

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                activityWriter.write(new Activity("Shutting down.", GraylogServer.class));
                if (Core.this.configuration.isMetricsCollectionEnabled() && metricsReporter != null) {
                    metricsReporter.stop();
                }
            }
        });
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490663197/fstmerge_var2_2943340070910418405

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4090c_c5b8f/rev_4090c-c5b8f/graylog2-server/src/main/java/org/graylog2/Core.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a7b67_adad5/rev_a7b67-adad5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4032d_08bee/rev_4032d-08bee.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

        final CommandLineArguments commandLineArguments = new CommandLineArguments();
        final JCommander jCommander = new JCommander(commandLineArguments, args);
        jCommander.setProgramName("graylog2-radio");

        if (commandLineArguments.isShowHelp()) {
            jCommander.usage();
            System.exit(0);
        }

        if (commandLineArguments.isShowVersion()) {
            System.out.println("Graylog2 Radio " + RadioVersion.VERSION);
            System.out.println("JRE: " + Tools.getSystemInformation());
            System.exit(0);
        }

        String configFile = commandLineArguments.getConfigFile();
        LOG.info("Using config file: {}", configFile);

        final Configuration configuration = new Configuration();
        JadConfig jadConfig = new JadConfig(new PropertiesRepository(configFile), configuration);

        LOG.info("Loading configuration");
        try {
            jadConfig.process();
        } catch (RepositoryException e) {
            LOG.error("Couldn't load configuration file: [{}]", configFile, e);
            System.exit(1);
        } catch (ValidationException e) {
            LOG.error("Invalid configuration", e);
            System.exit(1);
        }

        // Are we in debug mode?
        Level logLevel = Level.INFO;
        if (commandLineArguments.isDebug()) {
            LOG.info("Running in Debug mode");
            logLevel = Level.DEBUG;
        }

        List<Module> bindingsModules = getBindingsModules(new RadioBindings(configuration));
        Injector injector = Guice.createInjector(bindingsModules);

        // This is holding all our metrics.
        final MetricRegistry metrics = injector.getInstance(MetricRegistry.class);

        // Report metrics via JMX.
        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();
        reporter.start();

        InstrumentedAppender logMetrics = new InstrumentedAppender(metrics);
        logMetrics.activateOptions();
        org.apache.log4j.Logger.getRootLogger().setLevel(logLevel);
        org.apache.log4j.Logger.getLogger(Main.class.getPackage().getName()).setLevel(logLevel);
        org.apache.log4j.Logger.getRootLogger().addAppender(logMetrics);

        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();

        LOG.info("Graylog2 Radio {} starting up. (JRE: {})", Radio.VERSION, Tools.getSystemInformation());

        // Do not use a PID file if the user requested not to
        if (!commandLineArguments.isNoPidFile()) {
            savePidFile(commandLineArguments.getPidFile());
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_var1_7302589500077056707
        Radio radio = new Radio();
        radio.setLifecycle(Lifecycle.STARTING);
        radio.initialize(configuration, metrics);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_base_4848073319184601663
        Radio radio = new Radio();
        radio.initialize(configuration, metrics);
=======
        Radio radio = injector.getInstance(Radio.class);
        radio.initialize();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_var2_6780529479184262759

        // Register in Graylog2 cluster.
        radio.ping();

        // Start regular pinging Graylog2 cluster to show that we are alive.
        radio.startPings();

        // Start REST API.
        try {
            radio.startRestApi();
        } catch(Exception e) {
            LOG.error("Could not start REST API on <{}>. Terminating.", configuration.getRestListenUri(), e);
            System.exit(1);
        }

        // Register inputs. (find an automatic way here (annotations?) and do the same in graylog2-server.Main
        radio.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        radio.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        radio.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        radio.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        radio.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        radio.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        radio.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        radio.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        radio.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        radio.inputs().register(JsonPathInput.class, JsonPathInput.NAME);

        // Try loading persisted inputs. Retry until server connection succeeds.
        while(true) {
            try {
                radio.launchPersistedInputs();
                break;
            } catch(Exception e) {
                LOG.error("Could not load persisted inputs. Trying again in one second.", e);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e1) {
                    return;
                }
            }
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_var1_7302589500077056707
        // Register inputs. (find an automatic way here (annotations?) and do the same in graylog2-server.Main
        radio.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        radio.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        radio.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        radio.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        radio.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        radio.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        radio.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        radio.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        radio.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        radio.inputs().register(JsonPathInput.class, JsonPathInput.NAME);

        radio.setLifecycle(Lifecycle.RUNNING);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_base_4848073319184601663
        // Register inputs. (find an automatic way here (annotations?) and do the same in graylog2-server.Main
        radio.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        radio.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        radio.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        radio.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        radio.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        radio.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        radio.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        radio.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        radio.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        radio.inputs().register(JsonPathInput.class, JsonPathInput.NAME);

=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490771443/fstmerge_var2_6780529479184262759
        LOG.info("Graylog2 Radio up and running.");

        while (true) {
            try { Thread.sleep(1000); } catch (InterruptedException e) { /* lol, i don't care */ }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4032d_08bee/rev_4032d-08bee/graylog2-radio/src/main/java/org/graylog2/radio/Main.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5a4da_f517f/rev_5a4da-f517f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490816617/fstmerge_var1_9184696314194555879
private String buildBody(StreamImpl stream, AlertCondition.CheckResult checkResult) {
        StringBuilder sb = new StringBuilder();

        sb.append(checkResult.getResultDescription());

        sb.append("\n\n");
        sb.append("##########\n");
        sb.append("Date: ").append(Tools.iso8601().toString()).append("\n");
        sb.append("Stream ID: ").append(stream.getId()).append("\n");
        sb.append("Stream title: ").append(stream.getTitle()).append("\n");
        if (core.getConfiguration().getEmailTransportWebInterfaceUrl() != null)
            sb.append("Stream URL: ").append(
                    buildStreamDetailsURL(core.getConfiguration().getEmailTransportWebInterfaceUrl(),
                            checkResult, stream));
        sb.append("Stream rules: ").append(stream.getStreamRules()).append("\n");
        sb.append("Alert triggered at: ").append(checkResult.getTriggeredAt()).append("\n");
        sb.append("Triggered condition: ").append(checkResult.getTriggeredCondition()).append("\n");
        sb.append("##########");

        return sb.toString();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490816617/fstmerge_base_7298751480530236400
private String buildBody(StreamImpl stream, AlertCondition.CheckResult checkResult) {
        StringBuilder sb = new StringBuilder();

        sb.append(checkResult.getResultDescription());

        sb.append("\n\n");
        sb.append("##########\n");
        sb.append("Date: ").append(Tools.iso8601().toString()).append("\n");
        sb.append("Stream ID: ").append(stream.getId()).append("\n");
        sb.append("Stream title: ").append(stream.getTitle()).append("\n");
        sb.append("Stream rules: ").append(stream.getStreamRules()).append("\n");
        sb.append("Alert triggered at: ").append(checkResult.getTriggeredAt()).append("\n");
        sb.append("Triggered condition: ").append(checkResult.getTriggeredCondition()).append("\n");
        sb.append("##########");

        return sb.toString();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490816617/fstmerge_var2_450506510483015443

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5a4da_f517f/rev_5a4da-f517f/graylog2-server/src/main/java/org/graylog2/alerts/AlertSender.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8c1e9_cc164/rev_8c1e9-cc164.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a4605_81d28/rev_a4605-81d28.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

        // So jung kommen wir nicht mehr zusammen.

        final CommandLineArguments commandLineArguments = new CommandLineArguments();
        final JCommander jCommander = new JCommander(commandLineArguments, args);
        jCommander.setProgramName("graylog2");

        if (commandLineArguments.isShowHelp()) {
            jCommander.usage();
            System.exit(0);
        }

        if (commandLineArguments.isShowVersion()) {
            System.out.println("Graylog2 Server " + Core.GRAYLOG2_VERSION);
            System.out.println("JRE: " + Tools.getSystemInformation());
            System.exit(0);
        }
        
        String configFile = commandLineArguments.getConfigFile();
        LOG.info("Using config file: {}", configFile);

        final Configuration configuration = getConfiguration(configFile);

        if (configuration.getPasswordSecret().isEmpty()) {
            LOG.error("No password secret set. Please define password_secret in your graylog2.conf.");
            System.exit(1);
        }

        if (commandLineArguments.isInstallPlugin()) {
            System.out.println("Plugin installation requested.");
            PluginInstaller installer = new PluginInstaller(
                    commandLineArguments.getPluginShortname(),
                    commandLineArguments.getPluginVersion(),
                    commandLineArguments.isForcePlugin()
            );
            
            installer.install();
            System.exit(0);
        }

        // Are we in debug mode?
        Level logLevel = Level.INFO;
        if (commandLineArguments.isDebug()) {
            LOG.info("Running in Debug mode");
            logLevel = Level.DEBUG;
        }

        GuiceInstantiationService instantiationService = new GuiceInstantiationService();
        List<Module> bindingsModules = getBindingsModules(instantiationService,
                new ServerBindings(configuration),
                new PersistenceServicesBindings());
        Injector injector = Guice.createInjector(bindingsModules);
        instantiationService.setInjector(injector);

        // This is holding all our metrics.
        final MetricRegistry metrics = injector.getInstance(MetricRegistry.class);

        // Report metrics via JMX.
        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();
        reporter.start();

        InstrumentedAppender logMetrics = new InstrumentedAppender(metrics);
        logMetrics.activateOptions();
        org.apache.log4j.Logger.getRootLogger().setLevel(logLevel);
        org.apache.log4j.Logger.getLogger(Main.class.getPackage().getName()).setLevel(logLevel);
        org.apache.log4j.Logger.getRootLogger().addAppender(logMetrics);

        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();

        LOG.info("Graylog2 {} starting up. (JRE: {})", Core.GRAYLOG2_VERSION, Tools.getSystemInformation());

        // Do not use a PID file if the user requested not to
        if (!commandLineArguments.isNoPidFile()) {
            savePidFile(commandLineArguments.getPidFile());
        }

        // Le server object. This is where all the magic happens.
        Core server = injector.getInstance(Core.class);
        ServerStatus serverStatus = injector.getInstance(ServerStatus.class);
        serverStatus.setLifecycle(Lifecycle.STARTING);

        server.initialize();

        // Register this node.
        final NodeService nodeService = injector.getInstance(NodeService.class);
        nodeService.registerServer(server, configuration.isMaster(), configuration.getRestTransportUri());

        Node thisNode = null;
        try {
            thisNode = nodeService.thisNode(server);
        } catch (NodeNotFoundException e) {
            throw new RuntimeException("Did not find own node. This should never happen.", e);
        }

        final ActivityWriter activityWriter = injector.getInstance(ActivityWriter.class);
        if (configuration.isMaster() && !nodeService.isOnlyMaster(server)) {
            LOG.warn("Detected another master in the cluster. Retrying in {} seconds to make sure it is not "
                    + "an old stale instance.", NodeServiceImpl.PING_TIMEOUT);
            try {
                Thread.sleep(NodeServiceImpl.PING_TIMEOUT*1000);
            } catch (InterruptedException e) { /* nope */ }
            
            if (!nodeService.isOnlyMaster(server)) {
                // All devils here.
                String what = "Detected other master node in the cluster! Starting as non-master! "
                        + "This is a mis-configuration you should fix.";
                LOG.warn(what);
                activityWriter.write(new Activity(what, Main.class));

                // Write a notification.
                final NotificationService notificationService = injector.getInstance(NotificationService.class);
                Notification notification = notificationService.buildNow()
                        .addType(NotificationImpl.Type.MULTI_MASTER)
                        .addSeverity(NotificationImpl.Severity.URGENT);
                notificationService.publishIfFirst(notification);

                configuration.setIsMaster(false);
            } else {
                LOG.warn("Stale master has gone. Starting as master.");
            }
        }
        
        // Enable local mode?
        if (commandLineArguments.isLocal() || commandLineArguments.isDebug()) {
            // In local mode, systemstats are sent to localhost for example.
            LOG.info("Running in local mode");
            serverStatus.setLocalMode(true);
        }

        // Are we in stats mode?
        if (commandLineArguments.isStats()) {
            LOG.info("Printing system utilization information.");
            serverStatus.setStatsMode(true);
        }


        if (!commandLineArguments.performRetention()) {
            configuration.setPerformRetention(false);
        }

        // propagate default size to input plugins
        MessageInput.setDefaultRecvBufferSize(configuration.getUdpRecvBufferSizes());

        // Register standard inputs.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490966486/fstmerge_var1_7225615829776537147
        server.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        server.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        server.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        server.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        server.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        server.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        server.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        server.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        server.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        server.inputs().register(JsonPathInput.class, JsonPathInput.NAME);
        server.inputs().register(KafkaInput.class, KafkaInput.NAME);
        server.inputs().register(RadioKafkaInput.class, RadioKafkaInput.NAME);
        server.inputs().register(AMQPInput.class, AMQPInput.NAME);
        server.inputs().register(RadioAMQPInput.class, RadioAMQPInput.NAME);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490966486/fstmerge_base_5572888075602547543
        server.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        server.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        server.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        server.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        server.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        server.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        server.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        server.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        server.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        server.inputs().register(JsonPathInput.class, JsonPathInput.NAME);
        server.inputs().register(KafkaInput.class, KafkaInput.NAME);
        server.inputs().register(RadioInput.class, RadioInput.NAME);
=======
        InputRegistry inputRegistry = injector.getInstance(ServerInputRegistry.class);
        inputRegistry.register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        inputRegistry.register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        inputRegistry.register(RawUDPInput.class, RawUDPInput.NAME);
        inputRegistry.register(RawTCPInput.class, RawTCPInput.NAME);
        inputRegistry.register(GELFUDPInput.class, GELFUDPInput.NAME);
        inputRegistry.register(GELFTCPInput.class, GELFTCPInput.NAME);
        inputRegistry.register(GELFHttpInput.class, GELFHttpInput.NAME);
        inputRegistry.register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        inputRegistry.register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        inputRegistry.register(JsonPathInput.class, JsonPathInput.NAME);
        inputRegistry.register(KafkaInput.class, KafkaInput.NAME);
        inputRegistry.register(RadioInput.class, RadioInput.NAME);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490966486/fstmerge_var2_8269570333375968541

        // Register initializers.
        Initializers initializers = injector.getInstance(Initializers.class);
        initializers.register(injector.getInstance(PeriodicalsInitializer.class));

        // Register message filters. (Order is important here)
        final FilterRegistry filterRegistry = injector.getInstance(FilterRegistry.class);
        filterRegistry.register(injector.getInstance(StaticFieldFilter.class));
        filterRegistry.register(injector.getInstance(ExtractorFilter.class));
        filterRegistry.register(injector.getInstance(BlacklistFilter.class));
        filterRegistry.register(injector.getInstance(StreamMatcherFilter.class));
        filterRegistry.register(injector.getInstance(RewriteFilter.class));

        // Register outputs.
        server.outputs().register(injector.getInstance(ElasticSearchOutput.class));

        // Start services.
        server.run();

        // Start REST API.
        try {
            server.startRestApi(injector);
        } catch(Exception e) {
            LOG.error("Could not start REST API on <{}>. Terminating.", configuration.getRestListenUri(), e);
            System.exit(1);
        }

        serverStatus.setLifecycle(Lifecycle.RUNNING);

        activityWriter.write(new Activity("Started up.", Main.class));
        LOG.info("Graylog2 up and running.");

        // Block forever.
        try {
            while (true) {
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            return;
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-server/src/main/java/org/graylog2/Main.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490967658/fstmerge_var1_7890347122693692332
public List<Extractor> getExtractors() {
        List<Extractor> extractors = Lists.newArrayList();

        if (fields.get(EMBEDDED_EXTRACTORS) == null) {
            return extractors;
        }

        BasicDBList mEx = (BasicDBList) fields.get(EMBEDDED_EXTRACTORS);
        Iterator<Object> iterator = mEx.iterator();
        while(iterator.hasNext()) {
            DBObject ex = (BasicDBObject) iterator.next();

            // SOFT MIGRATION: does this extractor have an order set? Implemented for issue: #726
            Long order = new Long(0);
            if (ex.containsField("order")) {
                order = (Long) ex.get("order"); // mongodb driver gives us a java.lang.Long
            }

            try {
                Extractor extractor = ExtractorFactory.factory(
                        (String) ex.get("id"),
                        (String) ex.get("title"),
                        order.intValue(),
                        Extractor.CursorStrategy.valueOf(((String) ex.get("cursor_strategy")).toUpperCase()),
                        Extractor.Type.valueOf(((String) ex.get("type")).toUpperCase()),
                        (String) ex.get("source_field"),
                        (String) ex.get("target_field"),
                        (Map<String, Object>) ex.get("extractor_config"),
                        (String) ex.get("creator_user_id"),
                        getConvertersOfExtractor(ex),
                        Extractor.ConditionType.valueOf(((String) ex.get("condition_type")).toUpperCase()),
                        (String) ex.get("condition_value")
                );

                extractors.add(extractor);
            } catch (Exception e) {
                LOG.error("Cannot build extractor from persisted data. Skipping.", e);
                continue;
            }
        }

        return extractors;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490967658/fstmerge_base_6695780760778077612
public List<Extractor> getExtractors() {
        List<Extractor> extractors = Lists.newArrayList();

        if (fields.get(EMBEDDED_EXTRACTORS) == null) {
            return extractors;
        }

        BasicDBList mEx = (BasicDBList) fields.get(EMBEDDED_EXTRACTORS);
        Iterator<Object> iterator = mEx.iterator();
        while(iterator.hasNext()) {
            DBObject ex = (BasicDBObject) iterator.next();
            try {
                Extractor extractor = ExtractorFactory.factory(
                        (String) ex.get("id"),
                        (String) ex.get("title"),
                        Extractor.CursorStrategy.valueOf(((String) ex.get("cursor_strategy")).toUpperCase()),
                        Extractor.Type.valueOf(((String) ex.get("type")).toUpperCase()),
                        (String) ex.get("source_field"),
                        (String) ex.get("target_field"),
                        (Map<String, Object>) ex.get("extractor_config"),
                        (String) ex.get("creator_user_id"),
                        getConvertersOfExtractor(ex),
                        Extractor.ConditionType.valueOf(((String) ex.get("condition_type")).toUpperCase()),
                        (String) ex.get("condition_value")
                );

                extractors.add(extractor);
            } catch (Exception e) {
                LOG.error("Cannot build extractor from persisted data. Skipping.", e);
                continue;
            }
        }

        return extractors;
    }
=======
List<Extractor> getExtractors();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490967658/fstmerge_var2_8792374925572840912

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-server/src/main/java/org/graylog2/inputs/Input.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490968653/fstmerge_var1_3648679188740649445
@Override
    public void write(List<Message> messages, OutputStreamConfiguration streamConfig, GraylogServer server) throws Exception {
        LOG.debug("Writing <{}> messages.", messages.size());
        if (LOG.isTraceEnabled()) {
            final List<String> sortedIds = Ordering.natural().sortedCopy(Lists.transform(messages,  Message.ID_FUNCTION));
            LOG.trace("Writing message ids to [{}]: <{}>", getName(), Joiner.on(", ").join(sortedIds));
        }
        Core serverImpl = (Core) server;
        
        writes.mark();

        Timer.Context tcx = processTime.time();
        serverImpl.getIndexer().bulkIndex(messages);
        tcx.stop();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490968653/fstmerge_base_1368039965281509292
@Override
    public void write(List<Message> messages, OutputStreamConfiguration streamConfig, GraylogServer server) throws Exception {
        LOG.debug("Writing <{}> messages.", messages.size());
        
        Core serverImpl = (Core) server;
        
        writes.mark();

        Timer.Context tcx = processTime.time();
        serverImpl.getIndexer().bulkIndex(messages);
        tcx.stop();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490968653/fstmerge_var2_1087690468922753051

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-server/src/main/java/org/graylog2/outputs/ElasticSearchOutput.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490969647/fstmerge_var1_3582476108786697908
@Override
    public void onEvent(MessageEvent event, long sequence, boolean endOfBatch) throws Exception {
        // Because Trisha said so. (http://code.google.com/p/disruptor/wiki/FrequentlyAskedQuestions)
        if ((sequence % numberOfConsumers) != ordinal) {
            return;
        }

        server.processBufferWatermark().decrementAndGet();
        
        incomingMessages.mark();
        final Timer.Context tcx = processTime.time();

        Message msg = event.getMessage();

        LOG.debug("Starting to process message <{}>.", msg.getId());

        for (MessageFilter filter : server.getFilters()) {
            Timer timer = server.metrics().timer(name(filter.getClass(), "executionTime"));
            final Timer.Context timerContext = timer.time();

            try {
                LOG.debug("Applying filter [{}] on message <{}>.", filter.getName(), msg.getId());

                if (filter.filter(msg, server)) {
                    LOG.debug("Filter [{}] marked message <{}> to be discarded. Dropping message.", filter.getName(), msg.getId());
                    filteredOutMessages.mark();
                    return;
                }
            } catch (Exception e) {
                LOG.error("Could not apply filter [" + filter.getName() +"] on message <" + msg.getId() +">: ", e);
            } finally {
                timerContext.stop();
            }
        }

        LOG.debug("Finished processing message <{}>. Writing to output buffer.", msg.getId());
        server.getOutputBuffer().insertCached(msg, null);
        
        outgoingMessages.mark();
        tcx.stop();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490969647/fstmerge_base_3723985805215933136
@Override
    public void onEvent(MessageEvent event, long sequence, boolean endOfBatch) throws Exception {
        // Because Trisha said so. (http://code.google.com/p/disruptor/wiki/FrequentlyAskedQuestions)
        if ((sequence % numberOfConsumers) != ordinal) {
            return;
        }

        server.processBufferWatermark().decrementAndGet();
        
        incomingMessages.mark();
        final Timer.Context tcx = processTime.time();

        Message msg = event.getMessage();

        LOG.debug("Starting to process message <{}>.", msg.getId());

        for (MessageFilter filter : server.getFilters()) {
            Timer timer = server.metrics().timer(name(filter.getClass(), "executionTime"));
            final Timer.Context timerContext = timer.time();

            try {
                LOG.debug("Applying filter [{}] on message <{}>.", filter.getName(), msg.getId());

                if (filter.filter(msg, server)) {
                    LOG.debug("Filter [{}] marked message <{}> to be discarded. Dropping message.", filter.getName(), msg.getId());
                    filteredOutMessages.mark();
                    return;
                }
            } catch (Exception e) {
                LOG.error("Could not apply filter [" + filter.getName() +"] on message <" + msg.getId() +">: ", e);
            } finally {
                timerContext.stop();
            }
        }

        LOG.debug("Finished processing message. Writing to output buffer.");
        server.getOutputBuffer().insertCached(msg, null);
        
        outgoingMessages.mark();
        tcx.stop();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490969647/fstmerge_var2_5002605683373586213

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-server/src/main/java/org/graylog2/buffers/processors/ProcessBufferProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void messageReceived(GELFMessage message, MessageInput sourceInput) throws BufferOutOfCapacityException {
        String metricName = sourceInput.getUniqueReadableId();

        metricRegistry.meter(name(metricName, "incomingMessages")).mark();

        // Convert to LogMessage
        Message lm = null;
        try {
            lm = parse(message.getJSON(), sourceInput);
        } catch (IllegalStateException e) {
            LOG.error("Corrupt or invalid message received: ", e);
            return;
        }

        if (lm == null || !lm.isComplete()) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490974370/fstmerge_var1_178048635674059787
            server.metrics().meter(name(metricName, "incompleteMessages")).mark();
            LOG.debug("Skipping incomplete message: {}", lm.getValidationErrors());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490974370/fstmerge_base_532964002907472112
            server.metrics().meter(name(metricName, "incompleteMessages")).mark();
            LOG.debug("Skipping incomplete message.");
=======
            metricRegistry.meter(name(metricName, "incompleteMessages")).mark();
            LOG.debug("Skipping incomplete message.");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490974370/fstmerge_var2_5187666006479587364
            return;
        }

        // Add to process buffer.
        LOG.debug("Adding received GELF message <{}> to process buffer: {}", lm.getId(), lm);
        metricRegistry.meter(name(metricName, "processedMessages")).mark();
        processBuffer.insertCached(lm, sourceInput);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-inputs/src/main/java/org/graylog2/inputs/gelf/gelf/GELFProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private static final Logger LOG = LoggerFactory.getLogger(KafkaInput.class); ##FSTMerge## private static final Logger LOG = LoggerFactory.getLogger(RadioInput.class);
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-inputs/src/main/java/org/graylog2/inputs/radio/RadioInput.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976440/fstmerge_var1_2739836609522570191
public void initialize(Configuration configuration, MetricRegistry metrics) {
        startedAt = new DateTime(DateTimeZone.UTC);

        this.metricRegistry = metrics;
        this.configuration = configuration;

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        gelfChunkManager = new GELFChunkManager(this);
        gelfChunkManager.start();

        inputCache = new BasicCache();
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        // Set up transport.
        switch (configuration.getTransportType()) {
            case AMQP:
                transport = new AMQPProducer(this);
                break;
            case KAFKA:
                transport = new KafkaProducer(this);
                break;
            default:
                throw new RuntimeException("Cannot map transport type to transport.");
        }

        this.inputs = new InputRegistry(this);

        if (this.configuration.getRestTransportUri() == null) {
            String guessedIf;
            try {
                guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
            } catch (Exception e) {
                LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2-radio.conf.", e);
                throw new RuntimeException("No rest_transport_uri.");
            }

            String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
            LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
            this.configuration.setRestTransportUri(transportStr);
        }

        pinger = new Ping.Pinger(httpClient, nodeId, configuration.getRestTransportUri(), configuration.getGraylog2ServerUri());

        scheduler = Executors.newScheduledThreadPool(SCHEDULED_THREADS_POOL_SIZE,
                new ThreadFactoryBuilder().setNameFormat("scheduled-%d").build()
        );

        ThroughputCounterManagerThread tt = new ThroughputCounterManagerThread(this);
        scheduler.scheduleAtFixedRate(tt, 0, 1, TimeUnit.SECONDS);

        MasterCacheWorkerThread masterCacheWorker = new MasterCacheWorkerThread(this, inputCache, processBuffer);
        scheduler.scheduleAtFixedRate(masterCacheWorker, 0, 1, TimeUnit.SECONDS);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976440/fstmerge_base_3028023701969863865
public void initialize(Configuration configuration, MetricRegistry metrics) {
        startedAt = new DateTime(DateTimeZone.UTC);

        this.metricRegistry = metrics;
        this.configuration = configuration;

        NodeId id = new NodeId(configuration.getNodeIdFile());
        this.nodeId = id.readOrGenerate();

        gelfChunkManager = new GELFChunkManager(this);
        gelfChunkManager.start();

        inputCache = new BasicCache();
        processBuffer = new ProcessBuffer(this, inputCache);
        processBuffer.initialize();

        transport = new KafkaProducer(this);

        this.inputs = new InputRegistry(this);

        if (this.configuration.getRestTransportUri() == null) {
            String guessedIf;
            try {
                guessedIf = Tools.guessPrimaryNetworkAddress().getHostAddress();
            } catch (Exception e) {
                LOG.error("Could not guess primary network address for rest_transport_uri. Please configure it in your graylog2-radio.conf.", e);
                throw new RuntimeException("No rest_transport_uri.");
            }

            String transportStr = "http://" + guessedIf + ":" + configuration.getRestListenUri().getPort();
            LOG.info("No rest_transport_uri set. Falling back to [{}].", transportStr);
            this.configuration.setRestTransportUri(transportStr);
        }

        pinger = new Ping.Pinger(httpClient, nodeId, configuration.getRestTransportUri(), configuration.getGraylog2ServerUri());

        scheduler = Executors.newScheduledThreadPool(SCHEDULED_THREADS_POOL_SIZE,
                new ThreadFactoryBuilder().setNameFormat("scheduled-%d").build()
        );

        ThroughputCounterManagerThread tt = new ThroughputCounterManagerThread(this);
        scheduler.scheduleAtFixedRate(tt, 0, 1, TimeUnit.SECONDS);

        MasterCacheWorkerThread masterCacheWorker = new MasterCacheWorkerThread(this, inputCache, processBuffer);
        scheduler.scheduleAtFixedRate(masterCacheWorker, 0, 1, TimeUnit.SECONDS);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976440/fstmerge_var2_4072750983323636096

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-radio/src/main/java/org/graylog2/radio/Radio.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

        final CommandLineArguments commandLineArguments = new CommandLineArguments();
        final JCommander jCommander = new JCommander(commandLineArguments, args);
        jCommander.setProgramName("graylog2-radio");

        if (commandLineArguments.isShowHelp()) {
            jCommander.usage();
            System.exit(0);
        }

        if (commandLineArguments.isShowVersion()) {
            System.out.println("Graylog2 Radio " + RadioVersion.VERSION);
            System.out.println("JRE: " + Tools.getSystemInformation());
            System.exit(0);
        }

        String configFile = commandLineArguments.getConfigFile();
        LOG.info("Using config file: {}", configFile);

        final Configuration configuration = new Configuration();
        JadConfig jadConfig = new JadConfig(new PropertiesRepository(configFile), configuration);

        LOG.info("Loading configuration");
        try {
            jadConfig.process();
        } catch (RepositoryException e) {
            LOG.error("Couldn't load configuration file: [{}]", configFile, e);
            System.exit(1);
        } catch (ValidationException e) {
            LOG.error("Invalid configuration", e);
            System.exit(1);
        }

        // Are we in debug mode?
        Level logLevel = Level.INFO;
        if (commandLineArguments.isDebug()) {
            LOG.info("Running in Debug mode");
            logLevel = Level.DEBUG;
        }

        GuiceInstantiationService instantiationService = new GuiceInstantiationService();
        List<Module> bindingsModules = getBindingsModules(instantiationService, new RadioBindings(configuration));
        Injector injector = Guice.createInjector(bindingsModules);
        instantiationService.setInjector(injector);

        // This is holding all our metrics.
        final MetricRegistry metrics = injector.getInstance(MetricRegistry.class);

        // Report metrics via JMX.
        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();
        reporter.start();

        InstrumentedAppender logMetrics = new InstrumentedAppender(metrics);
        logMetrics.activateOptions();
        org.apache.log4j.Logger.getRootLogger().setLevel(logLevel);
        org.apache.log4j.Logger.getLogger(Main.class.getPackage().getName()).setLevel(logLevel);
        org.apache.log4j.Logger.getRootLogger().addAppender(logMetrics);

        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();

        LOG.info("Graylog2 Radio {} starting up. (JRE: {})", Radio.VERSION, Tools.getSystemInformation());

        // Do not use a PID file if the user requested not to
        if (!commandLineArguments.isNoPidFile()) {
            savePidFile(commandLineArguments.getPidFile());
        }

        Radio radio = injector.getInstance(Radio.class);
        radio.setLifecycle(Lifecycle.STARTING);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976654/fstmerge_var1_1241333298699350600

        try {
            radio.initialize(configuration, metrics);
        } catch(Exception e) {
            LOG.error("Initialization error.", e);
            System.exit(1);
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976654/fstmerge_base_63621879573576699
        radio.initialize(configuration, metrics);
=======
        radio.initialize();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415490976654/fstmerge_var2_5141984287269581949

        // Register in Graylog2 cluster.
        radio.ping();

        // Start regular pinging Graylog2 cluster to show that we are alive.
        radio.startPings();

        // Start REST API.
        try {
            radio.startRestApi(injector);
        } catch(Exception e) {
            LOG.error("Could not start REST API on <{}>. Terminating.", configuration.getRestListenUri(), e);
            System.exit(1);
        }

        // Register inputs. (find an automatic way here (annotations?) and do the same in graylog2-server.Main
        radio.inputs().register(SyslogUDPInput.class, SyslogUDPInput.NAME);
        radio.inputs().register(SyslogTCPInput.class, SyslogTCPInput.NAME);
        radio.inputs().register(RawUDPInput.class, RawUDPInput.NAME);
        radio.inputs().register(RawTCPInput.class, RawTCPInput.NAME);
        radio.inputs().register(GELFUDPInput.class, GELFUDPInput.NAME);
        radio.inputs().register(GELFTCPInput.class, GELFTCPInput.NAME);
        radio.inputs().register(GELFHttpInput.class, GELFHttpInput.NAME);
        radio.inputs().register(FakeHttpMessageInput.class, FakeHttpMessageInput.NAME);
        radio.inputs().register(LocalMetricsInput.class, LocalMetricsInput.NAME);
        radio.inputs().register(JsonPathInput.class, JsonPathInput.NAME);

        // Try loading persisted inputs. Retry until server connection succeeds.
        while(true) {
            try {
                radio.launchPersistedInputs();
                break;
            } catch(Exception e) {
                LOG.error("Could not load persisted inputs. Trying again in one second.", e);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e1) {
                    return;
                }
            }
        }

        radio.setLifecycle(Lifecycle.RUNNING);
        LOG.info("Graylog2 Radio up and running.");

        while (true) {
            try { Thread.sleep(1000); } catch (InterruptedException e) { /* lol, i don't care */ }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fee63_8dac5/rev_fee63-8dac5/graylog2-radio/src/main/java/org/graylog2/radio/Main.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2d09a_e0161/rev_2d09a-e0161.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_21dc3_fee63/rev_21dc3-fee63.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c522e_cc55e/rev_c522e-cc55e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f531a_b68a4/rev_f531a-b68a4.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491176906/fstmerge_var1_3587155666408456580
public void setTimeZone(DateTimeZone timeZone) {
        fields.put(TIMEZONE, timeZone == null ? null : timeZone.getID());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491176906/fstmerge_base_2601297750493666395
public void setTimeZone(DateTimeZone timeZone) {
        fields.put(TIMEZONE, timeZone.getID());
    }
=======
void setTimeZone(DateTimeZone timeZone);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491176906/fstmerge_var2_4680486592034434164

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f531a_b68a4/rev_f531a-b68a4/graylog2-server/src/main/java/org/graylog2/users/User.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9748b_3a7c1/rev_9748b-3a7c1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c1c54_9e271/rev_c1c54-9e271.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491287128/fstmerge_var1_4123732864154028540
@Override
    public boolean filter(Message msg, GraylogServer server) {
        if (msg.getSourceInput() == null) {
            return false;
        }

        for (Extractor extractor : loadExtractors(msg.getSourceInput().getId(), server)) {
            try {
                extractor.runExtractor(server, msg);
            } catch (Exception e) {
                extractor.incrementExceptions();
                LOG.error("Could not apply extractor.", e);
                continue;
            }
        }

        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491287128/fstmerge_base_1315564991421684265
@Override
    public boolean filter(Message msg, GraylogServer server) {
        if (msg.getSourceInput() == null) {
            return false;
        }

        for (Extractor extractor : msg.getSourceInput().getExecutionSortedExtractors()) {
            try {
                extractor.runExtractor(server, msg);
            } catch (Exception e) {
                extractor.incrementExceptions();
                LOG.error("Could not apply extractor.", e);
                continue;
            }
        }

        return false;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491287128/fstmerge_var2_7862745675875719724

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c1c54_9e271/rev_c1c54-9e271/graylog2-server/src/main/java/org/graylog2/filters/ExtractorFilter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_d3391_8bee7/rev_d3391-8bee7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2db6a_daa85/rev_2db6a-daa85.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9a008_49231/rev_9a008-49231.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_de689_82156/rev_de689-82156.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_979de_c4e4c/rev_979de-c4e4c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3a19b_7b962/rev_3a19b-7b962.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void start() {
        final NodeBuilder builder = nodeBuilder().client(true);
        Map<String, String> settings = readNodeSettings(configuration);

        builder.settings().put(settings);
        node = builder.node();
        client = node.client();

        try {
            client.admin().cluster().health(new ClusterHealthRequest().waitForYellowStatus()).actionGet(5, SECONDS);
        } catch(ElasticSearchTimeoutException e) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661908/fstmerge_var1_1679283303352208482
            final String hosts = node.settings().get("discovery.zen.ping.unicast.hosts");
            final Iterable<String> hostList = Splitter.on(',').split(hosts);

            // if no elasticsearch running
            for (String host : hostList) {
                // guess that elasticsearch http is listening on port 9200
                final Iterable<String> hostAndPort = Splitter.on(':').limit(2).split(host);
                final Iterator<String> it = hostAndPort.iterator();
                final String ip = it.next();
                LOG.info("Checking Elasticsearch HTTP API at http://{}:9200/", ip);

                try {
                    // Try the HTTP API endpoint
                    final ListenableFuture<Response> future = httpClient.prepareGet("http://" + ip + ":9200/_nodes").execute();
                    final Response response = future.get();

                    final JsonNode resultTree = new ObjectMapper().readTree(response.getResponseBody());
                    final String clusterName = resultTree.get("cluster_name").textValue();
                    final JsonNode nodesList = resultTree.get("nodes");

                    final Iterator<String> nodes = nodesList.fieldNames();
                    while (nodes.hasNext()) {
                        final String id = nodes.next();
                        final String version = nodesList.get(id).get("version").textValue();
                        if (!Version.CURRENT.toString().equals(version)) {
                            LOG.error("Elasticsearch node is of the wrong version {}, it must be {}! " +
                                              "Please make sure you are running the correct version of ElasticSearch.",
                                      version,
                                      Version.CURRENT.toString());
                        }
                        if (!node.settings().get("cluster.name").equals(clusterName)) {
                            LOG.error("Elasticsearch cluster name is different, Graylog2 uses `{}`, Elasticsearch cluster uses `{}`. " +
                                              "Please check the `cluster.name` setting of both Graylog2 and ElasticSearch.",
                                      node.settings().get("cluster.name"), clusterName);
                        }

                    }
                } catch (IOException ioException) {
                    LOG.error("Could not connect to Elasticsearch.", ioException);
                } catch (InterruptedException ignore) {
                } catch (ExecutionException e1) {
                   // could not find any server on that address
                   LOG.error("Could not connect to Elasticsearch at http://" + ip + ":9200/, is it running?" , e1.getCause());
                }
            }

            UI.exitHardWithWall("Could not successfully connect to ElasticSearch. Check that your cluster state is not RED " +
                                        "and that ElasticSearch is running properly.",
                                new String[]{"graylog2-server/configuring-and-tuning-elasticsearch-for-graylog2-v0200"});
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661908/fstmerge_base_790435497285862369
            UI.exitHardWithWall("No ElasticSearch master was found.", new String[]{ "graylog2-server/configuring-and-tuning-elasticsearch-for-graylog2-v0200" });
=======
            final String hosts = node.settings().get("discovery.zen.ping.unicast.hosts");
            final Iterable<String> hostList = Splitter.on(',').split(hosts);

            // if no elasticsearch running
            for (String host : hostList) {
                // guess that elasticsearch http is listening on port 9200
                final Iterable<String> hostAndPort = Splitter.on(':').limit(2).split(host);
                final Iterator<String> it = hostAndPort.iterator();
                final String ip = it.next();
                LOG.info("Checking Elasticsearch HTTP API at http://{}:9200/", ip);

                try {
                    // Try the HTTP API endpoint
                    final ListenableFuture<Response> future = httpClient.prepareGet("http://" + ip + ":9200/_nodes").execute();
                    final Response response = future.get();

                    final JsonNode resultTree = new ObjectMapper().readTree(response.getResponseBody());
                    final String clusterName = resultTree.get("cluster_name").textValue();
                    final JsonNode nodesList = resultTree.get("nodes");

                    final Iterator<String> nodes = nodesList.fieldNames();
                    while (nodes.hasNext()) {
                        final String id = nodes.next();
                        final String version = nodesList.get(id).get("version").textValue();
                        if (!Version.CURRENT.toString().equals(version)) {
                            LOG.error("Elasticsearch node is of the wrong version {}, it must be {}!",
                                      version,
                                      Version.CURRENT.toString());
                        }
                        if (!node.settings().get("cluster.name").equals(clusterName)) {
                            LOG.error("Elasticsearch cluster name is different, Graylog2 uses `{}`, Elasticsearch cluster uses `{}`",
                                      node.settings().get("cluster.name"), clusterName);
                        }

                    }
                } catch (IOException ioException) {
                    LOG.error("Could not connect to Elasticsearch.", ioException);
                } catch (InterruptedException ignore) {
                } catch (ExecutionException e1) {
                   // could not find any server on that address
                   LOG.error("Could not connect to Elasticsearch at http://" + ip + ":9200/, is it running?" , e1.getCause());
                }
            }

            UI.exitHardWithWall("No ElasticSearch master was found.",
                                new String[]{"graylog2-server/configuring-and-tuning-elasticsearch-for-graylog2-v0200"});

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661908/fstmerge_var2_8514513474384960613
        }

        searches = searchesFactory.create(client);
        counts = countsFactory.create(client);
        messages = new Messages(client);
        cluster = clusterFactory.create(client);
        indices = indicesFactory.create(client);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1/graylog2-server/src/main/java/org/graylog2/indexer/Indexer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661966/fstmerge_var1_8826950740185752188
public Indexer(Core graylogServer) {
        this.server = graylogServer;
        this.deadLetterQueue = new LinkedBlockingQueue<List<DeadLetter>>(1000);
        AsyncHttpClientConfig.Builder builder = new AsyncHttpClientConfig.Builder();
        builder.setAllowPoolingConnection(false);
        this.httpClient = new AsyncHttpClient(builder.build());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661966/fstmerge_base_7775815400665597017
public Indexer(Core graylogServer) {
        this.server = graylogServer;

        this.deadLetterQueue = new LinkedBlockingQueue<List<DeadLetter>>(1000);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491661966/fstmerge_var2_5467401184231063408

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1/graylog2-server/src/main/java/org/graylog2/indexer/Indexer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491662657/fstmerge_var1_7408450512034881342
private SearchRequestBuilder standardSearchRequest(String query,
                                                       Set<String> indices,
                                                       int limit,
                                                       int offset,
                                                       TimeRange range,
                                                       Sorting sort) throws IndexHelper.InvalidRangeFormatException {
        return standardSearchRequest(query, indices, limit, offset, range, sort, true);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491662657/fstmerge_base_6012931295622608510
private SearchRequestBuilder standardSearchRequest(String query, Set<String> indices, int limit, int offset, TimeRange range, Sorting sort) throws IndexHelper.InvalidRangeFormatException {
        if (query == null || query.trim().isEmpty()) {
            query = "*";
        }

        SearchRequestBuilder srb = c.prepareSearch();
        srb.setIndices(indices.toArray(new String[]{}));

        if (query.trim().equals("*")) {
            srb.setQuery(matchAllQuery());
        } else {
            QueryStringQueryBuilder qs = queryString(query);
            qs.allowLeadingWildcard(server.getConfiguration().isAllowLeadingWildcardSearches());
            srb.setQuery(qs);
        }

        srb.setFrom(offset);

        if (limit > 0) {
            srb.setSize(limit);
        }

        if (range != null) {
            srb.setFilter(IndexHelper.getTimestampRangeFilter(range));
        }

        if (sort != null) {
            srb.addSort(sort.getField(), sort.asElastic());
        }

        if (server.getConfiguration().isAllowHighlighting()) {
            srb.setHighlighterRequireFieldMatch(false);
            srb.addHighlightedField("*", 0, 0);
        }

        return srb;
=======
private SearchRequestBuilder standardSearchRequest(String query, Set<String> indices, int limit, int offset, TimeRange range, Sorting sort) throws IndexHelper.InvalidRangeFormatException {
        if (query == null || query.trim().isEmpty()) {
            query = "*";
        }

        SearchRequestBuilder srb = c.prepareSearch();
        srb.setIndices(indices.toArray(new String[]{}));

        if (query.trim().equals("*")) {
            srb.setQuery(matchAllQuery());
        } else {
            QueryStringQueryBuilder qs = queryString(query);
            qs.allowLeadingWildcard(configuration.isAllowLeadingWildcardSearches());
            srb.setQuery(qs);
        }

        srb.setFrom(offset);

        if (limit > 0) {
            srb.setSize(limit);
        }

        if (range != null) {
            srb.setFilter(IndexHelper.getTimestampRangeFilter(range));
        }

        if (sort != null) {
            srb.addSort(sort.getField(), sort.asElastic());
        }

        if (configuration.isAllowHighlighting()) {
            srb.setHighlighterRequireFieldMatch(false);
            srb.addHighlightedField("*", 0, 0);
        }

        return srb;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491662657/fstmerge_var2_8680850770989660484
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1/graylog2-server/src/main/java/org/graylog2/indexer/searches/Searches.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void run() {
        final boolean isMaster = serverStatus.hasCapability(ServerStatus.Capability.MASTER);
        try {
            Node node = nodeService.byNodeId(serverStatus.getNodeId());
            nodeService.markAsAlive(node, isMaster, configuration.getRestTransportUri());
        } catch (NodeNotFoundException e) {
            LOG.warn("Did not find meta info of this node. Re-registering.");
            nodeService.registerServer(serverStatus.getNodeId().toString(), isMaster, configuration.getRestTransportUri());
        }
        try {
            // Remove old nodes that are no longer running. (Just some housekeeping)
            nodeService.dropOutdated();

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491663078/fstmerge_var1_2679042551860453620
            final ActivityWriter activityWriter = core.getActivityWriter();
            try {
                // Check that we still have a master node in the cluster, if not, warn the user.
                if (Node.thisNode(core).isAnyMasterPresent()) {
                    boolean removedNotification = Notification.build(core)
                            .addType(Notification.Type.NO_MASTER)
                            .fixed();
                    if (removedNotification) {
                        activityWriter.write(
                            new Activity("Notification condition [" + Notification.Type.NO_MASTER + "] " +
                                                 "has been fixed.", NodePingThread.class));
                    }
                } else {
                    Notification.buildNow(core)
                            .addThisNode()
                            .addType(Notification.Type.NO_MASTER)
                            .addSeverity(Notification.Severity.URGENT)
                            .publishIfFirst();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491663078/fstmerge_base_5799250831960371534
            final ActivityWriter activityWriter = core.getActivityWriter();
            try {
                // Check that we still have a master node in the cluster, if not, warn the user.
                if (Node.thisNode(core).isAnyMasterPresent()) {
                    boolean removedNotification = Notification.build(core)
                            .addType(Notification.Type.NO_MASTER)
                            .fixed();
                    if (removedNotification) {
                        activityWriter.write(
                            new Activity("Notification condition [" + Notification.Type.NO_MASTER + "] " +
                                                 "has been fixed.", NodePingThread.class));
                    }
                } else {
                    Notification.buildNow(core)
                            .addThisNode()
                            .addType(Notification.Type.NO_MASTER)
                            .addSeverity(Notification.Severity.URGENT)
                            .publishIfFirst();
                    activityWriter.write(
                            new Activity(
                                    "No graylog2 master node available. Check the configuration for is_master=true " +
                                            "on at least one node.",
                                    NodePingThread.class));
=======
            // Check that we still have a master node in the cluster, if not, warn the user.
            if (nodeService.isAnyMasterPresent()) {
                Notification notification = notificationService.build()
                        .addType(Notification.Type.NO_MASTER);
                boolean removedNotification = notificationService.fixed(notification);
                if (removedNotification) {
                    activityWriter.write(
                        new Activity("Notification condition [" + NotificationImpl.Type.NO_MASTER + "] " +
                                             "has been fixed.", NodePingThread.class));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491663078/fstmerge_var2_5996731920449874152
                }
            } else {
                Notification notification = notificationService.buildNow()
                        .addNode(serverStatus.getNodeId().toString())
                        .addType(Notification.Type.NO_MASTER)
                        .addSeverity(Notification.Severity.URGENT);
                notificationService.publishIfFirst(notification);
                activityWriter.write(
                        new Activity(
                                "No graylog2 master node available. Check the configuration for is_master=true " +
                                        "on at least one node.",
                                NodePingThread.class));
            }

        } catch (Exception e) {
            LOG.warn("Caught exception during node ping.", e);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1/graylog2-server/src/main/java/org/graylog2/periodical/NodePingThread.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491666573/fstmerge_var1_533707982465588421
public GELFHttpHandler(InputHost server, MessageInput sourceInput) {
        this.gelfProcessor = new GELFProcessor(server);

        this.sourceInput = sourceInput;

        this.receivedMessages = server.metrics().meter(name(GELFHttpHandler.class, "receivedMessages"));
        this.gelfMessages = server.metrics().meter(name(GELFHttpHandler.class, "gelfMessages"));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491666573/fstmerge_base_1759358706411374488
public GELFHttpHandler(InputHost server, MessageInput sourceInput) {
        this.server = server;
        this.gelfProcessor = new GELFProcessor(server);

        this.sourceInput = sourceInput;

        this.receivedMessages = server.metrics().meter(name(GELFHttpHandler.class, "receivedMessages"));
        this.gelfMessages = server.metrics().meter(name(GELFHttpHandler.class, "gelfMessages"));
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491666573/fstmerge_var2_6997474947113271612

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_50074_52fa1/rev_50074-52fa1/graylog2-inputs/src/main/java/org/graylog2/inputs/gelf/http/GELFHttpHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final Version VERSION = v0_20_2_RC_1; ##FSTMerge## public static final Version VERSION = v0_20_2_SNAPSHOT; ##FSTMerge## public static final Version VERSION = v0_21_0_SNAPSHOT;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8/graylog2-server/src/main/java/org/graylog2/ServerVersion.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final Logger LOG = LoggerFactory.getLogger(RawTCPInput.class); ##FSTMerge## private static final Logger LOG = LoggerFactory.getLogger(RawUDPInput.class); ##FSTMerge## private final Logger LOG = LoggerFactory.getLogger(this.getClass());
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8/graylog2-inputs/src/main/java/org/graylog2/inputs/raw/tcp/RawTCPInput.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491722121/fstmerge_var1_8336712458445606663
@Override
    public void launch() throws MisfireException {
        setupMetrics();

        consumer = new Consumer(
                configuration.getString(CK_HOSTNAME),
                (int) configuration.getInt(CK_PORT),
                configuration.getString(CK_VHOST),
                configuration.getString(CK_USERNAME),
                configuration.getString(CK_PASSWORD),
                (int) configuration.getInt(CK_PREFETCH),
                configuration.getString(CK_QUEUE),
                configuration.getString(CK_EXCHANGE),
                configuration.getString(CK_ROUTING_KEY),
                graylogServer,
                this
        );

        try {
            consumer.run();
        } catch(IOException e) {
            throw new MisfireException("Could not launch AMQP consumer.", e);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491722121/fstmerge_base_472114629155463865
@Override
    public void launch() throws MisfireException {
        setupMetrics();

        consumer = new Consumer(
                configuration.getString(CK_HOSTNAME),
                (int) configuration.getInt(CK_PORT),
                configuration.getString(CK_USERNAME),
                configuration.getString(CK_PASSWORD),
                (int) configuration.getInt(CK_PREFETCH),
                configuration.getString(CK_QUEUE),
                configuration.getString(CK_EXCHANGE),
                configuration.getString(CK_ROUTING_KEY),
                graylogServer,
                this
        );

        try {
            consumer.run();
        } catch(IOException e) {
            throw new MisfireException("Could not launch AMQP consumer.", e);
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491722121/fstmerge_var2_696614803792970081

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8/graylog2-inputs/src/main/java/org/graylog2/inputs/amqp/AMQPInput.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final Version VERSION = v0_20_2_RC_1; ##FSTMerge## public static final Version VERSION = v0_20_2_SNAPSHOT; ##FSTMerge## public static final Version VERSION = v0_21_0_SNAPSHOT;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8/graylog2-radio/src/main/java/org/graylog2/radio/RadioVersion.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491724224/fstmerge_var1_8164020817753445516
public AMQPProducer(Radio radio) {
        sender = new AMQPSender(
                radio.getConfiguration().getAmqpHostname(),
                radio.getConfiguration().getAmqpPort(),
                radio.getConfiguration().getAmqpVirtualHost(),
                radio.getConfiguration().getAmqpUsername(),
                radio.getConfiguration().getAmqpPassword()
        );
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491724224/fstmerge_base_3560524746947783446
public AMQPProducer(Radio radio) {
        sender = new AMQPSender(
                radio.getConfiguration().getAmqpHostname(),
                radio.getConfiguration().getAmqpPort(),
                radio.getConfiguration().getAmqpUsername(),
                radio.getConfiguration().getAmqpPassword(),
                radio.getConfiguration().getAmqpPrefetchCount()
        );
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491724224/fstmerge_var2_5647950939485341460

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_96c2b_d9af8/rev_96c2b-d9af8/graylog2-radio/src/main/java/org/graylog2/radio/transports/amqp/AMQPProducer.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_62072_d4ec7/rev_62072-d4ec7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f1c64_726cc/rev_f1c64-726cc.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789648/fstmerge_var1_7147946013539867986
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789648/fstmerge_base_3033195219479604173
@Override
    public void onEvent(MessageEvent event, long sequence, boolean endOfBatch) throws Exception {
        // Because Trisha said so. (http://code.google.com/p/disruptor/wiki/FrequentlyAskedQuestions)
        if ((sequence % numberOfConsumers) != ordinal) {
            return;
        }

        outputBufferWatermark.decrementAndGet();
        incomingMessages.mark();

        Message msg = event.getMessage();
        LOG.debug("Processing message <{}> from OutputBuffer.", msg.getId());

        buffer.add(msg);

        if (endOfBatch || buffer.size() >= configuration.getOutputBatchSize()) {

            final CountDownLatch doneSignal = new CountDownLatch(outputRegistry.count());
            for (final MessageOutput output : outputRegistry.get()) {
                final String typeClass = output.getClass().getCanonicalName();

                try {
                    // We must copy the buffer for this output, because it may be cleared before all messages are handled.
                    final List<Message> myBuffer = Lists.newArrayList(buffer);

                    LOG.debug("Writing message batch to [{}]. Size <{}>", output.getName(), buffer.size());
                    if (LOG.isTraceEnabled()) {
                        final List<String> sortedIds = Ordering.natural().sortedCopy(Lists.transform(myBuffer, Message.ID_FUNCTION));
                        LOG.trace("Message ids in batch of [{}]: <{}>", output.getName(), Joiner.on(", ").join(sortedIds));
                    }
                    batchSize.update(buffer.size());

                    executor.submit(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                output.write(
                                        OutputRouter.getMessagesForOutput(myBuffer, typeClass),
                                        buildStreamConfigs(myBuffer, typeClass)
                                );
                            } catch (Exception e) {
                                LOG.error("Error in output [" + output.getName() +"].", e);
                            } finally {
                                doneSignal.countDown();
                            }
                        }
                    });

                } catch (Exception e) {
                    LOG.error("Could not write message batch to output [" + output.getName() +"].", e);
                    doneSignal.countDown();
                }
            }
            
            // Wait until all writer threads have finished or timeout is reached.
            if (!doneSignal.await(10, TimeUnit.SECONDS)) {
                LOG.warn("Timeout reached. Not waiting any longer for writer threads to complete.");
            }

            int messagesWritten = buffer.size();

            if (serverStatus.hasCapability(ServerStatus.Capability.STATSMODE)) {
                throughputStats.getBenchmarkCounter().add(messagesWritten);
            }

            throughputStats.getThroughputCounter().add(messagesWritten);
            
            buffer.clear();
        }

        LOG.debug("Wrote message <{}> to all outputs. Finished handling.", msg.getId());
    }
=======
@Override
    public void onEvent(MessageEvent event, long sequence, boolean endOfBatch) throws Exception {
        // Because Trisha said so. (http://code.google.com/p/disruptor/wiki/FrequentlyAskedQuestions)
        if ((sequence % numberOfConsumers) != ordinal) {
            return;
        }

        outputBufferWatermark.decrementAndGet();
        incomingMessages.mark();

        Message msg = event.getMessage();
        LOG.debug("Processing message <{}> from OutputBuffer.", msg.getId());

        buffer.add(msg);

        if (endOfBatch || buffer.size() >= configuration.getOutputBatchSize()) {

            final CountDownLatch doneSignal = new CountDownLatch(outputRegistry.count());
            for (final MessageOutput output : outputRegistry.get()) {
                final String typeClass = output.getClass().getCanonicalName();

                try {
                    // We must copy the buffer for this output, because it may be cleared before all messages are handled.
                    final List<Message> myBuffer = Lists.newArrayList(buffer);

                    LOG.debug("Writing message batch to [{}]. Size <{}>", output.getName(), buffer.size());
                    if (LOG.isTraceEnabled()) {
                        final List<String> sortedIds = Ordering.natural().sortedCopy(Lists.transform(myBuffer, Message.ID_FUNCTION));
                        LOG.trace("Message ids in batch of [{}]: <{}>", output.getName(), Joiner.on(", ").join(sortedIds));
                    }
                    batchSize.update(buffer.size());

                    executor.submit(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                output.write(
                                        OutputRouter.getMessagesForOutput(myBuffer, typeClass),
                                        buildStreamConfigs(myBuffer, typeClass)
                                );
                            } catch (Exception e) {
                                LOG.error("Error in output [" + output.getName() +"].", e);
                            } finally {
                                doneSignal.countDown();
                            }
                        }
                    });
                } catch (Exception e) {
                    LOG.error("Could not write message batch to output [" + output.getName() +"].", e);
                    doneSignal.countDown();
                }
            }

            // Wait until all writer threads have finished or timeout is reached.
            if (!doneSignal.await(10, TimeUnit.SECONDS)) {
                LOG.warn("Timeout reached. Not waiting any longer for writer threads to complete.");
            }

            int messagesWritten = buffer.size();

            if (serverStatus.hasCapability(ServerStatus.Capability.STATSMODE)) {
                throughputStats.getBenchmarkCounter().add(messagesWritten);
            }

            throughputStats.getThroughputCounter().add(messagesWritten);
            
            buffer.clear();
        }

        LOG.debug("Wrote message <{}> to all outputs. Finished handling.", msg.getId());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789648/fstmerge_var2_7099712976332349146

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f1c64_726cc/rev_f1c64-726cc/graylog2-server/src/main/java/org/graylog2/buffers/processors/OutputBufferProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789654/fstmerge_var1_7107511232989082611
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789654/fstmerge_base_468854573322615090
private OutputStreamConfiguration buildStreamConfigs(List<Message> messages, String className) {
        OutputStreamConfiguration configs = new OutputStreamConfigurationImpl();
        Map<ObjectId, Stream> distinctStreams = Maps.newHashMap();
        
        for (Message message : messages) {
            for (Stream stream : message.getStreams()) {
                distinctStreams.put(new ObjectId(stream.getId()), stream);
            }
        }
        
        for (Map.Entry<ObjectId, Stream> e : distinctStreams.entrySet()) {
            StreamImpl stream = (StreamImpl) e.getValue();
            configs.add(e.getKey(), stream.getOutputConfigurations(className));
        }
        
        return configs;
    }
=======
private OutputStreamConfiguration buildStreamConfigs(List<Message> messages, String className) {
        OutputStreamConfiguration configs = new OutputStreamConfigurationImpl();
        Map<ObjectId, Stream> distinctStreams = Maps.newHashMap();

        for (Message message : messages) {
            for (Stream stream : message.getStreams()) {
                distinctStreams.put(new ObjectId(stream.getId()), stream);
            }
        }

        for (Map.Entry<ObjectId, Stream> e : distinctStreams.entrySet()) {
            StreamImpl stream = (StreamImpl) e.getValue();
            configs.add(e.getKey(), stream.getOutputConfigurations(className));
        }

        return configs;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415491789654/fstmerge_var2_7245658449914481474

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_f1c64_726cc/rev_f1c64-726cc/graylog2-server/src/main/java/org/graylog2/buffers/processors/OutputBufferProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_45a81_5c3c9/rev_45a81-5c3c9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fb658_3a7ba/rev_fb658-3a7ba.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_85304_638b6/rev_85304-638b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_bc1a6_50b6e/rev_bc1a6-50b6e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8cac3_bfaa9/rev_8cac3-bfaa9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_03313_538a8/rev_03313-538a8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8cf14_110ad/rev_8cf14-110ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4a615_9ea7e/rev_4a615-9ea7e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_47bb7_6a1c2/rev_47bb7-6a1c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_85d4c_6e152/rev_85d4c-6e152.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_92292_af162/rev_92292-af162.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_88769_2af50/rev_88769-2af50.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_93a30_b4f45/rev_93a30-b4f45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ee59c_2361c/rev_ee59c-2361c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8b26a_1491d/rev_8b26a-1491d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_22974_3a70d/rev_22974-3a70d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_419c8_3d494/rev_419c8-3d494.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3a71d_39876/rev_3a71d-39876.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_72ee7_f1730/rev_72ee7-f1730.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_4905b_b48cc/rev_4905b-b48cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ef00b_e6c8c/rev_ef00b-e6c8c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c4d13_c4017/rev_c4d13-c4017.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492956745/fstmerge_var1_6402355039295970699
@Override
    public MessageInput getMessageInput(Input io) throws NoSuchInputTypeException {
        MessageInput input = buildMessageInput(io);
        input.initialize(new Configuration(io.getConfiguration()));

        return input;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492956745/fstmerge_base_3038967212140446877
public MessageInput getMessageInput(Input io) throws NoSuchInputTypeException {
        MessageInput input = messageInputFactory.create(io.getType());

        // Add all standard fields.
        input.setTitle(io.getTitle());
        input.setCreatorUserId(io.getCreatorUserId());
        input.setPersistId(io.getId());
        input.setCreatedAt(io.getCreatedAt());
        if (io.isGlobal())
            input.setGlobal(true);

        // Add extractors.
        for (Extractor extractor : this.getExtractors(io)) {
            input.addExtractor(extractor.getId(), extractor);
        }

        // Add static fields.
        for (Map.Entry<String, String> field : io.getStaticFields().entrySet()) {
            input.addStaticField(field.getKey(), field.getValue());
        }

        input.initialize(new Configuration(io.getConfiguration()));

        return input;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492956745/fstmerge_var2_7653712409187578928

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c4d13_c4017/rev_c4d13-c4017/graylog2-server/src/main/java/org/graylog2/inputs/InputServiceImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
private void bindSingletons() {
        bind(Configuration.class).toInstance(configuration);
        bind(BaseConfiguration.class).toInstance(configuration);

        Multibinder<ServerStatus.Capability> capabilityBinder =
                Multibinder.newSetBinder(binder(), ServerStatus.Capability.class);
        capabilityBinder.addBinding().toInstance(ServerStatus.Capability.RADIO);

        bind(ServerStatus.class).in(Scopes.SINGLETON);
        bind(InputRegistry.class).toProvider(RadioInputRegistryProvider.class);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492967936/fstmerge_var1_2639473532269880045
        bind(InputCache.class).to(BasicCache.class).in(Scopes.SINGLETON);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492967936/fstmerge_base_8943322395868771050
=======

        bind(URI.class).annotatedWith(Names.named("ServerUri")).toInstance(configuration.getGraylog2ServerUri());
        bind(URI.class).annotatedWith(Names.named("OurRadioUri")).toInstance(configuration.getRestTransportUri());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415492967936/fstmerge_var2_7380173749739146342
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_c4d13_c4017/rev_c4d13-c4017/graylog2-radio/src/main/java/org/graylog2/radio/bindings/RadioBindings.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3b934_2966e/rev_3b934-2966e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9772a_c6246/rev_9772a-c6246.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1f97a_af868/rev_1f97a-af868.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_fffcf_d0b0b/rev_fffcf-d0b0b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a7b0b_5a7be/rev_a7b0b-5a7be.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_35ab3_7e4da/rev_35ab3-7e4da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_486d4_7f03b/rev_486d4-7f03b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_efc06_300ae/rev_efc06-300ae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_70029_a3e2c/rev_70029-a3e2c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_95bbc_17a38/rev_95bbc-17a38.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_56c05_86427/rev_56c05-86427.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_47517_086d6/rev_47517-086d6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_93643_24048/rev_93643-24048.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_1644c_7ad0f/rev_1644c-7ad0f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8f366_f5131/rev_8f366-f5131.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a18d5_b9328/rev_a18d5-b9328.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7bd5d_cd7e6/rev_7bd5d-cd7e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_e1075_96ebf/rev_e1075-96ebf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_7d72d_07bd4/rev_7d72d-07bd4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_627e4_90351/rev_627e4-90351.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8d6ce_fd92e/rev_8d6ce-fd92e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a6e32_70420/rev_a6e32-70420.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9a0f9_be518/rev_9a0f9-be518.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_dc96e_7cd13/rev_dc96e-7cd13.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_53b31_ce122/rev_53b31-ce122.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_2cdad_edcf3/rev_2cdad-edcf3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_a1720_f9616/rev_a1720-f9616.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_bdceb_118a0/rev_bdceb-118a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_43b9c_b52d7/rev_43b9c-b52d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_200de_6103a/rev_200de-6103a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_200de_b9898/rev_200de-b9898.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9bc5c_37439/rev_9bc5c-37439.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_61ec8_ebf29/rev_61ec8-ebf29.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_63b04_55a02/rev_63b04-55a02.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ebee9_2ac31/rev_ebee9-2ac31.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083598/fstmerge_var1_4757698462562324347
public static DashboardWidget fromRequest(MetricRegistry metricRegistry, Indexer indexer, AddWidgetRequest awr) throws NoSuchWidgetTypeException, InvalidRangeParametersException, InvalidWidgetConfigurationException {
        Type type;
        try {
            type = Type.valueOf(awr.type.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new NoSuchWidgetTypeException("No such widget type <" + awr.type + ">");
        }

        String id = UUID.randomUUID().toString();

        // Build timerange.
        TimeRange timeRange;

        if (!awr.config.containsKey("range_type")) {
            throw new InvalidRangeParametersException("range_type not set");
        }

        String rangeType = (String) awr.config.get("range_type");
        if (rangeType.equals("relative")) {
            timeRange = new RelativeRange(Integer.parseInt((String) awr.config.get("range")));
        } else if (rangeType.equals("keyword")) {
            timeRange = new KeywordRange((String) awr.config.get("keyword"));
        } else if (rangeType.equals("absolute")) {
            timeRange = new AbsoluteRange((String) awr.config.get("from"), (String) awr.config.get("to"));
        } else {
            throw new InvalidRangeParametersException("range_type not recognized");
        }

        return buildDashboardWidget(type, metricRegistry, indexer, id, awr.description, 0, awr.config,
                (String) awr.config.get("query"), timeRange, awr.creatorUserId);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083598/fstmerge_base_4667289843496988038
public static DashboardWidget fromRequest(MetricRegistry metricRegistry, Indexer indexer, AddWidgetRequest awr) throws NoSuchWidgetTypeException, InvalidRangeParametersException, InvalidWidgetConfigurationException {
        Type type;
        try {
            type = Type.valueOf(awr.type.toUpperCase());
        } catch(IllegalArgumentException e) {
            throw new NoSuchWidgetTypeException("No such widget type <" + awr.type + ">");
        }

        String id = UUID.randomUUID().toString();

        // Build timerange.
        TimeRange timeRange;

        if (!awr.config.containsKey("range_type")) {
            throw new InvalidRangeParametersException("range_type not set");
        }

        String rangeType = (String) awr.config.get("range_type");

        if (rangeType.equals("relative")) {
            timeRange = new RelativeRange(Integer.parseInt((String) awr.config.get("range")));
        } else if(rangeType.equals("keyword")) {
            timeRange = new KeywordRange((String) awr.config.get("keyword"));
        } else if(rangeType.equals("absolute")) {
            timeRange = new AbsoluteRange((String) awr.config.get("from"), (String) awr.config.get("to"));
        } else {
            throw new InvalidRangeParametersException("range_type not recognized");
        }

        switch (type) {
            case SEARCH_RESULT_COUNT:
                return new SearchResultCountWidget(metricRegistry, indexer, id, awr.description, 0, awr.config, (String) awr.config.get("query"), timeRange, awr.creatorUserId);
            case STREAM_SEARCH_RESULT_COUNT:
                return new StreamSearchResultCountWidget(metricRegistry, indexer, id, awr.description, 0, awr.config, (String) awr.config.get("query"), timeRange, awr.creatorUserId);
            case FIELD_CHART:
                return new FieldChartWidget(metricRegistry, indexer, id, awr.description, 0, awr.config, (String) awr.config.get("query"), timeRange, awr.creatorUserId);
            case QUICKVALUES:
                return new QuickvaluesWidget(metricRegistry, indexer, id, awr.description, 0, awr.config, (String) awr.config.get("query"), timeRange, awr.creatorUserId);
            case SEARCH_RESULT_CHART:
                return new SearchResultChartWidget(metricRegistry, indexer, id, awr.description, 0, awr.config, (String) awr.config.get("query"), timeRange, awr.creatorUserId);
            default:
                throw new NoSuchWidgetTypeException();
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083598/fstmerge_var2_5345418440414576326

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ebee9_2ac31/rev_ebee9-2ac31/graylog2-server/src/main/java/org/graylog2/dashboards/widgets/DashboardWidget.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083603/fstmerge_var1_2913870636904855645
public static DashboardWidget fromPersisted(MetricRegistry metricRegistry, Indexer indexer, BasicDBObject fields) throws NoSuchWidgetTypeException, InvalidRangeParametersException, InvalidWidgetConfigurationException {
        Type type;
        try {
            type = Type.valueOf(((String) fields.get("type")).toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new NoSuchWidgetTypeException();
        }

        BasicDBObject config = (BasicDBObject) fields.get("config");

        // Build timerange.
        BasicDBObject timerangeConfig = (BasicDBObject) config.get("timerange");
        TimeRange timeRange;

        if (!timerangeConfig.containsField("type")) {
            throw new InvalidRangeParametersException("range type not set");
        }

        String rangeType = (String) timerangeConfig.get("type");

        if (rangeType.equals("relative")) {
            timeRange = new RelativeRange((Integer) timerangeConfig.get("range"));
        } else if (rangeType.equals("keyword")) {
            timeRange = new KeywordRange((String) timerangeConfig.get("keyword"));
        } else if (rangeType.equals("absolute")) {

            String from = new DateTime(timerangeConfig.get("from")).toString(Tools.ES_DATE_FORMAT);
            String to = new DateTime(timerangeConfig.get("to")).toString(Tools.ES_DATE_FORMAT);

            timeRange = new AbsoluteRange(from, to);
        } else {
            throw new InvalidRangeParametersException("range_type not recognized");
        }

        // Is a description set?
        String description = null;
        if (fields.containsField("description")) {
            description = (String) fields.get("description");
        }

        // Do we have a configured cache time?
        int cacheTime = 0;
        if (fields.containsField("cache_time")) {
            cacheTime = (Integer) fields.get("cache_time");
        }

        return buildDashboardWidget(type, metricRegistry, indexer, (String) fields.get("id"), description, cacheTime,
                config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083603/fstmerge_base_8507921838838002795
public static DashboardWidget fromPersisted(MetricRegistry metricRegistry, Indexer indexer, BasicDBObject fields) throws NoSuchWidgetTypeException, InvalidRangeParametersException, InvalidWidgetConfigurationException {
        Type type;
        try {
            type = Type.valueOf(((String) fields.get("type")).toUpperCase());
        } catch(IllegalArgumentException e) {
            throw new NoSuchWidgetTypeException();
        }

        BasicDBObject config = (BasicDBObject) fields.get("config");

        // Build timerange.
        BasicDBObject timerangeConfig = (BasicDBObject) config.get("timerange");
        TimeRange timeRange;

        if (!timerangeConfig.containsField("type")) {
            throw new InvalidRangeParametersException("range type not set");
        }

        String rangeType = (String) timerangeConfig.get("type");

        if (rangeType.equals("relative")) {
            timeRange = new RelativeRange((Integer) timerangeConfig.get("range"));
        } else if(rangeType.equals("keyword")) {
            timeRange = new KeywordRange((String) timerangeConfig.get("keyword"));
        } else if(rangeType.equals("absolute")) {

            String from = new DateTime(timerangeConfig.get("from")).toString(Tools.ES_DATE_FORMAT);
            String to = new DateTime(timerangeConfig.get("to")).toString(Tools.ES_DATE_FORMAT);

            timeRange = new AbsoluteRange(from, to);
        } else {
            throw new InvalidRangeParametersException("range_type not recognized");
        }

        // Is a description set?
        String description = null;
        if (fields.containsField("description")) {
            description = (String) fields.get("description");
        }

        // Do we have a configured cache time?
        int cacheTime = 0;
        if (fields.containsField("cache_time")) {
            cacheTime = (Integer) fields.get("cache_time");
        }

        // XXX TODO: these long constructors suck and 90% of it can be unified in a step before
        switch (type) {
            case SEARCH_RESULT_COUNT:
                return new SearchResultCountWidget(metricRegistry, indexer, (String) fields.get("id"), description, cacheTime, config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
            case STREAM_SEARCH_RESULT_COUNT:
                return new StreamSearchResultCountWidget(metricRegistry, indexer, (String) fields.get("id"), description, cacheTime, config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
            case FIELD_CHART:
                return new FieldChartWidget(metricRegistry, indexer, (String) fields.get("id"), description, cacheTime, config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
            case QUICKVALUES:
                return new QuickvaluesWidget(metricRegistry, indexer, (String) fields.get("id"), description, cacheTime, config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
            case SEARCH_RESULT_CHART:
                return new SearchResultChartWidget(metricRegistry, indexer, (String) fields.get("id"), description, cacheTime, config, (String) config.get("query"), timeRange, (String) fields.get("creator_user_id"));
            default:
                throw new NoSuchWidgetTypeException();
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495083603/fstmerge_var2_7862090855577455420

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ebee9_2ac31/rev_ebee9-2ac31/graylog2-server/src/main/java/org/graylog2/dashboards/widgets/DashboardWidget.java
Conflict type: LineBasedMCFd
Conflict body: 
public Map<String, Object> asMap() {
        final Map<String, Object> inputMap = Maps.newHashMap();

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495088333/fstmerge_var1_2905490400429901816
        inputMap.put(FIELD_TYPE, this.getClass().getCanonicalName());
        inputMap.put(FIELD_INPUT_ID, this.getId());
        inputMap.put(FIELD_PERSIST_ID, this.getPersistId());
        inputMap.put(FIELD_NAME, this.getName());
        inputMap.put(FIELD_TITLE, this.getTitle());
        inputMap.put(FIELD_CREATOR_USER_ID, this.getCreatorUserId());
        inputMap.put(FIELD_STARTED_AT, Tools.getISO8601String(this.getCreatedAt()));
        inputMap.put(FIELD_ATTRIBUTES, this.getAttributesWithMaskedPasswords());
        inputMap.put(FIELD_STATIC_FIELDS, this.getStaticFields());
        inputMap.put(FIELD_GLOBAL, this.getGlobal());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495088333/fstmerge_base_1011303204082171577
        inputMap.put("type", this.getClass().getCanonicalName());
        inputMap.put("input_id", this.getId());
        inputMap.put("persist_id", this.getPersistId());
        inputMap.put("name", this.getName());
        inputMap.put("title", this.getTitle());
        inputMap.put("creator_user_id", this.getCreatorUserId());
        inputMap.put("started_at", Tools.getISO8601String(this.getCreatedAt()));
        inputMap.put("attributes", this.getAttributesWithMaskedPasswords());
        inputMap.put("static_fields", this.getStaticFields());
        inputMap.put("global", this.getGlobal());
=======
        inputMap.put("type", this.getClass().getCanonicalName());
        inputMap.put("input_id", this.getId());
        inputMap.put("persist_id", this.getPersistId());
        inputMap.put("name", this.getName());
        inputMap.put("title", this.getTitle());
        inputMap.put("creator_user_id", this.getCreatorUserId());
        inputMap.put("created_at", Tools.getISO8601String(this.getCreatedAt()));
        inputMap.put("attributes", this.getAttributesWithMaskedPasswords());
        inputMap.put("static_fields", this.getStaticFields());
        inputMap.put("global", this.getGlobal());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495088333/fstmerge_var2_7080049439037937039

        return inputMap;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_ebee9_2ac31/rev_ebee9-2ac31/graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5bde6_cd913/rev_5bde6-cd913.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ @JsonProperty("used_indices")
    public List<String> usedIndices; ##FSTMerge## @SerializedName("used_indices")
    public List<String> usedIndices; ##FSTMerge## @SerializedName("used_indices")
    public List<IndexRangeSummary> usedIndices;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_5bde6_cd913/rev_5bde6-cd913/src/main/java/org/graylog2/restclient/models/api/responses/SearchResultResponse.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_52931_3cb5b/rev_52931-3cb5b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_3f0da_aed10/rev_3f0da-aed10.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b7af2_d1ba1/rev_b7af2-d1ba1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_18c0c_a1d77/rev_18c0c-a1d77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_b21df_81d07/rev_b21df-81d07.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_9775b_2977f/rev_9775b-2977f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_8a5f4_352bb/rev_8a5f4-352bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_12737_8c5d9/rev_12737-8c5d9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_cf8f4_41af2/rev_cf8f4-41af2.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void cycle() {
        LOG.info("Cycling deflector to next index now.");
        int oldTargetNumber;

        try {
            oldTargetNumber = getNewestTargetNumber();
        } catch (NoTargetIndexException ex) {
            oldTargetNumber = -1;
        }
        final int newTargetNumber = oldTargetNumber + 1;

        final String newTarget = buildIndexName(indexPrefix, newTargetNumber);
        final String oldTarget = buildIndexName(indexPrefix, oldTargetNumber);

        if (oldTargetNumber == -1) {
            LOG.info("Cycling from <none> to <{}>", newTarget);
        } else {
            LOG.info("Cycling from <{}> to <{}>", oldTarget, newTarget);
        }

        // Create new index.
        LOG.info("Creating index target <{}>...", newTarget);
        if (!indices.create(newTarget)) {
            LOG.error("Could not properly create new target <{}>", newTarget);
        }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869295/fstmerge_var1_7744448281800743467
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869295/fstmerge_base_1424824806367153197
        updateIndexRanges();
=======

        if (configuration.isDisableIndexRangeCalculation() && oldTargetNumber != -1) {
            addSingleIndexRanges(oldTarget);
            addSingleIndexRanges(newTarget);
        } else
            updateIndexRanges();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869295/fstmerge_var2_967827522277930190

        LOG.info("Done!");

        // Point deflector to new index.
        LOG.info("Pointing deflector to new target index....");

        final Activity activity = new Activity(Deflector.class);
        if (oldTargetNumber == -1) {
            // Only pointing, not cycling.
            pointTo(newTarget);
            activity.setMessage("Cycled deflector from <none> to <" + newTarget + ">");
        } else {
            // Re-pointing from existing old index to the new one.
            pointTo(newTarget, oldTarget);
            LOG.info("Flushing old index <{}>.", oldTarget);
            indices.flush(oldTarget);

            LOG.info("Setting old index <{}> to read-only.", oldTarget);
            indices.setReadOnly(oldTarget);
            activity.setMessage("Cycled deflector from <" + oldTarget + "> to <" + newTarget + ">");

            if (!configuration.isDisableIndexOptimization()) {
                try {
                    systemJobManager.submit(optimizeIndexJobFactory.create(oldTarget));
                } catch (SystemJobConcurrencyException e) {
                    // The concurrency limit is very high. This should never happen.
                    LOG.error("Cannot optimize index <" + oldTarget + ">.", e);
                }
            }
        }

        updateIndexRanges();

        LOG.info("Done!");

        activityWriter.write(activity);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_cf8f4_41af2/rev_cf8f4-41af2/graylog2-server/src/main/java/org/graylog2/indexer/Deflector.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void execute() {
        List<Map<String, Object>> ranges = Lists.newArrayList();
        info("Re-calculating index ranges.");

        String[] indices = deflector.getAllDeflectorIndexNames();
        if (indices == null || indices.length == 0) {
            info("No indices, nothing to calculate.");
            return;
        }
        indicesToCalculate = indices.length;

        Stopwatch sw = Stopwatch.createStarted();
        for(String index : indices) {
            if (cancelRequested) {
                info("Stop requested. Not calculating next index range, not updating ranges.");
                sw.stop();
                return;
            }

            try {
                ranges.add(calculateRange(index));
            } catch (EmptyIndexException e) {
                LOG.info("Index [{}] is empty, inserting dummy index range.", index);
                Map<String, Object> emptyIndexRange = Maps.newHashMap();
                emptyIndexRange.put("index", index);

                if (deflector.getCurrentActualTargetIndex().equals(index)) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869582/fstmerge_var1_6511411867140976904
                    emptyIndexRange.put("start", Tools.getUTCTimestamp());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869582/fstmerge_base_5404322807735940348
                    LOG.info("Index [{}] is empty but it is the current deflector target. Inserting dummy index range.", index);
                    Map<String, Object> deflectorIndexRange = Maps.newHashMap();
                    deflectorIndexRange.put("index", index);
                    deflectorIndexRange.put("start", Tools.getUTCTimestamp());
                    ranges.add(deflectorIndexRange);
=======
                    LOG.info("Index [{}] is empty but it is the current deflector target. Inserting dummy index range.", index);
                    ranges.add(getDeflectorIndexRange(index));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415495869582/fstmerge_var2_8757592569418848818
                } else {
                    emptyIndexRange.put("start", 0);
                    emptyIndexRange.put("calculated_at", Tools.getUTCTimestamp());
                }

                ranges.add(emptyIndexRange);
            } catch (Exception e) {
                LOG.info("Could not calculate range of index [" + index + "]. Skipping.", e);
            } finally {
                indicesCalculated++;
            }
        }

        // Now that all is calculated we can replace the whole collection at once.
        updateCollection(ranges);

        info("Done calculating index ranges for " + indices.length + " indices. Took " + sw.stop().elapsed(TimeUnit.MILLISECONDS) + "ms.");
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/graylog2-server/revisions/rev_cf8f4_41af2/rev_cf8f4-41af2/graylog2-server/src/main/java/org/graylog2/indexer/ranges/RebuildIndexRangesJob.java

==================================================================================================================