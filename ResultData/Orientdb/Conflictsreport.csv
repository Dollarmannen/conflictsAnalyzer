=========================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2fa6a_0cef7/rev_2fa6a-0cef7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e40cc_e2b3a/rev_e40cc-e2b3a.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_fa899_00a90/rev_fa899-00a90.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_451b0_b3303/rev_451b0-b3303.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_edd69_26e60/rev_edd69-26e60.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413212341210/fstmerge_var1_608351435916384881
  public ODatabasePojoAbstract<Object> commit() {
    try {
      // BY PASS DOCUMENT DB
      ((ODatabaseRecordTx) underlying.getUnderlying()).commit();

      if (getTransaction().getAllRecordEntries() != null) {
        // UPDATE ID & VERSION FOR ALL THE RECORDS
        Object pojo = null;
        for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
          pojo = records2Objects.get(entry.getRecord());

          if (pojo != null)
            switch (entry.type) {
            case ORecordOperation.CREATED:
              rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
              OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

            case ORecordOperation.UPDATED:
              OObjectSerializerHelper.setObjectVersion(entry.getRecord().getVersion(), pojo);
              break;

            case ORecordOperation.DELETED:
              OObjectSerializerHelper.setObjectID(null, pojo);
              OObjectSerializerHelper.setObjectVersion(null, pojo);

              unregisterPojo(pojo, (ODocument) entry.getRecord());
              break;
            }
        }
      }
    } finally {
      getTransaction().close();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413212341210/fstmerge_base_7284420354396629359
	public ODatabasePojoAbstract<Object> commit() {
		try {
			// BY PASS DOCUMENT DB
			((ODatabaseRecordTx) underlying.getUnderlying()).commit();

			if (getTransaction().getAllRecordEntries() != null) {
				// UPDATE ID & VERSION FOR ALL THE RECORDS
				Object pojo = null;
				for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
					pojo = records2Objects.get(entry.getRecord());

					if (pojo != null)
						switch (entry.type) {
						case ORecordOperation.CREATED:
							rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
							OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

						case ORecordOperation.UPDATED:
							OObjectSerializerHelper.setObjectVersion(entry.getRecord().getVersion(), pojo);
							break;

						case ORecordOperation.DELETED:
							OObjectSerializerHelper.setObjectID(null, pojo);
							OObjectSerializerHelper.setObjectVersion(null, pojo);

							unregisterPojo(pojo, (ODocument) entry.getRecord());
							break;
						}
				}
			}
		} finally {
			getTransaction().close();
		}
=======
	public ODatabasePojoAbstract<Object> commit() {
		try {
			// BY PASS DOCUMENT DB
			((ODatabaseRecordTx) underlying.getUnderlying()).commit();

			if (getTransaction().getAllRecordEntries() != null) {
				// UPDATE ID & VERSION FOR ALL THE RECORDS
				Object pojo = null;
				for (ORecordOperation entry : getTransaction().getAllRecordEntries()) {
					pojo = records2Objects.get(entry.getRecord());

					if (pojo != null)
						switch (entry.type) {
						case ORecordOperation.CREATED:
							rid2Records.put(entry.getRecord().getIdentity(), (ODocument) entry.getRecord());
							OObjectSerializerHelper.setObjectID(entry.getRecord().getIdentity(), pojo);

            case ORecordOperation.UPDATED:
              OObjectSerializerHelper.setObjectVersion(entry.getRecord().getRecordVersion().copy(), pojo);
              break;

						case ORecordOperation.DELETED:
							OObjectSerializerHelper.setObjectID(null, pojo);
							OObjectSerializerHelper.setObjectVersion(null, pojo);

							unregisterPojo(pojo, (ODocument) entry.getRecord());
							break;
						}
				}
			}
		} finally {
			getTransaction().close();
		}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413212341210/fstmerge_var2_734570978687938138

    return this;
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_edd69_26e60/rev_edd69-26e60/object/src/main/java/com/orientechnologies/orient/object/db/ODatabaseObjectTx.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413212341226/fstmerge_var1_7363265611740387230
  public int getVersion(final Object iPojo) {
    checkOpeness();
    final ODocument record = getRecordByUserObject(iPojo, false);
    if (record != null)
      return record.getVersion();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413212341226/fstmerge_base_3809602202915568296
	public int getVersion(final Object iPojo) {
		checkOpeness();
		final ODocument record = getRecordByUserObject(iPojo, false);
		if (record != null)
			return record.getVersion();
=======
  public ORecordVersion getVersion(final Object iPojo) {
    checkOpeness();
    final ODocument record = getRecordByUserObject(iPojo, false);
    if (record != null)
      return record.getRecordVersion();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413212341226/fstmerge_var2_7380356646776180490

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413212341226/fstmerge_base_3809602202915568296
		return OObjectSerializerHelper.getObjectVersion(iPojo);
	}
=======
    return OObjectSerializerHelper.getObjectVersion(iPojo);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413212341226/fstmerge_var2_7380356646776180490

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_edd69_26e60/rev_edd69-26e60/object/src/main/java/com/orientechnologies/orient/object/db/ODatabaseObjectTx.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6fdc6_82127/rev_6fdc6-82127.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ac483_e6cd3/rev_ac483-e6cd3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_02110_e18c2/rev_02110-e18c2.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public <RET> RET load(final Object iPojo, final String iFetchPlan, final boolean iIgnoreCache) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413213400003/fstmerge_var1_7940857700562067952
    checkOpeness();
    if (iPojo == null)
      return null;

    // GET THE ASSOCIATED DOCUMENT
    ODocument record = getRecordByUserObject(iPojo, true);
    try {
      record.setInternalStatus(ORecordElement.STATUS.UNMARSHALLING);

      record = underlying.load(record, iFetchPlan, iIgnoreCache);

      return (RET) stream2pojo(record, iPojo, iFetchPlan);
    } finally {
      record.setInternalStatus(ORecordElement.STATUS.LOADED);
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413213400003/fstmerge_base_2294538902829746673
    checkOpeness();
    if (iPojo == null)
      return null;

    // GET THE ASSOCIATED DOCUMENT
    ODocument record = getRecordByUserObject(iPojo, true);
    try {
      record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.UNMARSHALLING);

      record = underlying.load(record, iFetchPlan, iIgnoreCache);

      return (RET) stream2pojo(record, iPojo, iFetchPlan);
    } finally {
      record.setInternalStatus(com.orientechnologies.orient.core.db.record.ORecordElement.STATUS.LOADED);
    }
=======
    return load(iPojo, iFetchPlan, iIgnoreCache, false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413213400003/fstmerge_var2_6656531191360468359
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_02110_e18c2/rev_02110-e18c2/object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTx.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e18c2_d7abc/rev_e18c2-d7abc.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4fd73_e18c2/rev_4fd73-e18c2.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_3a123_37187/rev_3a123-37187.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6bb3c_e7527/rev_6bb3c-e7527.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0fc3c_75f10/rev_0fc3c-75f10.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5057c_0fc3c/rev_5057c-0fc3c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_310d1_afb5f/rev_310d1-afb5f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_fe259_791ec/rev_fe259-791ec.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ab219_9bd78/rev_ab219-9bd78.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9c5ea_35824/rev_9c5ea-35824.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_bd8ff_8a221/rev_bd8ff-8a221.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_13b44_7137f/rev_13b44-7137f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8719e_2017f/rev_8719e-2017f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ef7d7_67834/rev_ef7d7-67834.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d0438_7ab97/rev_d0438-7ab97.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d6e2b_cf01e/rev_d6e2b-cf01e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_50857_e5fc3/rev_50857-e5fc3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_49790_3fe5b/rev_49790-3fe5b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8125b_7d314/rev_8125b-7d314.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0675b_2fd68/rev_0675b-2fd68.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5768f_ce006/rev_5768f-ce006.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_71b84_bef2e/rev_71b84-bef2e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f14f1_68224/rev_f14f1-68224.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0c18a_da38d/rev_0c18a-da38d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_38821_38450/rev_38821-38450.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1d7eb_f2bae/rev_1d7eb-f2bae.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6da72_1ae2e/rev_6da72-1ae2e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ff925_59627/rev_ff925-59627.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_de58c_52c85/rev_de58c-52c85.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d6c4b_f93ac/rev_d6c4b-f93ac.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4e394_ac166/rev_4e394-ac166.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8bef0_f410d/rev_8bef0-f410d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_467d9_53b9b/rev_467d9-53b9b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_fc6ce_9aa96/rev_fc6ce-9aa96.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_35fc9_4504b/rev_35fc9-4504b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ed1da_f16d0/rev_ed1da-f16d0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f5fb0_d615d/rev_f5fb0-d615d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public boolean equals(Object obj) {
    if (obj == null || !(obj instanceof OPhysicalPosition))
      return false;

    final OPhysicalPosition other = (OPhysicalPosition) obj;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413226565875/fstmerge_var1_440101914430970400
    return clusterPosition.equals(other.clusterPosition) && recordType == other.recordType
        && recordVersion.equals(other.recordVersion) && recordSize == other.recordSize;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413226565875/fstmerge_base_473820232402500380
    return clusterPosition == other.clusterPosition && recordType == other.recordType && recordVersion.equals(other.recordVersion)
        && recordSize == other.recordSize;
=======
    return clusterPosition.equals(other.clusterPosition) && recordType == other.recordType && recordVersion.equals(other.recordVersion)
        && recordSize == other.recordSize;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413226565875/fstmerge_var2_6950531069187471943
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_f5fb0_d615d/rev_f5fb0-d615d/core/src/main/java/com/orientechnologies/orient/core/storage/OPhysicalPosition.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9fbfa_f5fb0/rev_9fbfa-f5fb0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e156a_035ad/rev_e156a-035ad.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8dbf0_cac38/rev_8dbf0-cac38.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_71bfb_49e97/rev_71bfb-49e97.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2a96c_18bc2/rev_2a96c-18bc2.revisions

=========================================================
=========================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4cb85_48cce/rev_4cb85-48cce.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_38c28_0bbdf/rev_38c28-0bbdf.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a2a48_3218c/rev_a2a48-3218c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_009dd_ec52f/rev_009dd-ec52f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_faf37_01fa7/rev_faf37-01fa7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_58935_06389/rev_58935-06389.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1c849_25871/rev_1c849-25871.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_217a3_e7874/rev_217a3-e7874.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_374e2_d2e9f/rev_374e2-d2e9f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_253e4_f827c/rev_253e4-f827c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f691d_319b1/rev_f691d-319b1.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f691d_5fd8c/rev_f691d-5fd8c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_30316_a123f/rev_30316-a123f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_23f47_ed97d/rev_23f47-ed97d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_31206_392e0/rev_31206-392e0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_93e8a_26d54/rev_93e8a-26d54.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2a597_3b52d/rev_2a597-3b52d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0639d_e0d5f/rev_0639d-e0d5f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_95ee2_65b44/rev_95ee2-65b44.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_838a1_ca8c3/rev_838a1-ca8c3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_18a98_f0b45/rev_18a98-f0b45.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e52e2_3c656/rev_e52e2-3c656.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0ca9b_52273/rev_0ca9b-52273.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2f3d2_9317f/rev_2f3d2-9317f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_34937_efc0f/rev_34937-efc0f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_29b09_fc3e7/rev_29b09-fc3e7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_55fbb_6a806/rev_55fbb-6a806.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public String getType() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413237928430/fstmerge_var1_740988538179824427
    return type;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413237928430/fstmerge_base_1922324601074690812
    return null; // To change body of implemented methods use File | Settings | File Templates.
=======
    return OClass.INDEX_TYPE.HASH.toString();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413237928430/fstmerge_var2_801246986512126167
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_55fbb_6a806/rev_55fbb-6a806/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OAbstractLocalHashIndex.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413237928559/fstmerge_var1_2237114039443463352
public OAbstractLocalHashIndex() {
    super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean());

    this.maxLevelSize = 1 << maxLevelDepth;
    this.levelMask = Integer.MAX_VALUE >>> (31 - maxLevelDepth);
    entreeSize = OLinkSerializer.RID_SIZE;
    bucketBufferSize = OHashIndexBucket.calculateBufferSize(keySize, entreeSize).getBufferSize();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413237928559/fstmerge_base_798486687353509000
public OAbstractLocalHashIndex() {
    super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean());

    this.maxLevelSize = 1 << maxLevelDepth;
    this.levelMask = Integer.MAX_VALUE >>> (31 - maxLevelDepth);
    entreeSize = OPhysicalPosition.binarySize();
    bucketBufferSize = OHashIndexBucket.calculateBufferSize(keySize, entreeSize).getBufferSize();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413237928559/fstmerge_var2_1018502820616401103

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_55fbb_6a806/rev_55fbb-6a806/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OAbstractLocalHashIndex.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5757f_b3fab/rev_5757f-b3fab.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413238287052/fstmerge_var1_658657647162671088
public OAbstractLocalHashIndex() {
    super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean());

    this.maxLevelSize = 1 << maxLevelDepth;
    this.levelMask = Integer.MAX_VALUE >>> (31 - maxLevelDepth);
    entreeSize = OLinkSerializer.RID_SIZE;
    bucketBufferSize = OHashIndexBucket.calculateBufferSize(maxKeySize, entreeSize).getBufferSize();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413238287052/fstmerge_base_2599538790626774986
public OAbstractLocalHashIndex() {
    super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean());

    this.maxLevelSize = 1 << maxLevelDepth;
    this.levelMask = Integer.MAX_VALUE >>> (31 - maxLevelDepth);
    entreeSize = OLinkSerializer.RID_SIZE;
    bucketBufferSize = OHashIndexBucket.calculateBufferSize(keySize, entreeSize).getBufferSize();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413238287052/fstmerge_var2_4515697143797700898

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_5757f_b3fab/rev_5757f-b3fab/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OAbstractLocalHashIndex.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8aaae_7a4a3/rev_8aaae-7a4a3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_cc00e_697e0/rev_cc00e-697e0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f8ece_24a1d/rev_f8ece-24a1d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_55575_a792e/rev_55575-a792e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_570c1_0c806/rev_570c1-0c806.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2cbbf_09ef6/rev_2cbbf-09ef6.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_23aa2_1927c/rev_23aa2-1927c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c72aa_9999c/rev_c72aa-9999c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241442593/fstmerge_var1_683807255416059850
public void createClassTrigger() {
    final ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.get();
    OClass classTrigger = db.getMetadata().getSchema().getClass(OClassTrigger.CLASSNAME);
    if (classTrigger == null)
      classTrigger = db.getMetadata().getSchema().createAbstractClass(OClassTrigger.CLASSNAME);
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_CREATED)) // before create
      classTrigger.createProperty(OClassTrigger.ONBEFORE_CREATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_CREATED)) // after create
      classTrigger.createProperty(OClassTrigger.ONAFTER_CREATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_READ)) // before read
      classTrigger.createProperty(OClassTrigger.ONBEFORE_READ, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_READ)) // after read
      classTrigger.createProperty(OClassTrigger.ONAFTER_READ, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_UPDATED)) // before update
      classTrigger.createProperty(OClassTrigger.ONBEFORE_UPDATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_UPDATED)) // after update
      classTrigger.createProperty(OClassTrigger.ONAFTER_UPDATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_DELETE)) // before delete
      classTrigger.createProperty(OClassTrigger.ONBEFORE_DELETE, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_DELETE)) // after delete
      classTrigger.createProperty(OClassTrigger.ONAFTER_DELETE, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241442593/fstmerge_base_5490258550547161590
=======
public void createClassTrigger() {
    final ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.get();
	  OClass classTrigger = db.getMetadata().getSchema().getClass(OClassTrigger.CLASSNAME);
	  if(classTrigger == null)
		  classTrigger = db.getMetadata().getSchema().createAbstractClass(OClassTrigger.CLASSNAME);
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_CREATE))     //before create
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_CREATE))    //after create
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_READ))    //before read
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_READ))    //after read
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_UPDATE))    //before update
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_UPDATE))    //after update
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_DELETE))    //before delete
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_DELETE))    //after delete
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  classTrigger.setSuperClass(db.getMetadata().getSchema().getClass(RESTRICTED_CLASSNAME));
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241442593/fstmerge_var2_5429042583920979116

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/metadata/security/OSecurityShared.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public static final String CLASSNAME        = "OTriggered"; ##FSTMerge## ##FSTMerge## public static final String CLASSNAME = "OTriggered";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448596/fstmerge_var1_355685283279595438
public OClassTrigger() {
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448596/fstmerge_base_5807608296796706333
=======
public OClassTrigger() {
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448596/fstmerge_var2_3909217769488446654

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448599/fstmerge_var1_2881155628907789113
@Override
  public RESULT onRecordBeforeCreate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_CREATED);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448599/fstmerge_base_2080208142516675901
=======
@Override
	public RESULT onRecordBeforeCreate(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_BEFORE_CREATE);
		return this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448599/fstmerge_var2_6823548932842956118

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448602/fstmerge_var1_3185864127379178902
@Override
  public void onRecordAfterCreate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_CREATED);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448602/fstmerge_base_1664770938120986449
=======
@Override
	public void onRecordAfterCreate(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_AFTER_CREATE);
		this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448602/fstmerge_var2_7432528816460964428

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448605/fstmerge_var1_3898319388919928967
@Override
  public RESULT onRecordBeforeRead(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_READ);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448605/fstmerge_base_2800274564002798113
=======
@Override
	public RESULT onRecordBeforeRead(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_BEFORE_READ);
		return this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448605/fstmerge_var2_3186666411407269085

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448609/fstmerge_var1_8974617538907473001
@Override
  public void onRecordAfterRead(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_READ);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448609/fstmerge_base_7555699993693982823
=======
@Override
	public void onRecordAfterRead(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_AFTER_READ);
		this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448609/fstmerge_var2_4909955828622478721

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448612/fstmerge_var1_7632512151453710409
@Override
  public RESULT onRecordBeforeUpdate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_UPDATED);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448612/fstmerge_base_832030479541713326
=======
@Override
	public RESULT onRecordBeforeUpdate(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_BEFORE_UPDATE);
		return this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448612/fstmerge_var2_4627868381197994421

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448615/fstmerge_var1_2300818181226311930
@Override
  public void onRecordAfterUpdate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_UPDATED);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448615/fstmerge_base_5184475699496489468
=======
@Override
	public void onRecordAfterUpdate(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_AFTER_UPDATE);
		this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448615/fstmerge_var2_2583438748405863023

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448618/fstmerge_var1_5588345489069842018
@Override
  public RESULT onRecordBeforeDelete(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_DELETE);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448618/fstmerge_base_6621706777622076295
=======
@Override
	public RESULT onRecordBeforeDelete(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_BEFORE_DELETE);
		return this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448618/fstmerge_var2_3296737660419393037

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448621/fstmerge_var1_7690633201736164125
@Override
  public void onRecordAfterDelete(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_DELETE);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448621/fstmerge_base_9133832954467339768
=======
@Override
	public void onRecordAfterDelete(final ODocument iDocument) {
		ODocument funcDoc = iDocument.field(PROP_AFTER_DELETE);
		this.executeFunction(iDocument, funcDoc);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448621/fstmerge_var2_3071397236929512759

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241448624/fstmerge_var1_9014554519003396332
public RESULT onTrigger(final TYPE iType, final ORecord<?> iRecord) {
    if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && ODatabaseRecordThreadLocal.INSTANCE.get().getStatus() != STATUS.OPEN)
      return RESULT.RECORD_NOT_CHANGED;

    if (!(iRecord instanceof ODocument))
      return RESULT.RECORD_NOT_CHANGED;

    final ODocument document = (ODocument) iRecord;
    if (document.getSchemaClass() != null && document.getSchemaClass().isSubClassOf(CLASSNAME))
      return super.onTrigger(iType, iRecord);
    return RESULT.RECORD_NOT_CHANGED;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241448624/fstmerge_base_5471706994579854130
=======
public RESULT onTrigger(final TYPE iType, final ORecord<?> iRecord) {
		if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && ODatabaseRecordThreadLocal.INSTANCE.get().getStatus() != STATUS.OPEN)
			return RESULT.RECORD_NOT_CHANGED;

		if (!(iRecord instanceof ODocument))
			return RESULT.RECORD_NOT_CHANGED;

		final ODocument document = (ODocument) iRecord;
		if(document.getSchemaClass() != null && document.getSchemaClass().isSubClassOf(CLASSNAME))
			return super.onTrigger(iType, iRecord);
		return RESULT.RECORD_NOT_CHANGED;
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241448624/fstmerge_var2_658995450930546132

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
public DHTConfiguration() {
      undistributableClusters = new HashSet<String>();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413241458425/fstmerge_var1_2327890123545293583
      clusters.add(OStorage.CLUSTER_DEFAULT_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_INTERNAL_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_INDEX_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_MANUAL_INDEX_NAME.toLowerCase());
      clusters.add(ORole.CLASS_NAME.toLowerCase());
      clusters.add(OUser.CLASS_NAME.toLowerCase());
      clusters.add(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME.toLowerCase());
      clusters.add(OSecurityShared.RESTRICTED_CLASSNAME.toLowerCase());
      clusters.add(OSecurityShared.IDENTITY_CLASSNAME.toLowerCase());
      clusters.add(OFunction.CLASS_NAME.toLowerCase());
      clusters.add(OClassTrigger.CLASSNAME.toLowerCase());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413241458425/fstmerge_base_7748207806072918343
      clusters.add(OStorage.CLUSTER_DEFAULT_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_INTERNAL_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_INDEX_NAME.toLowerCase());
      clusters.add(OMetadata.CLUSTER_MANUAL_INDEX_NAME.toLowerCase());
      clusters.add(ORole.CLASS_NAME.toLowerCase());
      clusters.add(OUser.CLASS_NAME.toLowerCase());
      clusters.add(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME.toLowerCase());
      clusters.add(OSecurityShared.RESTRICTED_CLASSNAME.toLowerCase());
      clusters.add(OSecurityShared.IDENTITY_CLASSNAME.toLowerCase());
      clusters.add(OFunction.CLASS_NAME.toLowerCase());
=======
      undistributableClusters.add(OStorage.CLUSTER_DEFAULT_NAME.toLowerCase());
      undistributableClusters.add(OMetadata.CLUSTER_INTERNAL_NAME.toLowerCase());
      undistributableClusters.add(OMetadata.CLUSTER_INDEX_NAME.toLowerCase());
      undistributableClusters.add(OMetadata.CLUSTER_MANUAL_INDEX_NAME.toLowerCase());
      undistributableClusters.add(ORole.CLASS_NAME.toLowerCase());
      undistributableClusters.add(OUser.CLASS_NAME.toLowerCase());
      undistributableClusters.add(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME.toLowerCase());
      undistributableClusters.add(OSecurityShared.RESTRICTED_CLASSNAME.toLowerCase());
      undistributableClusters.add(OSecurityShared.IDENTITY_CLASSNAME.toLowerCase());
      undistributableClusters.add(OFunction.CLASS_NAME.toLowerCase());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413241458425/fstmerge_var2_5536504163881097232
    }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_a6236_268de/rev_a6236-268de/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OAutoshardingPlugin.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_00bc0_b6ded/rev_00bc0-b6ded.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_16252_1745d/rev_16252-1745d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e1b2b_0ac7d/rev_e1b2b-0ac7d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void createClassTrigger() {
    final ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.get();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242857117/fstmerge_var1_3361681051951733769
    OClass classTrigger = db.getMetadata().getSchema().getClass(OClassTrigger.CLASSNAME);
    if (classTrigger == null)
      classTrigger = db.getMetadata().getSchema().createAbstractClass(OClassTrigger.CLASSNAME);
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_CREATED)) // before create
      classTrigger.createProperty(OClassTrigger.ONBEFORE_CREATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_CREATED)) // after create
      classTrigger.createProperty(OClassTrigger.ONAFTER_CREATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_READ)) // before read
      classTrigger.createProperty(OClassTrigger.ONBEFORE_READ, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_READ)) // after read
      classTrigger.createProperty(OClassTrigger.ONAFTER_READ, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_UPDATED)) // before update
      classTrigger.createProperty(OClassTrigger.ONBEFORE_UPDATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_UPDATED)) // after update
      classTrigger.createProperty(OClassTrigger.ONAFTER_UPDATED, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONBEFORE_DELETE)) // before delete
      classTrigger.createProperty(OClassTrigger.ONBEFORE_DELETE, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
    if (!classTrigger.existsProperty(OClassTrigger.ONAFTER_DELETE)) // after delete
      classTrigger.createProperty(OClassTrigger.ONAFTER_DELETE, OType.LINK,
          db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242857117/fstmerge_base_239215075125883718
	  OClass classTrigger = db.getMetadata().getSchema().getClass(OClassTrigger.CLASSNAME);
	  if(classTrigger == null)
		  classTrigger = db.getMetadata().getSchema().createAbstractClass(OClassTrigger.CLASSNAME);
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_CREATE))     //before create
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_CREATE))    //after create
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_READ))    //before read
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_READ))    //after read
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_UPDATE))    //before update
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_UPDATE))    //after update
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_DELETE))    //before delete
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_DELETE))    //after delete
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  //classTrigger.setSuperClass(db.getMetadata().getSchema().getClass(RESTRICTED_CLASSNAME));
=======
	  OClass classTrigger = db.getMetadata().getSchema().getClass(OClassTrigger.CLASSNAME);
	  if(classTrigger == null)
		  classTrigger = db.getMetadata().getSchema().createAbstractClass(OClassTrigger.CLASSNAME);
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_CREATE))     //before create
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_CREATE))    //after create
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_CREATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_READ))    //before read
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_READ))    //after read
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_READ, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_UPDATE))    //before update
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_UPDATE))    //after update
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_UPDATE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_BEFORE_DELETE))    //before delete
		  classTrigger.createProperty(OClassTrigger.PROP_BEFORE_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  if(!classTrigger.existsProperty(OClassTrigger.PROP_AFTER_DELETE))    //after delete
		  classTrigger.createProperty(OClassTrigger.PROP_AFTER_DELETE, OType.LINK, db.getMetadata().getSchema().getClass(OFunction.CLASS_NAME));
	  classTrigger.setSuperClass(db.getMetadata().getSchema().getClass(RESTRICTED_CLASSNAME));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242857117/fstmerge_var2_5284451930722800394
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/metadata/security/OSecurityShared.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ONBEFORE_CREATED = "onBeforeCreated"; ##FSTMerge## public static final String ONBEFORE_CREATED    = "onBeforeCreated"; ##FSTMerge## public static final String ONBEFORE_CREATED    = "onBeforeCreate";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ONAFTER_CREATED  = "onAfterCreated"; ##FSTMerge## public static final String ONAFTER_CREATED     = "onAfterCreated"; ##FSTMerge## public static final String ONAFTER_CREATED     = "onAfterCreate";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ONBEFORE_UPDATED = "onBeforeUpdated"; ##FSTMerge## public static final String ONBEFORE_UPDATED    = "onBeforeUpdated"; ##FSTMerge## public static final String ONBEFORE_UPDATED    = "onBeforeUpdate";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ONAFTER_UPDATED  = "onAfterUpdated"; ##FSTMerge## public static final String ONAFTER_UPDATED     = "onAfterUpdated"; ##FSTMerge## public static final String ONAFTER_UPDATED     = "onAfterUpdate";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_BEFORE_CREATE  = "beforeCreate"; ##FSTMerge## public static final String PROP_BEFORE_CREATE  = ONBEFORE_CREATED;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_AFTER_CREATE   = "afterCreate"; ##FSTMerge## public static final String PROP_AFTER_CREATE   = ONAFTER_CREATED;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_BEFORE_READ    = "beforeRead"; ##FSTMerge## public static final String PROP_BEFORE_READ    = ONBEFORE_READ;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_AFTER_READ     = "afterRead"; ##FSTMerge## public static final String PROP_AFTER_READ     = ONAFTER_READ;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_BEFORE_UPDATE  = "beforeUpdate"; ##FSTMerge## public static final String PROP_BEFORE_UPDATE  = ONBEFORE_UPDATED;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_AFTER_UPDATE   = "afterUpdate"; ##FSTMerge## public static final String PROP_AFTER_UPDATE   = ONAFTER_UPDATED;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_BEFORE_DELETE  = "beforeDelete"; ##FSTMerge## public static final String PROP_BEFORE_DELETE  = ONBEFORE_DELETE;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final String PROP_AFTER_DELETE   = "afterDelete"; ##FSTMerge## public static final String PROP_AFTER_DELETE   = ONAFTER_DELETE;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863080/fstmerge_var1_7900675804568775323
  public RESULT onRecordBeforeCreate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_CREATED);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863080/fstmerge_base_5866149574527122220
	public RESULT onRecordBeforeCreate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_CREATE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_CREATED, PROP_BEFORE_CREATE);
		return this.executeFunction(iDocument, func);
	}
=======
	public RESULT onRecordBeforeCreate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_CREATE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_CREATED);
		return this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863080/fstmerge_var2_3864923712782266373

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863084/fstmerge_var1_97191291260571407
  public void onRecordAfterCreate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_CREATED);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863084/fstmerge_base_3995114347995844080
	public void onRecordAfterCreate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_CREATE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_CREATED, PROP_AFTER_CREATE);
		this.executeFunction(iDocument, func);
	}
=======
	public void onRecordAfterCreate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_CREATE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_CREATED);
		this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863084/fstmerge_var2_5393803967416642308

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863088/fstmerge_var1_6514887649758134510
  public RESULT onRecordBeforeRead(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_READ);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863088/fstmerge_base_8183929077827556310
	public RESULT onRecordBeforeRead(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_READ);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_READ, PROP_BEFORE_READ);
		return this.executeFunction(iDocument, func);
	}
=======
	public RESULT onRecordBeforeRead(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_READ);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_READ);
		return this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863088/fstmerge_var2_5551092413760957363

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863093/fstmerge_var1_2974880075533471317
  public void onRecordAfterRead(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_READ);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863093/fstmerge_base_7213952082804942440
	public void onRecordAfterRead(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_READ);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_READ, PROP_AFTER_READ);
		this.executeFunction(iDocument, func);
	}
=======
	public void onRecordAfterRead(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_READ);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_READ);
		this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863093/fstmerge_var2_9049033082309905519

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863099/fstmerge_var1_1643207548454623102
  public RESULT onRecordBeforeUpdate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_UPDATED);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863099/fstmerge_base_7387505205093168128
	public RESULT onRecordBeforeUpdate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_UPDATE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_UPDATED, PROP_BEFORE_UPDATE);
		return this.executeFunction(iDocument, func);
	}
=======
	public RESULT onRecordBeforeUpdate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_UPDATE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_UPDATED);
		return this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863099/fstmerge_var2_7433818038477336130

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863104/fstmerge_var1_7864922626465142819
  public void onRecordAfterUpdate(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_UPDATED);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863104/fstmerge_base_7146913902559684849
	public void onRecordAfterUpdate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_UPDATE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_UPDATED, PROP_AFTER_UPDATE);
		this.executeFunction(iDocument, func);
	}
=======
	public void onRecordAfterUpdate(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_UPDATE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_UPDATED);
		this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863104/fstmerge_var2_2989892600203756150

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863107/fstmerge_var1_4272756948571841896
  public RESULT onRecordBeforeDelete(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONBEFORE_DELETE);
    return this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863107/fstmerge_base_8599807425228655392
	public RESULT onRecordBeforeDelete(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_DELETE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_DELETE, PROP_BEFORE_DELETE);
		return this.executeFunction(iDocument, func);
	}
=======
	public RESULT onRecordBeforeDelete(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_BEFORE_DELETE);
		OFunction func = this.checkClzAttribute(iDocument, ONBEFORE_DELETE);
		return this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863107/fstmerge_var2_6514675933914767335

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863112/fstmerge_var1_3178517450261001815
  public void onRecordAfterDelete(final ODocument iDocument) {
    OFunction func = this.getClassFunction(iDocument, ONAFTER_DELETE);
    this.executeFunction(iDocument, func);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863112/fstmerge_base_1312846013029757475
	public void onRecordAfterDelete(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_DELETE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_DELETE, PROP_AFTER_DELETE);
		this.executeFunction(iDocument, func);
	}
=======
	public void onRecordAfterDelete(final ODocument iDocument) {
		//ODocument funcDoc = iDocument.field(PROP_AFTER_DELETE);
		OFunction func = this.checkClzAttribute(iDocument, ONAFTER_DELETE);
		this.executeFunction(iDocument, func);
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863112/fstmerge_var2_1910400689055065339

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java
Conflict type: LineBasedMCFd
Conflict body: 
private RESULT executeFunction(final ODocument iDocument, final OFunction func) {
    if (func == null)
      return RESULT.RECORD_NOT_CHANGED;

    ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
    if (db != null && !(db instanceof ODatabaseRecordTx))
      db = db.getUnderlying();
    final OScriptManager scriptManager = Orient.instance().getScriptManager();
    final ScriptEngine scriptEngine = scriptManager.getEngine(func.getLanguage());
    final Bindings binding = scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_var1_1366709042128507296
    for (OScriptInjection i : scriptManager.getInjections())
      i.bind(binding);
    binding.put("doc", iDocument);
    if (db != null)
      binding.put("db", new OScriptDocumentDatabaseWrapper((ODatabaseRecordTx) db));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_base_8146510094061541059
	    boolean isSuccess = false;
	    try {
	    	if(func.getLanguage() == null)
	    		throw new OConfigurationException("Database function '" + func.getName() + "' has no language");
	    	final String funcStr = scriptManager.getFunctionDefinition(func);
	    	if(funcStr != null) {
	    		try{
	    			scriptEngine.eval(funcStr);
	    		} catch(ScriptException e) {
	    			scriptManager.getErrorMessage(e, funcStr);
	    		}
	    	}
	    	if (scriptEngine instanceof Invocable) {
	    		final Invocable invocableEngine = (Invocable) scriptEngine;
	    		Object[] EMPTY = new Object[0];
	    		isSuccess = (Boolean)invocableEngine.invokeFunction(func.getName(), EMPTY);
	    		//invocableEngine.invokeFunction(funcName, pargs);
	    	}
	    }  catch (ScriptException e) {
	        throw new OCommandScriptException("Error on execution of the script", func.getName(), e.getColumnNumber(), e);
	    } catch (NoSuchMethodException e) {
	      throw new OCommandScriptException("Error on execution of the script", func.getName(), 0, e);
	    } catch (OCommandScriptException e) {
	      // PASS THROUGH
	      throw e;
=======
	    String result = null;
	    try {
	    	if(func.getLanguage() == null)
	    		throw new OConfigurationException("Database function '" + func.getName() + "' has no language");
	    	final String funcStr = scriptManager.getFunctionDefinition(func);
	    	if(funcStr != null) {
	    		try{
	    			scriptEngine.eval(funcStr);
	    		} catch(ScriptException e) {
	    			scriptManager.getErrorMessage(e, funcStr);
	    		}
	    	}
	    	if (scriptEngine instanceof Invocable) {
	    		final Invocable invocableEngine = (Invocable) scriptEngine;
	    		Object[] EMPTY = new Object[0];
	    		result = (String)invocableEngine.invokeFunction(func.getName(), EMPTY);
	    		//invocableEngine.invokeFunction(funcName, pargs);
	    	}
	    }  catch (ScriptException e) {
	        throw new OCommandScriptException("Error on execution of the script", func.getName(), e.getColumnNumber(), e);
	    } catch (NoSuchMethodException e) {
	      throw new OCommandScriptException("Error on execution of the script", func.getName(), 0, e);
	    } catch (OCommandScriptException e) {
	      // PASS THROUGH
	      throw e;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_var2_6900578278019886116

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_var1_1366709042128507296
    boolean isSuccess = false;
    try {
      if (func.getLanguage() == null)
        throw new OConfigurationException("Database function '" + func.getName() + "' has no language");
      final String funcStr = scriptManager.getFunctionDefinition(func);
      if (funcStr != null) {
        try {
          scriptEngine.eval(funcStr);
        } catch (ScriptException e) {
          scriptManager.getErrorMessage(e, funcStr);
        }
      }
      if (scriptEngine instanceof Invocable) {
        final Invocable invocableEngine = (Invocable) scriptEngine;
        Object[] EMPTY = new Object[0];
        isSuccess = (Boolean) invocableEngine.invokeFunction(func.getName(), EMPTY);
      }
    } catch (ScriptException e) {
      throw new OCommandScriptException("Error on execution of the script", func.getName(), e.getColumnNumber(), e);
    } catch (NoSuchMethodException e) {
      throw new OCommandScriptException("Error on execution of the script", func.getName(), 0, e);
    } catch (OCommandScriptException e) {
      // PASS THROUGH
      throw e;

    } finally {
      scriptManager.unbind(binding);
    }
    if (isSuccess) {
      return RESULT.RECORD_CHANGED;
    }
    return RESULT.RECORD_NOT_CHANGED;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_base_8146510094061541059
	    } finally {
	      scriptManager.unbind(binding);
	    }
	    if(isSuccess) {
	    	return RESULT.RECORD_CHANGED;
	    }
	    return RESULT.RECORD_NOT_CHANGED;
	}
=======
	    } finally {
	      scriptManager.unbind(binding);
	    }
	    if(result == null) {
	    	return RESULT.RECORD_NOT_CHANGED;
	    }
	    return RESULT.valueOf(result);//result;
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413242863121/fstmerge_var2_6900578278019886116

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_6287a_3e608/rev_6287a-3e608/core/src/main/java/com/orientechnologies/orient/core/db/record/OClassTrigger.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ea8fc_6287a/rev_ea8fc-6287a.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_77c4a_a655f/rev_77c4a-a655f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_b8464_97751/rev_b8464-97751.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_921b7_6dfe9/rev_921b7-6dfe9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_24a9e_516fb/rev_24a9e-516fb.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7b779_62300/rev_7b779-62300.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_09d8f_30c4f/rev_09d8f-30c4f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5802e_f2bae/rev_5802e-f2bae.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_17f28_2b5bb/rev_17f28-2b5bb.revisions

=========================================================
=========================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_55962_c38ae/rev_55962-c38ae.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1882a_8e6d9/rev_1882a-8e6d9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_3df19_ba506/rev_3df19-ba506.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6b1c5_7f6b5/rev_6b1c5-7f6b5.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e395b_f5449/rev_e395b-f5449.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9dc04_60e32/rev_9dc04-60e32.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c45ab_8489e/rev_c45ab-8489e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_631a9_6b1c5/rev_631a9-6b1c5.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_87567_a924d/rev_87567-a924d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_09e7f_f7906/rev_09e7f-f7906.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_fb16e_b1cdc/rev_fb16e-b1cdc.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_94ca1_4b90d/rev_94ca1-4b90d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_aedfe_f9511/rev_aedfe-f9511.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_3e5f4_3403e/rev_3e5f4-3403e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_82991_4c6ff/rev_82991-4c6ff.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8a2d1_008ed/rev_8a2d1-008ed.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8a2d1_2c349/rev_8a2d1-2c349.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_790aa_065de/rev_790aa-065de.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8a2d1_50e19/rev_8a2d1-50e19.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9bd30_97c44/rev_9bd30-97c44.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5401b_9bd30/rev_5401b-9bd30.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_bced3_d8b73/rev_bced3-d8b73.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public void create(int startSize) throws IOException {
    acquireExclusiveLock();
    try {
      final OStorageSegmentConfiguration fileConfiguration = new OStorageSegmentConfiguration(storageLocal.getConfiguration(),
          name, id);
      fileConfiguration.fileType = OFileFactory.CLASSIC;
      fileId = diskCache.openFile(fileConfiguration, DEF_EXTENSION);
      clusterStateHolder.create(-1);

      if (config.root.clusters.size() <= config.id)
        config.root.clusters.add(config);
      else
        config.root.clusters.set(config.id, config);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413255459286/fstmerge_var1_8694836240000411933
      long pagePointer = diskCache.loadAndLockForWrite(fileId, 0);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413255459286/fstmerge_base_5554331797405378369
      long pagePointer = diskCache.allocateAndLockForWrite(fileId, 0);
=======
      long pagePointer = diskCache.allocateForWrite(fileId, 0);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413255459286/fstmerge_var2_7737560786173973933
      try {
        OLocalPage localPage = new OLocalPage(pagePointer, true);

        localPage.setNextPage(-1);
        localPage.setPrevPage(-1);

        int freePageIndex = calculateFreePageIndex(localPage);
        assert freePageIndex == freePageLists.length - 1;

        freePageLists[freePageIndex] = 0;
      } finally {
        diskCache.release(fileId, 0);
      }
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_bced3_d8b73/rev_bced3-d8b73/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedCluster.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_07b04_f7064/rev_07b04-f7064.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeClass
  public void beforeClass() throws IOException {
    System.out.println("Start LocalPaginatedClusterTest");
    buildDirectory = System.getProperty("buildDirectory");
    if (buildDirectory == null || buildDirectory.isEmpty())
      buildDirectory = ".";

    buildDirectory += "/localPaginatedClusterTest";

    OLocalPaginatedStorage storage = mock(OLocalPaginatedStorage.class);
    OStorageConfiguration storageConfiguration = mock(OStorageConfiguration.class);
    storageConfiguration.clusters = new ArrayList<OStorageClusterConfiguration>();
    storageConfiguration.fileTemplate = new OStorageSegmentConfiguration();

    ODirectMemory directMemory = ODirectMemoryFactory.INSTANCE.directMemory();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413255804086/fstmerge_var1_3376887944492229251
    diskCache = new O2QCache(2L * 1024 * 1024 * 1024, directMemory, OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger(),
        storage, false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413255804086/fstmerge_base_4301295166996228134
    diskCache = new OLRUCache(2L * 1024 * 1024 * 1024, directMemory, OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger(),
        storage, false);
=======
    diskCache = new OLRUCache(2L * 1024 * 1024 * 1024, directMemory,
        OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024, storage, false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413255804086/fstmerge_var2_8198490332407415713

    OStorageVariableParser variableParser = new OStorageVariableParser(buildDirectory);

    when(storage.getDiskCache()).thenReturn(diskCache);
    when(storage.getVariableParser()).thenReturn(variableParser);
    when(storage.getConfiguration()).thenReturn(storageConfiguration);
    when(storage.getMode()).thenReturn("rw");

    when(storageConfiguration.getDirectory()).thenReturn(buildDirectory);

    paginatedCluster.configure(storage, 5, "paginatedClusterTest", buildDirectory, -1);
    paginatedCluster.create(-1);
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_07b04_f7064/rev_07b04-f7064/core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/LocalPaginatedClusterTest.java
Conflict type: LineBasedMCFd
Conflict body: 
public OStorageLocal(final String iName, final String iFilePath, final String iMode) throws IOException {
    super(iName, iFilePath, iMode);

    File f = new File(url);

    if (f.exists() || !exists(f.getParent())) {
      // ALREADY EXISTS OR NOT LEGACY
      storagePath = OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(url).getPath()));
    } else {
      // LEGACY DB
      storagePath = OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(url).getParent()));
    }

    storagePath = OIOUtils.getPathFromDatabaseName(storagePath);

    variableParser = new OStorageVariableParser(storagePath);
    configuration = new OStorageConfigurationSegment(this);
    txManager = new OStorageLocalTxExecuter(this, configuration.txSegment);

    DELETE_MAX_RETRIES = OGlobalConfiguration.FILE_MMAP_FORCE_RETRY.getValueAsInteger();
    DELETE_WAIT_TIME = OGlobalConfiguration.FILE_MMAP_FORCE_DELAY.getValueAsInteger();

    final String[] clustersToSync = OGlobalConfiguration.NON_TX_CLUSTERS_SYNC_IMMEDIATELY.getValueAsString().trim()
        .split("\\s*,\\s*");
    clustersToSyncImmediately.addAll(Arrays.asList(clustersToSync));

    installProfilerHooks();

    final ODirectMemory directMemory = ODirectMemoryFactory.INSTANCE.directMemory();

    if (directMemory != null)
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413255810763/fstmerge_var1_3273120999314932767
      diskCache = new O2QCache(OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * 1024 * 1024, directMemory,
          OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger(), this, false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413255810763/fstmerge_base_4338789541346335729
      diskCache = new OLRUCache(OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * 1024 * 1024, directMemory,
          OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger(), this, false);
=======
      diskCache = new OLRUCache(OGlobalConfiguration.DISK_CACHE_SIZE.getValueAsLong() * 1024 * 1024, directMemory,
          OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024, this, false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413255810763/fstmerge_var2_7478356135243388544
    else
      diskCache = null;
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_07b04_f7064/rev_07b04-f7064/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OStorageLocal.java
Conflict type: LineBasedMCFd
Conflict body: 
public void updateRecord(OClusterPosition clusterPosition, byte[] content, final ORecordVersion recordVersion,
      final byte recordType) throws IOException {
    acquireExclusiveLock();
    try {
      content = Snappy.compress(content);

      long firstPagePointer = clusterPosition.longValue();
      int recordPosition = (int) (firstPagePointer & RECORD_POSITION_MASK);

      long firstPageIndex = firstPagePointer >>> PAGE_INDEX_OFFSET;

      if (diskCache.getFilledUpTo(fileId) < firstPageIndex)
        return;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413255811957/fstmerge_var1_6795393410425167838
      int deleteContentSize;
      long firstPageMemoryPointer = diskCache.loadForWrite(fileId, firstPageIndex);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413255811957/fstmerge_base_3680844824059624533
      int deleteContentSize;
      long firstPageMemoryPointer = diskCache.loadAndLockForWrite(fileId, firstPageIndex);
=======
      long firstPageMemoryPointer = diskCache.loadAndLockForWrite(fileId, firstPageIndex);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413255811957/fstmerge_var2_9072447422902345818
      int firstPageFreeIndex;
      int recordsSizeDiff;

      try {
        final OLocalPage firstPage = new OLocalPage(firstPageMemoryPointer, false);
        firstPageFreeIndex = calculateFreePageIndex(firstPage);

        long oldRecordChunkPointer = firstPage.getRecordPointer(recordPosition);
        if (oldRecordChunkPointer == ODirectMemory.NULL_POINTER)
          return;

        long nextPagePointer = OLongSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,
            oldRecordChunkPointer + firstPage.getRecordSize(recordPosition) - OLongSerializer.LONG_SIZE);

        int freeSpace = firstPage.getFreeSpace();
        firstPage.deleteRecord(recordPosition);
        recordsSizeDiff = freeSpace - firstPage.getFreeSpace();

        while (nextPagePointer >= 0) {
          long secondaryPageIndex = nextPagePointer >>> PAGE_INDEX_OFFSET;
          int secondaryRecordPosition = (int) (nextPagePointer & RECORD_POSITION_MASK);

          long pointer = diskCache.loadForWrite(fileId, secondaryPageIndex);
          try {
            OLocalPage localPage = new OLocalPage(pointer, false);
            int secondaryFreePageIndex = calculateFreePageIndex(localPage);
            oldRecordChunkPointer = localPage.getRecordPointer(secondaryRecordPosition);

            if (oldRecordChunkPointer == ODirectMemory.NULL_POINTER)
              throw new OStorageException("Data for record with id " + new ORecordId(id, clusterPosition) + " are broken.");

            nextPagePointer = OLongSerializer.INSTANCE.deserializeFromDirectMemory(directMemory,
                oldRecordChunkPointer + localPage.getRecordSize(secondaryRecordPosition) - OLongSerializer.LONG_SIZE);

            freeSpace = localPage.getFreeSpace();
            localPage.deleteRecord(secondaryRecordPosition);
            recordsSizeDiff += freeSpace - localPage.getFreeSpace();

            updateFreePagesIndex(secondaryFreePageIndex, secondaryPageIndex);
          } finally {
            diskCache.release(fileId, secondaryPageIndex);
          }
        }

        int entrySize = content.length + OByteSerializer.BYTE_SIZE;

        int fullEntryPosition = 0;
        byte[] fullEntry = new byte[entrySize];

        fullEntry[fullEntryPosition] = recordType;
        fullEntryPosition++;

        System.arraycopy(content, 0, fullEntry, fullEntryPosition, content.length);

        int from = 0;
        int to = firstPage.getMaxRecordSize() - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE;
        if (to > fullEntry.length)
          to = fullEntry.length;

        byte[] entryContent = new byte[to - from + OLongSerializer.LONG_SIZE + OByteSerializer.BYTE_SIZE];
        System.arraycopy(fullEntry, from, entryContent, 0, to - from);

        entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;
        OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);

        int initialFreeSpace = firstPage.getFreeSpace();
        nextPagePointer = (firstPageIndex << PAGE_INDEX_OFFSET) | firstPage.appendRecord(recordVersion, entryContent);
        assert nextPagePointer == firstPagePointer;

        recordsSizeDiff += initialFreeSpace - firstPage.getFreeSpace();

        updateFreePagesIndex(firstPageFreeIndex, firstPageIndex);

        from = to;
        to = from + (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
        if (to > fullEntry.length)
          to = fullEntry.length;

        long prevPagePointer = firstPagePointer;
        while (to > from) {
          entryContent = new byte[to - from + OLongSerializer.LONG_SIZE + OByteSerializer.BYTE_SIZE];
          System.arraycopy(fullEntry, from, entryContent, 0, to - from);

          entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;

          OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);
          final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent);

          recordsSizeDiff += addEntryResult.recordsSizeDiff;
          nextPagePointer = addEntryResult.pagePointer;

          long prevPageIndex = prevPagePointer >>> PAGE_INDEX_OFFSET;
          int prevPageRecordPosition = (int) (prevPagePointer & RECORD_POSITION_MASK);

          long prevPageMemoryPointer = diskCache.loadForWrite(fileId, prevPageIndex);
          try {
            final OLocalPage prevPage = new OLocalPage(prevPageMemoryPointer, false);

            final int recordSize = prevPage.getRecordSize(prevPageRecordPosition);
            final long recordPointer = prevPage.getRecordPointer(prevPageRecordPosition);

            OLongSerializer.INSTANCE.serializeInDirectMemory(nextPagePointer, directMemory, recordPointer + recordSize
                - OLongSerializer.LONG_SIZE);
          } finally {
            diskCache.release(fileId, prevPageIndex);
          }

          prevPagePointer = nextPagePointer;

          from = to;
          to = from + (OLocalPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > fullEntry.length)
            to = fullEntry.length;
        }

        recordsSize += recordsSizeDiff;
      } finally {
        diskCache.release(fileId, firstPageIndex);
      }
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_07b04_f7064/rev_07b04-f7064/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
private AddEntryResult addEntry(ORecordVersion recordVersion, byte[] entryContent) throws IOException {
    final FindFreePageResult findFreePageResult = findFreePage(entryContent.length);

    int freePageIndex = findFreePageResult.freePageIndex;
    long pageIndex = findFreePageResult.pageIndex;
    boolean newRecord = freePageIndex >= freePageLists.length;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413255811961/fstmerge_var1_486179289159678142
    long pagePointer = diskCache.loadForWrite(fileId, pageIndex);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413255811961/fstmerge_base_1982828282690353564
    long pagePointer = diskCache.loadAndLockForWrite(fileId, pageIndex);
=======
    long pagePointer = diskCache.loadAndLockForWrite(fileId, pageIndex);
    int recordSizesDiff;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413255811961/fstmerge_var2_5549539410919099284
    int position;
    final ORecordVersion finalVersion;
    try {
      final OLocalPage localPage = new OLocalPage(pagePointer, newRecord);
      assert newRecord || freePageIndex == calculateFreePageIndex(localPage);

      int initialFreeSpace = localPage.getFreeSpace();

      position = localPage.appendRecord(recordVersion, entryContent);
      assert position >= 0;

      finalVersion = localPage.getRecordVersion(position);

      int freeSpace = localPage.getFreeSpace();
      recordSizesDiff = initialFreeSpace - freeSpace;
    } finally {
      diskCache.release(fileId, pageIndex);
    }

    updateFreePagesIndex(freePageIndex, pageIndex);

    return new AddEntryResult((pageIndex << PAGE_INDEX_OFFSET) | position, finalVersion, recordSizesDiff);
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_07b04_f7064/rev_07b04-f7064/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedCluster.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d5f17_2e00c/rev_d5f17-2e00c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_20891_a4ba5/rev_20891-a4ba5.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_eb810_20891/rev_eb810-20891.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_08ad5_97886/rev_08ad5-97886.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c3dfa_ca3d7/rev_c3dfa-ca3d7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1dc8c_a78e3/rev_1dc8c-a78e3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a78e3_1dc8c/rev_a78e3-1dc8c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_61e1c_0b554/rev_61e1c-0b554.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_402a3_f5662/rev_402a3-f5662.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d40c2_a919d/rev_d40c2-a919d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a919d_ea726/rev_a919d-ea726.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e7e09_feefc/rev_e7e09-feefc.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4c64f_9e9eb/rev_4c64f-9e9eb.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f1c28_d6630/rev_f1c28-d6630.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_278fe_a77fd/rev_278fe-a77fd.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2d39a_278fe/rev_2d39a-278fe.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e3001_608b5/rev_e3001-608b5.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_af1dc_3f445/rev_af1dc-3f445.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ac196_edbff/rev_ac196-edbff.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7c04a_b8d77/rev_7c04a-b8d77.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c98d8_ec567/rev_c98d8-ec567.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_400d5_c98d8/rev_400d5-c98d8.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a8948_76640/rev_a8948-76640.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_18ef2_e40bd/rev_18ef2-e40bd.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9cad6_c9de9/rev_9cad6-c9de9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a06cb_dee9f/rev_a06cb-dee9f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_623e6_e925f/rev_623e6-e925f.revisions

=========================================================
=========================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_6fbcb_6ac9e/rev_6fbcb-6ac9e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4554f_2c529/rev_4554f-2c529.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_84604_6fbcb/rev_84604-6fbcb.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1a53b_87b35/rev_1a53b-87b35.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7e91b_9d9d0/rev_7e91b-9d9d0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_8e46d_0795c/rev_8e46d-0795c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_bfcbc_944f6/rev_bfcbc-944f6.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_32d39_313c8/rev_32d39-313c8.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e0162_4c905/rev_e0162-4c905.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_efdaa_cb958/rev_efdaa-cb958.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5fc87_95fc2/rev_5fc87-95fc2.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d0087_904ab/rev_d0087-904ab.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_32861_ac0c7/rev_32861-ac0c7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_765c9_cc2e4/rev_765c9-cc2e4.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e2c75_4d690/rev_e2c75-4d690.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_866dc_44fa1/rev_866dc-44fa1.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_56ca5_3139c/rev_56ca5-3139c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_dfc9d_a768e/rev_dfc9d-a768e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_73619_3eaa8/rev_73619-3eaa8.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_0c853_a73b0/rev_0c853-a73b0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4594a_35d60/rev_4594a-35d60.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_1f6bb_0c3bd/rev_1f6bb-0c3bd.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_04bda_70b55/rev_04bda-70b55.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5f145_a468e/rev_5f145-a468e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_53a79_7fd14/rev_53a79-7fd14.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7e38c_27bee/rev_7e38c-27bee.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_96556_5e30a/rev_96556-5e30a.revisions
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private List<String>       parameters = null; ##FSTMerge## ##FSTMerge## private List<String>	 	 parameters = null;
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_96556_5e30a/rev_96556-5e30a/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateFunction.java
Conflict type: SameSignatureCM
Conflict body: 
@SuppressWarnings("unchecked")
  public OCommandExecutorSQLCreateFunction parse(final OCommandRequest iRequest) {
    final ODatabaseRecord database = getDatabase();
    database.checkSecurity(ODatabaseSecurityResources.COMMAND, ORole.PERMISSION_READ);

        init((OCommandRequestText) iRequest);


    parserRequiredKeyword("CREATE");
    parserRequiredKeyword("FUNCTION");

    parserNextWord(false);
    name = parserGetLastWord();
    parserNextWord(false);
    code = OStringSerializerHelper.getStringContent(parserGetLastWord());

    String temp = parseOptionalWord(true);
    while (temp != null) {
      if (temp.equals("IDEMPOTENT")) {
        parserNextWord(false);
        idempotent = Boolean.parseBoolean(parserGetLastWord());
      } else if (temp.equals("LANGUAGE")) {
        parserNextWord(false);
        language = parserGetLastWord();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413295110700/fstmerge_var1_964123071306273831
      } else if (temp.equals("PARAMETERS")) {
        parserNextWord(false);
        parameters = new ArrayList<String>();
        OStringSerializerHelper.getCollection(parserGetLastWord(), 0, parameters);
        if (parameters.size() == 0)
          throw new OCommandExecutionException("Syntax Error. Missing function parameter(s): " + getSyntax());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413295110700/fstmerge_base_1319352704320803279
=======
      } else if (temp.equals("PARAMETERS")){
    	  parserNextWord(false);
    	  parameters=new ArrayList<String>();
    	  OStringSerializerHelper.getCollection(parserGetLastWord(), 0, parameters);
    	  if (parameters.size()==0) throw new OCommandExecutionException("Syntax Error. Missing function parameter(s): " + getSyntax());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413295110700/fstmerge_var2_7708554424879104939
      }

      temp = parserOptionalWord(true);
      if (parserIsEnded())
        break;
    }
    return this;
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_96556_5e30a/rev_96556-5e30a/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateFunction.java
Conflict type: SameSignatureCM
Conflict body: 
public Object execute(final Map<Object, Object> iArgs) {
    if (name == null)
      throw new OCommandExecutionException("Cannot execute the command because it has not been parsed yet");
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_var1_4259486488396077573
    if (name.isEmpty())
      throw new OCommandExecutionException("Syntax Error. You must specify a function name: " + getSyntax());
    if (code == null || code.isEmpty())
      throw new OCommandExecutionException("Syntax Error. You must specify the function code: " + getSyntax());

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_base_1058759854286900144

=======
    if (name.isEmpty()) throw new OCommandExecutionException("Syntax Error. You must specify a function name: " + getSyntax());
    if (code==null || code.isEmpty()) throw new OCommandExecutionException("Syntax Error. You must specify the function code: " + getSyntax());
    
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_var2_5657452701755384712
    ODatabaseRecord database = getDatabase();
    final OFunction f = database.getMetadata().getFunctionLibrary().createFunction(name);
    f.setCode(code);
    f.setIdempotent(idempotent);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_var1_4259486488396077573
    if (parameters != null)
      f.setParameters(parameters);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_base_1058759854286900144
=======
    if (parameters!=null) f.setParameters(parameters);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413295110704/fstmerge_var2_5657452701755384712
    if (language != null)
      f.setLanguage(language);

    return f.getId();
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_96556_5e30a/rev_96556-5e30a/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreateFunction.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5895a_7a75a/rev_5895a-7a75a.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2992a_3949b/rev_2992a-3949b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c72c9_b75a8/rev_c72c9-b75a8.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d4ab4_2f4a4/rev_d4ab4-2f4a4.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_96f89_7e2ef/rev_96f89-7e2ef.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_275a8_9f026/rev_275a8-9f026.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4a591_6321f/rev_4a591-6321f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_810cc_c13c0/rev_810cc-c13c0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_b6adc_7fcaa/rev_b6adc-7fcaa.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f6b78_f27cd/rev_f6b78-f27cd.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_b7330_1c3ed/rev_b7330-1c3ed.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7e355_4a334/rev_7e355-4a334.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c4c6d_3ca45/rev_c4c6d-3ca45.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ff5df_4b0c4/rev_ff5df-4b0c4.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_cb420_6ee44/rev_cb420-6ee44.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private LRUEntry updateCache(long fileId, long pageIndex) throws IOException {
    LRUEntry lruEntry = am.get(fileId, pageIndex);
    if (lruEntry != null) {
      lruEntry = am.putToMRU(fileId, pageIndex, lruEntry.dataPointer, lruEntry.isDirty, lruEntry.loadedLSN);

      return lruEntry;
    }

    lruEntry = a1out.remove(fileId, pageIndex);
    if (lruEntry != null) {
      removeColdestPageIfNeeded();

      CacheResult cacheResult = cacheFileContent(fileId, pageIndex);
      lruEntry.dataPointer = cacheResult.dataPointer;
      lruEntry.isDirty = cacheResult.isDirty;

      OLogSequenceNumber lsn;
      if (cacheResult.isDirty)
        lsn = dirtyPages.get(fileId).get(pageIndex);
      else
        lsn = getLogSequenceNumberFromPage(cacheResult.dataPointer);

      lruEntry = am.putToMRU(fileId, pageIndex, lruEntry.dataPointer, lruEntry.isDirty, lsn);
      return lruEntry;
    }

    lruEntry = a1in.get(fileId, pageIndex);
    if (lruEntry != null)
      return lruEntry;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413300888394/fstmerge_var1_3075639136168078253
    try {
      removeColdestPageIfNeeded();
    } catch (OAllLRUListEntriesAreUsedException e) {
      if (OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_ON_DEMAND.getValueAsBoolean()) {
        maxSize = (int) Math.ceil(maxSize * (1 + OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_STEP.getValueAsFloat()));
        K_IN = maxSize >> 2;
        K_OUT = maxSize >> 1;
      } else {
        throw e;
      }
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413300888394/fstmerge_base_6370419386873271403
    try {
      removeColdestPageIfNeeded();
    } catch (OAllLRUListEntriesAreUsed e) {
      if (OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_ON_DEMAND.getValueAsBoolean()) {
        maxSize = (int) Math.ceil(maxSize * (1 + OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_STEP.getValueAsFloat()));
        K_IN = maxSize >> 2;
        K_OUT = maxSize >> 1;
      } else {
        throw e;
      }
    }
=======
    removeColdestPageIfNeeded();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413300888394/fstmerge_var2_3714298770463493789

    CacheResult cacheResult = cacheFileContent(fileId, pageIndex);
    OLogSequenceNumber lsn;
    if (cacheResult.isDirty)
      lsn = dirtyPages.get(fileId).get(pageIndex);
    else
      lsn = getLogSequenceNumberFromPage(cacheResult.dataPointer);

    lruEntry = a1in.putToMRU(fileId, pageIndex, cacheResult.dataPointer, cacheResult.isDirty, lsn);

    filePages.get(fileId).add(pageIndex);

    return lruEntry;
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_cb420_6ee44/rev_cb420-6ee44/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/cache/O2QCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413300888466/fstmerge_var1_7884377158081068790
private void checkSizeIncreaseNeccerity(LRUEntry removedFromAInEntry) {
    if (removedFromAInEntry == null) {
      String message = "All records in aIn queue in 2q cache are used!";
      OLogManager.instance().warn(this, message);
      if (OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_ON_DEMAND.getValueAsBoolean()) {
        OLogManager.instance().warn(this, "Cache size will be increased.");
      }
      throw new OAllLRUListEntriesAreUsedException(message);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413300888466/fstmerge_base_4657184309155045189
private void checkSizeIncreaseNeccerity(LRUEntry removedFromAInEntry) {
    if (removedFromAInEntry == null) {
      String message = "All records in aIn queue in 2q cache are used!";
      OLogManager.instance().warn(this, message);
      if (OGlobalConfiguration.SERVER_CACHE_2Q_INCREASE_ON_DEMAND.getValueAsBoolean()) {
        OLogManager.instance().warn(this, "Cache size will be increased.");
      }
      throw new OAllLRUListEntriesAreUsed(message);
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413300888466/fstmerge_var2_1914931328629998663

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_cb420_6ee44/rev_cb420-6ee44/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/cache/O2QCache.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ad6f1_01158/rev_ad6f1-01158.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_65d0c_7017d/rev_65d0c-7017d.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_60387_355a3/rev_60387-355a3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ec9ca_9719c/rev_ec9ca-9719c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_55832_9719c/rev_55832-9719c.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ec9ca_bd42b/rev_ec9ca-bd42b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_ab719_046f3/rev_ab719-046f3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_68378_04fc3/rev_68378-04fc3.revisions

=========================================================
=========================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_98dc3_046f3/rev_98dc3-046f3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String	ORIENT_VERSION	= "1.4.1"; ##FSTMerge## public static final String	ORIENT_VERSION	= "1.4.1-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.4.1-SNAPSHOT";
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_98dc3_046f3/rev_98dc3-046f3/core/src/main/java/com/orientechnologies/orient/core/OConstants.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_b8871_fb32e/rev_b8871-fb32e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_bb339_936b4/rev_bb339-936b4.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2e186_c4195/rev_2e186-c4195.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_3f431_7a0b9/rev_3f431-7a0b9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d10c5_3f431/rev_d10c5-3f431.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d5fde_fc823/rev_d5fde-fc823.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_79f73_54abc/rev_79f73-54abc.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_98f95_9aa13/rev_98f95-9aa13.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413307664439/fstmerge_var1_9037976059100046678
public static Object remove(Object iObject, final Object iToRemove) {
    if (iObject != null) {
      if (iObject instanceof OMultiCollectionIterator<?>) {
        final List<Object> list = new ArrayList<Object>();
        for (Object o : ((OMultiCollectionIterator<?>) iObject))
          list.add(o);
        iObject = list;
      }

      if (iObject instanceof Collection<?>) {
        // COLLECTION - ?
        final Collection<Object> coll = (Collection<Object>) iObject;

        if (iToRemove instanceof Collection<?>) {
          // COLLECTION - COLLECTION
          for (Object o : (Collection<Object>) iToRemove) {
            if (isMultiValue(o))
              remove(coll, o);
            else
              coll.remove(o);
          }
        }

        else if (iToRemove != null && iToRemove.getClass().isArray()) {
          // ARRAY - COLLECTION
          for (int i = 0; i < Array.getLength(iToRemove); ++i) {
            Object o = Array.get(iToRemove, i);
            if (isMultiValue(o))
              remove(coll, o);
            else
              coll.remove(o);
          }

        } else if (iToRemove instanceof Map<?, ?>) {
          // MAP
          for (Entry<Object, Object> entry : ((Map<Object, Object>) iToRemove).entrySet())
            coll.remove(entry.getKey());
        } else if (iToRemove instanceof Iterator<?>) {
          // ITERATOR
          for (Iterator<?> it = (Iterator<?>) iToRemove; it.hasNext();)
            coll.remove(it.next());
        } else
          coll.remove(iToRemove);

      } else if (iObject.getClass().isArray()) {
        // ARRAY - ?

        final Object[] copy;
        if (iToRemove instanceof Collection<?>) {
          // ARRAY - COLLECTION
          final int sourceTot = Array.getLength(iObject);
          final int tot = sourceTot - ((Collection<Object>) iToRemove).size();
          copy = new Object[tot];

          int k = 0;
          for (int i = 0; i < sourceTot; ++i) {
            Object o = Array.get(iObject, i);
            if (o != null) {
              boolean found = false;
              for (Object toRemove : (Collection<Object>) iToRemove) {
                if (o.equals(toRemove)) {
                  // SKIP
                  found = true;
                  break;
                }
              }

              if (!found)
                copy[k++] = o;
            }
          }

        } else if (iToRemove != null && iToRemove.getClass().isArray()) {
          throw new UnsupportedOperationException("Cannot execute remove() against an array");

        } else {
          throw new UnsupportedOperationException("Cannot execute remove() against an array");
        }
        return copy;

      } else
        throw new IllegalArgumentException("Object " + iObject + " is not a multi value");
    }

    return iObject;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413307664439/fstmerge_base_8984960701335440845
=======
public static Object remove(Object iObject, final Object iToRemove) {
    if (iObject != null) {
      if (iObject instanceof OMultiCollectionIterator<?>) {
        final Collection<Object> list = new ArrayList<Object>(OMultiValue.getSize(iObject));
        for (Object o : ((OMultiCollectionIterator<?>) iObject))
          list.add(o);
        iObject = list;
      }

      if (iObject instanceof Collection<?>) {
        // COLLECTION - ?
        final Collection<Object> coll = (Collection<Object>) iObject;

        if (iToRemove instanceof Collection<?>) {
          // COLLECTION - COLLECTION
          for (Object o : (Collection<Object>) iToRemove) {
            if (isMultiValue(o))
              remove(coll, o);
            else
              coll.remove(o);
          }
        }

        else if (iToRemove != null && iToRemove.getClass().isArray()) {
          // ARRAY - COLLECTION
          for (int i = 0; i < Array.getLength(iToRemove); ++i) {
            Object o = Array.get(iToRemove, i);
            if (isMultiValue(o))
              remove(coll, o);
            else
              coll.remove(o);
          }

        } else if (iToRemove instanceof Map<?, ?>) {
          // MAP
          for (Entry<Object, Object> entry : ((Map<Object, Object>) iToRemove).entrySet())
            coll.remove(entry.getKey());
        } else if (iToRemove instanceof Iterator<?>) {
          // ITERATOR
          if (iToRemove instanceof OMultiCollectionIterator<?>)
            ((OMultiCollectionIterator<?>) iToRemove).reset();

          for (Iterator<?> it = (Iterator<?>) iToRemove; it.hasNext();) {
            final Object itemToRemove = it.next();
            while (coll.remove(itemToRemove))
              // REMOVE ALL THE ITEM
              ;
          }
        } else
          coll.remove(iToRemove);

      } else if (iObject.getClass().isArray()) {
        // ARRAY - ?

        final Object[] copy;
        if (iToRemove instanceof Collection<?>) {
          // ARRAY - COLLECTION
          final int sourceTot = Array.getLength(iObject);
          final int tot = sourceTot - ((Collection<Object>) iToRemove).size();
          copy = new Object[tot];

          int k = 0;
          for (int i = 0; i < sourceTot; ++i) {
            Object o = Array.get(iObject, i);
            if (o != null) {
              boolean found = false;
              for (Object toRemove : (Collection<Object>) iToRemove) {
                if (o.equals(toRemove)) {
                  // SKIP
                  found = true;
                  break;
                }
              }

              if (!found)
                copy[k++] = o;
            }
          }

        } else if (iToRemove != null && iToRemove.getClass().isArray()) {
          throw new UnsupportedOperationException("Cannot execute remove() against an array");

        } else {
          throw new UnsupportedOperationException("Cannot execute remove() against an array");
        }
        return copy;

      } else
        throw new IllegalArgumentException("Object " + iObject + " is not a multi value");
    }

    return iObject;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413307664439/fstmerge_var2_8994053691352136049

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_98f95_9aa13/rev_98f95-9aa13/commons/src/main/java/com/orientechnologies/common/collection/OMultiValue.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f54df_a0215/rev_f54df-a0215.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_50e97_189ab/rev_50e97-189ab.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4de99_3ceee/rev_4de99-3ceee.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_12cfa_f85c3/rev_12cfa-f85c3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_99ad0_9e27e/rev_99ad0-9e27e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_4b4f1_9e007/rev_4b4f1-9e007.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f6b96_5ac83/rev_f6b96-5ac83.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310336543/fstmerge_var1_2479307701851013745
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310336543/fstmerge_base_3222130166765811006
protected void openChannel(final int iNewSize) throws IOException {
    acquireWriteLock();
    try {
      OLogManager.instance().debug(this, "[OFile.openChannel] opening channel for file '%s' of size: ", osFile, osFile.length());

      for (int i = 0; i < OPEN_RETRY_MAX; ++i)
        try {
          accessFile = new RandomAccessFile(osFile, mode);
          break;
        } catch (FileNotFoundException e) {
          if (i == OPEN_DELAY_RETRY)
            throw e;

          // TRY TO RE-CREATE THE DIRECTORY (THIS HAPPENS ON WINDOWS AFTER A DELETE IS PENDING, USUALLY WHEN REOPEN THE DB VERY
          // FREQUENTLY)
          osFile.getParentFile().mkdirs();
          try {
            Thread.sleep(OPEN_DELAY_RETRY);
          } catch (InterruptedException e1) {
            Thread.currentThread().interrupt();
          }
        }

      if (accessFile == null)
        throw new FileNotFoundException(osFile.getAbsolutePath());

      if (accessFile.length() != iNewSize)
        accessFile.setLength(iNewSize);

      accessFile.seek(0);
      channel = accessFile.getChannel();

      if (OGlobalConfiguration.FILE_LOCK.getValueAsBoolean())
        lock();
    } finally {
      releaseWriteLock();
    }
  }
=======
protected void openChannel(final int iNewSize) throws IOException {
    acquireWriteLock();
    try {
      OLogManager.instance().debug(this, "[OFile.openChannel] opening channel for file '%s' of size: %d", osFile, osFile.length());

      for (int i = 0; i < OPEN_RETRY_MAX; ++i)
        try {
          accessFile = new RandomAccessFile(osFile, mode);
          break;
        } catch (FileNotFoundException e) {
          if (i == OPEN_DELAY_RETRY)
            throw e;

          // TRY TO RE-CREATE THE DIRECTORY (THIS HAPPENS ON WINDOWS AFTER A DELETE IS PENDING, USUALLY WHEN REOPEN THE DB VERY
          // FREQUENTLY)
          osFile.getParentFile().mkdirs();
          try {
            Thread.sleep(OPEN_DELAY_RETRY);
          } catch (InterruptedException e1) {
            Thread.currentThread().interrupt();
          }
        }

      if (accessFile == null)
        throw new FileNotFoundException(osFile.getAbsolutePath());

      if (accessFile.length() != iNewSize)
        accessFile.setLength(iNewSize);

      accessFile.seek(0);
      channel = accessFile.getChannel();

      if (OGlobalConfiguration.FILE_LOCK.getValueAsBoolean())
        lock();
    } finally {
      releaseWriteLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310336543/fstmerge_var2_4212280839042627206

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_f6b96_5ac83/rev_f6b96-5ac83/core/src/main/java/com/orientechnologies/orient/core/storage/fs/OAbstractFile.java
Conflict type: LineBasedMCFd
Conflict body: 
public long[] getOperationId(final long iOffset) throws IOException {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310372361/fstmerge_var1_771594079039878788
    final int filled = (int) file.getFilledUpTo();
    if (filled == 0 || iOffset <= 0 || iOffset > filled)
      return new long[] { -1, -1 };

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310372361/fstmerge_base_8303944715919316868
    final int filled = file.getFilledUpTo();
    if (filled == 0 || iOffset <= 0 || iOffset > filled)
      return new long[] { -1, -1 };

=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310372361/fstmerge_var2_891005216980063847
    lock.acquireExclusiveLock();
    try {
      final int filled = file.getFilledUpTo();
      if (filled == 0 || iOffset <= 0 || iOffset > filled)
        return BEGIN_POSITION;

      final long[] ids = new long[2];
      ids[0] = file.readLong(iOffset - OFFSET_BACK_RUNID);
      ids[1] = file.readLong(iOffset - OFFSET_BACK_OPERATID);

      return ids;

    } finally {
      lock.releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_f6b96_5ac83/rev_f6b96-5ac83/server/src/main/java/com/orientechnologies/orient/server/journal/ODatabaseJournal.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310372383/fstmerge_var1_8358361255160320629
private long[] getLastUnCommittedOperationId(final long iOffset) throws IOException {
    final int filled = (int) file.getFilledUpTo();
    if (filled == 0 || iOffset <= 0 || iOffset > filled)
      return new long[] { -1, -1 };

    lock.acquireExclusiveLock();
    try {
      long offset = this.getLongestUncommiteJournal(100, iOffset);// TODO : 100?
      final long[] ids = new long[2];
      ids[0] = file.readLong(offset - OFFSET_BACK_RUNID);
      ids[1] = file.readLong(offset - OFFSET_BACK_OPERATID);

      return ids;

    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310372383/fstmerge_base_5360997944687442324
private long[] getLastUnCommittedOperationId(final long iOffset) throws IOException {
    final int filled = file.getFilledUpTo();
    if (filled == 0 || iOffset <= 0 || iOffset > filled)
      return new long[] { -1, -1 };

    lock.acquireExclusiveLock();
    try {
      long offset = this.getLongestUncommiteJournal(100, iOffset);// TODO : 100?
      final long[] ids = new long[2];
      ids[0] = file.readLong(offset - OFFSET_BACK_RUNID);
      ids[1] = file.readLong(offset - OFFSET_BACK_OPERATID);

      return ids;

    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310372383/fstmerge_var2_2670245790586542581

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_f6b96_5ac83/rev_f6b96-5ac83/server/src/main/java/com/orientechnologies/orient/server/journal/ODatabaseJournal.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public OStorageRemote(final String iClientId, final String iURL, final String iMode) throws IOException {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310728748/fstmerge_var1_4196720987589093492
    super(iURL, iURL, iMode, 0, new OCacheLevelTwoLocatorRemote()); // NO TIMEOUT @SINCE 1.5
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310728748/fstmerge_base_7968002558796444830
    super(iURL, iURL, iMode);
=======
    super(iURL, iURL, iMode, 0); // NO TIMEOUT @SINCE 1.5
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310728748/fstmerge_var2_7138243326094125104
    clientId = iClientId;
    configuration = null;

    clientConfiguration = new OContextConfiguration();
    connectionRetry = clientConfiguration.getValueAsInteger(OGlobalConfiguration.NETWORK_SOCKET_RETRY);
    connectionRetryDelay = clientConfiguration.getValueAsInteger(OGlobalConfiguration.NETWORK_SOCKET_RETRY_DELAY);
    asynchEventListener = new OStorageRemoteAsynchEventListener(this);
    parseServerURLs();

    asynchExecutor = Executors.newSingleThreadScheduledExecutor();

    maxReadQueue = Runtime.getRuntime().availableProcessors() - 1;
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private static OSharedResourceAdaptiveExternal                       lock                = new OSharedResourceAdaptiveExternal(
                                                                                               OGlobalConfiguration.ENVIRONMENT_CONCURRENT
                                                                                                   .getValueAsBoolean(),
                                                                                               0, true); ##FSTMerge## ##FSTMerge## private static OSharedResourceAdaptiveExternal                       lock                = new OSharedResourceAdaptiveExternal(
                                                                                               OGlobalConfiguration.ENVIRONMENT_CONCURRENT
                                                                                                   .getValueAsBoolean(), 0, true);
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public OMVRBTreePersistent<OIdentifiable, OIdentifiable> load() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736154/fstmerge_var1_3609342378096120277
    lock.acquireExclusiveLock();
    try {

      newEntries = null;
      super.load();
      if (root != null)
        setSize(((OMVRBTreeRIDEntryProvider) ((OMVRBTreeEntryPersistent<OIdentifiable, OIdentifiable>) root).getProvider()).getTreeSize());
      else
        setSize(0);
      return this;

    } finally {
      lock.releaseExclusiveLock();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736154/fstmerge_base_2336183878363115032
    newEntries = null;
    super.load();
    if (root != null)
      setSize(((OMVRBTreeRIDEntryProvider) ((OMVRBTreeEntryPersistent<OIdentifiable, OIdentifiable>) root).getProvider())
          .getTreeSize());
    else
      setSize(0);
    return this;
=======
    lock.acquireExclusiveLock();
    try {

      newEntries = null;
      super.load();
      if (root != null)
        setSize(((OMVRBTreeRIDEntryProvider) ((OMVRBTreeEntryPersistent<OIdentifiable, OIdentifiable>) root).getProvider())
            .getTreeSize());
      else
        setSize(0);
      return this;

    } finally {
      lock.releaseExclusiveLock();
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736154/fstmerge_var2_3487293445502932073
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public OIdentifiable internalPut(final OIdentifiable e, final OIdentifiable v) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    if (e == null)
      return null;
=======
    lock.acquireExclusiveLock();
    try {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    ((OMVRBTreeRIDProvider) dataProvider).lazyUnmarshall();
=======
      if (e == null)
        return null;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    if (e.getIdentity().isNew()) {
      final ORecord<?> record = e.getRecord();
=======
      ((OMVRBTreeRIDProvider) dataProvider).lazyUnmarshall();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
      if (record == null)
        throw new OTransactionException("Cannot insert item in mvrb-tree because the transactional item was not found.");

      // ADD IN TEMP LIST
      if (newEntries == null)
        newEntries = new IdentityHashMap<ORecord<?>, Object>();
      else if (newEntries.containsKey(record))
        return record;
      newEntries.put(record, NEWMAP_VALUE);
      setDirty();
      return null;
    }
=======
      if (e.getIdentity().isNew()) {
        final ORecord<?> record = e.getRecord();

        if (record == null)
          throw new OTransactionException("Cannot insert item in mvrb-tree because the transactional item was not found.");

        // ADD IN TEMP LIST
        if (newEntries == null)
          newEntries = new IdentityHashMap<ORecord<?>, Object>();
        else if (newEntries.containsKey(record))
          return record;
        newEntries.put(record, NEWMAP_VALUE);
        setDirty();
        return null;
      }

      final OIdentifiable oldValue = super.internalPut(e, null);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var1_2076621165053982229
      if (oldValue != null)
        fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.ADD, e, v, oldValue));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    final OIdentifiable oldValue = super.internalPut(e, null);
=======
      if (oldValue != null)
        fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.ADD,
            e, v, oldValue));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    if (oldValue != null)
      fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.ADD,
          e, v, oldValue));
=======
      return oldValue;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_base_5583237991617411781
    return oldValue;
=======
    } finally {
      lock.releaseExclusiveLock();
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736158/fstmerge_var2_2173039385637528444
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
public OIdentifiable remove(final Object o) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_base_5503174831002325255
    final OIdentifiable removed;
=======
    lock.acquireExclusiveLock();
    try {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var2_3319884700637295314

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_base_5503174831002325255
    if (hasNewItems() && newEntries.containsKey(o)) {
      // REMOVE IT INSIDE NEW ITEMS MAP
      removed = (OIdentifiable) o;
      newEntries.remove(o);
      if (newEntries.size() == 0)
        // EARLY REMOVE THE MAP TO SAVE MEMORY
        newEntries = null;
      setDirty();
    } else {
      if (containsKey(o)) {
        removed = super.remove(o);
=======
      final OIdentifiable removed;

      if (hasNewItems() && newEntries.containsKey(o)) {
        // REMOVE IT INSIDE NEW ITEMS MAP
        removed = (OIdentifiable) o;
        newEntries.remove(o);
        if (newEntries.size() == 0)
          // EARLY REMOVE THE MAP TO SAVE MEMORY
          newEntries = null;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var2_3319884700637295314
        setDirty();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var1_2349545498642196728
      } else {
        if (containsKey(o)) {
          removed = super.remove(o);
          setDirty();
        } else
          removed = null;
      }

      fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.REMOVE,
          (OIdentifiable) o, null, (OIdentifiable) o));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_base_5503174831002325255
      } else
        removed = null;
    }
=======
      } else {
        if (containsKey(o)) {
          removed = super.remove(o);
          setDirty();
        } else
          removed = null;
      }

      fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(
          OMultiValueChangeEvent.OChangeType.REMOVE, (OIdentifiable) o, null, (OIdentifiable) o));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var2_3319884700637295314

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_base_5503174831002325255
    fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.REMOVE,
        (OIdentifiable) o, null, (OIdentifiable) o));
=======
      return removed;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var2_3319884700637295314

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_base_5503174831002325255
    return removed;
=======
    } finally {
      lock.releaseExclusiveLock();
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736168/fstmerge_var2_3319884700637295314
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public void clear() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_base_4962822864127872805
    if (newEntries != null) {
      newEntries.clear();
      newEntries = null;
    }
    setDirty();
=======
    lock.acquireExclusiveLock();
    try {

      if (newEntries != null) {
        newEntries.clear();
        newEntries = null;
      }
      setDirty();

      final Map<OIdentifiable, OIdentifiable> origValues;
      if (changeListeners.isEmpty())
        origValues = null;
      else
        origValues = new HashMap<OIdentifiable, OIdentifiable>(this);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_var2_5122798326641603163

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_base_4962822864127872805
    final Map<OIdentifiable, OIdentifiable> origValues;
    if (changeListeners.isEmpty())
      origValues = null;
    else
      origValues = new HashMap<OIdentifiable, OIdentifiable>(this);
=======
      super.clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_var2_5122798326641603163

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_var1_7307552014431454523
      if (origValues != null) {
        for (final java.util.Map.Entry<OIdentifiable, OIdentifiable> item : origValues.entrySet())
          fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(OMultiValueChangeEvent.OChangeType.REMOVE,
              item.getKey(), null, item.getValue()));
      } else
        setDirty();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_base_4962822864127872805
    super.clear();
=======
      if (origValues != null) {
        for (final java.util.Map.Entry<OIdentifiable, OIdentifiable> item : origValues.entrySet())
          fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(
              OMultiValueChangeEvent.OChangeType.REMOVE, item.getKey(), null, item.getValue()));
      } else
        setDirty();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_var2_5122798326641603163

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_base_4962822864127872805
    if (origValues != null) {
      for (final java.util.Map.Entry<OIdentifiable, OIdentifiable> item : origValues.entrySet())
        fireCollectionChangedEvent(new OMultiValueChangeEvent<OIdentifiable, OIdentifiable>(
            OMultiValueChangeEvent.OChangeType.REMOVE, item.getKey(), null, item.getValue()));
    } else
      setDirty();
=======
    } finally {
      lock.releaseExclusiveLock();
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736182/fstmerge_var2_5122798326641603163
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
public OLazyIterator<OIdentifiable> iterator(final boolean iAutoConvertToRecord) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_base_3565586307706265214
    ((OMVRBTreeRIDProvider) dataProvider).lazyUnmarshall();
    if (hasNewItems()) {
      if (super.size() == 0)
        return new OLazyRecordIterator(new HashSet<OIdentifiable>(newEntries.keySet()), iAutoConvertToRecord);
=======
    lock.acquireExclusiveLock();
    try {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_var2_3293924832154428696

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_var1_4675412102913645277
      ((OMVRBTreeRIDProvider) dataProvider).lazyUnmarshall();
      if (hasNewItems()) {
        if (super.size() == 0)
          return new OLazyRecordIterator(new HashSet<OIdentifiable>(newEntries.keySet()), iAutoConvertToRecord);

        // MIX PERSISTENT AND NEW TOGETHER
        return new OLazyRecordMultiIterator(null, new Object[] { keySet(), new HashSet<OIdentifiable>(newEntries.keySet()) }, iAutoConvertToRecord);
      }

      return new OLazyRecordIterator(keySet().iterator(), iAutoConvertToRecord);

    } finally {
      lock.releaseExclusiveLock();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_base_3565586307706265214
      // MIX PERSISTENT AND NEW TOGETHER
      return new OLazyRecordMultiIterator(null, new Object[] { keySet(), new HashSet<OIdentifiable>(newEntries.keySet()) },
          iAutoConvertToRecord);
=======
      ((OMVRBTreeRIDProvider) dataProvider).lazyUnmarshall();
      if (hasNewItems()) {
        if (super.size() == 0)
          return new OLazyRecordIterator(new HashSet<OIdentifiable>(newEntries.keySet()), iAutoConvertToRecord);

        // MIX PERSISTENT AND NEW TOGETHER
        return new OLazyRecordMultiIterator(null, new Object[] { keySet(), new HashSet<OIdentifiable>(newEntries.keySet()) },
            iAutoConvertToRecord);
      }

      return new OLazyRecordIterator(keySet().iterator(), iAutoConvertToRecord);

    } finally {
      lock.releaseExclusiveLock();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_var2_3293924832154428696
    }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_base_3565586307706265214

    return new OLazyRecordIterator(keySet().iterator(), iAutoConvertToRecord);
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736211/fstmerge_var2_3293924832154428696
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Object returnOriginalState(List<OMultiValueChangeEvent<OIdentifiable, OIdentifiable>> changeEvents) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_base_2113553348593949819
    final Map<OIdentifiable, OIdentifiable> reverted = new HashMap<OIdentifiable, OIdentifiable>(this);
=======
    lock.acquireExclusiveLock();
    try {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var2_5385528082741859014

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_base_2113553348593949819
    final ListIterator<OMultiValueChangeEvent<OIdentifiable, OIdentifiable>> listIterator = changeEvents.listIterator(changeEvents
        .size());
=======
      final Map<OIdentifiable, OIdentifiable> reverted = new HashMap<OIdentifiable, OIdentifiable>(this);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var2_5385528082741859014

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var1_8764592901273424286
      final ListIterator<OMultiValueChangeEvent<OIdentifiable, OIdentifiable>> listIterator = changeEvents.listIterator(changeEvents.size());

      while (listIterator.hasPrevious()) {
        final OMultiValueChangeEvent<OIdentifiable, OIdentifiable> event = listIterator.previous();
        switch (event.getChangeType()) {
        case ADD:
          reverted.remove(event.getKey());
          break;
        case REMOVE:
          reverted.put(event.getKey(), event.getOldValue());
          break;
        case UPDATE:
          reverted.put(event.getKey(), event.getOldValue());
          break;
        default:
          throw new IllegalArgumentException("Invalid change type : " + event.getChangeType());
        }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_base_2113553348593949819
    while (listIterator.hasPrevious()) {
      final OMultiValueChangeEvent<OIdentifiable, OIdentifiable> event = listIterator.previous();
      switch (event.getChangeType()) {
      case ADD:
        reverted.remove(event.getKey());
        break;
      case REMOVE:
        reverted.put(event.getKey(), event.getOldValue());
        break;
      case UPDATE:
        reverted.put(event.getKey(), event.getOldValue());
        break;
      default:
        throw new IllegalArgumentException("Invalid change type : " + event.getChangeType());
=======
      final ListIterator<OMultiValueChangeEvent<OIdentifiable, OIdentifiable>> listIterator = changeEvents
          .listIterator(changeEvents.size());

      while (listIterator.hasPrevious()) {
        final OMultiValueChangeEvent<OIdentifiable, OIdentifiable> event = listIterator.previous();
        switch (event.getChangeType()) {
        case ADD:
          reverted.remove(event.getKey());
          break;
        case REMOVE:
          reverted.put(event.getKey(), event.getOldValue());
          break;
        case UPDATE:
          reverted.put(event.getKey(), event.getOldValue());
          break;
        default:
          throw new IllegalArgumentException("Invalid change type : " + event.getChangeType());
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var2_5385528082741859014
      }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_base_2113553348593949819
=======

      return reverted;

    } finally {
      lock.releaseExclusiveLock();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var2_5385528082741859014
    }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_base_2113553348593949819

    return reverted;
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310736289/fstmerge_var2_5385528082741859014
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreeRID.java
Conflict type: LineBasedMCFd
Conflict body: 
public OStorageEmbedded(final String iName, final String iFilePath, final String iMode) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310737285/fstmerge_var1_3084264530369033033
    super(iName, iFilePath, iMode, OGlobalConfiguration.STORAGE_LOCK_TIMEOUT.getValueAsInteger(), new OCacheLevelTwoLocatorLocal());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310737285/fstmerge_base_4929437393765753608
    super(iName, iFilePath, iMode);
=======
    super(iName, iFilePath, iMode, OGlobalConfiguration.STORAGE_LOCK_TIMEOUT.getValueAsInteger());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310737285/fstmerge_var2_8007445470335059158
    lockManager = new ORecordLockManager(OGlobalConfiguration.STORAGE_RECORD_LOCK_TIMEOUT.getValueAsInteger());

    PROFILER_CREATE_RECORD = "db." + name + ".createRecord";
    PROFILER_READ_RECORD = "db." + name + ".readRecord";
    PROFILER_UPDATE_RECORD = "db." + name + ".updateRecord";
    PROFILER_DELETE_RECORD = "db." + name + ".deleteRecord";
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/storage/OStorageEmbedded.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static String[]                           ALL_FILE_EXTENSIONS                  = { ".ocf", ".pls", ".pcl", ".oda",
      ".odh", ".otx", ".ocs", ".oef", ".oem", ".oet", ".wal", ".wmr"                    }; ##FSTMerge## private static String[]                           ALL_FILE_EXTENSIONS        = { ".ocf", ".pls", ".pcl", ".oda", ".odh", ".otx",
      ".ocs", ".oef", ".oem", ".oet", ".wal", ".wmr"                          }; ##FSTMerge## private static String[]                           ALL_FILE_EXTENSIONS        = { ".ocf", ".pls", ".pcl", ".oda", ".odh", ".otx",
      ".ocs", ".oef", ".oem", ".oet", ".wal", ".wmr", OLocalHashTableIndexEngine.BUCKET_FILE_EXTENSION,
      OLocalHashTableIndexEngine.METADATA_FILE_EXTENSION, OLocalHashTableIndexEngine.TREE_FILE_EXTENSION };
File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310742387/fstmerge_var1_8247246030776384720
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310742387/fstmerge_base_5610970648965415663
protected void openChannel(final int iNewSize) throws IOException {
    acquireWriteLock();
    try {
      OLogManager.instance().debug(this, "[OFile.openChannel] opening channel for file '%s' of size: ", osFile, osFile.length());

      for (int i = 0; i < OPEN_RETRY_MAX; ++i)
        try {
          accessFile = new RandomAccessFile(osFile, mode);
          break;
        } catch (FileNotFoundException e) {
          if (i == OPEN_DELAY_RETRY)
            throw e;

          // TRY TO RE-CREATE THE DIRECTORY (THIS HAPPENS ON WINDOWS AFTER A DELETE IS PENDING, USUALLY WHEN REOPEN THE DB VERY
          // FREQUENTLY)
          osFile.getParentFile().mkdirs();
          try {
            Thread.sleep(OPEN_DELAY_RETRY);
          } catch (InterruptedException e1) {
            Thread.currentThread().interrupt();
          }
        }

      if (accessFile == null)
        throw new FileNotFoundException(osFile.getAbsolutePath());

      if (accessFile.length() != iNewSize)
        accessFile.setLength(iNewSize);

      accessFile.seek(0);
      channel = accessFile.getChannel();

      if (OGlobalConfiguration.FILE_LOCK.getValueAsBoolean())
        lock();
    } finally {
      releaseWriteLock();
    }
  }
=======
protected void openChannel(final int iNewSize) throws IOException {
    acquireWriteLock();
    try {
      OLogManager.instance().debug(this, "[OFile.openChannel] opening channel for file '%s' of size: %d", osFile, osFile.length());

      for (int i = 0; i < OPEN_RETRY_MAX; ++i)
        try {
          accessFile = new RandomAccessFile(osFile, mode);
          break;
        } catch (FileNotFoundException e) {
          if (i == OPEN_DELAY_RETRY)
            throw e;

          // TRY TO RE-CREATE THE DIRECTORY (THIS HAPPENS ON WINDOWS AFTER A DELETE IS PENDING, USUALLY WHEN REOPEN THE DB VERY
          // FREQUENTLY)
          osFile.getParentFile().mkdirs();
          try {
            Thread.sleep(OPEN_DELAY_RETRY);
          } catch (InterruptedException e1) {
            Thread.currentThread().interrupt();
          }
        }

      if (accessFile == null)
        throw new FileNotFoundException(osFile.getAbsolutePath());

      if (accessFile.length() != iNewSize)
        accessFile.setLength(iNewSize);

      accessFile.seek(0);
      channel = accessFile.getChannel();

      if (OGlobalConfiguration.FILE_LOCK.getValueAsBoolean())
        lock();
    } finally {
      releaseWriteLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310742387/fstmerge_var2_2917945116442779200

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/storage/fs/OAbstractFile.java
Conflict type: LineBasedMCFd
Conflict body: 
protected Object optimizeFunction(OSQLFunctionRuntime function) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310743230/fstmerge_var1_6684984993976233242
//    boolean precalculate = true;
//    for (int i = 0; i < function.configuredParameters.length; ++i) {
//      if (function.configuredParameters[i] instanceof OSQLFilterItemField) {
//        precalculate = false;
//      } else if (function.configuredParameters[i] instanceof OSQLFunctionRuntime) {
//        final Object res = optimizeFunction((OSQLFunctionRuntime) function.configuredParameters[i]);
//        function.configuredParameters[i] = res;
//        if (res instanceof OSQLFunctionRuntime || res instanceof OSQLFilterItemField) {
//          // function might have been optimized but result is still not static
//          precalculate = false;
//        }
//      }
//    }
//
//    if (precalculate) {
//      // all fields are static, we can calculate it only once.
//      return function.execute(null, null, null); // we can pass nulls here, they wont be used
//    } else {
      return function;
//    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310743230/fstmerge_base_5785053736809368623
    boolean precalculate = true;
    for (int i = 0; i < function.configuredParameters.length; ++i) {
      if (function.configuredParameters[i] instanceof OSQLFilterItemField) {
        precalculate = false;
      } else if (function.configuredParameters[i] instanceof OSQLFunctionRuntime) {
        final Object res = optimizeFunction((OSQLFunctionRuntime) function.configuredParameters[i]);
        function.configuredParameters[i] = res;
        if (res instanceof OSQLFunctionRuntime || res instanceof OSQLFilterItemField) {
          // function might have been optimized but result is still not static
          precalculate = false;
        }
      }
    }

    if (precalculate) {
      // all fields are static, we can calculate it only once.
      return function.execute(null, null, null); // we can pass nulls here, they wont be used
    } else {
      return function;
    }
=======
    // boolean precalculate = true;
    // for (int i = 0; i < function.configuredParameters.length; ++i) {
    // if (function.configuredParameters[i] instanceof OSQLFilterItemField) {
    // precalculate = false;
    // } else if (function.configuredParameters[i] instanceof OSQLFunctionRuntime) {
    // final Object res = optimizeFunction((OSQLFunctionRuntime) function.configuredParameters[i]);
    // function.configuredParameters[i] = res;
    // if (res instanceof OSQLFunctionRuntime || res instanceof OSQLFilterItemField) {
    // // function might have been optimized but result is still not static
    // precalculate = false;
    // }
    // }
    // }
    //
    // if (precalculate) {
    // // all fields are static, we can calculate it only once.
    // return function.execute(null, null, null); // we can pass nulls here, they wont be used
    // } else {
    return function;
    // }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310743230/fstmerge_var2_2627612709377907780
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLResultsetAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310745989/fstmerge_var1_123801879075357036
  public Object execute(final OIdentifiable iCurrentRecord, final OCommandContext iContext, final Object ioResult,
      final Object[] iMethodParams) {
    
    final Number size;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310745989/fstmerge_base_2417405604906019850
  public Object execute(OIdentifiable iCurrentRecord, OCommandContext iContext, Object ioResult, Object[] iMethodParams) {
=======
  public Object execute(final OIdentifiable iCurrentRecord, final OCommandContext iContext, final Object ioResult,
      final Object[] iMethodParams) {

    final Number size;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310745989/fstmerge_var2_2581929791571517429
    if (ioResult != null) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310745989/fstmerge_base_2417405604906019850
      if (ioResult instanceof ORecord<?>) {
        ioResult = 1;
      } else {
        ioResult = OMultiValue.getSize(ioResult);
      }
    } else {
      ioResult = 0;
    }
    return ioResult;
=======
      if (ioResult instanceof ORecord<?>)
        size = 1;
      else
        size = OMultiValue.getSize(ioResult);
    } else
      size = 0;

    return size;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310745989/fstmerge_var2_2581929791571517429
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodSize.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public void checkEntry(final OIdentifiable iRecord, final Object key) {
    checkForRebuild();

    // CHECK IF ALREADY EXIST
    final OIdentifiable indexedRID = get(key);
    if (indexedRID != null && !indexedRID.getIdentity().equals(iRecord.getIdentity())) {
      // CHECK IF IN THE SAME TX THE ENTRY WAS DELETED
      final OTransactionIndexChanges indexChanges = ODatabaseRecordThreadLocal.INSTANCE.get().getTransaction()
          .getIndexChanges(getName());
      if (indexChanges != null) {
        final OTransactionIndexChangesPerKey keyChanges = indexChanges.getChangesPerKey(key);
        if (keyChanges != null) {
          for (OTransactionIndexEntry entry : keyChanges.entries) {
            if (entry.operation == OPERATION.REMOVE)
              // WAS DELETED, OK!
              return;
          }
        }
      }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310757256/fstmerge_var1_8090536982589005236
      OLogManager.instance().exception(
          "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s", null,
          OIndexException.class, iKey, iRecord, indexedRID);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310757256/fstmerge_base_6222101222835580090
      OLogManager.instance().exception("Found duplicated key '%s' previously assigned to the record %s", null,
          OIndexException.class, iKey, indexedRID);
=======
      OLogManager.instance().exception(
          "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s", null,
          OIndexException.class, key, iRecord, indexedRID);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310757256/fstmerge_var2_6329538931763416218
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexOneValue.java
Conflict type: LineBasedMCFd
Conflict body: 
public Iterator<OIdentifiable> valuesIterator() {
    checkForRebuild();

    acquireSharedLock();
    try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310757309/fstmerge_var1_615989860892698325

      return new OSharedResourceIterator<OIdentifiable>(this, map.values().iterator());

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310757309/fstmerge_base_608086454190312814

      return map.values().iterator();

=======
      return new OSharedResourceIterator<OIdentifiable>(this, indexEngine.valuesIterator());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310757309/fstmerge_var2_238372025633590002
    } finally {
      releaseSharedLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexOneValue.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310757314/fstmerge_base_9162709782813335866
@SuppressWarnings({ "unchecked", "rawtypes" })
=======
@SuppressWarnings({ "rawtypes", "unchecked" })
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310757314/fstmerge_var2_7905369886329502476
  public Iterator<OIdentifiable> valuesInverseIterator() {
    checkForRebuild();

    acquireSharedLock();
    try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310757314/fstmerge_var1_6336461482794714901

      return new OSharedResourceIterator(this, ((OMVRBTree.Values) map.values()).inverseIterator());

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310757314/fstmerge_base_9162709782813335866

      return ((OMVRBTree.Values) map.values()).inverseIterator();

=======
      return new OSharedResourceIterator<OIdentifiable>(this, indexEngine.inverseValuesIterator());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310757314/fstmerge_var2_7905369886329502476
    } finally {
      releaseSharedLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexOneValue.java
Conflict type: LineBasedMCFd
Conflict body: 
public long getSize() {
    checkForRebuild();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_var1_751620555505538429

    acquireExclusiveLock();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_base_6752189300177088648

    if (map.size() == 0)
      return 0;

    acquireExclusiveLock();
=======
    acquireSharedLock();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_var2_3615052166051781316
    try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_var1_751620555505538429
      if (map.size() == 0)
        return 0;

      OMVRBTreeEntry<Object, Set<OIdentifiable>> rootEntry = map.getRoot();
      long size = 0;

      OMVRBTreeEntry<Object, Set<OIdentifiable>> currentEntry = rootEntry;
      map.setPageIndex(0);

      while (currentEntry != null) {
        size += currentEntry.getValue().size();
        currentEntry = OMVRBTree.next(currentEntry);
      }

      map.setPageIndex(0);
      currentEntry = OMVRBTree.previous(rootEntry);

      while (currentEntry != null) {
        size += currentEntry.getValue().size();
        currentEntry = OMVRBTree.previous(currentEntry);
      }

      return size;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_base_6752189300177088648
      OMVRBTreeEntry<Object, Set<OIdentifiable>> rootEntry = map.getRoot();
      long size = 0;

      OMVRBTreeEntry<Object, Set<OIdentifiable>> currentEntry = rootEntry;
      map.setPageIndex(0);

      while (currentEntry != null) {
        size += currentEntry.getValue().size();
        currentEntry = OMVRBTree.next(currentEntry);
      }

      map.setPageIndex(0);
      currentEntry = OMVRBTree.previous(rootEntry);

      while (currentEntry != null) {
        size += currentEntry.getValue().size();
        currentEntry = OMVRBTree.previous(currentEntry);
      }

      return size;
=======
      return indexEngine.size(MultiValuesTransformer.INSTANCE);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758556/fstmerge_var2_3615052166051781316
    } finally {
      releaseSharedLock();
    }

  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
public long getKeySize() {
    checkForRebuild();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758559/fstmerge_var1_1876726984153497924

    acquireExclusiveLock();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758559/fstmerge_base_6681939108668183095

    acquireSharedLock();
=======
    acquireSharedLock();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758559/fstmerge_var2_7817218686565715751
    try {
      return indexEngine.size(null);
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
public Iterator<OIdentifiable> valuesIterator() {
    checkForRebuild();
    acquireSharedLock();
    try {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758563/fstmerge_var1_3279662511830514464
      return new OSharedResourceIterator<OIdentifiable>(this, new OMultiCollectionIterator<OIdentifiable>(map.values().iterator()));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758563/fstmerge_base_6757443467754457011
      return new OMultiCollectionIterator<OIdentifiable>(map.values().iterator());
=======
      return new OSharedResourceIterator<OIdentifiable>(this, new OMultiCollectionIterator<OIdentifiable>(
          indexEngine.valuesIterator()));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758563/fstmerge_var2_8921742627361235180

    } finally {
      releaseSharedLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758566/fstmerge_base_6953543876668526764
@SuppressWarnings({ "unchecked", "rawtypes" })
=======
@SuppressWarnings({ "rawtypes", "unchecked" })
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758566/fstmerge_var2_7372795237545631927
  public Iterator<OIdentifiable> valuesInverseIterator() {
    checkForRebuild();
    acquireSharedLock();
    try {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758566/fstmerge_var1_1045011887399502528
      return new OSharedResourceIterator(this, new OMultiCollectionIterator<OIdentifiable>(
          ((OMVRBTree.Values) map.values()).inverseIterator()));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758566/fstmerge_base_6953543876668526764
      return new OMultiCollectionIterator<OIdentifiable>(((OMVRBTree.Values) map.values()).inverseIterator());
=======
      return new OSharedResourceIterator(this, new OMultiCollectionIterator<OIdentifiable>(indexEngine.inverseValuesIterator()));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758566/fstmerge_var2_7372795237545631927

    } finally {
      releaseSharedLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
public OIndexOneValue put(final Object key, final OIdentifiable iSingleValue) {
    checkForRebuild();

    modificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        checkForKeyType(key);
        final OIdentifiable value = indexEngine.get(key);

        if (value != null) {
          // CHECK IF THE ID IS THE SAME OF CURRENT: THIS IS THE UPDATE CASE
          if (!value.equals(iSingleValue))
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310758876/fstmerge_var1_8133642490764850463
            throw new ORecordDuplicatedException(String.format(
                "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s",
                iSingleValue.getIdentity(), iKey, getName(), value.getIdentity()), value.getIdentity());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310758876/fstmerge_base_4254570015002052676
            throw new ORecordDuplicatedException("Found duplicated key '" + iKey + "' on unique index '" + name + "' for record "
                + iSingleValue.getIdentity() + ". The record already present in the index is " + value.getIdentity(),
                value.getIdentity());
=======
            throw new ORecordDuplicatedException(String.format(
                "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s", null,
                OIndexException.class, iSingleValue.getIdentity(), key, getName(), value.getIdentity()), value.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310758876/fstmerge_var2_6189447647201587005
          else
            return this;
        }

        if (!iSingleValue.getIdentity().isPersistent())
          ((ORecord<?>) iSingleValue.getRecord()).save();

        indexEngine.put(key, iSingleValue.getIdentity());
        return this;

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexUnique.java
Conflict type: SameSignatureCM
Conflict body: 
@Override
  public <RET extends ODocumentWrapper> RET save() {
    acquireExclusiveLock();
    try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_var1_6006591864026018795
      for (int retry = 0; retry < 10; retry++)
        try {
          return (RET) super.save();
        } catch (OConcurrentModificationException e) {
          reload(null, true);
        }
      
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_base_1127000122442578905
=======
      for (int retry = 0; retry < 10; retry++)
        try {
          return (RET) super.save();
        } catch (OConcurrentModificationException e) {
          reload(null, true);
        }

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_var2_6427973809962070354
      return (RET) super.save();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_var1_6006591864026018795
      
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_base_1127000122442578905
=======

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310759191/fstmerge_var2_6427973809962070354
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexManagerAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310760641/fstmerge_var1_8428330082063873227
@Override
  public OIndex<OIdentifiable> put(Object key, OIdentifiable value) {
    acquireExclusiveLock();
    try {
      checkForKeyType(key);

      final OIdentifiable currentValue = super.get(key);

      if (currentValue != null) {
        // CHECK IF THE ID IS THE SAME OF CURRENT: THIS IS THE UPDATE CASE
        if (!currentValue.equals(value))
          throw new ORecordDuplicatedException(String.format(
              "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s", null,
              OIndexException.class, value.getIdentity(), key, getName(), currentValue.getIdentity()), currentValue.getIdentity());
        else
          return this;
      }

      if (!value.getIdentity().isPersistent())
        ((ORecord<?>) value.getRecord()).save();

      super.put(key, value.getIdentity());
      return this;

    } finally {
      releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310760641/fstmerge_base_7935794791049462873
@Override
  public OIndex<OIdentifiable> put(Object key, OIdentifiable value) {
    acquireExclusiveLock();
    try {
      checkForKeyType(key);

      final OIdentifiable currentValue = super.get(key);

      if (currentValue != null) {
        // CHECK IF THE ID IS THE SAME OF CURRENT: THIS IS THE UPDATE CASE
        if (!currentValue.equals(value))
          throw new ORecordDuplicatedException("Found duplicated key '" + key + "' on unique index '" + getName() + "' for record "
              + value.getIdentity() + ". The record already present in the index is " + currentValue.getIdentity(),
              currentValue.getIdentity());
        else
          return this;
      }

      if (!value.getIdentity().isPersistent())
        ((ORecord<?>) value.getRecord()).save();

      super.put(key, value.getIdentity());
      return this;

    } finally {
      releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310760641/fstmerge_var2_97428747165358756

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OUniqueHashIndex.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310760646/fstmerge_var1_1671042696641510044
@Override
  public void checkEntry(OIdentifiable iRecord, Object iKey) {
    final OIdentifiable indexedRID = get(iKey);
    if (indexedRID != null && !indexedRID.getIdentity().equals(iRecord.getIdentity())) {
      // CHECK IF IN THE SAME TX THE ENTRY WAS DELETED
      final OTransactionIndexChanges indexChanges = ODatabaseRecordThreadLocal.INSTANCE.get().getTransaction()
          .getIndexChanges(getName());
      if (indexChanges != null) {
        final OTransactionIndexChangesPerKey keyChanges = indexChanges.getChangesPerKey(iKey);
        if (keyChanges != null) {
          for (OTransactionIndexChangesPerKey.OTransactionIndexEntry entry : keyChanges.entries) {
            if (entry.operation == OTransactionIndexChanges.OPERATION.REMOVE)
              // WAS DELETED, OK!
              return;
          }
        }
      }

      OLogManager.instance().exception(
          "Cannot index record %s: found duplicated key '%s' in index '%s' previously assigned to the record %s", null,
          OIndexException.class, iRecord.getIdentity(), iKey, getName(), indexedRID.getIdentity());
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310760646/fstmerge_base_2305147753733136387
@Override
  public void checkEntry(OIdentifiable iRecord, Object iKey) {
    final OIdentifiable indexedRID = get(iKey);
    if (indexedRID != null && !indexedRID.getIdentity().equals(iRecord.getIdentity())) {
      // CHECK IF IN THE SAME TX THE ENTRY WAS DELETED
      final OTransactionIndexChanges indexChanges = ODatabaseRecordThreadLocal.INSTANCE.get().getTransaction()
          .getIndexChanges(getName());
      if (indexChanges != null) {
        final OTransactionIndexChangesPerKey keyChanges = indexChanges.getChangesPerKey(iKey);
        if (keyChanges != null) {
          for (OTransactionIndexChangesPerKey.OTransactionIndexEntry entry : keyChanges.entries) {
            if (entry.operation == OTransactionIndexChanges.OPERATION.REMOVE)
              // WAS DELETED, OK!
              return;
          }
        }
      }

      OLogManager.instance().exception("Found duplicated key '%s' previously assigned to the record %s", null,
          OIndexException.class, iKey, indexedRID);
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310760646/fstmerge_var2_3234978702145322245

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OUniqueHashIndex.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310760887/fstmerge_var1_2004131706706452903
@SuppressWarnings({ "unchecked", "rawtypes" })
  public Iterator<Entry<Object, T>> inverseIterator() {
    checkForRebuild();

    acquireExclusiveLock();
    try {

      return ((OMVRBTree.EntrySet) map.entrySet()).inverseIterator();

    } finally {
      releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310760887/fstmerge_base_8642050992736763440
@SuppressWarnings("unchecked")
  public Iterator<Entry<Object, T>> inverseIterator() {
    checkForRebuild();

    acquireExclusiveLock();
    try {

      return ((OMVRBTree.EntrySet) map.entrySet()).inverseIterator();

    } finally {
      releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310760887/fstmerge_var2_8965822313435259167

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMVRBTreeAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310760997/fstmerge_var1_5597802034125658990
public void onClose(final ODatabase iDatabase) {
    if (isRebuiding())
      return;

    acquireExclusiveLock();
    try {

      map.commitChanges(true);
      // TODO: GO IN DEEP WHY THE UNLOAD CAUSE LOOSE OF INDEX ENTRIES!
      // map.unload();

    } finally {
      releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310760997/fstmerge_base_2140890071416560777
public void onClose(final ODatabase iDatabase) {
    if (isRebuiding())
      return;

    acquireExclusiveLock();
    try {

      map.commitChanges(true);
      map.unload();
      Orient.instance().getMemoryWatchDog().removeListener(watchDog);

    } finally {
      releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310760997/fstmerge_var2_3918378164289316447

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMVRBTreeAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765445/fstmerge_var1_751007301833646346
public void executeTest() throws Exception {

    ODatabaseDocumentTx database = ODatabaseDocumentPool.global().acquire(getDatabaseURL(serverInstance.get(0)), "admin", "admin");
    try {
      List<ODocument> result = database.query(new OSQLSynchQuery<OIdentifiable>("select count(*) from Person"));
      beginInstances = ((Long) result.get(0).field("count")).longValue();
    } finally {
      database.close();
    }

    System.out.println("Creating Writers and Readers threads[]");

    final ExecutorService writerExecutor = Executors.newCachedThreadPool();
    final ExecutorService readerExecutor = Executors.newCachedThreadPool();

    int i = 0;
    for (ServerRun server : serverInstance) {
      Writer writer = new Writer(i++, getDatabaseURL(server));
      writerExecutor.submit(writer);

      Reader reader = new Reader(getDatabaseURL(server));
      readerExecutor.submit(reader);
    }

    System.out.println("Threads started, waiting for the end");

    writerExecutor.shutdown();
    Assert.assertTrue(writerExecutor.awaitTermination(90, TimeUnit.SECONDS));

    System.out.println("Writer threads finished, shutting down Reader threads[]");

    readerExecutor.shutdownNow();
    Assert.assertTrue(readerExecutor.awaitTermination(10, TimeUnit.SECONDS));

    System.out.println("All threads have finished, shutting down server instances");

    for (ServerRun server : serverInstance) {
      printStats(getDatabaseURL(server));
    }

    checkInsertedEntries();
    checkIndexedEntries();
    dropIndexNode1();
    recreateIndexNode2();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765445/fstmerge_base_115009970917370730
=======
public void executeTest() throws Exception {

    ODatabaseDocumentTx database = ODatabaseDocumentPool.global().acquire(getDatabaseURL(serverInstance.get(0)), "admin", "admin");
    try {
      List<ODocument> result = database.query(new OSQLSynchQuery<OIdentifiable>("select count(*) from Person"));
      beginInstances = ((Long) result.get(0).field("count")).longValue();
    } finally {
      database.close();
    }

    System.out.println("Creating Writers and Readers threads[]");

    final ExecutorService writerExecutor = Executors.newCachedThreadPool();
    final ExecutorService readerExecutor = Executors.newCachedThreadPool();

    int i = 0;
    for (ServerRun server : serverInstance) {
      Writer writer = new Writer(i++, getDatabaseURL(server));
      writerExecutor.submit(writer);

      Reader reader = new Reader(getDatabaseURL(server));
      readerExecutor.submit(reader);
    }

    System.out.println("Threads started, waiting for the end");

    writerExecutor.shutdown();
    Assert.assertTrue(writerExecutor.awaitTermination(300, TimeUnit.MINUTES));

    System.out.println("Writer threads finished, shutting down Reader threads[]");

    readerExecutor.shutdownNow();
    Assert.assertTrue(readerExecutor.awaitTermination(10, TimeUnit.SECONDS));

    System.out.println("All threads have finished, shutting down server instances");

    for (ServerRun server : serverInstance) {
      printStats(getDatabaseURL(server));
    }

    checkInsertedEntries();
    checkIndexedEntries();
    dropIndexNode1();
    recreateIndexNode2();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765445/fstmerge_var2_2647826132986996078

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/test/java/com/orientechnologies/orient/server/distributed/AbstractServerClusterInsertTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765461/fstmerge_var1_3488566301884671862
@Override
    public void run() {
      String name = null;
      for (int i = 0; i < count; i++) {
        final ODatabaseDocumentTx database = ODatabaseDocumentPool.global().acquire(databaseUrl, "admin", "admin");
        try {
          if (name == null)
            name = database.getURL();

          if ((i + 1) % 1 == 0)
            System.out.println("\nWriter " + name + " created " + (i + 1) + "/" + count + " records so far");

          final int uniqueId = count * serverId + i;

          ODocument person = new ODocument("Person").fields("id", UUID.randomUUID().toString(), "name", "Billy" + uniqueId,
              "surname", "Mayes" + uniqueId, "birthday", new Date(), "children", uniqueId);
          database.save(person);

          Thread.sleep(delayWriter);

        } catch (InterruptedException e) {
          System.out.println("Writer received interrupt (db=" + database.getURL());
          Thread.currentThread().interrupt();
          break;
        } catch (Exception e) {
          System.out.println("Writer received exception (db=" + database.getURL());
          e.printStackTrace();
          break;
        } finally {
          database.close();
        }
      }

      System.out.println("\nWriter " + name + " END");
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765461/fstmerge_base_3871033156422835938
=======
@Override
    public void run() {
      String name = null;
      for (int i = 0; i < count; i++) {
        final ODatabaseDocumentTx database = ODatabaseDocumentPool.global().acquire(databaseUrl, "admin", "admin");
        try {
          if (name == null)
            name = database.getURL();

          if ((i + 1) % 1 == 0)
            System.out.println("\nWriter " + name + " created " + (i + 1) + "/" + count + " records so far");

          final int uniqueId = count * serverId + i;

          ODocument person = new ODocument("Person").fields("id", UUID.randomUUID().toString(), "name", "Billy" + uniqueId,
              "surname", "Mayes" + uniqueId, "birthday", new Date(), "children", uniqueId);
          database.save(person);

          Thread.sleep(delayWriter);

        } catch (InterruptedException e) {
          System.out.println("Writer received interrupt (db=" + database.getURL());
          Thread.currentThread().interrupt();
          break;
        } finally {
          database.close();
        }
      }

      System.out.println("\nWriter " + name + " END");
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765461/fstmerge_var2_5770518391982234398

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/test/java/com/orientechnologies/orient/server/distributed/AbstractServerClusterInsertTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765673/fstmerge_var1_4936765697015533525
@SuppressWarnings("unchecked")
  public Object sendOperation2Node(final String iNodeId, final OAbstractRemoteTask<? extends Object> iTask) {
    iTask.setNodeDestination(iNodeId);
    Member member = remoteClusterNodes.get(iNodeId);
    if (member == null) {
      // CHECK IF IS ENTERING IN THE CLUSTER AND HASN'T BEEN REGISTERED YET
      for (Member m : hazelcastInstance.getCluster().getMembers()) {
        if (getNodeId(m).equals(iNodeId)) {
          member = m;
          break;
        }
      }

      if (member == null)
        throw new ODistributedException("Remote node '" + iNodeId + "' is not configured");
    }

    final Member clusterMember = member;

    ExecutionCallback<Object> callback = null;
    if (iTask.getMode() == EXECUTION_MODE.ASYNCHRONOUS)
      callback = new ExecutionCallback<Object>() {
        @Override
        public void onResponse(Object result) {
        }

        @Override
        public void onFailure(Throwable t) {
          ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT,
              "error on execution of operation %d.%d in ASYNCH mode", t, iTask.getRunId(), iTask.getOperationSerial());
        }
      };

    for (int retry = 0; retry < SEND_RETRY_MAX; ++retry) {
      try {

        Object result = executeOperation((Callable<Object>) iTask, clusterMember, iTask.getMode(), callback);

        // OK
        return result;

      } catch (ExecutionException e) {
        if (e.getCause() instanceof OServerOfflineException) {
          final OServerOfflineException exc = (OServerOfflineException) e.getCause();

          // RETRY
          ODistributedServerLog.warn(this, getLocalNodeId(), exc.getNodeId(), DIRECTION.OUT,
              "remote node %s is not online (status=%s), retrying %d[]", exc.getNodeStatus(), retry + 1);
          // WAIT A BIT
          try {
            Thread.sleep(200 + (retry * 50));
          } catch (InterruptedException ex) {
            Thread.interrupted();
          }

        } else {
          ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT,
              "error on execution of operation %d.%d in %s mode", e, iTask.getRunId(), iTask.getOperationSerial(),
              EXECUTION_MODE.SYNCHRONOUS);
          throw new ODistributedException("Error on executing remote operation " + iTask.getRunId() + "."
              + iTask.getOperationSerial() + " in " + iTask.getMode() + " mode against node: " + member, e);
        }

      } catch (Exception e) {
        // WRAP IT
        ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT,
            "error on execution of operation %d.%d in %s mode", e, iTask.getRunId(), iTask.getOperationSerial(), iTask.getMode());
        throw new ODistributedException("Error on executing remote operation " + iTask.getRunId() + "."
            + iTask.getOperationSerial() + " in " + iTask.getMode() + " mode against node: " + member, e);
      }
    }

    throw new ODistributedException("Cannot complete the operation because the cluster is offline");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765673/fstmerge_base_7569530346479215381
=======
@SuppressWarnings("unchecked")
  public Object sendOperation2Node(final String iNodeId, final OAbstractRemoteTask<? extends Object> iTask) {
    iTask.setNodeDestination(iNodeId);
    Member member = remoteClusterNodes.get(iNodeId);
    if (member == null) {
      // CHECK IF IS ENTERING IN THE CLUSTER AND HASN'T BEEN REGISTERED YET
      for (Member m : hazelcastInstance.getCluster().getMembers()) {
        if (getNodeId(m).equals(iNodeId)) {
          member = m;
          break;
        }
      }

      if (member == null)
        throw new ODistributedException("Remote node '" + iNodeId + "' is not configured");
    }

    final Member clusterMember = member;

    ExecutionCallback<Object> callback = null;
    if (iTask.getMode() == EXECUTION_MODE.ASYNCHRONOUS)
      callback = new ExecutionCallback<Object>() {
        @Override
        public void onResponse(Object result) {
        }

        @Override
        public void onFailure(Throwable t) {
          ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT,
              "error on execution of operation in ASYNCH mode", t);
        }
      };

    for (int retry = 0; retry < SEND_RETRY_MAX; ++retry) {
      try {

        Object result = executeOperation((Callable<Object>) iTask, clusterMember, iTask.getMode(), callback);

        // OK
        return result;

      } catch (ExecutionException e) {
        if (e.getCause() instanceof OServerOfflineException) {
          final OServerOfflineException exc = (OServerOfflineException) e.getCause();

          // RETRY
          ODistributedServerLog.warn(this, getLocalNodeId(), exc.getNodeId(), DIRECTION.OUT,
              "remote node %s is not online (status=%s), retrying %d[]", exc.getNodeStatus(), retry + 1);
          // WAIT A BIT
          try {
            Thread.sleep(200 + (retry * 50));
          } catch (InterruptedException ex) {
            Thread.interrupted();
          }

        } else {
          ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT, "error on execution of operation in %s mode",
              e, EXECUTION_MODE.SYNCHRONOUS);
          throw new ODistributedException("Error on executing remote operation in " + iTask.getMode() + " mode against node: "
              + member, e);
        }

      } catch (Exception e) {
        // WRAP IT
        ODistributedServerLog.error(this, getLocalNodeId(), iNodeId, DIRECTION.OUT, "error on execution of operation in %s mode",
            e, iTask.getMode());
        throw new ODistributedException("Error on executing remote operation in " + iTask.getMode() + " mode against node: "
            + member, e);
      }
    }

    throw new ODistributedException("Cannot complete the operation because the cluster is offline");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765673/fstmerge_var2_2953532062708553836

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765676/fstmerge_var1_701603004474576040
public Object execute(final String iClusterName, final Object iKey, final OAbstractRemoteTask<? extends Object> iTask,
      OReplicationConfig replicationData) throws ExecutionException {

    String masterNodeId = null;

    try {
      if (replicationData == null) {
        // NO REPLICATION: LOCAL ONLY
        ODistributedThreadLocal.INSTANCE.set(iTask.getNodeSource());
        try {
          // EXECUTE IT LOCALLY
          return ((OAbstractRemoteTask<? extends Object>) iTask).executeOnLocalNode();
        } finally {
          // SET LAST EXECUTION SERIAL
          ODistributedThreadLocal.INSTANCE.set(null);
        }

      } else {
        if (!checkOperationSequence(iTask))
          return null;

        final String dbName = iTask.getDatabaseName();

        if (replicationData != null) {
          // SET THE DESTINATION NODE
          iTask.setNodeDestination(replicationData.masterNode);
          replicationData.masterNode = waitUntilMasterNodeIsOnline(iClusterName, iKey, dbName, replicationData.masterNode);
          masterNodeId = replicationData.masterNode;
        }

        if (getLocalNodeId().equals(replicationData.masterNode))
          // LOCAL + PROPAGATE
          return executeLocallyAndPropagate((OAbstractReplicatedTask<? extends Object>) iTask);
        else
          // REMOTE + LOCAL
          return executeRemotelyAndApplyLocally(iClusterName, iKey, (OAbstractReplicatedTask<? extends Object>) iTask, dbName,
              replicationData);
      }
    } catch (InterruptedException e) {
      Thread.interrupted();

    } catch (Exception e) {
      ODistributedServerLog.error(this, getLocalNodeId(), masterNodeId, DIRECTION.OUT,
          "error on execution %d.%d of operation in %s mode", e, iTask.getRunId(), iTask.getOperationSerial(),
          EXECUTION_MODE.SYNCHRONOUS);
      throw new ExecutionException("error on execution of operation " + iTask.getRunId() + "." + iTask.getOperationSerial()
          + " in " + EXECUTION_MODE.SYNCHRONOUS + " mode against node " + masterNodeId, e);
    }

    return null;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765676/fstmerge_base_1904775772677903064
=======
public Object execute(final String iClusterName, final Object iKey, final OAbstractRemoteTask<? extends Object> iTask,
      OReplicationConfig replicationData) throws ExecutionException {

    final String dbName = iTask.getDatabaseName();

    String masterNodeId = null;

    try {
      if (replicationData == null) {
        // NO REPLICATION: LOCAL ONLY
        ODistributedThreadLocal.INSTANCE.set(iTask.getNodeSource());
        try {
          // EXECUTE IT LOCALLY
          return ((OAbstractRemoteTask<? extends Object>) iTask).executeOnLocalNode();
        } finally {
          // SET LAST EXECUTION SERIAL
          ODistributedThreadLocal.INSTANCE.set(null);
        }

      } else {
        if (replicationData != null) {
          // SET THE DESTINATION NODE
          iTask.setNodeDestination(replicationData.masterNode);
          replicationData.masterNode = waitUntilMasterNodeIsOnline(iClusterName, iKey, dbName, replicationData.masterNode);
          masterNodeId = replicationData.masterNode;
        }

        if (getLocalNodeId().equals(replicationData.masterNode))
          // LOCAL + PROPAGATE
          return executeLocallyAndPropagate((OAbstractReplicatedTask<? extends Object>) iTask);
        else
          // REMOTE + LOCAL
          return executeRemotelyAndApplyLocally(iClusterName, iKey, (OAbstractReplicatedTask<? extends Object>) iTask, dbName,
              replicationData);
      }
    } catch (InterruptedException e) {
      Thread.interrupted();

    } catch (Exception e) {
      ODistributedServerLog.error(this, getLocalNodeId(), masterNodeId, DIRECTION.OUT,
          "error on execution of operation in %s mode", e, EXECUTION_MODE.SYNCHRONOUS);
      throw new ExecutionException("error on execution of operation in " + EXECUTION_MODE.SYNCHRONOUS + " mode against node "
          + masterNodeId, e);
    }

    return null;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765676/fstmerge_var2_328274679930096617

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765679/fstmerge_var1_4522388334588844334
@SuppressWarnings("unchecked")
  protected Object executeRemotelyAndApplyLocally(final String iClusterName, final Object iKey,
      final OAbstractReplicatedTask<? extends Object> iTask, final String dbName, final OReplicationConfig iReplicationData)
      throws InterruptedException, Exception, ExecutionException {

    // RETRY UNTIL SUCCEED
    for (int retry = 0; retry < SEND_RETRY_MAX; ++retry) {
      ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
          "routing %s against db=%s in %s mode[]", iTask.getName().toUpperCase(), dbName, EXECUTION_MODE.SYNCHRONOUS);

      try {
        // EXECUTES ON THE TARGET NODE
        ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
            "remote execution %s db=%s mode=%s oper=%d.%d[]", iTask.getName().toUpperCase(), dbName, iTask.getMode(),
            iTask.getRunId(), iTask.getOperationSerial());

        final Object remoteResult = executeOperation((Callable<Object>) iTask, iKey, EXECUTION_MODE.SYNCHRONOUS, null);

        final Object localResult;
        if (iTask instanceof OAbstractReplicatedTask<?>) {
          // APPLY LOCALLY TOO
          ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.IN,
              "local execution %s against db=%s mode=%s oper=%d.%d[]", iTask.getName().toUpperCase(), dbName, iTask.getMode(),
              iTask.getRunId(), iTask.getOperationSerial());

          localResult = enqueueLocalExecution(iTask);

          // CHECK CONFLICT
          if (remoteResult != null && localResult != null)
            if (!remoteResult.equals(localResult)) {
              ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.IN,
                  "detected conflict on %s mode=%s db=%s oper=%d.%d: remote={%s} != local={%s}", iTask.getName().toUpperCase(),
                  EXECUTION_MODE.SYNCHRONOUS, dbName, iTask.getRunId(), iTask.getOperationSerial(), remoteResult, localResult);

              iTask.handleConflict(iTask.getNodeDestination(), localResult, remoteResult);
            }

        } else
          localResult = remoteResult;

        // OK
        return localResult;

      } catch (MemberLeftException e) {
        // RETRY
        ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
            "error on execution of operation %d.%d in %s mode, because node left. Re-route it in transparent way", e,
            iTask.getRunId(), iTask.getOperationSerial(), EXECUTION_MODE.SYNCHRONOUS);

        return execute(iClusterName, iKey, iTask, iReplicationData);

      } catch (ExecutionException e) {
        if (e.getCause() instanceof OServerOfflineException) {
          // RETRY
          ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
              "remote node is not online, retrying %d[]", retry + 1);
          // WAIT A BIT
          try {
            Thread.sleep(200 + (retry * 50));
          } catch (InterruptedException ex) {
            Thread.interrupted();
          }
        } else {
          ODistributedServerLog.error(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
              "error on execution of operation %d.%d in %s mode", e, iTask.getRunId(), iTask.getOperationSerial(),
              EXECUTION_MODE.SYNCHRONOUS);
          throw e;
        }
      }
    }

    ODistributedServerLog.error(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
        "error on execution of operation %d.%d type=%s in %s mode", iTask.getRunId(), iTask.getOperationSerial(), iTask.getName(),
        EXECUTION_MODE.SYNCHRONOUS);

    // NEVER HAPPENS BECAUSE .error() THROWS AN EXCEPTION
    throw new ODistributedException("Error on execution " + iTask.getName() + " in " + EXECUTION_MODE.SYNCHRONOUS + " mode");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765679/fstmerge_base_2818840592988607894
=======
@SuppressWarnings("unchecked")
  protected Object executeRemotelyAndApplyLocally(final String iClusterName, final Object iKey,
      final OAbstractReplicatedTask<? extends Object> iTask, final String dbName, final OReplicationConfig iReplicationData)
      throws InterruptedException, Exception, ExecutionException {

    // RETRY UNTIL SUCCEED
    for (int retry = 0; retry < SEND_RETRY_MAX; ++retry) {
      ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
          "routing %s against db=%s in %s mode[]", iTask.getName().toUpperCase(), dbName, EXECUTION_MODE.SYNCHRONOUS);

      try {
        // EXECUTES ON THE TARGET NODE
        ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
            "remote execution %s db=%s mode=%s oper=%d.%d[]", iTask.getName().toUpperCase(), dbName, iTask.getMode(),
            iTask.getRunId(), iTask.getOperationSerial());

        final Object remoteResult = executeOperation((Callable<Object>) iTask, iKey, EXECUTION_MODE.SYNCHRONOUS, null);

        final Object localResult;
        if (iTask instanceof OAbstractReplicatedTask<?>) {
          // APPLY LOCALLY TOO
          ODistributedServerLog.debug(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.IN,
              "local execution %s against db=%s mode=%s oper=%d.%d[]", iTask.getName().toUpperCase(), dbName, iTask.getMode(),
              iTask.getRunId(), iTask.getOperationSerial());

          localResult = enqueueLocalExecution(iTask);

          // CHECK CONFLICT
          if (remoteResult != null && localResult != null)
            if (!remoteResult.equals(localResult)) {
              ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.IN,
                  "detected conflict on %s mode=%s db=%s oper=%d.%d: remote={%s} != local={%s}", iTask.getName().toUpperCase(),
                  EXECUTION_MODE.SYNCHRONOUS, dbName, iTask.getRunId(), iTask.getOperationSerial(), remoteResult, localResult);

              iTask.handleConflict(iTask.getNodeDestination(), localResult, remoteResult);
            }

        } else
          localResult = remoteResult;

        // OK
        return localResult;

      } catch (MemberLeftException e) {
        // RETRY
        ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
            "error on execution of operation in %s mode, because node left. Re-route it in transparent way", e,
            EXECUTION_MODE.SYNCHRONOUS);

        return execute(iClusterName, iKey, iTask, iReplicationData);

      } catch (ExecutionException e) {
        if (e.getCause() instanceof OServerOfflineException) {
          // RETRY
          ODistributedServerLog.warn(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
              "remote node is not online, retrying %d[]", retry + 1);
          // WAIT A BIT
          try {
            Thread.sleep(200 + (retry * 50));
          } catch (InterruptedException ex) {
            Thread.interrupted();
          }
        } else {
          ODistributedServerLog.error(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
              "error on execution of operation in %s mode", e, EXECUTION_MODE.SYNCHRONOUS);
          throw e;
        }
      }
    }

    ODistributedServerLog.error(this, getLocalNodeId(), iTask.getNodeDestination(), DIRECTION.OUT,
        "error on execution %s in %s mode", iTask.getName(), EXECUTION_MODE.SYNCHRONOUS);

    // NEVER HAPPENS BECAUSE .error() THROWS AN EXCEPTION
    throw new ODistributedException("Error on execution " + iTask.getName() + " in " + EXECUTION_MODE.SYNCHRONOUS + " mode");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765679/fstmerge_var2_998796789846623944

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void alignNodes() {
    if (remoteClusterNodes.isEmpty())
      // NO NODES; AVOID ALIGNMENT
      return;

    setStatus("aligning");

    // EXECUTE THE ALIGNMENT: THE STATUS ONLINE WILL BE SET ASYNCHRONOUSLY ONCE FINISHED
    synchronized (synchronizers) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
=======

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376
      for (Entry<String, OStorageSynchronizer> entry : synchronizers.entrySet()) {
        final String databaseName = entry.getKey();
        try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var1_3238976702129120841
          final long[] lastOperationId = entry.getValue().getLog()
              .getLastJournaledOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
          final long[] lastOperationId = entry.getValue().getLog().getLastOperationId(true);
=======
          final long[] lastOperationId = entry.getValue().getLog().getLastOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
          OLogManager.instance().warn(this, "DISTRIBUTED --> send align request in broadcast for database %s from %d:%d",
              databaseName, lastOperationId[0], lastOperationId[1]);
=======
          if (lastOperationId[0] == -1 && lastOperationId[1] == -1)
            // AVOID TO SEND THE REQUEST IF THE LOG IS EMPTY
            continue;

          ODistributedServerLog
              .warn(this, getLocalNodeId(), remoteClusterNodes.keySet().toString(), DIRECTION.OUT,
                  "sending align request in broadcast for database %s from %d:%d", databaseName, lastOperationId[0],
                  lastOperationId[1]);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376

          synchronized (pendingAlignments) {
            for (String node : remoteClusterNodes.keySet()) {
              pendingAlignments.put(node + "/" + databaseName, Boolean.FALSE);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
              OLogManager.instance().info(this, "DISTRIBUTED ->[%s/%s] setting node in alignment state", node, databaseName);
=======
              ODistributedServerLog.info(this, getLocalNodeId(), node, DIRECTION.NONE, "setting node in alignment state for db=%s",
                  databaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376
            }
          }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
          sendOperation2Nodes(remoteClusterNodes.keySet(), new OAlignRequestDistributedTask(getLocalNodeId(), databaseName,
=======
          propagate(remoteClusterNodes.keySet(), new OAlignRequestTask(serverInstance, this, databaseName,
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376
              EXECUTION_MODE.ASYNCHRONOUS, lastOperationId[0], lastOperationId[1]));

        } catch (IOException e) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
          OLogManager.instance().warn(this, "DISTRIBUTED -> error on retrieve last operation id from the log for db %s",
              databaseName);
=======
          ODistributedServerLog.warn(this, getLocalNodeId(), null, DIRECTION.OUT,
              "error on retrieve last operation id from the log for db=%s", databaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376
        }
      }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_base_8753510805255270321
=======

      if (pendingAlignments.isEmpty())
        setStatus("online");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765739/fstmerge_var2_1827556314435077376
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public void endAlignment(final String iNode, final String iDatabaseName) {
    synchronized (pendingAlignments) {
      if (pendingAlignments.remove(iNode + "/" + iDatabaseName) == null) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
        OLogManager.instance().error(this,
            "DISTRIBUTED -> received response for an alignment against an unknown node %s database %s", iNode, iDatabaseName);
=======
        ODistributedServerLog.error(this, getLocalNodeId(), iNode, DIRECTION.OUT,
            "received response for an alignment against an unknown node %s database %s", iDatabaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473
      }

      if (pendingAlignments.isEmpty())
        setStatus("online");
      else {
        // WAKE UP ALL THE POSTPONED ALIGNMENTS
        for (Entry<String, Boolean> entry : pendingAlignments.entrySet()) {
          final String[] parts = entry.getKey().split("/");
          final String node = parts[0];
          final String databaseName = parts[1];

          if (entry.getValue()) {
            final OStorageSynchronizer synch = synchronizers.get(databaseName);

            long[] lastOperationId;

            try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var1_748385084093253716
              lastOperationId = synch.getLog().getLastJournaledOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
              lastOperationId = synch.getLog().getLastOperationId(false);
=======
              lastOperationId = synch.getLog().getLastOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
              OLogManager.instance().info(this, "DISTRIBUTED ->[%s/%s] resend alignment request from %d:%d", node, databaseName,
                  lastOperationId[0], lastOperationId[1]);
=======
              ODistributedServerLog.info(this, getLocalNodeId(), node, DIRECTION.OUT, "resend alignment request db=%s from %d:%d",
                  databaseName, lastOperationId[0], lastOperationId[1]);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
              sendOperation2Node(node, new OAlignRequestDistributedTask(getLocalNodeId(), databaseName,
                  EXECUTION_MODE.ASYNCHRONOUS, lastOperationId[0], lastOperationId[1]));
=======
              sendOperation2Node(node, new OAlignRequestTask(serverInstance, this, databaseName, EXECUTION_MODE.ASYNCHRONOUS,
                  lastOperationId[0], lastOperationId[1]));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473

            } catch (IOException e) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
              OLogManager.instance().warn(this, "DISTRIBUTED -> error on retrieve last operation id from the log for db %s",
                  databaseName);
=======
              ODistributedServerLog.warn(this, getLocalNodeId(), null, DIRECTION.OUT,
                  "error on retrieve last operation id from the log for db=%s", databaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473
            }
          } else
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_base_9074181009151928529
            OLogManager.instance().info(this,
                "DISTRIBUTED - database %s:%s is in alignment status yet, the node is not online yet", node, databaseName);
=======
            ODistributedServerLog.info(this, getLocalNodeId(), node, DIRECTION.NONE,
                "db=%s is in alignment status yet, the node is not online yet", databaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765744/fstmerge_var2_5422466010284887473
        }
      }
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310765834/fstmerge_var1_1345131248343821531
@Override
  public Object enqueueLocalExecution(final OAbstractReplicatedTask<? extends Object> iTask) throws Exception {

    if (!checkOperationSequence(iTask))
      return null;

    final OStorageSynchronizer dbSynchronizer = iTask.getDatabaseSynchronizer();

    waitForMyTurnInQueue(iTask);
    try {
      ODistributedServerLog.debug(this, iTask.getNodeSource(), iTask.getNodeDestination(), DIRECTION.IN, "pop operation=%d:%d",
          iTask.getRunId(), iTask.getOperationSerial());

      final long operationLogOffset = logOperation2Journal(dbSynchronizer, iTask);

      // EXECUTE IT LOCALLY
      try {
        final Object result = iTask.executeOnLocalNode();

        // OK, SET AS COMMITTED
        updateJournal(iTask, dbSynchronizer, operationLogOffset, true);

        return result;

      } catch (Exception e) {
        // ERROR: SET AS CANCELED
        updateJournal(iTask, dbSynchronizer, operationLogOffset, false);
        throw e;
      }

    } finally {
      updateQueue(iTask);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310765834/fstmerge_base_6041889964202613574
=======
@Override
  public Object enqueueLocalExecution(final OAbstractReplicatedTask<? extends Object> iTask) throws Exception {

    final OStorageSynchronizer dbSynchronizer = iTask.getDatabaseSynchronizer();

    waitForMyTurnInQueue(iTask);
    try {
      ODistributedServerLog.debug(this, iTask.getNodeSource(), iTask.getNodeDestination(), DIRECTION.IN, "pop operation=%d:%d",
          iTask.getRunId(), iTask.getOperationSerial());

      final long operationLogOffset = logOperation2Journal(dbSynchronizer, iTask);

      // EXECUTE IT LOCALLY
      try {
        final Object result = iTask.executeOnLocalNode();

        // OK, SET AS COMMITTED
        updateJournal(iTask, dbSynchronizer, operationLogOffset, true);

        return result;

      } catch (Exception e) {
        // ERROR: SET AS CANCELED
        updateJournal(iTask, dbSynchronizer, operationLogOffset, false);
        throw e;
      }

    } finally {
      updateQueue(iTask);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310765834/fstmerge_var2_8336544508603651563

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310780168/fstmerge_var1_5085474164185801645
@Override
  public void reset() {
    if( !( iterator instanceof OResettable) )
      return;
    
    resource.acquireExclusiveLock();
    try {
      ((OResettable) iterator).reset();
    } finally {
      resource.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310780168/fstmerge_base_7445754215162861971
=======
@Override
  public void reset() {
    if (!(iterator instanceof OResettable))
      return;

    resource.acquireExclusiveLock();
    try {
      ((OResettable) iterator).reset();
    } finally {
      resource.releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310780168/fstmerge_var2_8309194718482618447

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/commons/src/main/java/com/orientechnologies/common/concur/resource/OSharedResourceIterator.java
Conflict type: LineBasedMCFd
Conflict body: 
public static OServer create() throws Exception {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310781083/fstmerge_var1_702029304191385959
    instance = new OServer();
    return instance;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310781083/fstmerge_base_7294707320802094248
		server = new OServer();
		return server;
	}
=======
    return new OServer();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310781083/fstmerge_var2_4349289907790106922

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/OServerMain.java
Conflict type: SameSignatureCM
Conflict body: 
public static void main(final String[] args) throws Exception {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310781088/fstmerge_var1_552551974745827871
    instance = OServerMain.create();
    instance.startup().activate();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310781088/fstmerge_base_3651644187418863640
		OServerMain.create().startup();
		server().activate();
	}
=======
    OServerMain.create().startup().activate();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310781088/fstmerge_var2_2575972590780758125

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/OServerMain.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310781092/fstmerge_var1_2998858694251416571
public static OServer server() {
    return instance;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310781092/fstmerge_base_6037405565833964899
public static OServer server() {
		return server;
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310781092/fstmerge_var2_7092861959351431544

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/OServerMain.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782087/fstmerge_var1_7648740042404541889
public static void debug(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.FINE, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        null, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782087/fstmerge_base_5692001465431509373
=======
public static void debug(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.FINE, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), null,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782087/fstmerge_var2_4332713247310626529

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782092/fstmerge_var1_6868475136582897283
public static void debug(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.FINE, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        iException, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782092/fstmerge_base_4144956226660389319
=======
public static void debug(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.FINE, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), iException,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782092/fstmerge_var2_6701327614929091928

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782096/fstmerge_var1_1048317735604781469
public static void info(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.INFO, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        null, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782096/fstmerge_base_3820166406249174980
=======
public static void info(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.INFO, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), null,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782096/fstmerge_var2_7423044303632808169

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782100/fstmerge_var1_5339834224679442313
public static void info(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.INFO, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        iException, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782100/fstmerge_base_4938478102095847206
=======
public static void info(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.INFO, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), iException,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782100/fstmerge_var2_8922897392694856970

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782102/fstmerge_var1_6755966933729598763
public static void warn(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.WARNING, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        null, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782102/fstmerge_base_8080325199958170253
=======
public static void warn(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.WARNING, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), null,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782102/fstmerge_var2_5427571258023292170

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782106/fstmerge_var1_1395865661845135794
public static void warn(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.WARNING, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        iException, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782106/fstmerge_base_5901496813758090541
=======
public static void warn(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.WARNING, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), iException,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782106/fstmerge_var2_6044465310918852071

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782111/fstmerge_var1_8172149202003849725
public static void error(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.SEVERE, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        null, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782111/fstmerge_base_5337000462106495727
=======
public static void error(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.SEVERE, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), null,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782111/fstmerge_var2_360658419914968799

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782113/fstmerge_var1_7548281242168302760
public static void error(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.SEVERE, formatMessage(iRequester, iLocalNode, iRemoteNode, iDirection, iMessage),
        iException, iAdditionalArgs);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782113/fstmerge_base_8430470200850733027
=======
public static void error(final Object iRequester, final String iLocalNode, final String iRemoteNode, final DIRECTION iDirection,
      final String iMessage, final Throwable iException, final Object[] iAdditionalArgs) {
    OLogManager.instance().log(iRequester, Level.SEVERE, formatMessage(iLocalNode, iRemoteNode, iDirection, iMessage), iException,
        iAdditionalArgs);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782113/fstmerge_var2_8895832574171656578

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedServerLog.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782243/fstmerge_var1_5416802896717926202
@Override
  public Integer call() throws Exception {
    if (lastRunId == -1 && lastOperationId == -1)
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from the beginning (no log found)", databaseName);
    else
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from operation %d.%d", databaseName, lastRunId, lastOperationId);

    int totAligned;

    final ODistributedServerManager dManager = getDistributedServerManager();

    final String localNode = dManager.getLocalNodeId();

    final OStorageSynchronizer synchronizer = getDatabaseSynchronizer();
    if (synchronizer == null)
      return 0;

    final ODatabaseJournal log = synchronizer.getLog();

    // GET THE DISTRIBUTED LOCK TO ALIGN THE DATABASE
    final Lock alignmentLock = dManager.getLock("align." + databaseName);
    if (alignmentLock.tryLock())
      try {
        totAligned = 0;
        int aligned = 0;
        final OMultipleRemoteTasks tasks = new OMultipleRemoteTasks(serverInstance, dManager, databaseName,
            EXECUTION_MODE.SYNCHRONOUS);
        final List<Long> positions = new ArrayList<Long>();

        final Iterator<Long> it = log.browseLastOperations(new long[] { lastRunId, lastOperationId },
            ODatabaseJournal.OPERATION_STATUS.COMMITTED, -1);
        while (it.hasNext()) {
          final long pos = it.next();

          final OAbstractReplicatedTask<?> operation = log.getOperation(pos);
          if (operation == null) {
            ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
                "#%d db=%s skipped operation", aligned, databaseName);
            continue;
          }

          ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
              "#%d aligning operation=%d.%d db=%s %s", aligned, operation.getRunId(), operation.getOperationSerial(), databaseName,
              operation.getName().toUpperCase());

          operation.setNodeSource(localNode);
          operation.setDatabaseName(databaseName);
          operation.setMode(EXECUTION_MODE.SYNCHRONOUS);

          tasks.addTask(operation);
          positions.add(pos);

          aligned++;

          if (tasks.getTasks() >= OP_BUFFER)
            totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);
        }

        if (tasks.getTasks() > 0)
          totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);

        ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
            "aligned %d operations db=%s", totAligned, databaseName);
      } finally {
        alignmentLock.unlock();
      }
    else
      // SEND BACK -1 TO RESEND THE UPDATED ALIGNMENT REQUEST
      totAligned = -1;

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    dManager.sendOperation2Node(getNodeSource(), new OAlignResponseTask(serverInstance, dManager, databaseName,
        EXECUTION_MODE.FIRE_AND_FORGET, totAligned));

    return totAligned;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782243/fstmerge_base_2723390041706586710
=======
@Override
  public Integer call() throws Exception {
    if (lastRunId == -1 && lastOperationId == -1)
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db '%s' align request starting from the beginning (no log found)", databaseName, lastRunId, lastOperationId);
    else
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db '%s' align request starting from %d.%d", databaseName, lastRunId, lastOperationId);

    int aligned;

    final ODistributedServerManager dManager = getDistributedServerManager();

    final String localNode = dManager.getLocalNodeId();

    final OStorageSynchronizer synchronizer = getDatabaseSynchronizer();
    if (synchronizer == null)
      return 0;

    final ODatabaseJournal log = synchronizer.getLog();

    // GET THE DISTRIBUTED LOCK TO ALIGN THE DATABASE
    final Lock alignmentLock = dManager.getLock("align." + databaseName);
    if (alignmentLock.tryLock())
      try {
        aligned = 0;
        final OMultipleRemoteTasks tasks = new OMultipleRemoteTasks(serverInstance, dManager, databaseName,
            EXECUTION_MODE.SYNCHRONOUS);
        final List<Long> positions = new ArrayList<Long>();

        final Iterator<Long> it = log.browseLastOperations(new long[] { lastRunId, lastOperationId },
            ODatabaseJournal.OPERATION_STATUS.COMMITTED, -1);
        while (it.hasNext()) {
          final long pos = it.next();

          final OAbstractReplicatedTask<?> operation = log.getOperation(pos);
          if (operation == null) {
            ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
                "db=%s skipped operation", databaseName);
            continue;
          }

          ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
              "aligning operation=%d.%d db=%s %s", operation.getRunId(), operation.getOperationSerial(), databaseName, operation
                  .getName().toUpperCase());

          operation.setNodeSource(localNode);
          operation.setDatabaseName(databaseName);
          operation.setMode(EXECUTION_MODE.SYNCHRONOUS);

          tasks.addTask(operation);
          positions.add(pos);

          if (tasks.getTasks() >= OP_BUFFER)
            aligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);
        }

        if (tasks.getTasks() > 0)
          aligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);

        ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
            "aligned %d operations db=%s", aligned, databaseName);
      } finally {
        alignmentLock.unlock();
      }
    else
      // SEND BACK -1 TO RESEND THE UPDATED ALIGNMENT REQUEST
      aligned = -1;

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    dManager.sendOperation2Node(getNodeSource(), new OAlignResponseTask(serverInstance, dManager, databaseName,
        EXECUTION_MODE.FIRE_AND_FORGET, aligned));

    return aligned;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782243/fstmerge_var2_4998009738561168313

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAlignRequestTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782249/fstmerge_var1_3155255655972728395
protected int flushBufferedTasks(final ODistributedServerManager dManager, final OStorageSynchronizer synchronizer,
      final OMultipleRemoteTasks tasks, final List<Long> positions) throws IOException {

    ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
        "flushing aligning %d operations db=%s[]", tasks.getTasks(), databaseName);

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    @SuppressWarnings("unused")
    final Object[] result = (Object[]) dManager.sendOperation2Node(getNodeSource(), tasks);

    final int aligned = tasks.getTasks();

    ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
        " flushed aligning %d operations db=%s[]", aligned, databaseName);

    // REUSE THE MULTIPLE TASK
    tasks.clearTasks();
    positions.clear();

    return aligned;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782249/fstmerge_base_3456533394661907810
=======
protected int flushBufferedTasks(final ODistributedServerManager dManager, final OStorageSynchronizer synchronizer,
      final OMultipleRemoteTasks tasks, final List<Long> positions) throws IOException {

    ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
        "flushing aligning %d operations db=%s[]", tasks.getTasks(), databaseName);

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    @SuppressWarnings("unused")
    final Object[] result = (Object[]) dManager.sendOperation2Node(getNodeSource(), tasks);

    final int aligned = tasks.getTasks();

    ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
        "flushed aligning %d operations db=%s[]", aligned, databaseName);

    // REUSE THE MULTIPLE TASK
    tasks.clearTasks();
    positions.clear();

    return aligned;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782249/fstmerge_var2_2553388440317293190

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAlignRequestTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782310/fstmerge_var1_1471034514503224437
public OAlignResponseTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr,
      final String iDbName, final EXECUTION_MODE iMode, final int iAligned) {
    super(iServer, iDistributedSrvMgr, iDbName, iMode);
    aligned = iAligned;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782310/fstmerge_base_1280478913881870595
=======
public OAlignResponseTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr, final String iDbName,
      final EXECUTION_MODE iMode, final int iAligned) {
    super(iServer, iDistributedSrvMgr, iDbName, iMode);
    aligned = iAligned;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782310/fstmerge_var2_4511826690585020305

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAlignResponseTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782495/fstmerge_var1_884305746700644818
public OAbstractReplicatedTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr,
      final String databaseName, final EXECUTION_MODE iMode) {
    super(iServer, iDistributedSrvMgr, databaseName, iMode);
    // ASSIGN A UNIQUE OPERATION ID TO BE LOGGED
    this.operationSerial = iDistributedSrvMgr.incrementDistributedSerial(databaseName);

    ODistributedServerLog.debug(this, getNodeSource(), nodeDestination, DIRECTION.OUT,
        "creating operation id %d.%d for db=%s class=%s", runId, operationSerial, databaseName, getClass().getSimpleName());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782495/fstmerge_base_6411156392808327687
=======
public OAbstractReplicatedTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr,
      final String databaseName, final EXECUTION_MODE iMode) {
    super(iServer, iDistributedSrvMgr, databaseName, iMode);
    // ASSIGN A UNIQUE OPERATION ID TO BE LOGGED
    this.operationSerial = iDistributedSrvMgr.incrementDistributedSerial(databaseName);

    ODistributedServerLog.debug(this, getNodeSource(), nodeDestination, DIRECTION.OUT, "creating unique msg id %d db=%s class=%s",
        operationSerial, databaseName, getClass().getSimpleName());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782495/fstmerge_var2_45539907093384261

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAbstractReplicatedTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782536/fstmerge_var1_4975795608618578013
public OUpdateRecordTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr,
      final String iDbName, final EXECUTION_MODE iMode, final ORecordId iRid, final byte[] iContent, final ORecordVersion iVersion,
      final byte iRecordType) {
    super(iServer, iDistributedSrvMgr, iDbName, iMode, iRid, iVersion);
    content = iContent;
    recordType = iRecordType;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782536/fstmerge_base_8866524261918963841
=======
public OUpdateRecordTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr, final String iDbName,
      final EXECUTION_MODE iMode, final ORecordId iRid, final byte[] iContent, final ORecordVersion iVersion, final byte iRecordType) {
    super(iServer, iDistributedSrvMgr, iDbName, iMode, iRid, iVersion);
    content = iContent;
    recordType = iRecordType;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782536/fstmerge_var2_4315346771945353087

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OUpdateRecordTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310782573/fstmerge_var1_2423615015397389285
public OReadRecordTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr,
      final String iDbName, final ORecordId iRid) {
    super(iServer, iDistributedSrvMgr, iDbName, EXECUTION_MODE.SYNCHRONOUS);
    rid = iRid;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310782573/fstmerge_base_646821762995550346
=======
public OReadRecordTask(final OServer iServer, final ODistributedServerManager iDistributedSrvMgr, final String iDbName,
      final ORecordId iRid) {
    super(iServer, iDistributedSrvMgr, iDbName, EXECUTION_MODE.SYNCHRONOUS);
    rid = iRid;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310782573/fstmerge_var2_8103057765917222925

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OReadRecordTask.java
Conflict type: SameSignatureCM
Conflict body: 
public long[] getOperationId(final long iOffset) throws IOException {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310784839/fstmerge_base_5710452534552958086
    final int filled = file.getFilledUpTo();
    if (filled == 0 || iOffset <= 0 || iOffset > filled)
      return new long[] { -1, -1 };

=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310784839/fstmerge_var2_5605831554592395245
    lock.acquireExclusiveLock();
    try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310784839/fstmerge_var1_5755085951979994394
      final int filled = (int) file.getFilledUpTo();
      if (filled == 0 || iOffset <= 0 || iOffset > filled)
        return BEGIN_POSITION;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310784839/fstmerge_base_5710452534552958086
=======
      final int filled = file.getFilledUpTo();
      if (filled == 0 || iOffset <= 0 || iOffset > filled)
        return BEGIN_POSITION;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310784839/fstmerge_var2_5605831554592395245

      final long[] ids = new long[2];
      ids[0] = file.readLong(iOffset - OFFSET_BACK_RUNID);
      ids[1] = file.readLong(iOffset - OFFSET_BACK_OPERATID);

      return ids;

    } finally {
      lock.releaseExclusiveLock();
    }
  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/journal/ODatabaseJournal.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310784858/fstmerge_var1_4405746919476287948
public long append(final OAbstractReplicatedTask<?> task) throws IOException {

    final OPERATION_TYPES iOperationType = task.getOperationType();
    final long iRunId = task.getRunId();
    final long iOperationId = task.getOperationSerial();

    lock.acquireExclusiveLock();
    try {

      long offset = 0;
      int varSize = 0;

      switch (iOperationType) {
      case RECORD_CREATE:
      case RECORD_UPDATE:
      case RECORD_DELETE: {
        varSize = ORecordId.PERSISTENT_SIZE;
        final ORecordId rid = ((OAbstractRecordReplicatedTask<?>) task).getRid();

        ODistributedServerLog.debug(this, cluster.getLocalNodeId(), null, DIRECTION.NONE,
            "- journaled operation=%d.%d type=%s db=%s rid=%s", iRunId, iOperationId, iOperationType.toString(), storage.getName(),
            rid);

        if (isUpdatingLast(iRunId, iOperationId))
          offset = getOffset2Update(iRunId, iOperationId, iOperationType, varSize);
        else
          offset = appendOperationLogHeader(iOperationType, varSize);

        file.writeShort(offset + OFFSET_VARDATA, (short) rid.clusterId);
        file.writeLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT, rid.clusterPosition.longValue());
        break;
      }

      case SQL_COMMAND: {
        final OCommandSQL cmd = new OCommandSQL(task.getPayload());
        final String cmdText = cmd.getText();
        final byte[] cmdBinary = cmdText.getBytes();
        varSize = cmdBinary.length;

        ODistributedServerLog.debug(this, cluster.getLocalNodeId(), null, DIRECTION.NONE,
            "- journaled operation=%d.%d type=%s db=%s cmd=%s", iRunId, iOperationId, iOperationType.toString(), storage.getName(),
            cmdText);

        offset = appendOperationLogHeader(iOperationType, varSize);

        file.write(offset + OFFSET_VARDATA, cmdText.getBytes());
        break;
      }
      }

      file.writeLong(offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT, iRunId);
      file.writeLong(offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT + OBinaryProtocol.SIZE_LONG, iOperationId);

      if (synchEnabled)
        file.synch();

      // SAVE LAST
      lastExecuted[0] = iRunId;
      lastExecuted[1] = iOperationId;

      return offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT + OBinaryProtocol.SIZE_LONG + OBinaryProtocol.SIZE_LONG;

    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310784858/fstmerge_base_926635168996967147
=======
public long append(final OAbstractReplicatedTask<?> task) throws IOException {

    final OPERATION_TYPES iOperationType = task.getOperationType();
    final long iRunId = task.getRunId();
    final long iOperationId = task.getOperationSerial();

    lock.acquireExclusiveLock();
    try {

      long offset = 0;
      int varSize = 0;

      switch (iOperationType) {
      case RECORD_CREATE:
      case RECORD_UPDATE:
      case RECORD_DELETE: {
        varSize = ORecordId.PERSISTENT_SIZE;
        final ORecordId rid = ((OAbstractRecordReplicatedTask<?>) task).getRid();

        ODistributedServerLog.debug(this, cluster.getLocalNodeId(), null, DIRECTION.NONE,
            "journaled operation %s against db '%s' rid %s as #%d.%d", iOperationType.toString(), storage.getName(), rid, iRunId,
            iOperationId);

        if (isUpdatingLast(iRunId, iOperationId))
          offset = getOffset2Update(iRunId, iOperationId, iOperationType, varSize);
        else
          offset = appendOperationLogHeader(iOperationType, varSize);

        file.writeShort(offset + OFFSET_VARDATA, (short) rid.clusterId);
        file.writeLong(offset + OFFSET_VARDATA + OBinaryProtocol.SIZE_SHORT, rid.clusterPosition.longValue());
        break;
      }

      case SQL_COMMAND: {
        final OCommandSQL cmd = new OCommandSQL(task.getPayload());
        final String cmdText = cmd.getText();
        final byte[] cmdBinary = cmdText.getBytes();
        varSize = cmdBinary.length;

        ODistributedServerLog.debug(this, cluster.getLocalNodeId(), null, DIRECTION.NONE,
            "journaled operation %s against db '%s' cmd '%s' as #%d.%d", iOperationType.toString(), storage.getName(), cmdText,
            iRunId, iOperationId);

        offset = appendOperationLogHeader(iOperationType, varSize);

        file.write(offset + OFFSET_VARDATA, cmdText.getBytes());
        break;
      }
      }

      file.writeLong(offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT, iRunId);
      file.writeLong(offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT + OBinaryProtocol.SIZE_LONG, iOperationId);

      if (synchEnabled)
        file.synch();

      return offset + OFFSET_VARDATA + varSize + OBinaryProtocol.SIZE_INT + OBinaryProtocol.SIZE_LONG + OBinaryProtocol.SIZE_LONG;

    } finally {
      lock.releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310784858/fstmerge_var2_7284782976383156086

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/server/src/main/java/com/orientechnologies/orient/server/journal/ODatabaseJournal.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310785149/fstmerge_var1_3323603155337336534
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310785149/fstmerge_base_5588686208999222409
public OAsynchChannelServiceThread(final ORemoteServerEventListener iRemoteServerEventListener,
      final OChannelBinaryClient iFirstChannel, final String iThreadName) {
    super(Orient.getThreadGroup(), iThreadName);
    sessionId = Integer.MIN_VALUE;
    remoteServerEventListener = iRemoteServerEventListener;
    network = iFirstChannel;
    start();
  }
=======
public OAsynchChannelServiceThread(final ORemoteServerEventListener iRemoteServerEventListener,
      final OChannelBinaryClient iFirstChannel, final String iThreadName) {
    super(Orient.instance().getThreadGroup(), iThreadName);
    sessionId = Integer.MIN_VALUE;
    remoteServerEventListener = iRemoteServerEventListener;
    network = iFirstChannel;
    start();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310785149/fstmerge_var2_5684172997905676894

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/enterprise/src/main/java/com/orientechnologies/orient/enterprise/channel/binary/OAsynchChannelServiceThread.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413310786160/fstmerge_var1_9149940421879208569
@Override
    public void run() {
      System.out.println("Start adding edges" + new Date().getTime() + " Thread:" + Thread.currentThread().getName());
      OrientGraphNoTx databaseNoTx = getGraph();

      while (!vertexSet.isEmpty()) {
        String keyFrom = vertexSet.pollFirst();
        Set<String> toKeySet = vertexReg.keySet();

        ODatabaseRecordThreadLocal.INSTANCE.set(databaseNoTx.getRawGraph());
        final int total = toKeySet.size();
        int current = 0;

        for (String keyTo : toKeySet) {
          boolean success = false;
          for (int retry = 0; retry < RETRIES; retry++) {
            try {
              OrientVertex iSourceVertex = databaseNoTx.getVertex(vertexReg.get(keyFrom));
              OrientVertex iDestVertex = databaseNoTx.getVertex(vertexReg.get(keyTo));
              databaseNoTx.addEdge(null, iSourceVertex, iDestVertex, "CustomEdge");

              // OK
              if (retry > 2)
                System.out.println("OK (key #" + current + "/" + total + ") after " + retry + " retries - Thread:"
                    + Thread.currentThread().getName());
              success = true;
              current++;

              final int totalEdges = edgeCounter.incrementAndGet();

              if (totalEdges % 10000 == 0)
                System.out.println("Inserted edges: " + totalEdges + ", currentThread " + current + " Thread:"
                    + Thread.currentThread().getName());

              break;

            } catch (OConcurrentModificationException e) {
              if (retry > 2)
                System.out.println("Managing concurrent exception (key #" + current + "/" + total + ") adding edge " + keyFrom + "->"
                    + keyTo + ", retry " + retry + " Thread:" + Thread.currentThread().getName());
            } catch (Exception e) {
              System.err.println("Exception (key #" + current + "/" + total + ") adding edge " + keyFrom + "->" + keyTo
                  + ", retry " + retry + " Thread:" + Thread.currentThread().getName());
              e.printStackTrace();
            }
          }

          if (!success)
            System.out.println("ERROR on (key #" + current + "/" + total + ") adding edge " + keyFrom + "->" + keyTo + " Thread:"
                + Thread.currentThread().getName());

        }
      }

      System.out.println("Done adding edges" + new Date().getTime() + " Thread:" + Thread.currentThread().getName());

    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413310786160/fstmerge_base_5943265926058434046
=======
@Override
    public void run() {
      System.out.println("Start adding edges" + new Date().getTime() + " Thread:" + Thread.currentThread().getName());
      OrientGraphNoTx databaseNoTx = getGraph();

      while (!vertexSet.isEmpty()) {
        String keyFrom = vertexSet.pollFirst();
        Set<String> toKeySet = vertexReg.keySet();

        ODatabaseRecordThreadLocal.INSTANCE.set(databaseNoTx.getRawGraph());
        final int total = toKeySet.size();
        int current = 0;

        for (String keyTo : toKeySet) {
          boolean success = false;
          for (int retry = 0; retry < RETRIES; retry++) {
            try {
              OrientVertex iSourceVertex = databaseNoTx.getVertex(vertexReg.get(keyFrom));
              OrientVertex iDestVertex = databaseNoTx.getVertex(vertexReg.get(keyTo));
              databaseNoTx.addEdge(null, iSourceVertex, iDestVertex, "CustomEdge");

              // OK
              if (retry > 2)
                System.out.println("OK (key #" + current + "/" + total + ") after " + retry + " retries - Thread:"
                    + Thread.currentThread().getName());
              success = true;
              current++;

              final int totalEdges = edgeCounter.incrementAndGet();

              if (totalEdges % 10000 == 0)
                System.out.println("Inserted edges: " + totalEdges + ", currentThread " + current + " Thread:"
                    + Thread.currentThread().getName());

              break;

            } catch (OConcurrentModificationException e) {
              if (retry > 2)
                System.out.println("Managing concurrent exception (key #" + current + "/" + total + ") adding edge " + keyFrom
                    + "->" + keyTo + ", retry " + retry + " Thread:" + Thread.currentThread().getName());
            } catch (Exception e) {
              System.err.println("Exception (key #" + current + "/" + total + ") adding edge " + keyFrom + "->" + keyTo
                  + ", retry " + retry + " Thread:" + Thread.currentThread().getName());
              e.printStackTrace();
            }
          }

          if (!success)
            System.out.println("ERROR on (key #" + current + "/" + total + ") adding edge " + keyFrom + "->" + keyTo + " Thread:"
                + Thread.currentThread().getName());

        }
      }

      System.out.println("Done adding edges" + new Date().getTime() + " Thread:" + Thread.currentThread().getName());

    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413310786160/fstmerge_var2_1097820353519306425

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_a388e/rev_7c217-a388e/graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsConcurrentAddEdgeTest.java

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7c217_32751/rev_7c217-32751.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_fd50c_0770e/rev_fd50c-0770e.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_d0358_86ad0/rev_d0358-86ad0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_adcae_aaab9/rev_adcae-aaab9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_b1356_37f07/rev_b1356-37f07.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_a5793_07c8f/rev_a5793-07c8f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e3151_da2e9/rev_e3151-da2e9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_81a95_c21a2/rev_81a95-c21a2.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_5794c_766d5/rev_5794c-766d5.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f6e94_28bf9/rev_f6e94-28bf9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_07c42_b69b0/rev_07c42-b69b0.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_9551b_4eafc/rev_9551b-4eafc.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_964a1_dbd6f/rev_964a1-dbd6f.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_e6ab6_2e479/rev_e6ab6-2e479.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_f7a3a_840e3/rev_f7a3a-840e3.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_87a75_1cdc7/rev_87a75-1cdc7.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_c4099_6c3b9/rev_c4099-6c3b9.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_cad08_ee7a4/rev_cad08-ee7a4.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_7a8de_8292b/rev_7a8de-8292b.revisions

==================================================================================================================
Revision: /home/ines/paola/gitClones/orientdb/revisions/rev_2248f_1d54f/rev_2248f-1d54f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void disconnect(final OClientConnection connection) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413319148225/fstmerge_base_3799690782962294536
    metricActiveConnections--;
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413319148225/fstmerge_var2_1547181230565532364
    connection.close();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413319148225/fstmerge_var1_4892829749201912791
    acquireExclusiveLock();
    try {
      metricActiveConnections--;

      for (Entry<Integer, OClientConnection> entry : new HashMap<Integer, OClientConnection>(connections).entrySet()) {
        if (entry.getValue().equals(connection))
          connections.remove(entry.getKey());
      }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413319148225/fstmerge_base_3799690782962294536
    acquireExclusiveLock();
    try {
      for (Entry<Integer, OClientConnection> entry : new HashMap<Integer, OClientConnection>(connections).entrySet()) {
        if (entry.getValue().equals(connection))
          connections.remove(entry.getKey());
      }
=======
    for (Entry<Integer, OClientConnection> entry : new HashMap<Integer, OClientConnection>(connections).entrySet()) {
      if (entry.getValue().equals(connection))
        connections.remove(entry.getKey());
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413319148225/fstmerge_var2_1547181230565532364

  }

File path: /home/ines/paola/gitClones/orientdb/revisions/rev_2248f_1d54f/rev_2248f-1d54f/server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6fe43_71d77/rev_6fe43-71d77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6fe43_a464f/rev_6fe43-a464f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8c30d_32190/rev_8c30d-32190.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d9a98_84a65/rev_d9a98-84a65.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0d198_ecbc5/rev_0d198-ecbc5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_25d95_19240/rev_25d95-19240.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9b0ff_3847c/rev_9b0ff-3847c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_75a66_4d280/rev_75a66-4d280.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_41b94_f9dac/rev_41b94-f9dac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3cfb7_7a66f/rev_3cfb7-7a66f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cf945_292c5/rev_cf945-292c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8305e_4fbb9/rev_8305e-4fbb9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0eb36_8d695/rev_0eb36-8d695.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5a893_6d0a6/rev_5a893-6d0a6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private void doPut(K key, V value) {
    acquireExclusiveLock();
    try {
      final long hashCode = keyHashFunction.hashCode(key);

      final BucketPath bucketPath = getBucket(hashCode);
      long[] node = hashTree[bucketPath.nodeIndex];

      final long bucketPointer = node[bucketPath.itemIndex + bucketPath.hashMapOffset];
      if (bucketPointer == 0)
        throw new IllegalStateException("In this version of hash table buckets are added through split only.");

      final long pageIndex = getPageIndex(bucketPointer);
      final int fileLevel = getFileLevel(bucketPointer);

      long pagePointer = loadPage(pageIndex, fileLevel);

      try {
        final OHashIndexBucket<K, V> bucket = new OHashIndexBucket<K, V>(pagePointer, directMemory, keySerializer, valueSerializer);
        final int index = bucket.getIndex(key);

        if (index > -1) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413399800705/fstmerge_var1_6870951175877679673
          bucket.deleteEntry(index);
          size--;
          markPageAsDirty(pageIndex, fileLevel);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413399800705/fstmerge_base_3579476128798730777
          bucket.updateEntry(index, value);
          return;
=======
          bucket.updateEntry(index, value);
          markPageAsDirty(pageIndex, fileLevel);

          return;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413399800705/fstmerge_var2_8036091441041455240
        }

        if (bucket.addEntry(key, value)) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413399800705/fstmerge_base_3579476128798730777
          // assert bucket.getEntry(bucket.getIndex(key)).value.equals(value);
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413399800705/fstmerge_var2_8036091441041455240
          markPageAsDirty(pageIndex, fileLevel);

          size++;
          return;
        }

        final BucketSplitResult splitResult = splitBucket(bucket, fileLevel, pageIndex, pagePointer);

        final long updatedBucketPointer = splitResult.updatedBucketPointer;
        final long newBucketPointer = splitResult.newBucketPointer;
        final int bucketDepth = splitResult.newDepth;

        if (bucketDepth <= bucketPath.nodeGlobalDepth) {
          updateNodeAfterBucketSplit(bucketPath, bucketDepth, newBucketPointer, updatedBucketPointer);
        } else {
          if (bucketPath.nodeLocalDepth < MAX_LEVEL_DEPTH) {
            final NodeSplitResult nodeSplitResult = splitNode(bucketPath, node);

            assert !(nodeSplitResult.allLeftHashMapsEqual && nodeSplitResult.allRightHashMapsEqual);

            final long[] newNode = nodeSplitResult.newNode;

            final int nodeLocalDepth = bucketPath.nodeLocalDepth + 1;
            final int hashMapSize = 1 << nodeLocalDepth;

            assert nodeSplitResult.allRightHashMapsEqual == checkAllMapsContainSameBucket(newNode, hashMapSize);

            int newNodeIndex = -1;
            if (!nodeSplitResult.allRightHashMapsEqual || bucketPath.itemIndex >= MAX_LEVEL_SIZE / 2)
              newNodeIndex = addNewNode(newNode, nodeLocalDepth);

            final int updatedItemIndex = bucketPath.itemIndex << 1;
            final int updatedOffset = bucketPath.hashMapOffset << 1;
            final int updatedGlobalDepth = bucketPath.nodeGlobalDepth + 1;

            boolean allLeftHashMapsEqual = nodeSplitResult.allLeftHashMapsEqual;
            boolean allRightHashMapsEqual = nodeSplitResult.allRightHashMapsEqual;

            if (updatedOffset < MAX_LEVEL_SIZE) {
              allLeftHashMapsEqual = false;
              final BucketPath updatedBucketPath = new BucketPath(bucketPath.parent, updatedOffset, updatedItemIndex,
                  bucketPath.nodeIndex, nodeLocalDepth, updatedGlobalDepth);
              updateNodeAfterBucketSplit(updatedBucketPath, bucketDepth, newBucketPointer, updatedBucketPointer);
            } else {
              allRightHashMapsEqual = false;
              final BucketPath newBucketPath = new BucketPath(bucketPath.parent, updatedOffset - MAX_LEVEL_SIZE, updatedItemIndex,
                  newNodeIndex, nodeLocalDepth, updatedGlobalDepth);
              updateNodeAfterBucketSplit(newBucketPath, bucketDepth, newBucketPointer, updatedBucketPointer);
            }

            final long[] updatedNode = hashTree[bucketPath.nodeIndex];
            updateNodesAfterSplit(bucketPath, updatedNode, newNode, nodeLocalDepth, hashMapSize, allLeftHashMapsEqual,
                allRightHashMapsEqual, newNodeIndex);

            if (allLeftHashMapsEqual)
              deleteNode(bucketPath.nodeIndex);

          } else {
            addNewLevelNode(bucketPath, node, newBucketPointer, updatedBucketPointer);
          }
        }
      } finally {
        releasePage(pageIndex, fileLevel);
      }

      doPut(key, value);
    } catch (OIndexMaximumLimitReachedException e) {
      OLogManager.instance().warn(this, "Key " + key + " is too large to fit in index and will be skipped", e);
    } catch (IOException e) {
      throw new OIndexException("Error during index update", e);
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5a893_6d0a6/rev_5a893-6d0a6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_10b17_0eb36/rev_10b17-0eb36.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ed334_17b09/rev_ed334-17b09.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_10b17_29ff6/rev_10b17-29ff6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_10b17_16442/rev_10b17-16442.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7e31b_0816f/rev_7e31b-0816f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5a893_57a51/rev_5a893-57a51.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_10b17_2f43a/rev_10b17-2f43a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_aebdf_ce65b/rev_aebdf-ce65b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7fd8e_e48c2/rev_7fd8e-e48c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_050ef_7fd8e/rev_050ef-7fd8e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5fed7_e90a7/rev_5fed7-e90a7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_88fc5_8a05e/rev_88fc5-8a05e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9aee6_f85a2/rev_9aee6-f85a2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_560d1_7685a/rev_560d1-7685a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1cd9_560d1/rev_b1cd9-560d1.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413406791734/fstmerge_var1_1913865924573241295
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject();
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(0, true);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413406791734/fstmerge_base_8954697276474594657
=======
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject(settings.indentLevel);
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(settings.indentLevel);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413406791734/fstmerge_var2_2462973546817776830

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1cd9_560d1/rev_b1cd9-560d1/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerJSON.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413406791842/fstmerge_var1_4153595877564054708
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK) {
                      // EMBEDDED FOR SURE SINCE IT CONTAINS JAVA TYPES
                      if (linkedType == null) {
                        linkedType = OType.EMBEDDED;
                        // linkedClass = new OClass(firstValue.getClass());
                      }
                    }
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              }
            }
          }

          if (type == null)
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks)
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413406791842/fstmerge_base_8717852876289583460
=======
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK) {
                      // EMBEDDED FOR SURE SINCE IT CONTAINS JAVA TYPES
                      if (linkedType == null) {
                        linkedType = OType.EMBEDDED;
                        // linkedClass = new OClass(firstValue.getClass());
                      }
                    }
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              } else {
                type = OType.EMBEDDEDMAP;
              }
            }
          } else
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
          }
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413406791842/fstmerge_var2_6670468124024028883

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1cd9_560d1/rev_b1cd9-560d1/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerSchemaAware2CSV.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7082b_3777f/rev_7082b-3777f.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413407262462/fstmerge_var1_3245752949858816440
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject();
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(0, true);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413407262462/fstmerge_base_8970389180853625704
=======
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject(settings.indentLevel);
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(settings.indentLevel);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413407262462/fstmerge_var2_4307141567278710296

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7082b_3777f/rev_7082b-3777f/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerJSON.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413407262545/fstmerge_var1_6103511948569015368
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK) {
                      // EMBEDDED FOR SURE SINCE IT CONTAINS JAVA TYPES
                      if (linkedType == null) {
                        linkedType = OType.EMBEDDED;
                        // linkedClass = new OClass(firstValue.getClass());
                      }
                    }
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              }
            }
          }

          if (type == null)
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks)
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413407262545/fstmerge_base_5580337643199604065
=======
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK) {
                      // EMBEDDED FOR SURE SINCE IT CONTAINS JAVA TYPES
                      if (linkedType == null) {
                        linkedType = OType.EMBEDDED;
                        // linkedClass = new OClass(firstValue.getClass());
                      }
                    }
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              } else {
                type = OType.EMBEDDEDMAP;
              }
            }
          } else
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
          }
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413407262545/fstmerge_var2_6873482884258975868

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7082b_3777f/rev_7082b-3777f/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerSchemaAware2CSV.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_37ff9_4a97b/rev_37ff9-4a97b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1c910_e1435/rev_1c910-e1435.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bfba7_485a3/rev_bfba7-485a3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_40d35_c34d5/rev_40d35-c34d5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b346f_0eec0/rev_b346f-0eec0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_16ca0_00ab9/rev_16ca0-00ab9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_97c2f_00ab9/rev_97c2f-00ab9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f4573_024f0/rev_f4573-024f0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b6029_5441e/rev_b6029-5441e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b9159_d26bf/rev_b9159-d26bf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a7a7c_b164a/rev_a7a7c-b164a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_164fa_7bba7/rev_164fa-7bba7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8cdfb_9a01a/rev_8cdfb-9a01a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3a0af_5fed7/rev_3a0af-5fed7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2a479_a52f9/rev_2a479-a52f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2a479_59446/rev_2a479-59446.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0a8b5_fa2f6/rev_0a8b5-fa2f6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1bad_c0a8e/rev_b1bad-c0a8e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fedd4_4bb8b/rev_fedd4-4bb8b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private boolean exists(String path) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413416272583/fstmerge_var1_8317487366025496787
    return new File(path + "/" + OMetadataDefault.CLUSTER_INTERNAL_NAME + OLocalPaginatedCluster.DEF_EXTENSION).exists();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413416272583/fstmerge_base_6241680275919423817
    return new File(path + "/" + OMetadata.CLUSTER_INTERNAL_NAME + OLocalPaginatedCluster.DEF_EXTENSION).exists();
=======
    return new File(path + "/" + OMetadata.CLUSTER_INTERNAL_NAME + OPaginatedCluster.DEF_EXTENSION).exists();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413416272583/fstmerge_var2_1947562257304058930
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fedd4_4bb8b/rev_fedd4-4bb8b/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6d213_eb852/rev_6d213-eb852.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@SuppressWarnings({ "unchecked", "rawtypes" })
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413417120657/fstmerge_var1_6876496199247451636
  public void onBeforeMap(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject) throws OFetchException {
    final Map<Object, Object> map = (Map<Object, Object>) iRootRecord.field(iFieldName);
    final Map<Object, Object> target;
    if (lazyLoading)
      target = new OLazyObjectMap<Object>(iRootRecord, map).setFetchPlan(fetchPlan);
    else {
      target = new HashMap();
    }
    OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413417120657/fstmerge_base_8940286470842213897
	public void onBeforeMap(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject) throws OFetchException {
		final Map<Object, Object> map = (Map<Object, Object>) iRootRecord.field(iFieldName);
		final Map<Object, Object> target;
		if (lazyLoading)
			target = new OLazyObjectMap<Object>(iRootRecord, map).setFetchPlan(fetchPlan);
		else {
			target = new HashMap();
		}
		OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
	}
=======
  public void onBeforeMap(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject) throws OFetchException {
    final Map map = (Map) iRootRecord.field(iFieldName);
    Map target = null;
    final Field f = OObjectEntitySerializer.getField(iFieldName, iUserObject.getClass());
    final boolean customSerialization = OObjectEntitySerializer.isSerializedType(f);
    final Class genericType = OReflectionHelper.getGenericMultivalueType(f);
    if (map instanceof ORecordLazyMap
        || (map instanceof OTrackedMap<?> && !OReflectionHelper.isJavaType(genericType) && !customSerialization && !genericType
            .isEnum())) {
      target = new OObjectLazyMap(iUserObject, (OTrackedMap<?>) map, OObjectEntitySerializer.isCascadeDeleteField(
          iUserObject.getClass(), f.getName()));
    } else if (customSerialization) {
      target = new OObjectCustomSerializerMap<TYPE>(OObjectEntitySerializer.getSerializedType(f), iRootRecord,
          (Map<Object, Object>) map);
    } else if (genericType.isEnum()) {
      target = new OObjectEnumLazyMap(genericType, iRootRecord, (Map<Object, Object>) map);
    } else {
      target = new HashMap();
    }
    OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413417120657/fstmerge_var2_6839166746813982131

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6d213_eb852/rev_6d213-eb852/object/src/main/java/com/orientechnologies/orient/object/fetch/OObjectFetchContext.java
Conflict type: LineBasedMCFd
Conflict body: 
@SuppressWarnings({ "rawtypes", "unchecked" })
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413417120682/fstmerge_var1_5671431524899146837
  public void onBeforeCollection(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject,
      final Collection<?> iCollection) throws OFetchException {
    final Class<?> type = OObjectSerializerHelper.getFieldType(iUserObject, iFieldName);
    final Collection target;
    if (type != null && Set.class.isAssignableFrom(type)) {
      if (lazyLoading)
        target = new OLazyObjectSet<Object>(iRootRecord, (Collection<Object>) iCollection).setFetchPlan(fetchPlan);
      else {
        target = new HashSet();
      }
    } else {
      final Collection<Object> list = (Collection<Object>) iCollection;
      if (lazyLoading)
        target = new OLazyObjectList<Object>(iRootRecord, list).setFetchPlan(fetchPlan);
      else {
        target = new ArrayList();
      }
    }
    OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413417120682/fstmerge_base_1778684313489082342
	public void onBeforeCollection(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject,
			final Collection<?> iCollection) throws OFetchException {
		final Class<?> type = OObjectSerializerHelper.getFieldType(iUserObject, iFieldName);
		final Collection target;
		if (type != null && Set.class.isAssignableFrom(type)) {
			if (lazyLoading)
				target = new OLazyObjectSet<Object>(iRootRecord, (Collection<Object>) iCollection).setFetchPlan(fetchPlan);
			else {
				target = new HashSet();
			}
		} else {
			final Collection<Object> list = (Collection<Object>) iCollection;
			if (lazyLoading)
				target = new OLazyObjectList<Object>(iRootRecord, list).setFetchPlan(fetchPlan);
			else {
				target = new ArrayList();
			}
		}
		OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
	}
=======
  public void onBeforeCollection(ORecordSchemaAware<?> iRootRecord, String iFieldName, final Object iUserObject,
      final Collection<?> iCollection) throws OFetchException {
    final Field f = OObjectEntitySerializer.getField(iFieldName, iUserObject.getClass());
    final boolean customSerialization = OObjectEntitySerializer.isSerializedType(f);
    final Class genericType = OReflectionHelper.getGenericMultivalueType(f);
    Collection target;
    if (iCollection instanceof ORecordLazyList
        || (iCollection instanceof OTrackedList<?> && !OReflectionHelper.isJavaType(genericType) && !customSerialization && !genericType
            .isEnum())) {
      target = new OObjectLazyList(iUserObject, (List<OIdentifiable>) iCollection, OObjectEntitySerializer.isCascadeDeleteField(
          iUserObject.getClass(), f.getName()));
    } else if (iCollection instanceof ORecordLazySet
        || iCollection instanceof OMVRBTreeRIDSet
        || (iCollection instanceof OTrackedSet<?> && !OReflectionHelper.isJavaType(genericType) && !customSerialization && !genericType
            .isEnum())) {
      target = new OObjectLazySet(iUserObject, (Set) iCollection, OObjectEntitySerializer.isCascadeDeleteField(
          iUserObject.getClass(), f.getName()));
    } else if (customSerialization) {
      if (iCollection instanceof List<?>) {
        target = new OObjectCustomSerializerList(OObjectEntitySerializer.getSerializedType(f), iRootRecord,
            (List<Object>) iCollection);
      } else {
        target = new OObjectCustomSerializerSet(OObjectEntitySerializer.getSerializedType(f), iRootRecord,
            (Set<Object>) iCollection);
      }
    } else if (genericType.isEnum()) {
      if (iCollection instanceof List<?>) {
        target = new OObjectEnumLazyList(genericType, iRootRecord, (List<Object>) iCollection);
      } else {
        target = new OObjectEnumLazySet(genericType, iRootRecord, (Set<Object>) iCollection);
      }
    } else {
      if (iCollection instanceof List<?>) {
        target = new ArrayList();
      } else {
        target = new HashSet();
      }
    }
    OObjectSerializerHelper.setFieldValue(iUserObject, iFieldName, target);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413417120682/fstmerge_var2_4871803651633809833

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6d213_eb852/rev_6d213-eb852/object/src/main/java/com/orientechnologies/orient/object/fetch/OObjectFetchContext.java

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_041a3_2d656/rev_041a3-2d656.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448727/fstmerge_var1_3245183299091328292
@Override
	public EntityManagerFactory createEntityManagerFactory(String emName, Map map) {
		if (emName == null) {
			throw new IllegalStateException("Name of the persistence unit should not be null");
		}

		synchronized (emName) {
			PersistenceUnitInfo unitInfo = PersistenceXmlUtil.findPersistenceUnit(emName, persistenceUnits);
			return createContainerEntityManagerFactory(unitInfo, map);
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448727/fstmerge_base_3706153125755203191
public EntityManagerFactory createEntityManagerFactory(String emName, Map map) {
		return OJPAEntityManagerFactory.getInstance();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448727/fstmerge_var2_6817534054151023318

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAPersistenceProvider.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448732/fstmerge_var1_4648117945506300924
@SuppressWarnings("unchecked")
	@Override
	public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info, Map map) {
		if (info == null || info.getPersistenceUnitName() == null) {
			throw new IllegalStateException("Name of the persistence unit should not be null");
		}

		synchronized (info) {
			if (map != null && !map.isEmpty()) {
				info.getProperties().putAll(map);
			}
			return new OJPAEntityManagerFactory((OJPAProperties) info.getProperties());
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448732/fstmerge_base_2316553713708902577
public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info, Map map) {
		return OJPAEntityManagerFactory.getInstance();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448732/fstmerge_var2_8030277834485704294

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAPersistenceProvider.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448736/fstmerge_var1_2636503668575511313
@Override
	public ProviderUtil getProviderUtil() {
		throw new UnsupportedOperationException("getProviderUtil");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448736/fstmerge_base_3698024615788332692
public ProviderUtil getProviderUtil() {
		throw new UnsupportedOperationException("getProviderUtil");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448736/fstmerge_var2_3538712116806487445

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAPersistenceProvider.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private boolean												opened		= true; ##FSTMerge## private boolean																opened		= true; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final List<OJPAEntityManager>	instances	= new ArrayList<OJPAEntityManager>(); ##FSTMerge## private List<OJPAEntityManager>								instances	= new ArrayList<OJPAEntityManager>(); ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448740/fstmerge_var1_6658202157257095706
@Override
	public EntityManager createEntityManager() {
		return createEntityManager(properties);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448740/fstmerge_base_2753510853052002905
public EntityManager createEntityManager() {
		return createEntityManager(new HashMap<Object, Object>());
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448740/fstmerge_var2_1155362944668483342

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448746/fstmerge_var1_3255770497296560899
@Override
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public EntityManager createEntityManager(final Map map) {
		return createEntityManager(new OJPAProperties(map));
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448746/fstmerge_base_7215887619695820777
@SuppressWarnings("rawtypes")
	public EntityManager createEntityManager(final Map map) {
		final OJPAEntityManager newInstance = new OJPAEntityManager(map);
		instances.add(newInstance);
		return newInstance;
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448746/fstmerge_var2_7009560668315666560

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448751/fstmerge_var1_4773641815303707855
@Override
	public void close() {
		for (OJPAEntityManager instance : instances) {
			instance.close();
		}
		instances.clear();
		opened = false;
		if (logger.isLoggable(Level.INFO)) {
			logger.info("EntityManagerFactory closed. " + toString());
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448751/fstmerge_base_3469489063569061601
public void close() {
		for (OJPAEntityManager instance : instances) {
			instance.close();
		}
		instances.clear();
		opened = false;
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448751/fstmerge_var2_7987226011097697492

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448755/fstmerge_var1_2975740471198295284
@Override
	public boolean isOpen() {
		return opened;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448755/fstmerge_base_2323614848200388205
public boolean isOpen() {
		return opened;
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448755/fstmerge_var2_2995722640460746268

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448760/fstmerge_var1_8537921109636325936
@Override
	public CriteriaBuilder getCriteriaBuilder() {
		throw new UnsupportedOperationException("getCriteriaBuilder");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448760/fstmerge_base_2047481235359442950
public CriteriaBuilder getCriteriaBuilder() {
		throw new UnsupportedOperationException("getCriteriaBuilder");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448760/fstmerge_var2_5726378700062149950

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448764/fstmerge_var1_8318305892239816256
@Override
	public Metamodel getMetamodel() {
		throw new UnsupportedOperationException("getMetamodel");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448764/fstmerge_base_7708335686974050794
public Metamodel getMetamodel() {
		throw new UnsupportedOperationException("getMetamodel");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448764/fstmerge_var2_6646846730528776184

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448769/fstmerge_var1_929360957692947584
@Override
	public Map<String, Object> getProperties() {
		return properties.getUnmodifiableProperties();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448769/fstmerge_base_8129207560382631413
public Map<String, Object> getProperties() {
		throw new UnsupportedOperationException("getProperties");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448769/fstmerge_var2_2820436102535873169

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448773/fstmerge_var1_6162760094696750045
@Override
	public Cache getCache() {
		throw new UnsupportedOperationException("getCache");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448773/fstmerge_base_7095086050399423937
public Cache getCache() {
		throw new UnsupportedOperationException("getCache");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448773/fstmerge_var2_1130233834851635884

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448778/fstmerge_var1_2715039410533239390
@Override
	public PersistenceUnitUtil getPersistenceUnitUtil() {
		throw new UnsupportedOperationException("getPersistenceUnitUtil");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448778/fstmerge_base_7552090120571811660
public PersistenceUnitUtil getPersistenceUnitUtil() {
		throw new UnsupportedOperationException("getPersistenceUnitUtil");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448778/fstmerge_var2_4617855350451671332

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManagerFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final OObjectDatabaseTx			database; ##FSTMerge## private ODatabaseObjectTx database; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private FlushModeType								flushMode	= FlushModeType.AUTO; ##FSTMerge## private FlushModeType     flushMode = FlushModeType.AUTO; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final EntityTransaction			transaction; ##FSTMerge## private EntityTransaction transaction; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448782/fstmerge_var1_7497695990466922779
@Override
	public void persist(Object entity) {
		database.save(entity);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448782/fstmerge_base_8541884456986275619
public void persist(Object entity) {
    database.save(entity);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448782/fstmerge_var2_8751302659685458111

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448787/fstmerge_var1_6161503547164446909
@Override
	public <T> T merge(T entity) {
		throw new UnsupportedOperationException("merge");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448787/fstmerge_base_3680865861033809363
public <T> T merge(T entity) {
    throw new UnsupportedOperationException("merge");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448787/fstmerge_var2_1223753411393738765

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448791/fstmerge_var1_8905066907775207451
@Override
	public void remove(Object entity) {
		database.delete(entity);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448791/fstmerge_base_8618492190459474667
public void remove(Object entity) {
    database.delete(entity);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448791/fstmerge_var2_5523015576943157718

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448796/fstmerge_var1_8164226528761058567
@Override
	@SuppressWarnings("unchecked")
	public <T> T find(Class<T> entityClass, Object primaryKey) {
		final ORecordId rid;

		if (primaryKey instanceof ORecordId) {
			rid = (ORecordId) primaryKey;
		} else if (primaryKey instanceof String) {
			rid = new ORecordId((String) primaryKey);
		} else if (primaryKey instanceof Number) {
			// COMPOSE THE RID
			OClass cls = database.getMetadata().getSchema().getClass(entityClass);
			if (cls == null) {
				throw new IllegalArgumentException("Class '" + entityClass + "' is not configured in the database");
			}
			rid = new ORecordId(cls.getDefaultClusterId(), OClusterPositionFactory.INSTANCE.valueOf(((Number) primaryKey).longValue()));
		} else {
			throw new IllegalArgumentException("PrimaryKey '" + primaryKey + "' type (" + primaryKey.getClass() + ") is not supported");
		}

		return (T) database.load(rid);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448796/fstmerge_base_3653104836802254284
@SuppressWarnings("unchecked")
  public <T> T find(Class<T> entityClass, Object primaryKey) {
    final ORecordId rid;

    if (primaryKey instanceof ORecordId)
      rid = (ORecordId) primaryKey;
    else if (primaryKey instanceof String)
      rid = new ORecordId((String) primaryKey);
    else if (primaryKey instanceof Number) {
      // COMPOSE THE RID
      OClass cls = database.getMetadata().getSchema().getClass(entityClass);
      if (cls == null)
        throw new IllegalArgumentException("Class '" + entityClass + "' is not configured in the database");
      rid = new ORecordId(cls.getDefaultClusterId(), OClusterPositionFactory.INSTANCE.valueOf(((Number) primaryKey).longValue()));
    } else
      throw new IllegalArgumentException("PrimaryKey '" + primaryKey + "' type (" + primaryKey.getClass() + ") is not supported");

    return (T) database.load(rid);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448796/fstmerge_var2_2985245732226375845

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448800/fstmerge_var1_2335162048033205176
@Override
	public <T> T getReference(Class<T> entityClass, Object primaryKey) {
		throw new UnsupportedOperationException("merge");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448800/fstmerge_base_449309450330165166
public <T> T getReference(Class<T> entityClass, Object primaryKey) {
    throw new UnsupportedOperationException("merge");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448800/fstmerge_var2_1249827299485247587

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448805/fstmerge_var1_4287148392650304207
@Override
	public void flush() {
		if (flushMode == FlushModeType.COMMIT) {
			database.commit();
			if (logger.isLoggable(Level.FINEST)) {
				logger.info("EntityManager flushed. " + toString());
			}
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448805/fstmerge_base_3466169590378952652
public void flush() {
    if (flushMode == FlushModeType.COMMIT)
      database.commit();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448805/fstmerge_var2_679197731769065266

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448810/fstmerge_var1_3519085634567370200
@Override
	public void setFlushMode(FlushModeType flushMode) {
		this.flushMode = flushMode;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448810/fstmerge_base_2987206993863721167
public void setFlushMode(FlushModeType flushMode) {
    this.flushMode = flushMode;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448810/fstmerge_var2_2215197663470744119

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448814/fstmerge_var1_5000287981707707377
@Override
	public FlushModeType getFlushMode() {
		return flushMode;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448814/fstmerge_base_247209960501396436
public FlushModeType getFlushMode() {
    return flushMode;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448814/fstmerge_var2_5922872180758766668

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448819/fstmerge_var1_2274613425270864494
@Override
	public void lock(Object entity, LockModeType lockMode) {
		throw new UnsupportedOperationException("lock");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448819/fstmerge_base_4569046220951166281
public void lock(Object entity, LockModeType lockMode) {
    throw new UnsupportedOperationException("lock");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448819/fstmerge_var2_6219873462858894995

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448824/fstmerge_var1_5737161360381396065
@Override
	public void refresh(Object entity) {
		database.load(entity);
		if (logger.isLoggable(Level.FINEST)) {
			logger.info("EntityManager refreshed. " + toString());
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448824/fstmerge_base_172473596696904402
public void refresh(Object entity) {
    database.load(entity);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448824/fstmerge_var2_7023825674720310175

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448828/fstmerge_var1_5729643471323027869
@Override
	public void clear() {
		if (flushMode == FlushModeType.COMMIT) {
			database.rollback();
			if (logger.isLoggable(Level.FINEST)) {
				logger.info("EntityManager cleared. " + toString());
			}
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448828/fstmerge_base_9178904611682366081
public void clear() {
    if (flushMode == FlushModeType.COMMIT)
      database.rollback();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448828/fstmerge_var2_943387625193306157

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448832/fstmerge_var1_5050108637441069444
@Override
	public boolean contains(Object entity) {
		return database.isManaged(entity);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448832/fstmerge_base_5739143705547044950
public boolean contains(Object entity) {
    return database.isManaged(entity);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448832/fstmerge_var2_1867097387103149348

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448837/fstmerge_var1_7496430884119412816
@Override
	public Query createQuery(String qlString) {
		throw new UnsupportedOperationException("createQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448837/fstmerge_base_4608390717034699550
public Query createQuery(String qlString) {
    throw new UnsupportedOperationException("createQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448837/fstmerge_var2_8564287437683249715

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448841/fstmerge_var1_8499879708892629245
@Override
	public Query createNamedQuery(String name) {
		throw new UnsupportedOperationException("createNamedQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448841/fstmerge_base_2433544876664881422
public Query createNamedQuery(String name) {
    throw new UnsupportedOperationException("createNamedQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448841/fstmerge_var2_7718259459135196316

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448846/fstmerge_var1_8592707350727355152
@Override
	public Query createNativeQuery(String sqlString) {
		throw new UnsupportedOperationException("createNativeQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448846/fstmerge_base_8904668111593497238
public Query createNativeQuery(String sqlString) {
    throw new UnsupportedOperationException("createNativeQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448846/fstmerge_var2_2444881057426323979

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448851/fstmerge_var1_7549805726802856751
@Override
	@SuppressWarnings("rawtypes")
	public Query createNativeQuery(String sqlString, Class resultClass) {
		throw new UnsupportedOperationException("createNativeQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448851/fstmerge_base_3088334465340800251
@SuppressWarnings("rawtypes")
  public Query createNativeQuery(String sqlString, Class resultClass) {
    throw new UnsupportedOperationException("createNativeQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448851/fstmerge_var2_1430403957259813068

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448855/fstmerge_var1_6218025040023434824
@Override
	public Query createNativeQuery(String sqlString, String resultSetMapping) {
		throw new UnsupportedOperationException("createNativeQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448855/fstmerge_base_519426512926773431
public Query createNativeQuery(String sqlString, String resultSetMapping) {
    throw new UnsupportedOperationException("createNativeQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448855/fstmerge_var2_3257487582467347055

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448859/fstmerge_var1_1975545877779488744
@Override
	public void joinTransaction() {
		throw new UnsupportedOperationException("joinTransaction");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448859/fstmerge_base_6848021759122486876
public void joinTransaction() {
    throw new UnsupportedOperationException("joinTransaction");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448859/fstmerge_var2_7001063444701549297

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448864/fstmerge_var1_5515318742347384978
@Override
	public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {
		throw new UnsupportedOperationException("find(Class<T>, LockModeType, Map<String, Object>)");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448864/fstmerge_base_3589815876125739610
public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {
    throw new UnsupportedOperationException("find(Class<T>, LockModeType, Map<String, Object>)");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448864/fstmerge_var2_2292678872573904666

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448868/fstmerge_var1_1552968309131073487
@Override
	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {
		throw new UnsupportedOperationException("find(Class<T>, Object, LockModeType");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448868/fstmerge_base_5037744208082771370
public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {
    throw new UnsupportedOperationException("find(Class<T>, Object, LockModeType");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448868/fstmerge_var2_8155572773563751386

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448872/fstmerge_var1_2308267205570725242
@Override
	public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {
		throw new UnsupportedOperationException("find(Class<T>, Object, LockModeType, Map<String, Object>)");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448872/fstmerge_base_2105023788088609906
public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {
    throw new UnsupportedOperationException("find(Class<T>, Object, LockModeType, Map<String, Object>)");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448872/fstmerge_var2_2421962437022616909

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448877/fstmerge_var1_5366949152904598818
@Override
	public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {
		throw new UnsupportedOperationException("lock");

	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448877/fstmerge_base_4001166373132709502
public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {
    throw new UnsupportedOperationException("lock");

  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448877/fstmerge_var2_3036789581048305932

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448881/fstmerge_var1_6074247381660631690
@Override
	public void refresh(Object entity, Map<String, Object> properties) {
		throw new UnsupportedOperationException("refresh");

	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448881/fstmerge_base_6961833812564729568
public void refresh(Object entity, Map<String, Object> properties) {
    throw new UnsupportedOperationException("refresh");

  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448881/fstmerge_var2_3585931105197374879

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448886/fstmerge_var1_8771066491935061203
@Override
	public void refresh(Object entity, LockModeType lockMode) {
		throw new UnsupportedOperationException("refresh");

	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448886/fstmerge_base_2996763158554820428
public void refresh(Object entity, LockModeType lockMode) {
    throw new UnsupportedOperationException("refresh");

  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448886/fstmerge_var2_3783430128136948460

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448890/fstmerge_var1_4245150992968321076
@Override
	public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {
		throw new UnsupportedOperationException("refresh");

	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448890/fstmerge_base_6699767743318752616
public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {
    throw new UnsupportedOperationException("refresh");

  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448890/fstmerge_var2_7103349151872002320

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448894/fstmerge_var1_670012939566623521
@Override
	public void detach(Object entity) {
		throw new UnsupportedOperationException("detach");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448894/fstmerge_base_816816633699518562
public void detach(Object entity) {
    throw new UnsupportedOperationException("detach");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448894/fstmerge_var2_284316043872629666

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448898/fstmerge_var1_2215267386121446705
@Override
	public LockModeType getLockMode(Object entity) {
		throw new UnsupportedOperationException("getLockMode");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448898/fstmerge_base_4272662619343774745
public LockModeType getLockMode(Object entity) {
    throw new UnsupportedOperationException("getLockMode");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448898/fstmerge_var2_8470918054166042691

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448903/fstmerge_var1_5392424204128712875
@Override
	public void setProperty(String propertyName, Object value) {
		throw new UnsupportedOperationException("setProperty");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448903/fstmerge_base_9101201252051693881
public void setProperty(String propertyName, Object value) {
    throw new UnsupportedOperationException("setProperty");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448903/fstmerge_var2_695275980594314392

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448907/fstmerge_var1_8932568411309220023
@Override
	public Map<String, Object> getProperties() {
		return properties.getUnmodifiableProperties();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448907/fstmerge_base_1793561437136584883
public Map<String, Object> getProperties() {
    throw new UnsupportedOperationException("getProperties");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448907/fstmerge_var2_8102916260851963887

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448911/fstmerge_var1_8758218689446516760
@Override
	public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {
		throw new UnsupportedOperationException("createQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448911/fstmerge_base_5723711956401002750
public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {
    throw new UnsupportedOperationException("createQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448911/fstmerge_var2_9109002906463187532

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448916/fstmerge_var1_5821310449713109183
@Override
	public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {
		throw new UnsupportedOperationException("createQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448916/fstmerge_base_3950665999455095989
public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {
    throw new UnsupportedOperationException("createQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448916/fstmerge_var2_2851076415816338529

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448920/fstmerge_var1_7674366766335778588
@Override
	public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {
		throw new UnsupportedOperationException("createNamedQuery");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448920/fstmerge_base_7633994058123969948
public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {
    throw new UnsupportedOperationException("createNamedQuery");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448920/fstmerge_var2_9150345371747844717

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448925/fstmerge_var1_648391953333515872
@Override
	public <T> T unwrap(Class<T> cls) {
		throw new UnsupportedOperationException("unwrap");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448925/fstmerge_base_6227906005283138738
public <T> T unwrap(Class<T> cls) {
    throw new UnsupportedOperationException("unwrap");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448925/fstmerge_var2_7226627406488560998

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448929/fstmerge_var1_2838015758285323589
@Override
	public EntityManagerFactory getEntityManagerFactory() {
		return emFactory;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448929/fstmerge_base_5926103812418918088
public EntityManagerFactory getEntityManagerFactory() {
    return OJPAEntityManagerFactory.getInstance();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448929/fstmerge_var2_1255068056095872279

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448933/fstmerge_var1_6747911646627353741
@Override
	public CriteriaBuilder getCriteriaBuilder() {
		throw new UnsupportedOperationException("getCriteriaBuilder");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448933/fstmerge_base_7755625163535664901
public CriteriaBuilder getCriteriaBuilder() {
    throw new UnsupportedOperationException("getCriteriaBuilder");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448933/fstmerge_var2_2202252729573273418

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448937/fstmerge_var1_5045958294132759116
@Override
	public Metamodel getMetamodel() {
		throw new UnsupportedOperationException("getMetamodel");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448937/fstmerge_base_2964185447524068249
public Metamodel getMetamodel() {
    throw new UnsupportedOperationException("getMetamodel");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448937/fstmerge_var2_4353328792576933030

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448942/fstmerge_var1_7613356841914294157
@Override
	public Object getDelegate() {
		return database;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448942/fstmerge_base_8114477993375403691
public Object getDelegate() {
    return database;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448942/fstmerge_var2_7218425591669287112

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448946/fstmerge_var1_6462904110379301260
@Override
	public EntityTransaction getTransaction() {
		return transaction;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448946/fstmerge_base_1798977186608751491
public EntityTransaction getTransaction() {
    return transaction;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448946/fstmerge_var2_3399016109589540095

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448950/fstmerge_var1_5306801894265214584
@Override
	public void close() {
		database.close();
		if (logger.isLoggable(Level.INFO)) {
			logger.info("EntityManager closed. " + toString());
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448950/fstmerge_base_9061216058108055095
public void close() {
    database.close();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448950/fstmerge_var2_7062476222973831453

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448954/fstmerge_var1_9194269895602742903
@Override
	public boolean isOpen() {
		return !database.isClosed();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448954/fstmerge_base_789404295638683465
public boolean isOpen() {
    return !database.isClosed();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448954/fstmerge_var2_5230863705613087162

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityManager.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final OObjectDatabaseTx	database; ##FSTMerge## private ODatabaseObjectTx	database; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448958/fstmerge_var1_4622391702641258771
@Override
	public void begin() {
		database.getTransaction().begin();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448958/fstmerge_base_4417716606987830145
public void begin() {
		database.getTransaction().begin();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448958/fstmerge_var2_7976923673421034546

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448963/fstmerge_var1_3890666166341633908
@Override
	public void commit() {
		database.getTransaction().commit();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448963/fstmerge_base_3892564281407413989
public void commit() {
		database.getTransaction().commit();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448963/fstmerge_var2_3747933619366371399

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448968/fstmerge_var1_8650868167736414771
@Override
	public void rollback() {
		database.getTransaction().rollback();
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448968/fstmerge_base_5173111213797047657
public void rollback() {
		database.getTransaction().rollback();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448968/fstmerge_var2_7067865680433853203

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448973/fstmerge_var1_3072070771986821010
@Override
	public void setRollbackOnly() {
		throw new UnsupportedOperationException("merge");
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448973/fstmerge_base_3376461207219482003
public void setRollbackOnly() {
		throw new UnsupportedOperationException("merge");
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448973/fstmerge_var2_5330710975548151387

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448978/fstmerge_var1_8653131685464901752
@Override
	public boolean getRollbackOnly() {
		return false;
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448978/fstmerge_base_3445855801007819622
public boolean getRollbackOnly() {
		return false;
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448978/fstmerge_var2_4990488058040914173

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413418448983/fstmerge_var1_2989364345887731150
@Override
	public boolean isActive() {
		return !(database.getTransaction() instanceof OTransactionNoTx);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413418448983/fstmerge_base_1427321842789146225
public boolean isActive() {
		return !(database.getTransaction() instanceof OTransactionNoTx);
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413418448983/fstmerge_var2_6595140725046394523

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec070_460e6/rev_ec070-460e6/object/src/main/java/com/orientechnologies/orient/object/jpa/OJPAEntityTransaction.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_16bfe_d703e/rev_16bfe-d703e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_964cb_c239e/rev_964cb-c239e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void setShortNameInternal(final String iShortName) {
    getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA, ORole.PERMISSION_UPDATE);
    if (this.shortName != null)
      // UNREGISTER ANY PREVIOUS SHORT NAME
      owner.classes.remove(this.shortName);

    this.shortName = iShortName;

    // REGISTER IT
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413463008983/fstmerge_var1_6596978386691875160
    if(null != iShortName)
        owner.classes.put(iShortName.toLowerCase(), this);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413463008983/fstmerge_base_3734820937608792231
    owner.classes.put(iShortName.toLowerCase(), this);
=======
    if (null != iShortName)
      owner.classes.put(iShortName.toLowerCase(), this);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413463008983/fstmerge_var2_8880280253736597023
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassImpl.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private static ODatabaseDocumentTx db = null; ##FSTMerge## ##FSTMerge## private static ODatabaseDocumentTx db                   = null;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public static final String SHORTNAME_CLASS_NAME = "TestShortName"; ##FSTMerge## ##FSTMerge## public static final String         SHORTNAME_CLASS_NAME = "TestShortName";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413463015379/fstmerge_var1_2840994787962183292
@BeforeMethod
    public void setUp() throws Exception {
        db = new ODatabaseDocumentTx("memory:metadataclasstest");
        if (db.exists()) {
            db.open("admin", "admin");
            db.drop();
        }
        db.create();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413463015379/fstmerge_base_8747529277545284351
=======
@BeforeMethod
  public void setUp() throws Exception {
    db = new ODatabaseDocumentTx("memory:metadataclasstest");
    if (db.exists()) {
      db.open("admin", "admin");
      db.drop();
    }
    db.create();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413463015379/fstmerge_var2_1998954764667748626

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413463015382/fstmerge_var1_2195556528435514694
@AfterClass
    public void tearDown() throws Exception {
        if (!db.isClosed())
            db.close();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413463015382/fstmerge_base_8767442892145885957
=======
@AfterClass
  public void tearDown() throws Exception {
    if (!db.isClosed())
      db.close();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413463015382/fstmerge_var2_8572948634509947801

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413463015385/fstmerge_var1_3508513713112507496
@Test
    public void testShortName() {
        OSchema schema = db.getMetadata().getSchema();
        OClass oClass = schema.createClass(SHORTNAME_CLASS_NAME);
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());

        String shortName = "shortname";
        oClass.setShortName(shortName);
        Assert.assertEquals(shortName, oClass.getShortName());
        Assert.assertEquals(shortName, queryShortName());

        //FAILS, saves null value and stores "null" string (not null value) internally
//        shortName = "null";
//        oClass.setShortName(shortName);
//        Assert.assertEquals(shortName, oClass.getShortName());
//        Assert.assertEquals(shortName, queryShortName());

        oClass.setShortName(null);
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());

        oClass.setShortName("");
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413463015385/fstmerge_base_3298691422273669133
=======
@Test
  public void testShortName() {
    OSchema schema = db.getMetadata().getSchema();
    OClass oClass = schema.createClass(SHORTNAME_CLASS_NAME);
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());

    String shortName = "shortname";
    oClass.setShortName(shortName);
    Assert.assertEquals(shortName, oClass.getShortName());
    Assert.assertEquals(shortName, queryShortName());

    // FAILS, saves null value and stores "null" string (not null value) internally
    // shortName = "null";
    // oClass.setShortName(shortName);
    // Assert.assertEquals(shortName, oClass.getShortName());
    // Assert.assertEquals(shortName, queryShortName());

    oClass.setShortName(null);
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());

    oClass.setShortName("");
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413463015385/fstmerge_var2_8121628812083452434

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413463015388/fstmerge_var1_3361973873378750317
private String queryShortName(){
        String selectShortNameSQL = "select shortName from ( select flatten(classes) from cluster:internal )"
                + " where name = \"" + SHORTNAME_CLASS_NAME + "\"";
        List<ODocument> result = db.command(new OCommandSQL(selectShortNameSQL)).execute();
        Assert.assertEquals(1, result.size());
        return result.get(0).field("shortName");
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413463015388/fstmerge_base_8744097753964227192
=======
private String queryShortName() {
    String selectShortNameSQL = "select shortName from ( select flatten(classes) from cluster:internal )" + " where name = \""
        + SHORTNAME_CLASS_NAME + "\"";
    List<ODocument> result = db.command(new OCommandSQL(selectShortNameSQL)).execute();
    Assert.assertEquals(1, result.size());
    return result.get(0).field("shortName");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413463015388/fstmerge_var2_7938956194850937067

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3c3d4_8a168/rev_3c3d4-8a168.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d9f27_274ed/rev_d9f27-274ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1ae0d_cf627/rev_1ae0d-cf627.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_59deb_ea725/rev_59deb-ea725.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b940c_e7028/rev_b940c-e7028.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_964cb_c239e/rev_964cb-c239e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void setShortNameInternal(final String iShortName) {
    getDatabase().checkSecurity(ODatabaseSecurityResources.SCHEMA, ORole.PERMISSION_UPDATE);
    if (this.shortName != null)
      // UNREGISTER ANY PREVIOUS SHORT NAME
      owner.classes.remove(this.shortName);

    this.shortName = iShortName;

    // REGISTER IT
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413566018359/fstmerge_var1_7126293770825154086
    if(null != iShortName)
        owner.classes.put(iShortName.toLowerCase(), this);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413566018359/fstmerge_base_5743443556615659844
    owner.classes.put(iShortName.toLowerCase(), this);
=======
    if (null != iShortName)
      owner.classes.put(iShortName.toLowerCase(), this);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413566018359/fstmerge_var2_5195663451920444349
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassImpl.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private static ODatabaseDocumentTx db = null; ##FSTMerge## ##FSTMerge## private static ODatabaseDocumentTx db                   = null;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public static final String SHORTNAME_CLASS_NAME = "TestShortName"; ##FSTMerge## ##FSTMerge## public static final String         SHORTNAME_CLASS_NAME = "TestShortName";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413566025088/fstmerge_var1_4965832501575260683
@BeforeMethod
    public void setUp() throws Exception {
        db = new ODatabaseDocumentTx("memory:metadataclasstest");
        if (db.exists()) {
            db.open("admin", "admin");
            db.drop();
        }
        db.create();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413566025088/fstmerge_base_3169634911254653402
=======
@BeforeMethod
  public void setUp() throws Exception {
    db = new ODatabaseDocumentTx("memory:metadataclasstest");
    if (db.exists()) {
      db.open("admin", "admin");
      db.drop();
    }
    db.create();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413566025088/fstmerge_var2_3312601207568776484

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413566025092/fstmerge_var1_8224466622416191035
@AfterClass
    public void tearDown() throws Exception {
        if (!db.isClosed())
            db.close();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413566025092/fstmerge_base_5017599270683449858
=======
@AfterClass
  public void tearDown() throws Exception {
    if (!db.isClosed())
      db.close();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413566025092/fstmerge_var2_1066574522973952603

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413566025096/fstmerge_var1_6030876918718804652
@Test
    public void testShortName() {
        OSchema schema = db.getMetadata().getSchema();
        OClass oClass = schema.createClass(SHORTNAME_CLASS_NAME);
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());

        String shortName = "shortname";
        oClass.setShortName(shortName);
        Assert.assertEquals(shortName, oClass.getShortName());
        Assert.assertEquals(shortName, queryShortName());

        //FAILS, saves null value and stores "null" string (not null value) internally
//        shortName = "null";
//        oClass.setShortName(shortName);
//        Assert.assertEquals(shortName, oClass.getShortName());
//        Assert.assertEquals(shortName, queryShortName());

        oClass.setShortName(null);
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());

        oClass.setShortName("");
        Assert.assertNull(oClass.getShortName());
        Assert.assertNull(queryShortName());
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413566025096/fstmerge_base_6902183631619879791
=======
@Test
  public void testShortName() {
    OSchema schema = db.getMetadata().getSchema();
    OClass oClass = schema.createClass(SHORTNAME_CLASS_NAME);
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());

    String shortName = "shortname";
    oClass.setShortName(shortName);
    Assert.assertEquals(shortName, oClass.getShortName());
    Assert.assertEquals(shortName, queryShortName());

    // FAILS, saves null value and stores "null" string (not null value) internally
    // shortName = "null";
    // oClass.setShortName(shortName);
    // Assert.assertEquals(shortName, oClass.getShortName());
    // Assert.assertEquals(shortName, queryShortName());

    oClass.setShortName(null);
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());

    oClass.setShortName("");
    Assert.assertNull(oClass.getShortName());
    Assert.assertNull(queryShortName());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413566025096/fstmerge_var2_2502012013398963641

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413566025100/fstmerge_var1_8855392597566363018
private String queryShortName(){
        String selectShortNameSQL = "select shortName from ( select flatten(classes) from cluster:internal )"
                + " where name = \"" + SHORTNAME_CLASS_NAME + "\"";
        List<ODocument> result = db.command(new OCommandSQL(selectShortNameSQL)).execute();
        Assert.assertEquals(1, result.size());
        return result.get(0).field("shortName");
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413566025100/fstmerge_base_1056146656472154664
=======
private String queryShortName() {
    String selectShortNameSQL = "select shortName from ( select flatten(classes) from cluster:internal )" + " where name = \""
        + SHORTNAME_CLASS_NAME + "\"";
    List<ODocument> result = db.command(new OCommandSQL(selectShortNameSQL)).execute();
    Assert.assertEquals(1, result.size());
    return result.get(0).field("shortName");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413566025100/fstmerge_var2_6566610947869464448

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45bc3_5abf6/rev_45bc3-5abf6/core/src/test/java/com/orientechnologies/orient/core/metadata/ClassTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3c3d4_8a168/rev_3c3d4-8a168.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d9f27_274ed/rev_d9f27-274ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1ae0d_cf627/rev_1ae0d-cf627.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_59deb_ea725/rev_59deb-ea725.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b940c_e7028/rev_b940c-e7028.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4c19f_15b37/rev_4c19f-15b37.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1a2b_26eb4/rev_b1a2b-26eb4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_96216_dcc69/rev_96216-dcc69.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_96216_e5a5e/rev_96216-e5a5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec230_e5f8e/rev_ec230-e5f8e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec230_200bb/rev_ec230-200bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f0b6b_3ba22/rev_f0b6b-3ba22.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8f4cf_a1abf/rev_8f4cf-a1abf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3c3d4_662cb/rev_3c3d4-662cb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bb758_51050/rev_bb758-51050.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_572c6_877a0/rev_572c6-877a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7ce34_105e4/rev_7ce34-105e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_18b96_fb61d/rev_18b96-fb61d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_18b96_fb61d/rev_18b96-fb61d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f12b1_b48cd/rev_f12b1-b48cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04cc3_03039/rev_04cc3-03039.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4b520_891ed/rev_4b520-891ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e2fbc_3cb16/rev_e2fbc-3cb16.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec118_3d370/rev_ec118-3d370.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_abb2a_0ace2/rev_abb2a-0ace2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_55efa_60478/rev_55efa-60478.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_217e9_9f0e5/rev_217e9-9f0e5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_075fa_e2927/rev_075fa-e2927.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_59639_188a5/rev_59639-188a5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8cee1_930ab/rev_8cee1-930ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0578b_4b8db/rev_0578b-4b8db.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3641a_d4c73/rev_3641a-d4c73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_98345_68ec4/rev_98345-68ec4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_66beb_99d08/rev_66beb-99d08.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3c380_09fba/rev_3c380-09fba.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c4d1e_4e616/rev_c4d1e-4e616.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1519a_cde47/rev_1519a-cde47.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f51c1_03ed4/rev_f51c1-03ed4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ef59f_953d1/rev_ef59f-953d1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b0f87_013cc/rev_b0f87-013cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_54102_ba80e/rev_54102-ba80e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_71068_4a16e/rev_71068-4a16e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_e6035/rev_368c0-e6035.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static String[]              ALL_FILE_EXTENSIONS                  = { ".ocf", ".pls", ".pcl", ".oda", ".odh", ".otx",
      ".ocs", ".oef", ".oem", ".oet", OWriteAheadLog.WAL_SEGMENT_EXTENSION, OWriteAheadLog.MASTER_RECORD_EXTENSION,
      OLocalHashTableIndexEngine.BUCKET_FILE_EXTENSION, OLocalHashTableIndexEngine.METADATA_FILE_EXTENSION,
      OLocalHashTableIndexEngine.TREE_FILE_EXTENSION, OClusterPositionMap.DEF_EXTENSION }; ##FSTMerge## private static String[]                      ALL_FILE_EXTENSIONS                  = { ".ocf", ".pls", ".pcl", ".oda", ".odh",
      ".otx", ".ocs", ".oef", ".oem", ".oet", OWriteAheadLog.WAL_SEGMENT_EXTENSION, OWriteAheadLog.MASTER_RECORD_EXTENSION,
      OLocalHashTableIndexEngine.BUCKET_FILE_EXTENSION, OLocalHashTableIndexEngine.METADATA_FILE_EXTENSION,
      OLocalHashTableIndexEngine.TREE_FILE_EXTENSION                               }; ##FSTMerge## private final static String[]                ALL_FILE_EXTENSIONS                  = { ".ocf", ".pls", ".pcl", ".oda", ".odh",
      ".otx", ".ocs", ".oef", ".oem", ".oet", OWriteAheadLog.WAL_SEGMENT_EXTENSION, OWriteAheadLog.MASTER_RECORD_EXTENSION,
      OLocalHashTableIndexEngine.BUCKET_FILE_EXTENSION, OLocalHashTableIndexEngine.METADATA_FILE_EXTENSION,
      OLocalHashTableIndexEngine.TREE_FILE_EXTENSION, OSBTreeIndexEngine.DATA_FILE_EXTENSION, OWOWCache.NAME_ID_MAP_EXTENSION };
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585956070/fstmerge_var1_5017274432810550484
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585956070/fstmerge_base_9067109230911986795
public OIndexMultiValues(final String type, OIndexEngine<Set<OIdentifiable>> indexEngine) {
    super(type, indexEngine);
  }
=======
public OIndexMultiValues(final String type, OIndexEngine<Set<OIdentifiable>> indexEngine) {
    super(type, indexEngine);
    OStorage storage = ODatabaseRecordThreadLocal.INSTANCE.get().getStorage();
    useSBTreeRIDSet = storage.getType().equals(OEngineLocalPaginated.NAME)
        && OGlobalConfiguration.INDEX_NOTUNIQUE_USE_SBTREE_CONTAINER_BY_DEFAULT.getValueAsBoolean();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585956070/fstmerge_var2_3784122987378098940

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
public Collection<V> getValuesMinor(K key, boolean inclusive, final int maxValuesToFetch) {
    final List<V> result = new ArrayList<V>();

    loadEntriesMinor(key, inclusive, new RangeResultListener<K, V>() {
      @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958650/fstmerge_var1_8266402817515100883
      public boolean addResult(Map.Entry<K, V> entry) {
        result.add(entry.getValue());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958650/fstmerge_base_8569487271987316005
      public boolean addResult(OSBTreeBucket.SBTreeEntry<K, V> entry) {
        result.add(entry.value);
=======
      public boolean addResult(BucketEntry<K, V> entry) {
        result.add(entry.getValue());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958650/fstmerge_var2_6324285156003298674
        if (maxValuesToFetch > -1 && result.size() >= maxValuesToFetch)
          return false;

        return true;
      }
    });

    return result;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/sbtree/local/OSBTree.java
Conflict type: LineBasedMCFd
Conflict body: 
public Collection<V> getValuesMajor(K key, boolean inclusive, final int maxValuesToFetch) {
    final List<V> result = new ArrayList<V>();

    loadEntriesMajor(key, inclusive, new RangeResultListener<K, V>() {
      @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958656/fstmerge_var1_5695038780195764130
      public boolean addResult(Map.Entry<K, V> entry) {
        result.add(entry.getValue());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958656/fstmerge_base_3228582292826994126
      public boolean addResult(OSBTreeBucket.SBTreeEntry<K, V> entry) {
        result.add(entry.value);
=======
      public boolean addResult(BucketEntry<K, V> entry) {
        result.add(entry.getValue());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958656/fstmerge_var2_8328194865153924791
        if (maxValuesToFetch > -1 && result.size() >= maxValuesToFetch)
          return false;

        return true;
      }
    });

    return result;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/sbtree/local/OSBTree.java
Conflict type: LineBasedMCFd
Conflict body: 
public Collection<V> getValuesBetween(K keyFrom, boolean fromInclusive, K keyTo, boolean toInclusive, final int maxValuesToFetch) {
    final List<V> result = new ArrayList<V>();
    loadEntriesBetween(keyFrom, fromInclusive, keyTo, toInclusive, new RangeResultListener<K, V>() {
      @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958662/fstmerge_var1_2715340188791631372
      public boolean addResult(Map.Entry<K, V> entry) {
        result.add(entry.getValue());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958662/fstmerge_base_1479427542314516263
      public boolean addResult(OSBTreeBucket.SBTreeEntry<K, V> entry) {
        result.add(entry.value);
=======
      public boolean addResult(BucketEntry<K, V> entry) {
        result.add(entry.getValue());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958662/fstmerge_var2_5526984382698111547
        if (maxValuesToFetch > 0 && result.size() >= maxValuesToFetch)
          return false;

        return true;
      }
    });

    return result;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/sbtree/local/OSBTree.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final static long                   ROOT_INDEX              = 0; ##FSTMerge## private final static long              ROOT_INDEX         = 0; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/sbtree/local/OSBTree.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958831/fstmerge_var1_2062111466866280182
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958831/fstmerge_base_5173180077307002313
@Override
  public void load(ORID indexRid, String indexName, boolean isAutomatic) {
    acquireExclusiveLock();
    try {
      sbTree = new OSBTree<Object, V>(DATA_FILE_EXTENSION, 1, OGlobalConfiguration.INDEX_DURABLE_IN_NON_TX_MODE.getValueAsBoolean());

      ODatabaseRecord database = getDatabase();
      final OStorageLocalAbstract storageLocalAbstract = (OStorageLocalAbstract) database.getStorage();

      sbTree.load(indexName, storageLocalAbstract);
    } finally {
      releaseExclusiveLock();
    }
  }
=======
@Override
  public void load(ORID indexRid, String indexName, boolean isAutomatic) {
    acquireExclusiveLock();
    try {
      sbTree = new OSBTree<Object, V>(DATA_FILE_EXTENSION, 1, OGlobalConfiguration.INDEX_DURABLE_IN_NON_TX_MODE.getValueAsBoolean());

      ODatabaseRecord database = getDatabase();
      final OStorageLocalAbstract storageLocalAbstract = (OStorageLocalAbstract) database.getStorage();

      sbTree.load(indexName, 0, storageLocalAbstract);
    } finally {
      releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958831/fstmerge_var2_1408510078452723319

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public int removeValue(final OIdentifiable value, final ValuesTransformer<V> transformer) {
    acquireExclusiveLock();
    try {
      final Set<Object> keySetToRemove = new HashSet<Object>();

      if (sbTree.size() == 0)
        return 0;

      final Object firstKey = sbTree.firstKey();
      final Object lastKey = sbTree.lastKey();
      sbTree.loadEntriesBetween(firstKey, true, lastKey, true, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_var1_4541675212865149561
        public boolean addResult(Map.Entry<Object, V> entry) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_base_4394214102044002327
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_var2_6675768263867517081
          if (transformer == null) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_base_4394214102044002327
            if (entry.value.equals(value))
              keySetToRemove.add(entry.key);
=======
            if (entry.getValue().equals(value))
              keySetToRemove.add(entry.getKey());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_var2_6675768263867517081
          } else {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_base_4394214102044002327
            Collection<OIdentifiable> identifiables = transformer.transformFromValue(entry.value);
=======
            Collection<OIdentifiable> identifiables = transformer.transformFromValue(entry.getValue());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_var2_6675768263867517081
            for (OIdentifiable identifiable : identifiables) {
              if (identifiable.equals(value))
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_base_4394214102044002327
                keySetToRemove.add(entry.key);
=======
                keySetToRemove.add(entry.getKey());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958888/fstmerge_var2_6675768263867517081
            }
          }
          return true;
        }
      });

      for (Object keyToRemove : keySetToRemove)
        sbTree.remove(keyToRemove);

      return keySetToRemove.size();
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<OIdentifiable> getValuesBetween(Object rangeFrom, boolean fromInclusive, Object rangeTo, boolean toInclusive,
      final int maxValuesToFetch, final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<OIdentifiable> result = new HashSet<OIdentifiable>();

      sbTree.loadEntriesBetween(rangeFrom, fromInclusive, rangeTo, toInclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958891/fstmerge_var1_7069449049750434559
        public boolean addResult(Map.Entry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958891/fstmerge_base_533020168999993711
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          addToResult(transformer, result, entry.value, maxValuesToFetch);
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958891/fstmerge_var2_3018173515011906176

          if (maxValuesToFetch > -1 && result.size() == maxValuesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<OIdentifiable> getValuesMajor(Object fromKey, boolean isInclusive, final int maxValuesToFetch,
      final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<OIdentifiable> result = new HashSet<OIdentifiable>();

      sbTree.loadEntriesMajor(fromKey, isInclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958894/fstmerge_var1_213654885816252021
        public boolean addResult(Map.Entry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958894/fstmerge_base_2392715223991076182
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          addToResult(transformer, result, entry.value, maxValuesToFetch);
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958894/fstmerge_var2_509996346614967677

          if (maxValuesToFetch > -1 && result.size() == maxValuesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<OIdentifiable> getValuesMinor(Object toKey, boolean isInclusive, final int maxValuesToFetch,
      final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<OIdentifiable> result = new HashSet<OIdentifiable>();

      sbTree.loadEntriesMinor(toKey, isInclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958897/fstmerge_var1_5813056953727571818
        public boolean addResult(Map.Entry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958897/fstmerge_base_273430567279233432
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          addToResult(transformer, result, entry.value, maxValuesToFetch);
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          addToResult(transformer, result, entry.getValue(), maxValuesToFetch);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958897/fstmerge_var2_1271452625015664781

          if (maxValuesToFetch > -1 && result.size() == maxValuesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<ODocument> getEntriesMajor(Object fromKey, boolean isInclusive, final int maxEntriesToFetch,
      final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<ODocument> result = new ODocumentFieldsHashSet();

      sbTree.loadEntriesMajor(fromKey, isInclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958900/fstmerge_var1_8633860938441492924
        public boolean addResult(Map.Entry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958900/fstmerge_base_3741936772794484874
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          final Object key = entry.key;
          final V value = entry.value;
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958900/fstmerge_var2_271334443472462418

          addToEntriesResult(transformer, result, key, value, maxEntriesToFetch);

          if (maxEntriesToFetch > -1 && result.size() == maxEntriesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<ODocument> getEntriesMinor(Object toKey, boolean isInclusive, final int maxEntriesToFetch,
      final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<ODocument> result = new ODocumentFieldsHashSet();

      sbTree.loadEntriesMinor(toKey, isInclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958903/fstmerge_var1_2076442266450248152
        public boolean addResult(Map.Entry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958903/fstmerge_base_6956943482400451209
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          final Object key = entry.key;
          final V value = entry.value;
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958903/fstmerge_var2_3504081463302503801

          addToEntriesResult(transformer, result, key, value, maxEntriesToFetch);

          if (maxEntriesToFetch > -1 && result.size() == maxEntriesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Collection<ODocument> getEntriesBetween(Object rangeFrom, Object rangeTo, boolean inclusive, final int maxEntriesToFetch,
      final ValuesTransformer<V> transformer) {
    acquireSharedLock();
    try {
      final Set<ODocument> result = new ODocumentFieldsHashSet();

      sbTree.loadEntriesBetween(rangeFrom, inclusive, rangeTo, inclusive, new OSBTree.RangeResultListener<Object, V>() {
        @Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958906/fstmerge_var1_6826591179106334141
        public boolean addResult(Map.Entry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958906/fstmerge_base_945214900936596236
        public boolean addResult(OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          final Object key = entry.key;
          final V value = entry.value;
=======
        public boolean addResult(OTree.BucketEntry<Object, V> entry) {
          final Object key = entry.getKey();
          final V value = entry.getValue();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958906/fstmerge_var2_5117142444291049630

          addToEntriesResult(transformer, result, key, value, maxEntriesToFetch);

          if (maxEntriesToFetch > -1 && result.size() == maxEntriesToFetch)
            return false;

          return true;
        }
      });

      return result;
    } finally {
      releaseSharedLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958931/fstmerge_var1_7918637493427164147
private void prefetchData(boolean firstTime) {
      sbTree.loadEntriesMajor(firstKey, firstTime, new OSBTree.RangeResultListener<Object, V>() {
        @Override
        public boolean addResult(final Map.Entry<Object, V> entry) {
          preFetchedValues.add(entry);
          return preFetchedValues.size() <= 8000;
        }
      });

      if (preFetchedValues.isEmpty())
        preFetchedValues = null;
      else
        firstKey = preFetchedValues.getLast().getKey();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958931/fstmerge_base_9032708491972432318
private void prefetchData(boolean firstTime) {
      sbTree.loadEntriesMajor(firstKey, firstTime, new OSBTree.RangeResultListener<Object, V>() {
        @Override
        public boolean addResult(final OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          preFetchedValues.add(new Map.Entry<Object, V>() {
            @Override
            public Object getKey() {
              return entry.key;
            }

            @Override
            public V getValue() {
              return entry.value;
            }

            @Override
            public V setValue(V v) {
              throw new UnsupportedOperationException("setValue");
            }
          });

          return preFetchedValues.size() <= 8000;
        }
      });

      if (preFetchedValues.isEmpty())
        preFetchedValues = null;
      else
        firstKey = preFetchedValues.getLast().getKey();
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958931/fstmerge_var2_532460189826364948

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585958946/fstmerge_var1_4672626119583447207
private void prefetchData(boolean firstTime) {
      sbTree.loadEntriesMinor(lastKey, firstTime, new OSBTree.RangeResultListener<Object, V>() {
        @Override
        public boolean addResult(final Map.Entry<Object, V> entry) {
          preFetchedValues.add(entry);

          return preFetchedValues.size() <= 8000;
        }
      });

      if (preFetchedValues.isEmpty())
        preFetchedValues = null;
      else
        lastKey = preFetchedValues.getLast().getKey();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585958946/fstmerge_base_8074391124348591116
private void prefetchData(boolean firstTime) {
      sbTree.loadEntriesMinor(lastKey, firstTime, new OSBTree.RangeResultListener<Object, V>() {
        @Override
        public boolean addResult(final OSBTreeBucket.SBTreeEntry<Object, V> entry) {
          preFetchedValues.add(new Map.Entry<Object, V>() {
            @Override
            public Object getKey() {
              return entry.key;
            }

            @Override
            public V getValue() {
              return entry.value;
            }

            @Override
            public V setValue(V v) {
              throw new UnsupportedOperationException("setValue");
            }
          });

          return preFetchedValues.size() <= 8000;
        }
      });

      if (preFetchedValues.isEmpty())
        preFetchedValues = null;
      else
        lastKey = preFetchedValues.getLast().getKey();
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585958946/fstmerge_var2_258126095783093566

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/main/java/com/orientechnologies/orient/core/index/engine/OSBTreeIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeClass
  public void beforeClass() {
    buildDirectory = System.getProperty("buildDirectory");
    if (buildDirectory == null)
      buildDirectory = ".";

    databaseDocumentTx = new ODatabaseDocumentTx("local:" + buildDirectory + "/localSBTreeCompositeKeyTest");
    if (databaseDocumentTx.exists()) {
      databaseDocumentTx.open("admin", "admin");
      databaseDocumentTx.drop();
    }

    databaseDocumentTx.create();

    localSBTree = new OSBTree<OCompositeKey, OIdentifiable>(".sbt", 2, false);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585961709/fstmerge_var1_358197993189616145
    localSBTree.create("localSBTreeCompositeKeyTest", OCompositeKeySerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage().getUnderlying());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585961709/fstmerge_base_8350543097049603270
    localSBTree.create("localSBTreeCompositeKeyTest", OCompositeKeySerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
=======
    localSBTree.create("localSBTreeCompositeKeyTest", 0, OCompositeKeySerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585961709/fstmerge_var2_5142244883672412145
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/test/java/com/orientechnologies/orient/core/index/sbtree/local/SBTreeCompositeKeyTest.java
Conflict type: LineBasedMCFd
Conflict body: 
private void createActualSBTree() throws IOException {
    actualStorageConfiguration.clusters = new ArrayList<OStorageClusterConfiguration>();
    actualStorageConfiguration.fileTemplate = new OStorageSegmentConfiguration();

    actualStorageDir = buildDirectory + "/sbtreeWithWALTestActual";
    when(actualStorage.getStoragePath()).thenReturn(actualStorageDir);
    when(actualStorage.getName()).thenReturn("sbtreeWithWALTesActual");

    File buildDir = new File(buildDirectory);
    if (!buildDir.exists())
      buildDir.mkdirs();

    File actualStorageDirFile = new File(actualStorageDir);
    if (!actualStorageDirFile.exists())
      actualStorageDirFile.mkdirs();

    writeAheadLog = new OWriteAheadLog(6000, -1, 10 * 1024L * OWALPage.PAGE_SIZE, 100L * 1024 * 1024 * 1024, actualStorage);

    actualDiskCache = new OReadWriteDiskCache(400L * 1024 * 1024 * 1024, 1648L * 1024 * 1024,
        OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024, 1000000, 100, actualStorage, null, false, false);

    OStorageVariableParser variableParser = new OStorageVariableParser(actualStorageDir);

    when(actualStorage.getStorageTransaction()).thenReturn(null);
    when(actualStorage.getDiskCache()).thenReturn(actualDiskCache);
    when(actualStorage.getWALInstance()).thenReturn(writeAheadLog);
    when(actualStorage.getVariableParser()).thenReturn(variableParser);
    when(actualStorage.getConfiguration()).thenReturn(actualStorageConfiguration);
    when(actualStorage.getMode()).thenReturn("rw");

    when(actualStorageConfiguration.getDirectory()).thenReturn(actualStorageDir);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585961783/fstmerge_var1_1139395906989545134
    sbTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, true);
    sbTree.create("actualSBTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, actualStorage);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585961783/fstmerge_base_4230270390447126218
    sbTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, false);
    sbTree.create("actualSBTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, actualStorage);
=======
    sbTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, false);
    sbTree.create("actualSBTree", 0, OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, actualStorage);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585961783/fstmerge_var2_4268390490405710611
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/test/java/com/orientechnologies/orient/core/index/sbtree/local/SBTreeWAL.java
Conflict type: LineBasedMCFd
Conflict body: 
private void createExpectedSBTree() {
    expectedStorageConfiguration.clusters = new ArrayList<OStorageClusterConfiguration>();
    expectedStorageConfiguration.fileTemplate = new OStorageSegmentConfiguration();

    expectedStorageDir = buildDirectory + "/sbtreeWithWALTestExpected";
    when(expectedStorage.getStoragePath()).thenReturn(expectedStorageDir);
    when(expectedStorage.getName()).thenReturn("sbtreeWithWALTesExpected");

    File buildDir = new File(buildDirectory);
    if (!buildDir.exists())
      buildDir.mkdirs();

    File expectedStorageDirFile = new File(expectedStorageDir);
    if (!expectedStorageDirFile.exists())
      expectedStorageDirFile.mkdirs();

    expectedDiskCache = new OReadWriteDiskCache(400L * 1024 * 1024 * 1024, 1648L * 1024 * 1024,
        OGlobalConfiguration.DISK_CACHE_PAGE_SIZE.getValueAsInteger() * 1024, 1000000, 100, expectedStorage, null, false, false);

    OStorageVariableParser variableParser = new OStorageVariableParser(expectedStorageDir);

    when(expectedStorage.getStorageTransaction()).thenReturn(null);
    when(expectedStorage.getDiskCache()).thenReturn(expectedDiskCache);
    when(expectedStorage.getWALInstance()).thenReturn(null);
    when(expectedStorage.getVariableParser()).thenReturn(variableParser);
    when(expectedStorage.getConfiguration()).thenReturn(expectedStorageConfiguration);
    when(expectedStorage.getMode()).thenReturn("rw");

    when(expectedStorageConfiguration.getDirectory()).thenReturn(expectedStorageDir);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585961786/fstmerge_var1_2557365516082530575
    expectedSBTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, true);
    expectedSBTree.create("expectedSBTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, expectedStorage);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585961786/fstmerge_base_2108917450091855538
    expectedSBTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, false);
    expectedSBTree.create("expectedSBTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, expectedStorage);
=======
    expectedSBTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, false);
    expectedSBTree.create("expectedSBTree", 0, OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, expectedStorage);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585961786/fstmerge_var2_6047645321562240404
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/test/java/com/orientechnologies/orient/core/index/sbtree/local/SBTreeWAL.java
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeClass
  public void beforeClass() {
    buildDirectory = System.getProperty("buildDirectory");
    if (buildDirectory == null)
      buildDirectory = ".";

    databaseDocumentTx = new ODatabaseDocumentTx("plocal:" + buildDirectory + "/localSBTreeTest");
    if (databaseDocumentTx.exists()) {
      databaseDocumentTx.open("admin", "admin");
      databaseDocumentTx.drop();
    }

    databaseDocumentTx.create();

    sbTree = new OSBTree<Integer, OIdentifiable>(".sbt", 1, false);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585961828/fstmerge_var1_4486354925894225643
    sbTree.create("sbTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE, (OStorageLocalAbstract) databaseDocumentTx
        .getStorage().getUnderlying());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585961828/fstmerge_base_636661735964312548
    sbTree.create("sbTree", OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
=======
    sbTree.create("sbTree", 0, OIntegerSerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585961828/fstmerge_var2_9171701614560657913
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/core/src/test/java/com/orientechnologies/orient/core/index/sbtree/local/SBTreeTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  @Test(enabled = false)
  public void init() throws Exception {
    OGlobalConfiguration.NON_TX_CLUSTERS_SYNC_IMMEDIATELY.setValue("");
    OGlobalConfiguration.INDEX_MANUAL_LAZY_UPDATES.setValue(10000);

    String buildDirectory = System.getProperty("buildDirectory", ".");
    if (buildDirectory == null)
      buildDirectory = ".";

    databaseDocumentTx = new ODatabaseDocumentTx("local:" + buildDirectory + "/SBTreeInsertionSpeedTTest");
    if (databaseDocumentTx.exists()) {
      databaseDocumentTx.open("admin", "admin");
      databaseDocumentTx.drop();
    }

    databaseDocumentTx.create();
    databaseDocumentTx.command(new OCommandSQL("create index  sbtree_index unique String")).execute();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413585969903/fstmerge_var1_1340217590805137950
    index = databaseDocumentTx.getMetadata().getIndexManager().getIndex("sbtree_index");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413585969903/fstmerge_base_5620367613845792867
    index = new OSBTree<String, OIdentifiable>(".sbt", 1, false);
    index.create("uniqueSBTreeIndexTest", OStringSerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
=======
    index = new OSBTree<String, OIdentifiable>(".sbt", 1, false);
    index.create("uniqueSBTreeIndexTest", 0, OStringSerializer.INSTANCE, OLinkSerializer.INSTANCE,
        (OStorageLocalAbstract) databaseDocumentTx.getStorage());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413585969903/fstmerge_var2_7663236171555637821
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_368c0_ff746/rev_368c0-ff746/tests/src/test/java/com/orientechnologies/orient/test/internal/index/SBTreeInsertionSpeedTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_91cdc_1f63e/rev_91cdc-1f63e.revisions

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b6449_6d6be/rev_b6449-6d6be.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d68e1_c3fa6/rev_d68e1-c3fa6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b6449_6d6be/rev_b6449-6d6be.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8427a_b1a4b/rev_8427a-b1a4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3fd8b_718f5/rev_3fd8b-718f5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d68e1_c3fa6/rev_d68e1-c3fa6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_283dc_eec14/rev_283dc-eec14.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4a2ae_365fa/rev_4a2ae-365fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8427a_b1a4b/rev_8427a-b1a4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_db215_c5dc3/rev_db215-c5dc3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_747d3_d0893/rev_747d3-d0893.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3fd8b_718f5/rev_3fd8b-718f5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8893d_bc3da/rev_8893d-bc3da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e10ad_19515/rev_e10ad-19515.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_283dc_eec14/rev_283dc-eec14.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_edf38_ca429/rev_edf38-ca429.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4a2ae_365fa/rev_4a2ae-365fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bb907_b2d8d/rev_bb907-b2d8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f9ff4_e814e/rev_f9ff4-e814e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_db215_c5dc3/rev_db215-c5dc3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c9dae_08894/rev_c9dae-08894.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_28a33_af2c4/rev_28a33-af2c4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1732f_85a9b/rev_1732f-85a9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec19f_e8333/rev_ec19f-e8333.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_20e71_2eaa7/rev_20e71-2eaa7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dd940_57581/rev_dd940-57581.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_60f21_aeb18/rev_60f21-aeb18.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b35ea_6bbe2/rev_b35ea-6bbe2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_89d1a_6e8d3/rev_89d1a-6e8d3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ad8d0_d25ea/rev_ad8d0-d25ea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ad8d0_5768b/rev_ad8d0-5768b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c1f05_7e2f9/rev_c1f05-7e2f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3863d_a2add/rev_3863d-a2add.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688491408/fstmerge_var1_3510635543923678297
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688491408/fstmerge_base_5315008126695767815
public void commit(final OTransaction iTx) {
    checkConnection();

    final List<ORecordOperation> committedEntries = new ArrayList<ORecordOperation>();
    do {
      try {
        OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting = true;

        OChannelBinaryClient network = null;
        try {
          network = beginRequest(OChannelBinaryProtocol.REQUEST_TX_COMMIT);

          network.writeInt(iTx.getId());
          network.writeByte((byte) (iTx.isUsingLog() ? 1 : 0));

          final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

          if (iTx.getCurrentRecordEntries().iterator().hasNext()) {
            while (iTx.getCurrentRecordEntries().iterator().hasNext()) {
              for (ORecordOperation txEntry : iTx.getCurrentRecordEntries())
                tmpEntries.add(txEntry);

              iTx.clearRecordEntries();

              if (tmpEntries.size() > 0) {
                for (ORecordOperation txEntry : tmpEntries) {
                  commitEntry(network, txEntry);
                  committedEntries.add(txEntry);
                }
                tmpEntries.clear();
              }
            }
          } else if (committedEntries.size() > 0) {
            for (ORecordOperation txEntry : committedEntries)
              commitEntry(network, txEntry);
          }

          // END OF RECORD ENTRIES
          network.writeByte((byte) 0);

          // SEND INDEX ENTRIES
          network.writeBytes(iTx.getIndexChanges().toStream());
        } finally {
          endRequest(network);
        }

        try {
          beginResponse(network);
          final int createdRecords = network.readInt();
          ORecordId currentRid;
          ORecordId createdRid;
          for (int i = 0; i < createdRecords; i++) {
            currentRid = network.readRID();
            createdRid = network.readRID();
            for (ORecordOperation txEntry : iTx.getAllRecordEntries()) {
              if (txEntry.getRecord().getIdentity().equals(currentRid)) {
                txEntry.getRecord().setIdentity(createdRid);
                break;
              }
            }
          }
          final int updatedRecords = network.readInt();
          ORecordId rid;
          for (int i = 0; i < updatedRecords; ++i) {
            rid = network.readRID();

            // SEARCH THE RECORD WITH THAT ID TO UPDATE THE VERSION
            for (ORecordOperation txEntry : iTx.getAllRecordEntries()) {
              if (txEntry.getRecord().getIdentity().equals(rid)) {
                txEntry.getRecord().getRecordVersion().copyFrom(network.readVersion());
                break;
              }
            }
          }

          committedEntries.clear();
        } finally {
          endResponse(network);
        }

        // SET ALL THE RECORDS AS UNDIRTY
        for (ORecordOperation txEntry : iTx.getAllRecordEntries())
          txEntry.getRecord().unload();

        // UPDATE THE CACHE ONLY IF THE ITERATOR ALLOWS IT. USE THE STRATEGY TO ALWAYS REMOVE ALL THE RECORDS SINCE THEY COULD BE
        // CHANGED AS CONTENT IN CASE OF TREE AND GRAPH DUE TO CROSS REFERENCES
        OTransactionAbstract.updateCacheFromEntries(iTx, iTx.getAllRecordEntries(), false);

        break;

      } catch (OModificationOperationProhibitedException mope) {
        handleDBFreeze();
      } catch (Exception e) {
        handleException("Error on commit", e);

      } finally {
        OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting = false;

      }
    } while (true);
  }
=======
public void commit(final OTransaction iTx) {
    checkConnection();

    final List<ORecordOperation> committedEntries = new ArrayList<ORecordOperation>();
    do {
      try {
        OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting = true;

        OChannelBinaryClient network = null;
        try {
          network = beginRequest(OChannelBinaryProtocol.REQUEST_TX_COMMIT);

          network.writeInt(iTx.getId());
          network.writeByte((byte) (iTx.isUsingLog() ? 1 : 0));

          final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

          if (iTx.getCurrentRecordEntries().iterator().hasNext()) {
            while (iTx.getCurrentRecordEntries().iterator().hasNext()) {
              for (ORecordOperation txEntry : iTx.getCurrentRecordEntries())
                tmpEntries.add(txEntry);

              iTx.clearRecordEntries();

              if (tmpEntries.size() > 0) {
                for (ORecordOperation txEntry : tmpEntries) {
                  commitEntry(network, txEntry);
                  committedEntries.add(txEntry);
                }
                tmpEntries.clear();
              }
            }
          } else if (committedEntries.size() > 0) {
            for (ORecordOperation txEntry : committedEntries)
              commitEntry(network, txEntry);
          }

          // END OF RECORD ENTRIES
          network.writeByte((byte) 0);

          // SEND INDEX ENTRIES
          network.writeBytes(iTx.getIndexChanges().toStream());
        } finally {
          endRequest(network);
        }

        try {
          beginResponse(network);
          final int createdRecords = network.readInt();
          ORecordId currentRid;
          ORecordId createdRid;
          for (int i = 0; i < createdRecords; i++) {
            currentRid = network.readRID();
            createdRid = network.readRID();
			iTx.updateIdentityAfterCommit(currentRid, createdRid);
          }
          final int updatedRecords = network.readInt();
          ORecordId rid;
          for (int i = 0; i < updatedRecords; ++i) {
            rid = network.readRID();

            // SEARCH THE RECORD WITH THAT ID TO UPDATE THE VERSION
            for (ORecordOperation txEntry : iTx.getAllRecordEntries()) {
			  ORecordOperation rop = iTx.getRecordEntry(rid);
			  if (rop != null) {
			    rop.getRecord().getRecordVersion().copyFrom(network.readVersion());
				break;
			  }
            }
          }

          committedEntries.clear();
        } finally {
          endResponse(network);
        }

        // SET ALL THE RECORDS AS UNDIRTY
        for (ORecordOperation txEntry : iTx.getAllRecordEntries())
          txEntry.getRecord().unload();

        // UPDATE THE CACHE ONLY IF THE ITERATOR ALLOWS IT. USE THE STRATEGY TO ALWAYS REMOVE ALL THE RECORDS SINCE THEY COULD BE
        // CHANGED AS CONTENT IN CASE OF TREE AND GRAPH DUE TO CROSS REFERENCES
        OTransactionAbstract.updateCacheFromEntries(iTx, iTx.getAllRecordEntries(), false);

        break;

      } catch (OModificationOperationProhibitedException mope) {
        handleDBFreeze();
      } catch (Exception e) {
        handleException("Error on commit", e);

      } finally {
        OStorageRemoteThreadLocal.INSTANCE.get().commandExecuting = false;

      }
    } while (true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688491408/fstmerge_var2_2379561726928442877

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688492494/fstmerge_var1_5816394915436676703
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688492494/fstmerge_base_603355983451530522
public Iterator<Long> browseLastOperations(final long[] iRemoteLastOperationId, final OPERATION_STATUS iStatus, final int iMax)
      throws IOException {
    final LinkedList<Long> result = new LinkedList<Long>();
    final HashSet<Long> rids = new HashSet<Long>();

    lock.acquireExclusiveLock();
    try {
      long fileOffset = file.getFilledUpTo();

      long[] localOperationId = getOperationId(fileOffset);

      while ((localOperationId[0] > iRemoteLastOperationId[0])
          || (localOperationId[0] == iRemoteLastOperationId[0] && localOperationId[1] > iRemoteLastOperationId[1])) {

        if ((iStatus == null || iStatus == getOperationStatus(fileOffset)) && !rids.contains(fileOffset)) {
          // COLLECT CURRENT POSITION AS GOOD
          result.add(fileOffset);
          rids.add(fileOffset);

          if (iMax > -1 && rids.size() >= iMax)
            // MAX LIMIT REACHED
            break;
        }

        final long prevOffset = getPreviousOperation(fileOffset);
        localOperationId = getOperationId(prevOffset);
        fileOffset = prevOffset;
      }
      return result.descendingIterator();

    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
public Iterator<Long> browseLastOperations(final long[] iRemoteLastOperationId, final OPERATION_STATUS iStatus, final int iMax)
      throws IOException {
    final LinkedList<Long> result = new LinkedList<Long>();

    lock.acquireExclusiveLock();
    try {
      long fileOffset = file.getFilledUpTo();

      long[] localOperationId = getOperationId(fileOffset);

      while ((localOperationId[0] > iRemoteLastOperationId[0])
          || (localOperationId[0] == iRemoteLastOperationId[0] && localOperationId[1] > iRemoteLastOperationId[1])) {

        if ((iStatus == null || iStatus == getOperationStatus(fileOffset))) {

          // COLLECT CURRENT POSITION AS GOOD
          result.add(fileOffset);
          if (iMax > -1 && result.size() >= iMax)
            // MAX LIMIT REACHED
            break;
        }

        final long prevOffset = getPreviousOperation(fileOffset);
        localOperationId = getOperationId(prevOffset);
        fileOffset = prevOffset;
      }
      return result.descendingIterator();

    } finally {
      lock.releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688492494/fstmerge_var2_3387970966353355818

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/journal/ODatabaseJournal.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688492582/fstmerge_var1_3096304289001830509
public void waitNodeIsOnline() throws OTimeoutException {
    // WAIT THE NODE IS ONLINE AGAIN
    final ODistributedServerManager mgr = server.getDistributedManager();
    if (mgr != null && mgr.isEnabled() && mgr.isOffline()) {
      for (int retry = 0; retry < MAX_RETRIES; ++retry) {
        if (mgr != null && mgr.isOffline()) {
          // NODE NOT ONLINE YET, REFUSE THE CONNECTION
          OLogManager.instance().info(this, "Node is not online yet (status=%s), blocking the command until it's online %d/%d",
              mgr.getStatus(), retry + 1, MAX_RETRIES);
          pauseCurrentThread(300);
        } else
          // OK, RETURN
          return;
      }

      // TIMEOUT
      throw new OTimeoutException("Cannot execute operation while the node is not online (status=" + mgr.getStatus() + ")");
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688492582/fstmerge_base_6632193837462270218
=======
public void waitNodeIsOnline() {
    // WAIT THE NODE IS ONLINE AGAIN
    final ODistributedServerManager mgr = server.getDistributedManager();
    if (mgr != null && mgr.isOfflineNode(mgr.getLocalNodeId())) {
      for (int retry = 0; retry < 10; ++retry) {
        if (mgr != null && mgr.isOfflineNode(mgr.getLocalNodeId())) {
          // NODE NOT ONLINE YET, REFUSE THE CONNECTION
          OLogManager.instance().info(this, "Node is not online yet (status=%s), blocking the command until it's online %d/%d",
              mgr.getStatus(), retry + 1, 10);
          pauseCurrentThread(300);
        } else
          // OK, RETURN
          return;
      }

      // TIMEOUT
      throw new OTimeoutException("Cannot execute operation while the node is not online (status=" + mgr.getStatus() + ")");
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688492582/fstmerge_var2_2823385734037458669

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/network/protocol/ONetworkProtocol.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688492655/fstmerge_var1_3101280531967180110
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688492655/fstmerge_base_8889835395902080626
protected void isLHClustersAreUsed() throws IOException {
    setDataCommandInfo("Determinate whether clusters are presented as persistent list or hash map ");

    checkDatabase();

    final boolean isLHClustersAreUsed = connection.database.getStorage().isHashClustersAreUsed();

    beginResponse();
    try {
      sendOk(clientTxId);
      channel.writeByte(isLHClustersAreUsed ? (byte) 1 : 0);
    } finally {
      endResponse();
    }
  }
=======
protected void isLHClustersAreUsed() throws IOException {
    setDataCommandInfo("Determinate whether clusters are presented as persistent list or hash map ");

    if (!isConnectionAlive())
      return;

    final boolean isLHClustersAreUsed = connection.database.getStorage().isHashClustersAreUsed();

    beginResponse();
    try {
      sendOk(clientTxId);
      channel.writeByte(isLHClustersAreUsed ? (byte) 1 : 0);
    } finally {
      endResponse();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688492655/fstmerge_var2_7471105416892779550

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/ONetworkProtocolBinary.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688492713/fstmerge_var1_6300157736197312533
private boolean isConnectionAlive() {
    if (connection == null || connection.database == null) {
      // CONNECTION/DATABASE CLOSED, KILL IT
      OClientConnectionManager.instance().kill(connection);
      return false;
    }
    return true;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688492713/fstmerge_base_39385122409079123
=======
private boolean isConnectionAlive() {
    if (connection == null || connection.database == null) {
      // CONNECTION/DATABASE CLOSED
      OClientConnectionManager.instance().disconnect(connection);
      return false;
    }
    return true;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688492713/fstmerge_var2_411678593144202838

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/ONetworkProtocolBinary.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688492716/fstmerge_var1_2823152156229269840
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688492716/fstmerge_base_503647398659791430
@Deprecated
  protected void countCluster() throws IOException {
    setDataCommandInfo("Count cluster records");

    checkDatabase();

    final String clusterName = channel.readString();
    final long size = connection.database.countClusterElements(clusterName);

    beginResponse();
    try {
      sendOk(clientTxId);
      channel.writeLong(size);
    } finally {
      endResponse();
    }
  }
=======
@Deprecated
  protected void countCluster() throws IOException {
    setDataCommandInfo("Count cluster records");

    if (!isConnectionAlive())
      return;

    final String clusterName = channel.readString();
    final long size = connection.database.countClusterElements(clusterName);

    beginResponse();
    try {
      sendOk(clientTxId);
      channel.writeLong(size);
    } finally {
      endResponse();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688492716/fstmerge_var2_6437145673962240940

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/ONetworkProtocolBinary.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494553/fstmerge_var1_2632640559562342097
@Override
  public void handleCreateConflict(final String iRemoteNode, final ORecordId iCurrentRID, final int iCurrentVersion,
      final ORecordId iOtherRID, final int iOtherVersion) {
    if (iCurrentRID.equals(iOtherRID)) {
      // PATCH FOR THE CASE THE RECORD WAS DELETED WHILE THE NODE WAS OFFLINE: FORCE THE OTHER VERSION TO THE LOCAL ONE (-1
      // BECAUSE IT'S ALWAYS INCREMENTED)
      for (int retry = 0; retry < MAX_RETRIES; ++retry) {
        ODistributedServerLog
            .debug(
                this,
                cluster.getLocalNodeName(),
                iRemoteNode,
                DIRECTION.IN,
                "Resolved conflict automatically between versions on CREATE record %s/%s v.%d (other RID=%s v.%d). Current record version will be overwritten",
                database.getName(), iCurrentRID, iCurrentVersion, iOtherRID, iOtherVersion);

        final ORecordInternal<?> record = iCurrentRID.getRecord();
        record.setVersion(iOtherVersion - 1);
        record.setDirty();

        try {
          record.save();
          return;
        } catch (OConcurrentModificationException e) {
          // CONCURRENT OPERATION, RETRY AGAIN?
        }
      }
    }

    ODistributedServerLog.warn(this, cluster.getLocalNodeName(), iRemoteNode, DIRECTION.IN,
        "Conflict on CREATE record %s/%s v.%d (other RID=%s v.%d)[]", database.getName(), iCurrentRID, iCurrentVersion, iOtherRID,
        iOtherVersion);

    if (!existConflictsForRecord(iCurrentRID)) {
      final ODocument doc = createConflictDocument(ORecordOperation.CREATED, iCurrentRID, iRemoteNode);
      try {
        // WRITE THE CONFLICT AS RECORD
        doc.field(FIELD_OTHER_RID, iOtherRID);
        doc.save();
      } catch (Exception e) {
        errorOnWriteConflict(iRemoteNode, doc);
      }
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494553/fstmerge_base_7584591049618840638
=======
@Override
  public void handleCreateConflict(final String iRemoteNode, final ORecordId iCurrentRID, final int iCurrentVersion,
      final ORecordId iOtherRID, final int iOtherVersion) {
    if (iCurrentRID.equals(iOtherRID)) {
      // PATCH FOR THE CASE THE RECORD WAS DELETED WHILE THE NODE WAS OFFLINE: FORCE THE OTHER VERSION TO THE LOCAL ONE (-1 BECAUSE IT'S ALWAYS INCREMENTED)
      ODistributedServerLog
          .debug(
              this,
              cluster.getLocalNodeId(),
              iRemoteNode,
              DIRECTION.IN,
              "Found conflict between versions on CREATE record %s/%s v.%d (other RID=%s v.%d). Current record version will be overwritten and no exception will be thrown",
              database.getName(), iCurrentRID, iCurrentVersion, iOtherRID, iOtherVersion);

      final ORecordInternal<?> record = iCurrentRID.getRecord();
      record.setVersion(iOtherVersion - 1);
      record.setDirty();
      record.save();
      return;
    }

    ODistributedServerLog.warn(this, cluster.getLocalNodeId(), iRemoteNode, DIRECTION.IN,
        "Conflict on CREATE record %s/%s v.%d (other RID=%s v.%d)[]", database.getName(), iCurrentRID, iCurrentVersion, iOtherRID,
        iOtherVersion);

    if (!existConflictsForRecord(iCurrentRID)) {
      final ODocument doc = createConflictDocument(ORecordOperation.CREATED, iCurrentRID, iRemoteNode);
      try {
        // WRITE THE CONFLICT AS RECORD
        doc.field(FIELD_OTHER_RID, iOtherRID);
        doc.save();
      } catch (Exception e) {
        errorOnWriteConflict(iRemoteNode, doc);
      }
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494553/fstmerge_var2_9000064625084706464

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/conflict/ODefaultReplicationConflictResolver.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494594/fstmerge_var1_174987285357657632
public void handleCreateConflict(String iRemoteNodeId, ORecordId iCurrentRID, int iCurrentVersion, ORecordId iOtherRID,
      int iOtherVersion);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494594/fstmerge_base_4718057923956799264
=======
public void handleCreateConflict(String iRemoteNodeId, ORecordId iCurrentRID, int iCurrentVersion, ORecordId iOtherRID, int iOtherVersion);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494594/fstmerge_var2_497944784311820914

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/conflict/OReplicationConflictResolver.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494634/fstmerge_var1_8260580960999169298
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494634/fstmerge_base_6535313548971610838
@Override
  public Integer call() throws Exception {
    if (lastRunId == -1 && lastOperationId == -1)
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from the beginning (no log found)", databaseName);
    else
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from operation %d.%d", databaseName, lastRunId, lastOperationId);

    int totAligned;

    final ODistributedServerManager dManager = getDistributedServerManager();

    final String localNode = dManager.getLocalNodeId();

    final OStorageSynchronizer synchronizer = getDatabaseSynchronizer();
    if (synchronizer == null)
      return 0;

    final ODatabaseJournal log = synchronizer.getLog();

    // GET THE DISTRIBUTED LOCK TO ALIGN THE DATABASE
    final Lock alignmentLock = dManager.getLock("align." + databaseName);
    if (alignmentLock.tryLock())
      try {
        totAligned = 0;
        int aligned = 0;
        final OMultipleRemoteTasks tasks = new OMultipleRemoteTasks(serverInstance, dManager, databaseName,
            EXECUTION_MODE.SYNCHRONOUS);
        final List<Long> positions = new ArrayList<Long>();

        final Iterator<Long> it = log.browseLastOperations(new long[] { lastRunId, lastOperationId },
            ODatabaseJournal.OPERATION_STATUS.COMMITTED, -1);
        while (it.hasNext()) {
          final long pos = it.next();

          final OAbstractReplicatedTask<?> operation = log.getOperation(pos);
          if (operation == null) {
            ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
                "#%d db=%s skipped operation", aligned, databaseName);
            continue;
          }

          ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
              "#%d aligning operation=%d.%d db=%s %s", aligned, operation.getRunId(), operation.getOperationSerial(), databaseName,
              operation);

          operation.setNodeSource(localNode);
          operation.setDatabaseName(databaseName);
          operation.setMode(EXECUTION_MODE.SYNCHRONOUS);

          tasks.addTask(operation);
          positions.add(pos);

          aligned++;

          if (tasks.getTasks() >= OP_BUFFER)
            totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);
        }

        if (tasks.getTasks() > 0)
          totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);

        ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
            "aligned %d operations db=%s", totAligned, databaseName);
      } finally {
        alignmentLock.unlock();
      }
    else
      // SEND BACK -1 TO RESEND THE UPDATED ALIGNMENT REQUEST
      totAligned = -1;

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    dManager.sendOperation2Node(getNodeSource(), new OAlignResponseTask(serverInstance, dManager, databaseName,
        EXECUTION_MODE.FIRE_AND_FORGET, totAligned));

    return totAligned;
  }
=======
@Override
  public Integer call() throws Exception {
    if (lastRunId == -1 && lastOperationId == -1)
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from the beginning (no log found)", databaseName);
    else
      ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "db=%s align request starting from operation %d.%d", databaseName, lastRunId, lastOperationId);

    int totAligned;

    final ODistributedServerManager dManager = getDistributedServerManager();

    final String localNode = dManager.getLocalNodeId();

    final OStorageSynchronizer synchronizer = getDatabaseSynchronizer();
    if (synchronizer == null)
      return 0;

    final ODatabaseJournal log = synchronizer.getLog();

    // GET THE DISTRIBUTED LOCK TO ALIGN THE DATABASE
    final Lock alignmentLock = dManager.getLock("align." + databaseName);
    if (alignmentLock.tryLock())
      try {
        totAligned = 0;
        int aligned = 0;

        ODistributedServerLog.warn(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
            "****** BEGIN PREPARING ALIGNMENT BLOCK db=%s ******", databaseName);

        final OMultipleRemoteTasks tasks = new OMultipleRemoteTasks(serverInstance, dManager, databaseName,
            EXECUTION_MODE.SYNCHRONOUS);
        final List<Long> positions = new ArrayList<Long>();

        final Iterator<Long> it = log.browseLastOperations(new long[] { lastRunId, lastOperationId },
            ODatabaseJournal.OPERATION_STATUS.COMMITTED, -1);
        while (it.hasNext()) {
          final long pos = it.next();

          final OAbstractReplicatedTask<?> operation = log.getOperation(pos);
          if (operation == null) {
            ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
                "#%d db=%s skipped operation", aligned, databaseName);
            continue;
          }

          ODistributedServerLog.info(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
              "#%d aligning operation=%d.%d db=%s %s", aligned, operation.getRunId(), operation.getOperationSerial(), databaseName,
              operation);

          operation.setNodeSource(localNode);
          operation.setDatabaseName(databaseName);
          operation.setMode(EXECUTION_MODE.SYNCHRONOUS);

          tasks.addTask(operation);
          positions.add(pos);

          aligned++;

          if (tasks.getTasks() >= OP_BUFFER)
            totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);
        }

        if (tasks.getTasks() > 0)
          totAligned += flushBufferedTasks(dManager, synchronizer, tasks, positions);

        ODistributedServerLog.warn(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.OUT,
            "****** END PREPARING ALIGNMENT BLOCK db=%s total=%d ******", databaseName, totAligned);

      } finally {
        alignmentLock.unlock();
      }
    else
      // SEND BACK -1 TO RESEND THE UPDATED ALIGNMENT REQUEST
      totAligned = -1;

    // SEND TO THE REQUESTER NODE THE TASK TO EXECUTE
    dManager.sendOperation2Node(getNodeSource(), new OAlignResponseTask(serverInstance, dManager, databaseName,
        EXECUTION_MODE.FIRE_AND_FORGET, totAligned));

    return totAligned;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494634/fstmerge_var2_6586808268696619815

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAlignRequestTask.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494697/fstmerge_var1_4569516597794000430
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494697/fstmerge_base_2365444473028046019
@Override
  public void handleConflict(final String iRemoteNodeId, final Object localResult, final Object remoteResult) {
    final OReplicationConflictResolver resolver = getDatabaseSynchronizer().getConflictResolver();
    resolver.handleCreateConflict(iRemoteNodeId, rid, new ORecordId(rid.getClusterId(),
        ((OPhysicalPosition) remoteResult).clusterPosition));
  }
=======
@Override
  public void handleConflict(final String iRemoteNodeId, final Object localResult, final Object remoteResult) {
    final OReplicationConflictResolver resolver = getDatabaseSynchronizer().getConflictResolver();

    final OPhysicalPosition remote = (OPhysicalPosition) remoteResult;

    resolver.handleCreateConflict(iRemoteNodeId, rid, version.getCounter(), new ORecordId(rid.getClusterId(),
        remote.clusterPosition), remote.recordVersion.getCounter());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494697/fstmerge_var2_3499750579278011209

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OCreateRecordTask.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494721/fstmerge_var1_6369984893193257521
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494721/fstmerge_base_335176431320999035
@Override
  public Object[] call() throws Exception {
    final Object[] result = new Object[tasks.size()];

    for (int i = 0; i < tasks.size(); ++i) {
      final OAbstractRemoteTask<?> task = tasks.get(i);

      // RESET QUEUE TO AVOID HOLES
      serverInstance.getDistributedManager().resetOperationQueue(task.getRunId(), task.getOperationSerial() - 1);

      result[i] = task.call();
    }

    return result;
  }
=======
@Override
  public Object[] call() throws Exception {
    ODistributedServerLog.warn(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
        "****** BEGIN EXECUTING ALIGNMENT BLOCK db=%s tasks=%d ******", databaseName, tasks.size());

    final Object[] result = new Object[tasks.size()];

    int executedTasks = 0;
    try {

      for (; executedTasks < tasks.size(); ++executedTasks) {
        final OAbstractRemoteTask<?> task = tasks.get(executedTasks);

        // RESET QUEUE TO AVOID HOLES
        serverInstance.getDistributedManager().resetOperationQueue(task.getRunId(), task.getOperationSerial() - 1);

        result[executedTasks] = task.call();
      }
    } finally {

      ODistributedServerLog.warn(this, getDistributedServerManager().getLocalNodeId(), getNodeSource(), DIRECTION.IN,
          "****** END EXECUTING ALIGNMENT BLOCK db=%s tasks=%d/%d ******", databaseName, executedTasks, tasks.size());
    }

    return result;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494721/fstmerge_var2_7811674963227250656

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OMultipleRemoteTasks.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494895/fstmerge_var1_4687612536828144676
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494895/fstmerge_base_4528017944046031057
protected ODatabaseDocumentTx openDatabase() {
    inheritedDatabase = true;

    final ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
    if (db != null && db.getName().equals(databaseName) && !db.isClosed()) {
      if (db instanceof ODatabaseDocumentTx)
        return (ODatabaseDocumentTx) db;
      else if (db.getDatabaseOwner() instanceof ODatabaseDocumentTx)
        return (ODatabaseDocumentTx) db.getDatabaseOwner();
    }

    inheritedDatabase = false;
    OServerUserConfiguration replicatorUser = serverInstance.getUser(ODistributedAbstractPlugin.REPLICATOR_USER);
    return (ODatabaseDocumentTx) serverInstance
        .openDatabase("document", databaseName, replicatorUser.name, replicatorUser.password);
  }
=======
protected ODatabaseDocumentTx openDatabase() {
    inheritedDatabase = true;

    final ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
    if (db != null && db.getName().equals(databaseName) && !db.isClosed()) {
      if (db instanceof ODatabaseDocumentTx)
        return (ODatabaseDocumentTx) db;
      else if (db.getDatabaseOwner() instanceof ODatabaseDocumentTx)
        return (ODatabaseDocumentTx) db.getDatabaseOwner();
    }

    inheritedDatabase = false;
    final OServerUserConfiguration replicatorUser = serverInstance.getUser(ODistributedAbstractPlugin.REPLICATOR_USER);
    return (ODatabaseDocumentTx) serverInstance
        .openDatabase("document", databaseName, replicatorUser.name, replicatorUser.password);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494895/fstmerge_var2_4211475183448359108

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/main/java/com/orientechnologies/orient/server/distributed/task/OAbstractRemoteTask.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494960/fstmerge_var1_2984891005678995869
@Test
  public void testSupportedFreezeTrue() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), storage);

    ds.freeze(true);

    Mockito.verify(storage).freeze(true);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494960/fstmerge_base_6234957757166502628
=======
@Test
  public void testSupportedFreezeTrue() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), null, storage);

    ds.freeze(true);

    Mockito.verify(storage).freeze(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494960/fstmerge_var2_8854911563318479233

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/test/java/com/orientechnologies/orient/server/distributed/ODistributedStorageTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494963/fstmerge_var1_6680805522129053059
@Test
  public void testSupportedFreezeFalse() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), storage);

    ds.freeze(false);

    Mockito.verify(storage).freeze(false);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494963/fstmerge_base_145474962243817464
=======
@Test
  public void testSupportedFreezeFalse() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), null, storage);

    ds.freeze(false);

    Mockito.verify(storage).freeze(false);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494963/fstmerge_var2_1670924898605122615

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/test/java/com/orientechnologies/orient/server/distributed/ODistributedStorageTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494966/fstmerge_var1_4602971890992495424
@Test(expectedExceptions = { UnsupportedOperationException.class })
  public void testUnsupportedFreeze() {
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), Mockito.mock(OStorageMemory.class));

    ds.freeze(false);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494966/fstmerge_base_8108755297708645323
=======
@Test(expectedExceptions = {UnsupportedOperationException.class})
  public void testUnsupportedFreeze() {
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), null, Mockito.mock(OStorageMemory.class));

    ds.freeze(false);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494966/fstmerge_var2_8374117630578212412

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/test/java/com/orientechnologies/orient/server/distributed/ODistributedStorageTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494969/fstmerge_var1_9035493227185429934
@Test
  public void testSupportedRelease() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), storage);

    ds.release();

    Mockito.verify(storage).release();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494969/fstmerge_base_1511442703639285145
=======
@Test
  public void testSupportedRelease() {
    OStorageLocal storage = Mockito.mock(OStorageLocal.class);
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), null, storage);

    ds.release();

    Mockito.verify(storage).release();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494969/fstmerge_var2_3981040667499248230

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/test/java/com/orientechnologies/orient/server/distributed/ODistributedStorageTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688494973/fstmerge_var1_6333962031591821258
@Test(expectedExceptions = { UnsupportedOperationException.class })
  public void testUnsupportedRelease() {
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), Mockito.mock(OStorageMemory.class));

    ds.release();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688494973/fstmerge_base_1264363353130266071
=======
@Test(expectedExceptions = {UnsupportedOperationException.class})
  public void testUnsupportedRelease() {
    ODistributedStorage ds = new ODistributedStorage(Mockito.mock(OServer.class), null, Mockito.mock(OStorageMemory.class));

    ds.release();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688494973/fstmerge_var2_5971106343157302589

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/server/src/test/java/com/orientechnologies/orient/server/distributed/ODistributedStorageTest.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.6"; ##FSTMerge## public static final String ORIENT_VERSION = "1.5.1-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.5.1";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688506710/fstmerge_var1_7190929975698244111
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688506710/fstmerge_base_1219328584531459456
public void commit(final OTransaction clientTx) {
    modificationLock.requestModificationLock();
    try {
      lock.acquireExclusiveLock();
      try {
        if (writeAheadLog == null)
          throw new OStorageException("WAL mode is not active. Transactions are not supported in given mode");

        if (transaction != null && transaction.getClientTx().getId() != clientTx.getId())
          rollback(clientTx);

        transaction = new OStorageTransaction(clientTx, OOperationUnitId.generateId());

        OLogSequenceNumber startLSN = writeAheadLog.log(new OAtomicUnitStartRecord(true, transaction.getOperationUnitId()));
        transaction.setStartLSN(startLSN);

        final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

        while (clientTx.getCurrentRecordEntries().iterator().hasNext()) {
          for (ORecordOperation txEntry : clientTx.getCurrentRecordEntries())
            tmpEntries.add(txEntry);

          clientTx.clearRecordEntries();

          if (!tmpEntries.isEmpty()) {
            for (ORecordOperation txEntry : tmpEntries)
              // COMMIT ALL THE SINGLE ENTRIES ONE BY ONE
              commitEntry(clientTx, txEntry);
          }
        }

        writeAheadLog.log(new OAtomicUnitEndRecord(transaction.getOperationUnitId(), false));

        OTransactionAbstract.updateCacheFromEntries(clientTx, clientTx.getAllRecordEntries(), true);

      } catch (Exception e) {
        // WE NEED TO CALL ROLLBACK HERE, IN THE LOCK
        OLogManager.instance().debug(this, "Error during transaction commit, transaction will be rolled back (tx-id=%d)", e,
            clientTx.getId());
        rollback(clientTx);
        if (e instanceof OException)
          throw ((OException) e);
        else
          throw new OStorageException("Error during transaction commit.", e);
      } finally {
        transaction = null;
        lock.releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }
=======
public void commit(final OTransaction clientTx) {
    modificationLock.requestModificationLock();
    try {
      lock.acquireExclusiveLock();
      try {
        if (writeAheadLog == null)
          throw new OStorageException("WAL mode is not active. Transactions are not supported in given mode");

        if (transaction != null && transaction.getClientTx().getId() != clientTx.getId())
          rollback(clientTx);

        transaction = new OStorageTransaction(clientTx, OOperationUnitId.generateId());

        OLogSequenceNumber startLSN = writeAheadLog.log(new OAtomicUnitStartRecord(true, transaction.getOperationUnitId()));
        transaction.setStartLSN(startLSN);

        final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

        while (clientTx.getCurrentRecordEntries().iterator().hasNext()) {
          for (ORecordOperation txEntry : clientTx.getCurrentRecordEntries())
            tmpEntries.add(txEntry);

          clientTx.clearRecordEntries();

          for (ORecordOperation txEntry : tmpEntries)
            // COMMIT ALL THE SINGLE ENTRIES ONE BY ONE
            commitEntry(clientTx, txEntry);
        }

        writeAheadLog.log(new OAtomicUnitEndRecord(transaction.getOperationUnitId(), false));

        OTransactionAbstract.updateCacheFromEntries(clientTx, clientTx.getAllRecordEntries(), true);

      } catch (Exception e) {
        // WE NEED TO CALL ROLLBACK HERE, IN THE LOCK
        OLogManager.instance().debug(this, "Error during transaction commit, transaction will be rolled back (tx-id=%d)", e,
            clientTx.getId());
        rollback(clientTx);
        if (e instanceof OException)
          throw ((OException) e);
        else
          throw new OStorageException("Error during transaction commit.", e);
      } finally {
        transaction = null;
        lock.releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688506710/fstmerge_var2_3293199222973976275

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688517736/fstmerge_var1_3239467482269514727
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject();
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(0, true);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688517736/fstmerge_base_9006551431028338664
=======
@Override
  public StringBuilder toString(final ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      final OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, boolean iOnlyDelta,
      boolean autoDetectCollectionType) {
    try {
      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      final FormatSettings settings = new FormatSettings(iFormat);

      json.beginObject(settings.indentLevel);
      OJSONFetchContext context = new OJSONFetchContext(json, settings);
      context.writeSignature(json, iRecord);

      if (iRecord instanceof ORecordSchemaAware<?>) {

        OFetchHelper.fetch(iRecord, null, OFetchHelper.buildFetchPlan(settings.fetchPlan), new OJSONFetchListener(), context,
            iFormat);
      } else if (iRecord instanceof ORecordStringable) {

        // STRINGABLE
        final ORecordStringable record = (ORecordStringable) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", record.value());

      } else if (iRecord instanceof ORecordBytes) {
        // BYTES
        final ORecordBytes record = (ORecordBytes) iRecord;
        json.writeAttribute(settings.indentLevel + 1, true, "value", OBase64Utils.encodeBytes(record.toStream()));
      } else

        throw new OSerializationException("Error on marshalling record of type '" + iRecord.getClass()
            + "' to JSON. The record type cannot be exported to JSON");

      json.endObject(settings.indentLevel);

      iOutput.append(buffer);
      return iOutput;
    } catch (IOException e) {
      throw new OSerializationException("Error on marshalling of record to JSON", e);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688517736/fstmerge_var2_283829965551316798

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerJSON.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688517843/fstmerge_var1_5491780044526618253
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK)
                      // EMBEDDED FOR SURE DON'T USE THE LINKED TYPE
                      linkedType = null;
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              }
            }
          }

          if (type == null)
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks)
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length() && !OGlobalConfiguration.RECORD_DOWNSIZING_ENABLED.getValueAsBoolean()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688517843/fstmerge_base_5455368272105599594
=======
@Override
  protected StringBuilder toString(ORecordInternal<?> iRecord, final StringBuilder iOutput, final String iFormat,
      OUserObject2RecordHandler iObjHandler, final Set<ODocument> iMarshalledRecords, final boolean iOnlyDelta,
      final boolean autoDetectCollectionType) {
    if (iRecord == null)
      throw new OSerializationException("Expected a record but was null");

    if (!(iRecord instanceof ODocument))
      throw new OSerializationException("Cannot marshall a record of type " + iRecord.getClass().getSimpleName());

    final ODocument record = (ODocument) iRecord;

    // CHECK IF THE RECORD IS PENDING TO BE MARSHALLED
    if (iMarshalledRecords != null)
      if (iMarshalledRecords.contains(record)) {
        return iOutput;
      } else
        iMarshalledRecords.add(record);

    if (!iOnlyDelta && record.getSchemaClass() != null) {
      // MARSHALL THE CLASSNAME
      iOutput.append(record.getSchemaClass().getStreamableName());
      iOutput.append(OStringSerializerHelper.CLASS_SEPARATOR);
    }

    OProperty prop;
    OType type;
    OClass linkedClass;
    OType linkedType;
    String fieldClassName;
    int i = 0;

    final String[] fieldNames = iOnlyDelta && record.isTrackingChanges() ? record.getDirtyFields() : record.fieldNames();

    if (iObjHandler == null && ODatabaseRecordThreadLocal.INSTANCE.isDefined())
      iObjHandler = ODatabaseRecordThreadLocal.INSTANCE.get();

    // MARSHALL ALL THE FIELDS OR DELTA IF TRACKING IS ENABLED
    for (String fieldName : fieldNames) {
      Object fieldValue = record.rawField(fieldName);
      if (i > 0)
        iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

      // SEARCH FOR A CONFIGURED PROPERTY
      prop = record.getSchemaClass() != null ? record.getSchemaClass().getProperty(fieldName) : null;
      fieldClassName = getClassName(fieldValue);

      type = record.fieldType(fieldName);
      linkedClass = null;
      linkedType = null;

      if (prop != null) {
        // RECOGNIZED PROPERTY
        type = prop.getType();
        linkedClass = prop.getLinkedClass();
        linkedType = prop.getLinkedType();

      } else if (fieldValue != null) {
        // NOT FOUND: TRY TO DETERMINE THE TYPE FROM ITS CONTENT
        if (type == null) {
          if (fieldValue.getClass() == byte[].class)
            type = OType.BINARY;
          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && fieldValue instanceof ORecord<?>) {
            if (type == null)
              // DETERMINE THE FIELD TYPE
              if (fieldValue instanceof ODocument && ((ODocument) fieldValue).hasOwners())
                type = OType.EMBEDDED;
              else
                type = OType.LINK;

            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof ORID)
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;

          else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
              && ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject
              && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner()).getEntityManager()
                  .getEntityClass(fieldClassName) != null) {
            // DETERMINE THE FIELD TYPE
            type = OType.LINK;
            linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), fieldClassName);
          } else if (fieldValue instanceof Date)
            type = OType.DATETIME;
          else if (fieldValue instanceof String)
            type = OType.STRING;
          else if (fieldValue instanceof Integer || fieldValue instanceof BigInteger)
            type = OType.INTEGER;
          else if (fieldValue instanceof Long)
            type = OType.LONG;
          else if (fieldValue instanceof Float)
            type = OType.FLOAT;
          else if (fieldValue instanceof Short)
            type = OType.SHORT;
          else if (fieldValue instanceof Byte)
            type = OType.BYTE;
          else if (fieldValue instanceof Double)
            type = OType.DOUBLE;
          else if (fieldValue instanceof BigDecimal)
            type = OType.DECIMAL;
        }

        if (fieldValue instanceof OMultiCollectionIterator<?>) {
          type = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDEDLIST : OType.LINKLIST;
          linkedType = ((OMultiCollectionIterator<?>) fieldValue).isEmbedded() ? OType.EMBEDDED : OType.LINK;
        } else if (fieldValue instanceof Collection<?> || fieldValue.getClass().isArray()) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMultiValue) {
            autoConvertLinks = ((ORecordLazyMultiValue) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(false);
          }

          if (autoDetectCollectionType)
            if (size > 0) {
              final Object firstValue = OMultiValue.getFirstValue(fieldValue);

              if (firstValue != null) {
                if (firstValue instanceof ORID) {
                  linkedClass = null;
                  linkedType = OType.LINK;
                  if (fieldValue instanceof Set<?>)
                    type = OType.LINKSET;
                  else
                    type = OType.LINKLIST;
                } else if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                    && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                    && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                        .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                  linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                  if (type == null) {
                    // LINK: GET THE CLASS
                    linkedType = OType.LINK;

                    if (fieldValue instanceof Set<?>)
                      type = OType.LINKSET;
                    else
                      type = OType.LINKLIST;
                  } else
                    linkedType = OType.EMBEDDED;
                } else {
                  // EMBEDDED COLLECTION
                  if (firstValue instanceof ODocument
                      && ((((ODocument) firstValue).hasOwners()) || type == OType.EMBEDDEDSET || type == OType.EMBEDDEDLIST || type == OType.EMBEDDEDMAP))
                    linkedType = OType.EMBEDDED;
                  else if (firstValue instanceof Enum<?>)
                    linkedType = OType.STRING;
                  else {
                    linkedType = OType.getTypeByClass(firstValue.getClass());

                    if (linkedType != OType.LINK) {
                      // EMBEDDED FOR SURE SINCE IT CONTAINS JAVA TYPES
                      if (linkedType == null) {
                        linkedType = OType.EMBEDDED;
                        // linkedClass = new OClass(firstValue.getClass());
                      }
                    }
                  }

                  if (type == null)
                    if (fieldValue instanceof OMVRBTreeRIDSet)
                      type = OType.LINKSET;
                    else if (fieldValue instanceof Set<?>)
                      type = OType.EMBEDDEDSET;
                    else
                      type = OType.EMBEDDEDLIST;
                }
              }
            } else if (type == null)
              type = OType.EMBEDDEDLIST;

          if (fieldValue instanceof ORecordLazyMultiValue && autoConvertLinks) {
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMultiValue) fieldValue).setAutoConvertToRecord(true);
          }

        } else if (fieldValue instanceof Map<?, ?> && type == null) {
          final int size = OMultiValue.getSize(fieldValue);

          Boolean autoConvertLinks = null;
          if (fieldValue instanceof ORecordLazyMap) {
            autoConvertLinks = ((ORecordLazyMap) fieldValue).isAutoConvertToRecord();
            if (autoConvertLinks)
              // DISABLE AUTO CONVERT
              ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(false);
          }

          if (size > 0) {
            final Object firstValue = OMultiValue.getFirstValue(fieldValue);

            if (firstValue != null) {
              if (ODatabaseRecordThreadLocal.INSTANCE.isDefined()
                  && (firstValue instanceof ODocument && !((ODocument) firstValue).isEmbedded())
                  && (firstValue instanceof ORecord<?> || (ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner() instanceof ODatabaseObject && ((ODatabaseObject) ODatabaseRecordThreadLocal.INSTANCE
                      .get().getDatabaseOwner()).getEntityManager().getEntityClass(getClassName(firstValue)) != null))) {
                linkedClass = getLinkInfo(ODatabaseRecordThreadLocal.INSTANCE.get(), getClassName(firstValue));
                // LINK: GET THE CLASS
                linkedType = OType.LINK;
                type = OType.LINKMAP;
              }
            }
          }

          if (type == null)
            type = OType.EMBEDDEDMAP;

          if (fieldValue instanceof ORecordLazyMap && autoConvertLinks)
            // REPLACE PREVIOUS SETTINGS
            ((ORecordLazyMap) fieldValue).setAutoConvertToRecord(true);
        }
      }

      if (type == OType.TRANSIENT)
        // TRANSIENT FIELD
        continue;

      if (type == null)
        type = OType.EMBEDDED;

      iOutput.append(fieldName);
      iOutput.append(FIELD_VALUE_SEPARATOR);
      fieldToStream((ODocument) iRecord, iOutput, iObjHandler, type, linkedClass, linkedType, fieldName, fieldValue,
          iMarshalledRecords, true);

      i++;
    }

    if (iMarshalledRecords != null)
      iMarshalledRecords.remove(record);

    // GET THE OVERSIZE IF ANY
    final float overSize;
    if (record.getSchemaClass() != null)
      // GET THE CONFIGURED OVERSIZE SETTED PER CLASS
      overSize = record.getSchemaClass().getOverSize();
    else
      overSize = 0;

    // APPEND BLANKS IF NEEDED
    final int newSize;
    if (record.hasOwners())
      // EMBEDDED: GET REAL SIZE
      newSize = iOutput.length();
    else if (record.getSize() == iOutput.length())
      // IDENTICAL! DO NOTHING
      newSize = record.getSize();
    else if (record.getSize() > iOutput.length()) {
      // APPEND EXTRA SPACES TO FILL ALL THE AVAILABLE SPACE AND AVOID FRAGMENTATION
      newSize = record.getSize();
    } else if (overSize > 0) {
      // APPEND EXTRA SPACES TO GET A LARGER iOutput
      newSize = (int) (iOutput.length() * overSize);
    } else
      // NO OVERSIZE
      newSize = iOutput.length();

    if (newSize > iOutput.length()) {
      iOutput.ensureCapacity(newSize);
      for (int b = iOutput.length(); b < newSize; ++b)
        iOutput.append(' ');
    }

    return iOutput;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688517843/fstmerge_var2_9211395407336362086

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerSchemaAware2CSV.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688517902/fstmerge_var1_5533093923630675193
public void fieldToStream(final ODocument iRecord, final StringBuilder iOutput, OUserObject2RecordHandler iObjHandler,
      final OType iType, final OClass iLinkedClass, final OType iLinkedType, final String iName, final Object iValue,
      final Set<ODocument> iMarshalledRecords, final boolean iSaveOnlyDirty) {
    if (iValue == null)
      return;

    final long timer = PROFILER.startChrono();

    switch (iType) {

    case LINK: {
      if (!(iValue instanceof OIdentifiable))
        throw new OSerializationException(
            "Found an unexpected type during marshalling of a LINK where a OIdentifiable (ORID or any Record) was expected. The string representation of the object is: "
                + iValue);

      if (!((OIdentifiable) iValue).getIdentity().isValid() && iValue instanceof ODocument && ((ODocument) iValue).isEmbedded()) {
        // WRONG: IT'S EMBEDDED!
        fieldToStream(iRecord, iOutput, iObjHandler, OType.EMBEDDED, iLinkedClass, iLinkedType, iName, iValue, iMarshalledRecords,
            iSaveOnlyDirty);
      } else {
        final Object link = linkToStream(iOutput, iRecord, iValue);
        if (link != null)
          // OVERWRITE CONTENT
          iRecord.field(iName, link);
        PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.link2string"), "Serialize link to string", timer);
      }
      break;
    }

    case LINKLIST: {
      iOutput.append(OStringSerializerHelper.LIST_BEGIN);

      if (iValue instanceof ORecordLazyList && ((ORecordLazyList) iValue).getStreamedContent() != null) {
        iOutput.append(((ORecordLazyList) iValue).getStreamedContent());
        PROFILER.updateCounter(PROFILER.getProcessMetric("serializer.record.string.linkList2string.cached"),
            "Serialize linklist to string in stream mode", +1);
      } else {
        final ORecordLazyList coll;
        final Iterator<OIdentifiable> it;
        if (iValue instanceof OMultiCollectionIterator<?>) {
          it = (Iterator<OIdentifiable>) iValue;
          coll = null;
        } else if (!(iValue instanceof ORecordLazyList)) {
          // FIRST TIME: CONVERT THE ENTIRE COLLECTION
          coll = new ORecordLazyList(iRecord);

          if (iValue.getClass().isArray()) {
            Iterable<Object> iterab = OMultiValue.getMultiValueIterable(iValue);
            for (Object i : iterab) {
              coll.add((OIdentifiable) i);
            }
          } else {
            coll.addAll((Collection<? extends OIdentifiable>) iValue);
            ((Collection<? extends OIdentifiable>) iValue).clear();
          }

          iRecord.field(iName, coll);
          it = coll.rawIterator();
        } else {
          // LAZY LIST
          coll = (ORecordLazyList) iValue;
          if (coll.getStreamedContent() != null) {
            // APPEND STREAMED CONTENT
            iOutput.append(coll.getStreamedContent());
            PROFILER.updateCounter(PROFILER.getProcessMetric("serializer.record.string.linkList2string.cached"),
                "Serialize linklist to string in stream mode", +1);
            it = coll.newItemsIterator();
          } else
            it = coll.rawIterator();
        }

        if (it != null && it.hasNext()) {
          final StringBuilder buffer = new StringBuilder();
          for (int items = 0; it.hasNext(); items++) {
            if (items > 0)
              buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);

            final OIdentifiable item = it.next();

            final OIdentifiable newRid = linkToStream(buffer, iRecord, item);
            if (newRid != null)
              ((OLazyIterator<OIdentifiable>) it).update(newRid);
          }

          if (coll != null)
            coll.convertRecords2Links();

          iOutput.append(buffer);

          // UPDATE THE STREAM
          if (coll != null)
            coll.setStreamedContent(buffer);
        }
      }

      iOutput.append(OStringSerializerHelper.LIST_END);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkList2string"), "Serialize linklist to string",
          timer);
      break;
    }

    case LINKSET: {
      final OStringBuilderSerializable coll;

      if (!(iValue instanceof OMVRBTreeRIDSet || iValue instanceof OSBTreeRIDSet)) {
        // FIRST TIME: CONVERT THE ENTIRE COLLECTION
        if (preferSBTreeRIDSet && iRecord.getDatabase().getStorage() instanceof OLocalPaginatedStorage)
          coll = new OSBTreeRIDSet(iRecord, (Collection<OIdentifiable>) iValue);
        else
          coll = new OMVRBTreeRIDSet(iRecord, (Collection<OIdentifiable>) iValue);

        iRecord.field(iName, coll);
      } else
        // LAZY SET
        coll = (OStringBuilderSerializable) iValue;

      coll.toStream(iOutput);

      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkSet2string"), "Serialize linkset to string",
          timer);
      break;
    }

    case LINKMAP: {
      iOutput.append(OStringSerializerHelper.MAP_BEGIN);

      Map<Object, Object> map = (Map<Object, Object>) iValue;

      // LINKED MAP
      if (map instanceof OLazyObjectMapInterface<?>)
        ((OLazyObjectMapInterface<?>) map).setConvertToRecord(false);

      boolean invalidMap = false;
      try {
        int items = 0;
        for (Map.Entry<Object, Object> entry : map.entrySet()) {
          if (items++ > 0)
            iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

          fieldTypeToString(iOutput, OType.STRING, entry.getKey());
          iOutput.append(OStringSerializerHelper.ENTRY_SEPARATOR);
          final Object link = linkToStream(iOutput, iRecord, entry.getValue());

          if (link != null && !invalidMap)
            // IDENTITY IS CHANGED, RE-SET INTO THE COLLECTION TO RECOMPUTE THE HASH
            invalidMap = true;
        }
      } finally {
        if (map instanceof OLazyObjectMapInterface<?>) {
          ((OLazyObjectMapInterface<?>) map).setConvertToRecord(true);
        }
      }

      if (invalidMap) {
        final ORecordLazyMap newMap = new ORecordLazyMap(iRecord, ODocument.RECORD_TYPE);

        // REPLACE ALL CHANGED ITEMS
        for (Map.Entry<Object, Object> entry : map.entrySet()) {
          newMap.put(entry.getKey(), (OIdentifiable) entry.getValue());
        }
        map.clear();
        iRecord.field(iName, newMap);
      }

      iOutput.append(OStringSerializerHelper.MAP_END);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkMap2string"), "Serialize linkmap to string",
          timer);
      break;
    }

    case EMBEDDED:
      if (iValue instanceof ORecordInternal<?>) {
        iOutput.append(OStringSerializerHelper.EMBEDDED_BEGIN);
        toString((ORecordInternal<?>) iValue, iOutput, null, iObjHandler, iMarshalledRecords, false, true);
        iOutput.append(OStringSerializerHelper.EMBEDDED_END);
      } else if (iValue != null)
        iOutput.append(iValue.toString());
      PROFILER
          .stopChrono(PROFILER.getProcessMetric("serializer.record.string.embed2string"), "Serialize embedded to string", timer);
      break;

    case EMBEDDEDLIST:
      embeddedCollectionToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty,
          false);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedList2string"),
          "Serialize embeddedlist to string", timer);
      break;

    case EMBEDDEDSET:
      embeddedCollectionToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty,
          true);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedSet2string"), "Serialize embeddedset to string",
          timer);
      break;

    case EMBEDDEDMAP: {
      embeddedMapToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedMap2string"), "Serialize embeddedmap to string",
          timer);
      break;
    }

    default:
      fieldTypeToString(iOutput, iType, iValue);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688517902/fstmerge_base_7398671766138530264
=======
public void fieldToStream(final ODocument iRecord, final StringBuilder iOutput, OUserObject2RecordHandler iObjHandler,
      final OType iType, final OClass iLinkedClass, final OType iLinkedType, final String iName, final Object iValue,
      final Set<ODocument> iMarshalledRecords, final boolean iSaveOnlyDirty) {
    if (iValue == null)
      return;

    final long timer = PROFILER.startChrono();

    switch (iType) {

    case LINK: {
      if (!(iValue instanceof OIdentifiable))
        throw new OSerializationException(
            "Found an unexpected type during marshalling of a LINK where a OIdentifiable (ORID or any Record) was expected. The string representation of the object is: "
                + iValue);

      if (!((OIdentifiable) iValue).getIdentity().isValid() && iValue instanceof ODocument && ((ODocument) iValue).isEmbedded()) {
        // WRONG: IT'S EMBEDDED!
        fieldToStream(iRecord, iOutput, iObjHandler, OType.EMBEDDED, iLinkedClass, iLinkedType, iName, iValue, iMarshalledRecords,
            iSaveOnlyDirty);
      } else {
        final Object link = linkToStream(iOutput, iRecord, iValue);
        if (link != null)
          // OVERWRITE CONTENT
          iRecord.field(iName, link);
        PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.link2string"), "Serialize link to string", timer);
      }
      break;
    }

    case LINKLIST: {
      iOutput.append(OStringSerializerHelper.LIST_BEGIN);

      if (iValue instanceof ORecordLazyList && ((ORecordLazyList) iValue).getStreamedContent() != null) {
        iOutput.append(((ORecordLazyList) iValue).getStreamedContent());
        PROFILER.updateCounter(PROFILER.getProcessMetric("serializer.record.string.linkList2string.cached"),
            "Serialize linklist to string in stream mode", +1);
      } else {
        final ORecordLazyList coll;
        final Iterator<OIdentifiable> it;
        if (iValue instanceof OMultiCollectionIterator<?>) {
          it = (Iterator<OIdentifiable>) iValue;
          coll = null;
        } else if (!(iValue instanceof ORecordLazyList)) {
          // FIRST TIME: CONVERT THE ENTIRE COLLECTION
          coll = new ORecordLazyList(iRecord);

          if (iValue.getClass().isArray()) {
            Iterable<Object> iterab = OMultiValue.getMultiValueIterable(iValue);
            for (Object i : iterab) {
              coll.add((OIdentifiable) i);
            }
          } else {
            coll.addAll((Collection<? extends OIdentifiable>) iValue);
            ((Collection<? extends OIdentifiable>) iValue).clear();
          }

          iRecord.field(iName, coll);
          it = coll.rawIterator();
        } else {
          // LAZY LIST
          coll = (ORecordLazyList) iValue;
          if (coll.getStreamedContent() != null) {
            // APPEND STREAMED CONTENT
            iOutput.append(coll.getStreamedContent());
            PROFILER.updateCounter(PROFILER.getProcessMetric("serializer.record.string.linkList2string.cached"),
                "Serialize linklist to string in stream mode", +1);
            it = coll.newItemsIterator();
          } else
            it = coll.rawIterator();
        }

        if (it != null && it.hasNext()) {
          final StringBuilder buffer = new StringBuilder();
          for (int items = 0; it.hasNext(); items++) {
            if (items > 0)
              buffer.append(OStringSerializerHelper.RECORD_SEPARATOR);

            final OIdentifiable item = it.next();

            final OIdentifiable newRid = linkToStream(buffer, iRecord, item);
            if (newRid != null)
              ((OLazyIterator<OIdentifiable>) it).update(newRid);
          }

          if (coll != null)
            coll.convertRecords2Links();

          iOutput.append(buffer);

          // UPDATE THE STREAM
          if (coll != null)
            coll.setStreamedContent(buffer);
        }
      }

      iOutput.append(OStringSerializerHelper.LIST_END);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkList2string"), "Serialize linklist to string",
          timer);
      break;
    }

    case LINKSET: {
      final OMVRBTreeRIDSet coll;

      if (!(iValue instanceof OMVRBTreeRIDSet)) {
        // FIRST TIME: CONVERT THE ENTIRE COLLECTION
        coll = new OMVRBTreeRIDSet(iRecord, (Collection<OIdentifiable>) iValue);
        ((Collection<? extends OIdentifiable>) iValue).clear();

        iRecord.field(iName, coll);
      } else
        // LAZY SET
        coll = (OMVRBTreeRIDSet) iValue;

      linkSetToStream(iOutput, iRecord, coll);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkSet2string"), "Serialize linkset to string",
          timer);
      break;
    }

    case LINKMAP: {
      iOutput.append(OStringSerializerHelper.MAP_BEGIN);

      Map<Object, Object> map = (Map<Object, Object>) iValue;

      // LINKED MAP
      if (map instanceof OLazyObjectMapInterface<?>)
        ((OLazyObjectMapInterface<?>) map).setConvertToRecord(false);

      boolean invalidMap = false;
      try {
        int items = 0;
        for (Map.Entry<Object, Object> entry : map.entrySet()) {
          if (items++ > 0)
            iOutput.append(OStringSerializerHelper.RECORD_SEPARATOR);

          fieldTypeToString(iOutput, OType.STRING, entry.getKey());
          iOutput.append(OStringSerializerHelper.ENTRY_SEPARATOR);
          final Object link = linkToStream(iOutput, iRecord, entry.getValue());

          if (link != null && !invalidMap)
            // IDENTITY IS CHANGED, RE-SET INTO THE COLLECTION TO RECOMPUTE THE HASH
            invalidMap = true;
        }
      } finally {
        if (map instanceof OLazyObjectMapInterface<?>) {
          ((OLazyObjectMapInterface<?>) map).setConvertToRecord(true);
        }
      }

      if (invalidMap) {
        final ORecordLazyMap newMap = new ORecordLazyMap(iRecord, ODocument.RECORD_TYPE);

        // REPLACE ALL CHANGED ITEMS
        for (Map.Entry<Object, Object> entry : map.entrySet()) {
          newMap.put(entry.getKey(), (OIdentifiable) entry.getValue());
        }
        map.clear();
        iRecord.field(iName, newMap);
      }

      iOutput.append(OStringSerializerHelper.MAP_END);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.linkMap2string"), "Serialize linkmap to string",
          timer);
      break;
    }

    case EMBEDDED:
      if (iValue instanceof ORecordInternal<?>) {
        iOutput.append(OStringSerializerHelper.EMBEDDED_BEGIN);
        toString((ORecordInternal<?>) iValue, iOutput, null, iObjHandler, iMarshalledRecords, false, true);
        iOutput.append(OStringSerializerHelper.EMBEDDED_END);
      } else if (iValue != null)
        iOutput.append(iValue.toString());
      PROFILER
          .stopChrono(PROFILER.getProcessMetric("serializer.record.string.embed2string"), "Serialize embedded to string", timer);
      break;

    case EMBEDDEDLIST:
      embeddedCollectionToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty,
          false);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedList2string"),
          "Serialize embeddedlist to string", timer);
      break;

    case EMBEDDEDSET:
      embeddedCollectionToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty,
          true);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedSet2string"), "Serialize embeddedset to string",
          timer);
      break;

    case EMBEDDEDMAP: {
      embeddedMapToStream(null, iObjHandler, iOutput, iLinkedClass, iLinkedType, iValue, iMarshalledRecords, iSaveOnlyDirty);
      PROFILER.stopChrono(PROFILER.getProcessMetric("serializer.record.string.embedMap2string"), "Serialize embeddedmap to string",
          timer);
      break;
    }

    default:
      fieldTypeToString(iOutput, iType, iValue);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688517902/fstmerge_var2_929168034737670255

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerCSVAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
public OIndexMultiValues put(final Object key, final OIdentifiable iSingleValue) {
    checkForRebuild();

    modificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        checkForKeyType(key);
        Set<OIdentifiable> values = indexEngine.get(key);

        if (values == null) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688522339/fstmerge_var1_4627916607624923537
          if (ODefaultIndexFactory.SBTREEBONSAI_VALUE_CONTAINER.equals(valueContainerAlgorithm)) {
            values = new OSBTreeIndexRIDContainer(getName());
          } else {
            values = new OMVRBTreeRIDSet(OGlobalConfiguration.MVRBTREE_RID_BINARY_THRESHOLD.getValueAsInteger());
            ((OMVRBTreeRIDSet) values).setAutoConvertToRecord(false);
          }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688522339/fstmerge_base_2274132038021431949
          values = new OMVRBTreeRIDSet(8);
          ((OMVRBTreeRIDSet) values).setAutoConvertToRecord(false);
=======
          values = new OMVRBTreeRIDSet(OGlobalConfiguration.MVRBTREE_RID_BINARY_THRESHOLD.getValueAsInteger());
          ((OMVRBTreeRIDSet) values).setAutoConvertToRecord(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688522339/fstmerge_var2_3881380922958069609
        }

        if (!iSingleValue.getIdentity().isValid())
          ((ORecord<?>) iSingleValue).save();

        values.add(iSingleValue.getIdentity());

        indexEngine.put(key, values);
        return this;

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
@SuppressWarnings({ "unchecked", "rawtypes" })
  protected Object manageMapLoad(final Field f, final Object self, Object value, final boolean customSerialization) {
    final Class genericType = OReflectionHelper.getGenericMultivalueType(f);
    if (value instanceof ORecordLazyMap
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688537316/fstmerge_var1_1120826277555271691
        || (value instanceof OTrackedMap<?> && (genericType == null || !OReflectionHelper.isJavaType(genericType))
            && !customSerialization && (genericType == null || !genericType.isEnum()))) {
      value = new OObjectLazyMap(self, (OTrackedMap<?>) value, OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688537316/fstmerge_base_2479609400271369994
        || (value instanceof OTrackedMap<?> && !OReflectionHelper.isJavaType(genericType) && !customSerialization && !genericType
            .isEnum())) {
      value = new OObjectLazyMap(self, (ORecordLazyMap) value, OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),
=======
        || (value instanceof OTrackedMap<?> && !OReflectionHelper.isJavaType(genericType) && !customSerialization && !genericType
            .isEnum())) {
      value = new OObjectLazyMap(self, (OTrackedMap<?>) value, OObjectEntitySerializer.isCascadeDeleteField(self.getClass(),
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688537316/fstmerge_var2_3644670102879315564
          f.getName()));
    } else if (customSerialization) {
      value = new OObjectCustomSerializerMap<TYPE>(OObjectEntitySerializer.getSerializedType(f), doc, (Map<Object, Object>) value);
    } else if (genericType != null && genericType.isEnum()) {
      value = new OObjectEnumLazyMap(genericType, doc, (Map<Object, Object>) value);
    }
    return value;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/object/src/main/java/com/orientechnologies/orient/object/enhancement/OObjectProxyMethodHandler.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413688546584/fstmerge_var1_8906348077997195058
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413688546584/fstmerge_base_5561076228154027604
protected void alignNodes() {
    if (remoteClusterNodes.isEmpty())
      // NO NODES; AVOID ALIGNMENT
      return;

    setStatus("aligning");

    // EXECUTE THE ALIGNMENT: THE STATUS ONLINE WILL BE SET ASYNCHRONOUSLY ONCE FINISHED
    synchronized (synchronizers) {

      for (Entry<String, OStorageSynchronizer> entry : synchronizers.entrySet()) {
        final String databaseName = entry.getKey();
        try {
          final long[] lastOperationId = entry.getValue().getLog()
              .getLastJournaledOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);

          if (lastOperationId[0] == -1 && lastOperationId[1] == -1)
            // AVOID TO SEND THE REQUEST IF THE LOG IS EMPTY
            continue;

          ODistributedServerLog
              .warn(this, getLocalNodeId(), remoteClusterNodes.keySet().toString(), DIRECTION.OUT,
                  "sending align request in broadcast for database %s from %d:%d", databaseName, lastOperationId[0],
                  lastOperationId[1]);

          synchronized (pendingAlignments) {
            for (String node : remoteClusterNodes.keySet()) {
              pendingAlignments.put(node + "/" + databaseName, Boolean.FALSE);

              ODistributedServerLog.info(this, getLocalNodeId(), node, DIRECTION.NONE, "setting node in alignment state for db=%s",
                  databaseName);
            }
          }

          propagate(remoteClusterNodes.keySet(), new OAlignRequestTask(serverInstance, this, databaseName,
              EXECUTION_MODE.ASYNCHRONOUS, lastOperationId[0], lastOperationId[1]));

        } catch (IOException e) {
          ODistributedServerLog.warn(this, getLocalNodeId(), null, DIRECTION.OUT,
              "error on retrieve last operation id from the log for db=%s", databaseName);
        }
      }

      if (pendingAlignments.isEmpty())
        setStatus("online");
    }
  }
=======
protected void alignNodes() {
    if (remoteClusterNodes.isEmpty())
      // NO NODES; AVOID ALIGNMENT
      return;

    setStatus("aligning");

    // EXECUTE THE ALIGNMENT: THE STATUS ONLINE WILL BE SET ASYNCHRONOUSLY ONCE FINISHED
    synchronized (synchronizers) {

      for (Entry<String, OStorageSynchronizer> entry : synchronizers.entrySet()) {
        final String databaseName = entry.getKey();
        try {
          final long[] lastOperationId = entry.getValue().getLog()
              .getLastJournaledOperationId(ODatabaseJournal.OPERATION_STATUS.COMMITTED);

          if (lastOperationId[0] == -1 && lastOperationId[1] == -1)
            // AVOID TO SEND THE REQUEST IF THE LOG IS EMPTY
            continue;

          ODistributedServerLog
              .warn(this, getLocalNodeId(), remoteClusterNodes.keySet().toString(), DIRECTION.OUT,
                  "sending align request in broadcast for database '%s' from operation %d:%d", databaseName, lastOperationId[0],
                  lastOperationId[1]);

          synchronized (pendingAlignments) {
            for (String node : remoteClusterNodes.keySet()) {
              pendingAlignments.put(node + "/" + databaseName, Boolean.FALSE);

              ODistributedServerLog.info(this, getLocalNodeId(), node, DIRECTION.NONE, "setting node in alignment state for db=%s",
                  databaseName);
            }
          }

          propagate(remoteClusterNodes.keySet(), new OAlignRequestTask(serverInstance, this, databaseName,
              EXECUTION_MODE.ASYNCHRONOUS, lastOperationId[0], lastOperationId[1]));

        } catch (IOException e) {
          ODistributedServerLog.warn(this, getLocalNodeId(), null, DIRECTION.OUT,
              "error on retrieve last operation id from the log for db=%s", databaseName);
        }
      }

      if (pendingAlignments.isEmpty())
        setStatus("online");
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413688546584/fstmerge_var2_2335037841348699119

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29716_d634c/rev_29716-d634c/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_28b70_cfc86/rev_28b70-cfc86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a292d_1719a/rev_a292d-1719a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e7fb0_dc152/rev_e7fb0-dc152.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_09065_2d0a4/rev_09065-2d0a4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_52dc7_0fb55/rev_52dc7-0fb55.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_83920_d839c/rev_83920-d839c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c10a5_2b46d/rev_c10a5-2b46d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aa31_c10a5/rev_6aa31-c10a5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dff52_3100a/rev_dff52-3100a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cd063_da306/rev_cd063-da306.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_db406_bcf11/rev_db406-bcf11.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b84ea_652a7/rev_b84ea-652a7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6d555_d59ac/rev_6d555-d59ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d7b3c_98955/rev_d7b3c-98955.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2e5ef_1b9f3/rev_2e5ef-1b9f3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c2a0e_a284e/rev_c2a0e-a284e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7e708_93cc5/rev_7e708-93cc5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f841e_4ea41/rev_f841e-4ea41.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_78634_030bb/rev_78634-030bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5d8cc_8b04e/rev_5d8cc-8b04e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9340f_99e8d/rev_9340f-99e8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_91465_0fd57/rev_91465-0fd57.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void startup() {
        boolean hotReload = true;
        boolean dynamic = true;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694413889/fstmerge_var1_4483653664913866541
        for (OServerEntryConfiguration p : server.getConfiguration().properties) {
            if (p.name.equals("plugin.hotReload"))
                hotReload = Boolean.parseBoolean(p.value);
            else if (p.name.equals("plugin.dynamic"))
                dynamic = Boolean.parseBoolean(p.value);
        }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694413889/fstmerge_base_652339261039892303
    for (OServerEntryConfiguration p : server.getConfiguration().properties) {
      if (p.name.equals("plugin.hotReload"))
        hotReload = Boolean.parseBoolean(p.value);
      else if (p.name.equals("plugin.dynamic"))
        dynamic = Boolean.parseBoolean(p.value);
    }
=======
    if (server.getConfiguration() != null && server.getConfiguration().properties != null)
      for (OServerEntryConfiguration p : server.getConfiguration().properties) {
        if (p.name.equals("plugin.hotReload"))
          hotReload = Boolean.parseBoolean(p.value);
        else if (p.name.equals("plugin.dynamic"))
          dynamic = Boolean.parseBoolean(p.value);
      }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694413889/fstmerge_var2_19108714798404763

        if (!dynamic)
            return;

        updatePlugins();

        if (hotReload)
            // SCHEDULE A TIMER TASK FOR AUTO-RELOAD
            Orient.instance().getTimer().schedule(new TimerTask() {
                @Override
                public void run() {
                    updatePlugins();
                }
            }, CHECK_DELAY, CHECK_DELAY);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/server/src/main/java/com/orientechnologies/orient/server/plugin/OServerPluginManager.java
Conflict type: LineBasedMCFd
Conflict body: 
private void installDynamicPlugin(final File pluginFile) {
        String pluginName = pluginFile.getName();

        final OServerPluginInfo currentPluginData;
        OLogManager.instance().info(this, "Installing dynamic plugin '%s'[]", pluginName);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_var1_6322925138198566962
        URLClassLoader pluginClassLoader = null;
        try {
            final URL url = pluginFile.toURI().toURL();

            pluginClassLoader = new URLClassLoader(new URL[]{url});

            // LOAD PLUGIN.JSON FILE
            final URL r = pluginClassLoader.getResource("plugin.json");
            if (r == null) {
                OLogManager.instance().error(this, "Plugin definition file ('plugin.json') is not found for dynamic plugin '%s'",
                        pluginName);
                throw new IllegalArgumentException(String.format(
                        "Plugin definition file ('plugin.json') is not found for dynamic plugin '%s'", pluginName));
            }

            final InputStream pluginConfigFile = r.openStream();

            try {
                if (pluginConfigFile == null || pluginConfigFile.available() == 0) {
                    OLogManager.instance().error(this, "Error on loading 'plugin.json' file for dynamic plugin '%s'", pluginName);
                    throw new IllegalArgumentException(String.format("Error on loading 'plugin.json' file for dynamic plugin '%s'",
                            pluginName));
                }

                final ODocument properties = new ODocument().fromJSON(pluginConfigFile);

                if (properties.containsField("name"))
                    // OVERWRITE PLUGIN NAME
                    pluginName = properties.field("name");

                final String pluginClass = properties.field("javaClass");

                final OServerPlugin pluginInstance;
                final Map<String, Object> parameters;

                if (pluginClass != null) {
                    // CREATE PARAMETERS
                    parameters = properties.field("parameters");
                    final List<OServerParameterConfiguration> params = new ArrayList<OServerParameterConfiguration>();
                    for (String paramName : parameters.keySet()) {
                        params.add(new OServerParameterConfiguration(paramName, (String) parameters.get(paramName)));
                    }
                    final OServerParameterConfiguration[] pluginParams = params.toArray(new OServerParameterConfiguration[params.size()]);

                    pluginInstance = startPluginClass(pluginClassLoader, pluginClass, pluginParams);
                } else {
                    pluginInstance = null;
                    parameters = null;
                }

                // REGISTER THE PLUGIN
                currentPluginData = new OServerPluginInfo(pluginName, (String) properties.field("version"),
                        (String) properties.field("description"), (String) properties.field("web"), pluginInstance, parameters,
                        pluginFile.lastModified(), pluginClassLoader);

            } finally {
                pluginConfigFile.close();
            }

            registerPlugin(currentPluginData);
            loadedPlugins.put(pluginFile.getName(), pluginName);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_base_7684141092362084331
    URLClassLoader pluginClassLoader = null;
    try {
      final URL url = pluginFile.toURI().toURL();

      pluginClassLoader = new URLClassLoader(new URL[] { url });

      // LOAD PLUGIN.JSON FILE
      final URL r = pluginClassLoader.getResource("plugin.json");
      final InputStream pluginConfigFile = r.openStream();

      try {
        if (pluginConfigFile == null || pluginConfigFile.available() == 0) {
          OLogManager.instance().error(this, "Error on loading 'plugin.json' file for dynamic plugin '%s'", pluginName);
          throw new IllegalArgumentException(String.format("Error on loading 'plugin.json' file for dynamic plugin '%s'",
              pluginName));
        }
=======
    URLClassLoader pluginClassLoader = null;
    try {
      final URL url = pluginFile.toURI().toURL();

      pluginClassLoader = new URLClassLoader(new URL[] { url });

      // LOAD PLUGIN.JSON FILE
      final URL r = pluginClassLoader.getResource("plugin.json");
      if (r == null) {
        OLogManager.instance().error(this, "Plugin definition file ('plugin.json') is not found for dynamic plugin '%s'",
            pluginName);
        throw new IllegalArgumentException(String.format(
            "Plugin definition file ('plugin.json') is not found for dynamic plugin '%s'", pluginName));
      }

      final InputStream pluginConfigFile = r.openStream();

      try {
        if (pluginConfigFile == null || pluginConfigFile.available() == 0) {
          OLogManager.instance().error(this, "Error on loading 'plugin.json' file for dynamic plugin '%s'", pluginName);
          throw new IllegalArgumentException(String.format("Error on loading 'plugin.json' file for dynamic plugin '%s'",
              pluginName));
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_var2_6398323041289799857

            registerStaticDirectory(currentPluginData);

        } catch (Exception e) {
            OLogManager.instance().error(this, "Error on installing dynamic plugin '%s'", e, pluginName);
        }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_var1_6322925138198566962
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_base_7684141092362084331

        // REGISTER THE PLUGIN
        currentPluginData = new OServerPluginInfo(pluginName, (String) properties.field("version"),
            (String) properties.field("description"), (String) properties.field("web"), pluginInstance, parameters,
            pluginFile.lastModified(), pluginClassLoader);

      } finally {
        pluginConfigFile.close();
      }

      registerPlugin(currentPluginData);
      loadedPlugins.put(pluginFile.getName(), pluginName);

      registerStaticDirectory(currentPluginData);

    } catch (Exception e) {
      OLogManager.instance().error(this, "Error on installing dynamic plugin '%s'", e, pluginName);
=======

        // REGISTER THE PLUGIN
        currentPluginData = new OServerPluginInfo(pluginName, (String) properties.field("version"),
            (String) properties.field("description"), (String) properties.field("web"), pluginInstance, parameters,
            pluginFile.lastModified(), pluginClassLoader);

        registerPlugin(currentPluginData);
        loadedPlugins.put(pluginFile.getName(), pluginName);

        registerStaticDirectory(currentPluginData);
      } finally {
        pluginConfigFile.close();
      }

    } catch (Exception e) {
      OLogManager.instance().error(this, "Error on installing dynamic plugin '%s'", e, pluginName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694413921/fstmerge_var2_6398323041289799857
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/server/src/main/java/com/orientechnologies/orient/server/plugin/OServerPluginManager.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void registerStaticDirectory(final OServerPluginInfo iPluginData) {
        Object pluginWWW = iPluginData.getParameter("www");
        if (pluginWWW == null)
            pluginWWW = iPluginData.getName();

        final OServerNetworkListener httpListener = server.getListenerByProtocol(ONetworkProtocolHttpAbstract.class);
        final OServerCommandGetStaticContent command = (OServerCommandGetStaticContent) httpListener
                .getCommand(OServerCommandGetStaticContent.class);

        if (command != null) {
            final URL wwwURL = iPluginData.getClassLoader().findResource("www/");

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694413924/fstmerge_var1_3074504931375292888
            final OCallable<Object, String> callback;
            if (wwwURL != null && iPluginData.getInstance() == null)
                callback = createStaticLinkCallback(iPluginData, wwwURL);
            else
                // LET TO THE COMMAND TO CONTROL IT
                callback = new OCallable<Object, String>() {
                    @Override
                    public Object call(final String iArgument) {
                        return iPluginData.getInstance().getContent(iArgument);
                    }
                };
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694413924/fstmerge_base_783927316878927039
      final OCallable<Object, String> callback;
      if (wwwURL != null && iPluginData.getInstance() == null)
        callback = createStaticLinkCallback(iPluginData, wwwURL);
      else
        // LET TO THE COMMAND TO CONTROL IT
        callback = new OCallable<Object, String>() {
          @Override
          public Object call(final String iArgument) {
            return iPluginData.getInstance().getContent(iArgument);
          }
        };
=======
      final OCallable<Object, String> callback;
      if (wwwURL != null)
        callback = createStaticLinkCallback(iPluginData, wwwURL);
      else
        // LET TO THE COMMAND TO CONTROL IT
        callback = new OCallable<Object, String>() {
          @Override
          public Object call(final String iArgument) {
            return iPluginData.getInstance().getContent(iArgument);
          }
        };
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694413924/fstmerge_var2_7885343272243777065

            command.registerVirtualFolder(pluginWWW.toString(), callback);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/server/src/main/java/com/orientechnologies/orient/server/plugin/OServerPluginManager.java
Conflict type: LineBasedMCFd
Conflict body: 
protected static Map<String, String> getParameters(final String iURL) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694414535/fstmerge_var1_784375109301704264
        int begin = iURL.indexOf("?");
        if (begin > -1) {
            Map<String, String> params = new HashMap<String, String>();
            String parameters = iURL.substring(begin + 1);
            final String[] paramPairs = parameters.split("&");
            for (String p : paramPairs) {
                final String[] parts = p.split("=");
                if (parts.length == 2)
                    try {
                        params.put(parts[0], URLDecoder.decode(parts[1], "UTF-8"));
                    } catch (UnsupportedEncodingException e) {
                        throw new OException(e);
                    }
            }
            return params;
        }
        return Collections.emptyMap();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694414535/fstmerge_base_3383492509454181719
    int begin = iURL.indexOf("?");
    if (begin > -1) {
      Map<String, String> params = new HashMap<String, String>();
      String parameters = iURL.substring(begin + 1);
      final String[] paramPairs = parameters.split("&");
      for (String p : paramPairs) {
        final String[] parts = p.split("=");
        if (parts.length == 2)
          params.put(parts[0], parts[1]);
      }
      return params;
    }
    return Collections.emptyMap();
  }
=======
    int begin = iURL.indexOf("?");
    if (begin > -1) {
      Map<String, String> params = new HashMap<String, String>();
      String parameters = iURL.substring(begin + 1);
      final String[] paramPairs = parameters.split("&");
      for (String p : paramPairs) {
        final String[] parts = p.split("=");
        if (parts.length == 2)
          try {
            params.put(parts[0], URLDecoder.decode(parts[1], "UTF-8"));
          } catch (UnsupportedEncodingException e) {
            throw new OException(e);
          }
      }
      return params;
    }
    return Collections.emptyMap();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694414535/fstmerge_var2_663633428803880455

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpUtils.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private Timer																							evictionTask; ##FSTMerge## ##FSTMerge## private Timer                                            evictionTask;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private Evictor																						evictor; ##FSTMerge## ##FSTMerge## private Evictor                                          evictor;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
public ODatabasePoolAbstract(final Object iOwner, final int iMinSize, final int iMaxSize) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434111/fstmerge_var1_6829196840277481294
		this(iOwner, iMinSize, iMaxSize, OGlobalConfiguration.CLIENT_CONNECT_POOL_WAIT_TIMEOUT.getValueAsInteger(), 0L, 0L);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434111/fstmerge_base_1167252723452147302
    this(iOwner, iMinSize, iMaxSize, OGlobalConfiguration.CLIENT_CONNECT_POOL_WAIT_TIMEOUT.getValueAsInteger());
  }
=======
    this(iOwner, iMinSize, iMaxSize, OGlobalConfiguration.CLIENT_CONNECT_POOL_WAIT_TIMEOUT.getValueAsInteger(),
        OGlobalConfiguration.DB_POOL_IDLE_TIMEOUT.getValueAsLong(), OGlobalConfiguration.DB_POOL_IDLE_CHECK_DELAY.getValueAsLong());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434111/fstmerge_var2_639861124106944364

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434115/fstmerge_var1_5395382304942362550
public ODatabasePoolAbstract(final Object iOwner, final int iMinSize, final int iMaxSize, final long idleTimeout,
			final long timeBetweenEvictionRunsMillis) {
		this(iOwner, iMinSize, iMaxSize, OGlobalConfiguration.CLIENT_CONNECT_POOL_WAIT_TIMEOUT.getValueAsInteger(), idleTimeout,
				timeBetweenEvictionRunsMillis);
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434115/fstmerge_base_2276955979027018678
=======
public ODatabasePoolAbstract(final Object iOwner, final int iMinSize, final int iMaxSize, final long idleTimeout,
      final long timeBetweenEvictionRunsMillis) {
    this(iOwner, iMinSize, iMaxSize, OGlobalConfiguration.CLIENT_CONNECT_POOL_WAIT_TIMEOUT.getValueAsInteger(), idleTimeout,
        timeBetweenEvictionRunsMillis);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434115/fstmerge_var2_223875518524244771

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434119/fstmerge_var1_529648572900880094
public ODatabasePoolAbstract(final Object iOwner, final int iMinSize, final int iMaxSize, final int iTimeout,
			final long idleTimeoutMillis, final long timeBetweenEvictionRunsMillis) {
		super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean(), OGlobalConfiguration.STORAGE_LOCK_TIMEOUT
				.getValueAsInteger(), true);

		maxSize = iMaxSize;
		timeout = iTimeout;
		owner = iOwner;
		Orient.instance().registerListener(this);

		if (idleTimeoutMillis > 0 && timeBetweenEvictionRunsMillis > 0) {
			this.evictionTask = new Timer();
			this.evictor = new Evictor(idleTimeoutMillis);
			this.evictionTask.schedule(evictor, timeBetweenEvictionRunsMillis, timeBetweenEvictionRunsMillis);
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434119/fstmerge_base_8343455074260832437
=======
public ODatabasePoolAbstract(final Object iOwner, final int iMinSize, final int iMaxSize, final int iTimeout,
      final long idleTimeoutMillis, final long timeBetweenEvictionRunsMillis) {
    super(OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean(), OGlobalConfiguration.STORAGE_LOCK_TIMEOUT
        .getValueAsInteger(), true);

    maxSize = iMaxSize;
    timeout = iTimeout;
    owner = iOwner;
    Orient.instance().registerListener(this);

    if (idleTimeoutMillis > 0 && timeBetweenEvictionRunsMillis > 0) {
      this.evictionTask = new Timer();
      this.evictor = new Evictor(idleTimeoutMillis);
      this.evictionTask.schedule(evictor, timeBetweenEvictionRunsMillis, timeBetweenEvictionRunsMillis);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434119/fstmerge_var2_5296048669214761850

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
public void release(final DB iDatabase) {
		final String dbPooledName = iDatabase instanceof ODatabaseComplex ? ((ODatabaseComplex<?>) iDatabase).getUser().getName() + "@"
				+ iDatabase.getURL() : iDatabase.getURL();

		lock();
		try {

			final OResourcePool<String, DB> pool = pools.get(dbPooledName);
			if (pool == null)
				throw new OLockException("Cannot release a database URL not acquired before. URL: " + iDatabase.getName());

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434131/fstmerge_var1_2893534396831451256
			pool.returnResource(iDatabase);
			this.notifyEvictor(dbPooledName, iDatabase);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434131/fstmerge_base_4705896626515844371
      pool.returnResource(iDatabase);
=======
      pool.returnResource(iDatabase);
      this.notifyEvictor(dbPooledName, iDatabase);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434131/fstmerge_var2_5412991259563551839

		} finally {
			unlock();
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
public void close() {
		lock();
		try {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434144/fstmerge_var1_7386364618314630584
			if (this.evictionTask != null) {
				this.evictionTask.cancel();
			}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434144/fstmerge_base_5762079067634027364
      for (Entry<String, OResourcePool<String, DB>> pool : pools.entrySet()) {
        for (DB db : pool.getValue().getResources()) {
          pool.getValue().close();
          try {
            OLogManager.instance().debug(this, "Closing pooled database '%s'[]", db.getName());
            ((ODatabasePooled) db).forceClose();
            OLogManager.instance().debug(this, "OK", db.getName());
          } catch (Exception e) {
            OLogManager.instance().debug(this, "Error: %d", e.toString());
          }
        }
      }
=======
      if (this.evictionTask != null) {
        this.evictionTask.cancel();
      }

      for (Entry<String, OResourcePool<String, DB>> pool : pools.entrySet()) {
        for (DB db : pool.getValue().getResources()) {
          pool.getValue().close();
          try {
            OLogManager.instance().debug(this, "Closing pooled database '%s'[]", db.getName());
            ((ODatabasePooled) db).forceClose();
            OLogManager.instance().debug(this, "OK", db.getName());
          } catch (Exception e) {
            OLogManager.instance().debug(this, "Error: %d", e.toString());
          }
        }
      }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434144/fstmerge_var2_2932107389763744173

			for (Entry<String, OResourcePool<String, DB>> pool : pools.entrySet()) {
				for (DB db : pool.getValue().getResources()) {
					pool.getValue().close();
					try {
						OLogManager.instance().debug(this, "Closing pooled database '%s'[]", db.getName());
						((ODatabasePooled) db).forceClose();
						OLogManager.instance().debug(this, "OK", db.getName());
					} catch (Exception e) {
						OLogManager.instance().debug(this, "Error: %d", e.toString());
					}
				}
			}

		} finally {
			unlock();
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434169/fstmerge_var1_1358499129889334116
private void notifyEvictor(final String poolName, final DB iDatabase) {
		if (this.evictor != null) {
			this.evictor.updateIdleTime(poolName, iDatabase);
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434169/fstmerge_base_7951112471426659867
=======
private void notifyEvictor(final String poolName, final DB iDatabase) {
    if (this.evictor != null) {
      this.evictor.updateIdleTime(poolName, iDatabase);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434169/fstmerge_var2_1453655884061291240

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private HashMap<String, Map<DB, Long>>	evictionMap	= new HashMap<String, Map<DB, Long>>(); ##FSTMerge## ##FSTMerge## private HashMap<String, Map<DB, Long>> evictionMap = new HashMap<String, Map<DB, Long>>();
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private long														minIdleTime; ##FSTMerge## ##FSTMerge## private long                           minIdleTime;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434172/fstmerge_var1_5770858429803692006
public Evictor(long minIdleTime) {
			this.minIdleTime = minIdleTime;
		}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434172/fstmerge_base_3190995382444608618
=======
public Evictor(long minIdleTime) {
      this.minIdleTime = minIdleTime;
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434172/fstmerge_var2_5110212093361520880

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434176/fstmerge_var1_6069381030956539964
@Override
		public void run() {
			OLogManager.instance().debug(this, "Running Connection Pool Evictor Service[]");
			lock();
			try {
				for (Entry<String, Map<DB, Long>> pool : this.evictionMap.entrySet()) {
					Map<DB, Long> poolDbs = pool.getValue();
					Iterator<Entry<DB, Long>> iterator = poolDbs.entrySet().iterator();
					while (iterator.hasNext()) {
						Entry<DB, Long> db = iterator.next();
						if (System.currentTimeMillis() - db.getValue() >= this.minIdleTime) {

							OResourcePool<String, DB> oResourcePool = pools.get(pool.getKey());
							if (oResourcePool != null) {
								OLogManager.instance().debug(this, "Closing idle pooled database '%s'[]", db.getKey().getName());
								((ODatabasePooled) db.getKey()).forceClose();
								oResourcePool.remove(db.getKey());
								iterator.remove();
							}

						}
					}

				}
			} finally {
				unlock();
			}
		}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434176/fstmerge_base_1497466343323111697
=======
@Override
    public void run() {
      OLogManager.instance().debug(this, "Running Connection Pool Evictor Service[]");
      lock();
      try {
        for (Entry<String, Map<DB, Long>> pool : this.evictionMap.entrySet()) {
          Map<DB, Long> poolDbs = pool.getValue();
          Iterator<Entry<DB, Long>> iterator = poolDbs.entrySet().iterator();
          while (iterator.hasNext()) {
            Entry<DB, Long> db = iterator.next();
            if (System.currentTimeMillis() - db.getValue() >= this.minIdleTime) {

              OResourcePool<String, DB> oResourcePool = pools.get(pool.getKey());
              if (oResourcePool != null) {
                OLogManager.instance().debug(this, "Closing idle pooled database '%s'[]", db.getKey().getName());
                ((ODatabasePooled) db.getKey()).forceClose();
                oResourcePool.remove(db.getKey());
                iterator.remove();
              }

            }
          }

        }
      } finally {
        unlock();
      }
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434176/fstmerge_var2_9138969611707712639

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434180/fstmerge_var1_7151756527069649618
public void updateIdleTime(final String poolName, final DB iDatabase) {
			Map<DB, Long> pool = this.evictionMap.get(poolName);
			if (pool == null) {
				pool = new HashMap<DB, Long>();
				this.evictionMap.put(poolName, pool);
			}

			pool.put(iDatabase, System.currentTimeMillis());

		}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434180/fstmerge_base_4163523686773875519
=======
public void updateIdleTime(final String poolName, final DB iDatabase) {
      Map<DB, Long> pool = this.evictionMap.get(poolName);
      if (pool == null) {
        pool = new HashMap<DB, Long>();
        this.evictionMap.put(poolName, pool);
      }

      pool.put(iDatabase, System.currentTimeMillis());

    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434180/fstmerge_var2_2899691019187990455

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
public ODatabasePoolBase<DB> setup(final int iMinSize, final int iMaxSize) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434199/fstmerge_var1_2495583598789404109
  	return this.setup(iMinSize, iMaxSize, 0L, 0L);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434199/fstmerge_base_5280408728260181957
    if (dbPool == null)
      synchronized (this) {
        if (dbPool == null) {
          dbPool = new ODatabasePoolAbstract<DB>(this, iMinSize, iMaxSize) {

            public void onShutdown() {
              if (owner instanceof ODatabasePoolBase<?>)
                ((ODatabasePoolBase<?>) owner).close();
            }

            public DB createNewResource(final String iDatabaseName, final Object[] iAdditionalArgs) {
              if (iAdditionalArgs.length < 2)
                throw new OSecurityAccessException("Username and/or password missed");

              return createResource(owner, iDatabaseName, iAdditionalArgs);
            }

            public boolean reuseResource(final String iKey, final Object[] iAdditionalArgs, final DB iValue) {
              if (((ODatabasePooled) iValue).isUnderlyingOpen()) {
                ((ODatabasePooled) iValue).reuse(owner, iAdditionalArgs);
                if (iValue.getStorage().isClosed())
                  // STORAGE HAS BEEN CLOSED: REOPEN IT
                  iValue.getStorage().open((String) iAdditionalArgs[0], (String) iAdditionalArgs[1], null);
                else if (!((ODatabaseComplex<?>) iValue).getUser().checkPassword((String) iAdditionalArgs[1]))
                  throw new OSecurityAccessException(iValue.getName(), "User or password not valid for database: '"
                      + iValue.getName() + "'");

                return true;
              }
              return false;
            }
          };
        }
      }
    return this;
=======
    return this.setup(iMinSize, iMaxSize, OGlobalConfiguration.DB_POOL_IDLE_TIMEOUT.getValueAsLong(),
        OGlobalConfiguration.DB_POOL_IDLE_CHECK_DELAY.getValueAsLong());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434199/fstmerge_var2_8796342619826116661
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694434203/fstmerge_var1_3584087552889770860
public ODatabasePoolBase<DB> setup(final int iMinSize, final int iMaxSize, final long idleTimeout,
			final long timeBetweenEvictionRunsMillis) {
    if (dbPool == null)
      synchronized (this) {
        if (dbPool == null) {
          dbPool = new ODatabasePoolAbstract<DB>(this, iMinSize, iMaxSize, idleTimeout, timeBetweenEvictionRunsMillis) {

            public void onShutdown() {
              if (owner instanceof ODatabasePoolBase<?>)
                ((ODatabasePoolBase<?>) owner).close();
            }

            public DB createNewResource(final String iDatabaseName, final Object[] iAdditionalArgs) {
              if (iAdditionalArgs.length < 2)
                throw new OSecurityAccessException("Username and/or password missed");

              return createResource(owner, iDatabaseName, iAdditionalArgs);
            }

            public boolean reuseResource(final String iKey, final Object[] iAdditionalArgs, final DB iValue) {
              if (((ODatabasePooled) iValue).isUnderlyingOpen()) {
                ((ODatabasePooled) iValue).reuse(owner, iAdditionalArgs);
                if (iValue.getStorage().isClosed())
                  // STORAGE HAS BEEN CLOSED: REOPEN IT
                  iValue.getStorage().open((String) iAdditionalArgs[0], (String) iAdditionalArgs[1], null);
                else if (!((ODatabaseComplex<?>) iValue).getUser().checkPassword((String) iAdditionalArgs[1]))
                  throw new OSecurityAccessException(iValue.getName(), "User or password not valid for database: '"
                      + iValue.getName() + "'");

                return true;
              }
              return false;
            }
          };
        }
      }
    return this;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694434203/fstmerge_base_1082215825776262054
=======
public ODatabasePoolBase<DB> setup(final int iMinSize, final int iMaxSize, final long idleTimeout,
      final long timeBetweenEvictionRunsMillis) {
    if (dbPool == null)
      synchronized (this) {
        if (dbPool == null) {
          dbPool = new ODatabasePoolAbstract<DB>(this, iMinSize, iMaxSize, idleTimeout, timeBetweenEvictionRunsMillis) {

            public void onShutdown() {
              if (owner instanceof ODatabasePoolBase<?>)
                ((ODatabasePoolBase<?>) owner).close();
            }

            public DB createNewResource(final String iDatabaseName, final Object[] iAdditionalArgs) {
              if (iAdditionalArgs.length < 2)
                throw new OSecurityAccessException("Username and/or password missed");

              return createResource(owner, iDatabaseName, iAdditionalArgs);
            }

            public boolean reuseResource(final String iKey, final Object[] iAdditionalArgs, final DB iValue) {
              if (((ODatabasePooled) iValue).isUnderlyingOpen()) {
                ((ODatabasePooled) iValue).reuse(owner, iAdditionalArgs);
                if (iValue.getStorage().isClosed())
                  // STORAGE HAS BEEN CLOSED: REOPEN IT
                  iValue.getStorage().open((String) iAdditionalArgs[0], (String) iAdditionalArgs[1], null);
                else if (!((ODatabaseComplex<?>) iValue).getUser().checkPassword((String) iAdditionalArgs[1]))
                  throw new OSecurityAccessException(iValue.getName(), "User or password not valid for database: '"
                      + iValue.getName() + "'");

                return true;
              }
              return false;
            }
          };
        }
      }
    return this;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694434203/fstmerge_var2_332191386924260655

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/db/ODatabasePoolBase.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void processRecordRidMap(final ORecordSchemaAware<?> record, Map<String, Integer> iFetchPlan,
      final int iCurrentLevel, final int iLevelFromRoot, final int iFieldDepthLevel, final Map<ORID, Integer> parsedRecords,
      final String iFieldPathFromRoot, final OFetchContext iContext) throws IOException {
    if (iFetchPlan == null)
      return;

    Object fieldValue;
    for (String fieldName : record.fieldNames()) {
      int depthLevel;
      final String fieldPath = !iFieldPathFromRoot.isEmpty() ? iFieldPathFromRoot + "." + fieldName : fieldName;

      depthLevel = getDepthLevel(iFetchPlan, fieldPath);
      if (depthLevel == -2)
        continue;
      if (iFieldDepthLevel > -1)
        depthLevel = iFieldDepthLevel;

      fieldValue = record.field(fieldName);
      if (fieldValue == null
          || !(fieldValue instanceof OIdentifiable)
          && (!(fieldValue instanceof ORecordLazyMultiValue) || !((ORecordLazyMultiValue) fieldValue).rawIterator().hasNext() || !(((ORecordLazyMultiValue) fieldValue)
              .rawIterator().next() instanceof OIdentifiable))
          && (!(fieldValue instanceof Collection<?>) || ((Collection<?>) fieldValue).size() == 0 || !(((Collection<?>) fieldValue)
              .iterator().next() instanceof OIdentifiable))
          && (!(fieldValue instanceof OMultiCollectionIterator<?>))
          && (!(fieldValue instanceof Map<?, ?>) || ((Map<?, ?>) fieldValue).size() == 0 || !(((Map<?, ?>) fieldValue).values()
              .iterator().next() instanceof OIdentifiable))) {
        continue;
      } else {
        try {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694437604/fstmerge_var1_7124937369503025756
          final boolean isEmbedded = fieldValue instanceof ODocument
              && (((ODocument) fieldValue).isEmbedded() || !((ODocument) fieldValue).getIdentity().isValid());

          if (!(isEmbedded && iContext.fetchEmbeddedDocuments()) && !iFetchPlan.containsKey(fieldPath.toUpperCase())
              && depthLevel > -1 && iCurrentLevel >= depthLevel)
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694437604/fstmerge_base_8092821513234320846
          final boolean isEmbedded = fieldValue instanceof ODocument
              && (((ODocument) fieldValue).isEmbedded() || !((ODocument) fieldValue).getIdentity().isValid());

          if (!(isEmbedded && iContext.fetchEmbeddedDocuments()) && !iFetchPlan.containsKey(fieldPath) && depthLevel > -1
              && iCurrentLevel >= depthLevel)
=======
          final boolean isEmbedded = isEmbedded(fieldValue);
          if (!(isEmbedded && iContext.fetchEmbeddedDocuments()) && !iFetchPlan.containsKey(fieldPath.toUpperCase())
              && depthLevel > -1 && iCurrentLevel >= depthLevel)
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694437604/fstmerge_var2_2524473836550810843
            // MAX DEPTH REACHED: STOP TO FETCH THIS FIELD
            continue;

          final int nextLevel = isEmbedded ? iLevelFromRoot : iLevelFromRoot + 1;

          fetchRidMap(record, iFetchPlan, fieldValue, fieldName, iCurrentLevel, nextLevel, iFieldDepthLevel, parsedRecords,
              fieldPath, iContext);
        } catch (Exception e) {
          e.printStackTrace();
          OLogManager.instance().error(null, "Fetching error on record %s", e, record.getIdentity());
        }
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/core/src/main/java/com/orientechnologies/orient/core/fetch/OFetchHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455697/fstmerge_var1_2365575695239896612
@AfterTest
  private void after() {
	  database.close();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455697/fstmerge_base_9188325339662102044
=======
@AfterTest
  private void after() {
    database.close();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455697/fstmerge_var2_244476649331747625

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void updateWithWhereOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_var1_2360069583478047797
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_base_7077469690884565737
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_var2_5968961314115234018

    List<OClusterPosition> positions = getValidPositions(4);

    Integer records = (Integer) database.command(
        new OCommandSQL("update Profile set salary = 120.30, location = 4:" + positions.get(2)
            + ", salary_cloned = salary where surname = 'Obama'")).execute();

    Assert.assertEquals(records.intValue(), 3);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_var1_2360069583478047797
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_base_7077469690884565737
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455701/fstmerge_var2_5968961314115234018
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void updateWithWhereRid() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_var1_5889616148227770280
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_base_4030710122276633798
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_var2_704749099636441521

    List<ODocument> result = database.command(new OCommandSQL("select @rid as rid from Profile where surname = 'Obama'")).execute();

    Assert.assertEquals(result.size(), 3);

    Integer records = (Integer) database.command(new OCommandSQL("update Profile set salary = 133.00 where @rid = ?")).execute(
        result.get(0).field("rid"));

    Assert.assertEquals(records.intValue(), 1);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_var1_5889616148227770280
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_base_4030710122276633798
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455705/fstmerge_var2_704749099636441521
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateWithWhereOperator")
  public void updateCollectionsAddWithWhereOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_var1_2009238401224263846
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_base_4784803775921762397
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_var2_9102359319229741865

    updatedRecords = (Integer) database.command(new OCommandSQL("update Account add addresses = #13:0")).execute();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_var1_2009238401224263846
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_base_4784803775921762397
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455709/fstmerge_var2_9102359319229741865
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateCollectionsAddWithWhereOperator")
  public void updateCollectionsRemoveWithWhereOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_var1_2532483569314146929
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_base_6509816794534388166
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_var2_1705674985044126436

    final int records = (Integer) database.command(new OCommandSQL("update Account remove addresses = #13:0")).execute();

    Assert.assertEquals(records, updatedRecords);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_var1_2532483569314146929
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_base_6509816794534388166
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455712/fstmerge_var2_1705674985044126436
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateCollectionsRemoveWithWhereOperator")
  public void updateCollectionsWithSetOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_var1_2740754830912389191
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_base_6012957439790604107
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_var2_340048706505827371

    List<ODocument> docs = database.query(new OSQLSynchQuery<ODocument>("select from Account"));

    List<OClusterPosition> positions = getValidPositions(13);

    for (ODocument doc : docs) {

      final int records = (Integer) database.command(
          new OCommandSQL("update Account set addresses = [#13:" + positions.get(0) + ", #13:" + positions.get(1) + ",#13:"
              + positions.get(2) + "] where @rid = " + doc.getIdentity())).execute();

      Assert.assertEquals(records, 1);

      ODocument loadedDoc = database.load(doc.getIdentity(), "*:-1", true);
      Assert.assertEquals(((List<?>) loadedDoc.field("addresses")).size(), 3);
      Assert.assertEquals(((OIdentifiable) ((List<?>) loadedDoc.field("addresses")).get(0)).getIdentity().toString(), "#13:"
          + positions.get(0));
      loadedDoc.field("addresses", doc.field("addresses"));
      database.save(loadedDoc);
    }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_var1_2740754830912389191
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_base_6012957439790604107
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455716/fstmerge_var2_340048706505827371
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateCollectionsRemoveWithWhereOperator")
  public void updateMapsWithSetOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_var1_5235866277315132306
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_base_8113526371321990426
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_var2_7439572243286924235

    ODocument doc = (ODocument) database
        .command(
            new OCommandSQL(
                "insert into cluster:default (equaledges, name, properties) values ('no', 'circleUpdate', {'round':'eeee', 'blaaa':'zigzag'} )"))
        .execute();

    Integer records = (Integer) database.command(
        new OCommandSQL("update " + doc.getIdentity()
            + " set properties = {'roundOne':'ffff', 'bla':'zagzig','testTestTEST':'okOkOK'}")).execute();

    Assert.assertEquals(records.intValue(), 1);

    ODocument loadedDoc = database.load(doc.getIdentity(), "*:-1", true);

    Assert.assertTrue(loadedDoc.field("properties") instanceof Map);

    @SuppressWarnings("unchecked")
    Map<Object, Object> entries = ((Map<Object, Object>) loadedDoc.field("properties"));
    Assert.assertEquals(entries.size(), 3);

    Assert.assertNull(entries.get("round"));
    Assert.assertNull(entries.get("blaaa"));

    Assert.assertEquals(entries.get("roundOne"), "ffff");
    Assert.assertEquals(entries.get("bla"), "zagzig");
    Assert.assertEquals(entries.get("testTestTEST"), "okOkOK");

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_var1_5235866277315132306
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_base_8113526371321990426
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455720/fstmerge_var2_7439572243286924235
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateCollectionsRemoveWithWhereOperator")
  public void updateMapsWithPutOperatorAndWhere() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_var1_8634850756194784853
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_base_4041558522813281065
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_var2_4786171476958699067

    ODocument doc = (ODocument) database.command(
        new OCommandSQL(
            "insert into cluster:default (equaledges, name, properties) values ('no', 'updateMapsWithPutOperatorAndWhere', {} )"))
        .execute();

    Integer records = (Integer) database.command(
        new OCommandSQL("update " + doc.getIdentity()
            + " put properties = 'one', 'two' where name = 'updateMapsWithPutOperatorAndWhere'")).execute();

    Assert.assertEquals(records.intValue(), 1);

    ODocument loadedDoc = database.load(doc.getIdentity(), "*:-1", true);

    Assert.assertTrue(loadedDoc.field("properties") instanceof Map);

    @SuppressWarnings("unchecked")
    Map<Object, Object> entries = ((Map<Object, Object>) loadedDoc.field("properties"));
    Assert.assertEquals(entries.size(), 1);

    Assert.assertNull(entries.get("round"));
    Assert.assertNull(entries.get("blaaa"));

    Assert.assertEquals(entries.get("one"), "two");

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_var1_8634850756194784853
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_base_4041558522813281065
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455724/fstmerge_var2_4786171476958699067
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(dependsOnMethods = "updateCollectionsRemoveWithWhereOperator")
  public void updateAllOperator() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_var1_4877788671753401688
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_base_7391328313123199222
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_var2_2118167228895796071

    Long total = database.countClass("Profile");

    Integer records = (Integer) database.command(new OCommandSQL("update Profile set sex = 'male'")).execute();

    Assert.assertEquals(records.intValue(), total.intValue());

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_var1_4877788671753401688
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_base_7391328313123199222
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455728/fstmerge_var2_2118167228895796071
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void updateWithWildcards() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_var1_2900542652503936568
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_base_9076434542435769259
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_var2_5306907889436275893

    int updated = (Integer) database.command(new OCommandSQL("update Profile set sex = ? where sex = 'male' limit 1")).execute(
        "male");

    Assert.assertEquals(updated, 1);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_var1_2900542652503936568
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_base_9076434542435769259
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455733/fstmerge_var2_5306907889436275893
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void updateWithWildcardsOnSetAndWhere() {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_var1_2746263282617798029
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_base_4791005396994271814
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_var2_4507819697475056292
    ODocument doc = new ODocument("Person");
    doc.field("name", "Raf");
    doc.field("city", "Torino");
    doc.field("gender", "fmale");
    doc.save();
    checkUpdatedDoc(database, "Raf", "Torino", "fmale");

    /* THESE COMMANDS ARE OK */
    OCommandSQL updatecommand = new OCommandSQL("update Person set gender = 'female' where name = 'Raf'");
    database.command(updatecommand).execute("Raf");
    checkUpdatedDoc(database, "Raf", "Torino", "female");

    updatecommand = new OCommandSQL("update Person set city = 'Turin' where name = ?");
    database.command(updatecommand).execute("Raf");
    checkUpdatedDoc(database, "Raf", "Turin", "female");

    updatecommand = new OCommandSQL("update Person set gender = ? where name = 'Raf'");
    database.command(updatecommand).execute("F");
    checkUpdatedDoc(database, "Raf", "Turin", "F");

    updatecommand = new OCommandSQL("update Person set gender = ?, city = ? where name = 'Raf'");
    database.command(updatecommand).execute("FEMALE", "TORINO");
    checkUpdatedDoc(database, "Raf", "TORINO", "FEMALE");

    updatecommand = new OCommandSQL("update Person set gender = ? where name = ?");
    database.command(updatecommand).execute("f", "Raf");
    checkUpdatedDoc(database, "Raf", "TORINO", "f");

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_var1_2746263282617798029
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_base_4791005396994271814
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455737/fstmerge_var2_4507819697475056292
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455741/fstmerge_var1_978063123627378145
@Test
  public void updateWithNamedParameters(){
    ODocument doc = new ODocument("Data");
    doc.field("name", "Raf");
    doc.field("city", "Torino");
    doc.field("gender", "fmale");
    doc.save();

    OCommandSQL updatecommand = new OCommandSQL("update Data set gender = :gender , city = :city where name = :name");
    Map<String,Object> params = new HashMap<String, Object>();
    params.put("gender", "f");
    params.put("city", "TOR");
    params.put("name", "Raf");
    
    database.command(updatecommand).execute(params);
    List<ODocument> result = database.query(new OSQLSynchQuery<Object>("select * from Data"));
    ODocument oDoc = result.get(0);
    Assert.assertEquals("Raf", oDoc.field("name"));
    Assert.assertEquals("TOR", oDoc.field("city"));
    Assert.assertEquals("f", oDoc.field("gender"));
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455741/fstmerge_base_3001222534978297616
=======
@Test
  public void updateWithNamedParameters() {
    ODocument doc = new ODocument("Data");
    doc.field("name", "Raf");
    doc.field("city", "Torino");
    doc.field("gender", "fmale");
    doc.save();

    OCommandSQL updatecommand = new OCommandSQL("update Data set gender = :gender , city = :city where name = :name");
    Map<String, Object> params = new HashMap<String, Object>();
    params.put("gender", "f");
    params.put("city", "TOR");
    params.put("name", "Raf");

    database.command(updatecommand).execute(params);
    List<ODocument> result = database.query(new OSQLSynchQuery<Object>("select * from Data"));
    ODocument oDoc = result.get(0);
    Assert.assertEquals("Raf", oDoc.field("name"));
    Assert.assertEquals("TOR", oDoc.field("city"));
    Assert.assertEquals("f", oDoc.field("gender"));
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455741/fstmerge_var2_1493344538382286624

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
public void updateIncrement() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_var1_7283173313727822678
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_base_2308211277107535377
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_var2_6783637999545153402

    List<ODocument> result1 = database.command(new OCommandSQL("select salary from Account where salary is defined")).execute();
    Assert.assertFalse(result1.isEmpty());

    updatedRecords = (Integer) database.command(new OCommandSQL("update Account increment salary = 10 where salary is defined"))
        .execute();
    Assert.assertTrue(updatedRecords > 0);

    List<ODocument> result2 = database.command(new OCommandSQL("select salary from Account where salary is defined")).execute();
    Assert.assertFalse(result2.isEmpty());
    Assert.assertEquals(result2.size(), result1.size());

    for (int i = 0; i < result1.size(); ++i) {
      float salary1 = (Float) result1.get(i).field("salary");
      float salary2 = (Float) result2.get(i).field("salary");
      Assert.assertEquals(salary2, salary1 + 10);
    }

    updatedRecords = (Integer) database.command(new OCommandSQL("update Account increment salary = -10 where salary is defined"))
        .execute();
    Assert.assertTrue(updatedRecords > 0);

    List<ODocument> result3 = database.command(new OCommandSQL("select salary from Account where salary is defined")).execute();
    Assert.assertFalse(result3.isEmpty());
    Assert.assertEquals(result3.size(), result1.size());

    for (int i = 0; i < result1.size(); ++i) {
      float salary1 = (Float) result1.get(i).field("salary");
      float salary3 = (Float) result3.get(i).field("salary");
      Assert.assertEquals(salary3, salary1);
    }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_var1_7283173313727822678
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_base_2308211277107535377
    database.close();
=======

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455745/fstmerge_var2_6783637999545153402
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
public void updateSetMultipleFields() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_var1_8861757885203825180
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_base_3407291567630410093
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_var2_7829898232924451853

    List<ODocument> result1 = database.command(new OCommandSQL("select salary from Account where salary is defined")).execute();
    Assert.assertFalse(result1.isEmpty());

    updatedRecords = (Integer) database.command(
        new OCommandSQL("update Account set salary2 = salary, checkpoint = true where salary is defined")).execute();
    Assert.assertTrue(updatedRecords > 0);

    List<ODocument> result2 = database.command(new OCommandSQL("select from Account where salary is defined")).execute();
    Assert.assertFalse(result2.isEmpty());
    Assert.assertEquals(result2.size(), result1.size());

    for (int i = 0; i < result1.size(); ++i) {
      float salary1 = (Float) result1.get(i).field("salary");
      float salary2 = (Float) result2.get(i).field("salary2");
      Assert.assertEquals(salary2, salary1);
      Assert.assertEquals(result2.get(i).field("checkpoint"), true);
    }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_var1_8861757885203825180
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_base_3407291567630410093
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455749/fstmerge_var2_7829898232924451853
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
public void updateAddMultipleFields() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_var1_8442298153436454138
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_base_3709426038773557824
    database.open("admin", "admin");
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_var2_1646622855261442559

    updatedRecords = (Integer) database.command(new OCommandSQL("update Account add myCollection = 1, myCollection = 2 limit 1"))
        .execute();
    Assert.assertTrue(updatedRecords > 0);

    List<ODocument> result2 = database.command(new OCommandSQL("select from Account where myCollection is defined")).execute();
    Assert.assertEquals(result2.size(), 1);

    Collection<Object> myCollection = result2.iterator().next().field("myCollection");

    Assert.assertTrue(myCollection.containsAll(Arrays.asList(new Integer[] { 1, 2 })));

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_var1_8442298153436454138
    
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_base_3709426038773557824
    database.close();
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694455753/fstmerge_var2_1646622855261442559
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456383/fstmerge_base_5308011434314456451
	public void testCreateEmbeddedMapWrongSpecifierIndexOne() throws Exception {
		try {
			database.command(new OCommandSQL("CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE"))
							.execute();
			Assert.fail();
		} catch (OCommandSQLParsingException e) {
			Assert
							.assertTrue(e
											.getMessage()
											.contains(
															"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by ttt'\n"
																			+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE\n"
																			+ "--------------------------------------------------------------------------------------------^"));
		}
		final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
						.getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");
=======
  public void testCreateEmbeddedMapWrongSpecifierIndexOne() throws Exception {
    try {
      database.command(
          new OCommandSQL(
              "CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE"))
          .execute();
      Assert.fail();
    } catch (OResponseProcessingException e) {
      Assert.assertTrue(e.getCause() instanceof OCommandSQLParsingException);
      OCommandSQLParsingException exception = (OCommandSQLParsingException) e.getCause();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456383/fstmerge_var2_7581996187999642592

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456383/fstmerge_var1_1545051600896122049
      Assert
          .assertTrue(exception
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by ttt'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
                  "Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by ttt'\n"
                      + "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE\n"
                      + "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694456383/fstmerge_base_5308011434314456451
		Assert.assertNull(index, "Index created while wrong query was executed");
	}
=======
      Assert
          .assertTrue(exception
              .getMessage()
              .contains(
                  "Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by ttt'\n"
                      + "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE\n"
                      + "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by ttt'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by ttt) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456383/fstmerge_var2_7581996187999642592

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLCreateIndexTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456388/fstmerge_base_2676879490914173943
	public void testCreateEmbeddedMapWrongSpecifierIndexTwo() throws Exception {
		try {
			database.command(new OCommandSQL("CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE"))
							.execute();
			Assert.fail();
		} catch (OCommandSQLParsingException e) {
			Assert
							.assertTrue(e
											.getMessage()
											.contains(
															"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 b value'\n"
																			+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE\n"
																			+ "--------------------------------------------------------------------------------------------^"));
		}
		final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
						.getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");
=======
  public void testCreateEmbeddedMapWrongSpecifierIndexTwo() throws Exception {
    try {
      database.command(
          new OCommandSQL(
              "CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE"))
          .execute();
      Assert.fail();
    } catch (OResponseProcessingException e) {
      Assert.assertTrue(e.getCause() instanceof OCommandSQLParsingException);
      OCommandSQLParsingException exception = (OCommandSQLParsingException) e.getCause();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456388/fstmerge_var2_6613162582091858308

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456388/fstmerge_var1_5234728689344495893
      Assert
          .assertTrue(exception
									.getMessage()
									.contains(
													"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 b value'\n"
																	+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE\n"
																	+ "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
                  "Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 b value'\n"
                      + "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE\n"
                      + "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694456388/fstmerge_base_2676879490914173943
		Assert.assertNull(index, "Index created while wrong query was executed");
	}
=======
      Assert
          .assertTrue(exception
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 b value'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 b value'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 b value) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456388/fstmerge_var2_6613162582091858308

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLCreateIndexTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456392/fstmerge_base_6366002831710946434
	public void testCreateEmbeddedMapWrongSpecifierIndexThree() throws Exception {
		try {
			database.command(new OCommandSQL("CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE"))
							.execute();
			Assert.fail();
		} catch (OCommandSQLParsingException e) {
			Assert
							.assertTrue(e
											.getMessage()
											.contains(
															"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by value t'\n"
																			+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE\n"
																			+ "--------------------------------------------------------------------------------------------^"));
		}
		final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
						.getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");
=======
  public void testCreateEmbeddedMapWrongSpecifierIndexThree() throws Exception {
    try {
      database.command(
          new OCommandSQL(
              "CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE"))
          .execute();
      Assert.fail();
    } catch (OResponseProcessingException e) {
      Assert.assertTrue(e.getCause() instanceof OCommandSQLParsingException);
      OCommandSQLParsingException exception = (OCommandSQLParsingException) e.getCause();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456392/fstmerge_var2_5794134334846594523

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694456392/fstmerge_var1_6781173789589824991
      Assert
          .assertTrue(exception
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by value t'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
                  "Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by value t'\n"
                      + "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE\n"
                      + "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694456392/fstmerge_base_6366002831710946434
		Assert.assertNull(index, "Index created while wrong query was executed");
	}
=======
      Assert
          .assertTrue(exception
              .getMessage()
              .contains(
                  "Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by value t'\n"
                      + "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE\n"
                      + "--------------------------------------------------------------------------------------------^"));
    } catch (OCommandSQLParsingException e) {
      Assert
          .assertTrue(e
              .getMessage()
              .contains(
											"Error on parsing command at position #84: Illegal field name format, should be '<property> [by key|value]' but was 'prop3 by value t'\n"
															+ "Command: CREATE INDEX sqlCreateIndexEmbeddedMapWrongSpecifierIndex ON sqlCreateIndexTestClass (prop3 by value t) UNIQUE\n"
															+ "--------------------------------------------------------------------------------------------^"));
    }
    final OIndex<?> index = database.getMetadata().getSchema().getClass("sqlCreateIndexTestClass")
        .getClassIndex("sqlCreateIndexEmbeddedMapWrongSpecifierIndex");

    Assert.assertNull(index, "Index created while wrong query was executed");
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694456392/fstmerge_var2_5794134334846594523

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLCreateIndexTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460691/fstmerge_base_15452621909625101
@Test(expectedExceptions = OCommandSQLParsingException.class)
=======
@Test
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460691/fstmerge_var2_4960048685369740454
  public void invalidClusterWrongClusterId() {
    database = new ODatabaseFlat(url);
    database.open("admin", "admin");
    try {
      database.command(new OCommandSQL("create class Antani cluster 212121")).execute();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460691/fstmerge_var1_5416508298060452275
      Assert.fail();
    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) ((OResponseProcessingException) e).getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694460691/fstmerge_base_15452621909625101

=======
      Assert.fail();
    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) e.getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460691/fstmerge_var2_4960048685369740454
    } finally {
      database.close();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460695/fstmerge_base_7089667215350538214
@Test(expectedExceptions = OCommandSQLParsingException.class)
=======
@Test
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460695/fstmerge_var2_2281103040624657145
  public void invalidClusterWrongClusterName() {
    database = new ODatabaseFlat(url);
    database.open("admin", "admin");

    try {
      database.command(new OCommandSQL("create class Antani cluster blaaa")).execute();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460695/fstmerge_var1_9067607822926902276
      Assert.fail();

    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) ((OResponseProcessingException) e).getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694460695/fstmerge_base_7089667215350538214
=======
      Assert.fail();

    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) e.getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460695/fstmerge_var2_2281103040624657145
    } finally {
      database.close();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460699/fstmerge_base_4516832572134402068
@Test(expectedExceptions = OCommandSQLParsingException.class)
=======
@Test
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460699/fstmerge_var2_5182506577342147836
  public void invalidClusterWrongKeywords() {
    database = new ODatabaseFlat(url);
    database.open("admin", "admin");

    try {
      database.command(new OCommandSQL("create class Antani the pen is on the table")).execute();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694460699/fstmerge_var1_2732726240055199353
      Assert.fail();
    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) ((OResponseProcessingException) e).getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694460699/fstmerge_base_4516832572134402068
=======
      Assert.fail();
    } catch (Exception e) {
      if (e instanceof OResponseProcessingException)
        e = (Exception) e.getCause();
      Assert.assertTrue(e instanceof OCommandSQLParsingException);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694460699/fstmerge_var2_5182506577342147836
    } finally {
      database.close();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694466454/fstmerge_var1_3474561415262233821
public void copyData(long srcOffset, ODirectMemoryPointer destPointer, long destOffset, long len) {
    if (SAFE_MODE) {
      rangeCheck(srcOffset, len);
      rangeCheck(destOffset, len);
    }

    directMemory.copyData(dataPointer + srcOffset, destPointer.getDataPointer() + destOffset, len);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694466454/fstmerge_base_688294404264632583
public void copyData(long srcOffset, ODirectMemoryPointer destPointer, long destOffset, long len) {
    rangeCheck(srcOffset, len);
    rangeCheck(destOffset, len);

    directMemory.copyData(dataPointer + srcOffset, destPointer.getDataPointer() + destOffset, len);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694466454/fstmerge_var2_1199778140728424552

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/main/java/com/orientechnologies/common/directmemory/ODirectMemoryPointer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694468306/fstmerge_base_4898013091923088448
public void serialize(final String object, final byte[] stream, final int startPosition, Object[] hints) {
    final OCharSerializer charSerializer = OCharSerializer.INSTANCE;
    final int length = object.length();
=======
public void serialize(final String object, final byte[] stream, int startPosition, Object[] hints) {
    int length = object.length();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694468306/fstmerge_var2_2991191117284188478
    OIntegerSerializer.INSTANCE.serialize(length, stream, startPosition);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694468306/fstmerge_var1_655917003451981234

    startPosition += OIntegerSerializer.INT_SIZE;

    byte[] binaryData = new byte[length * 2];
    char[] stringContent = new char[length];

    object.getChars(0, length, stringContent, 0);

    int counter = 0;
    for (char character : stringContent) {
      binaryData[counter] = (byte) character;
      counter++;

      binaryData[counter] = (byte) (character >>> 8);
      counter++;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694468306/fstmerge_base_4898013091923088448
    for (int i = 0; i < length; i++) {
      charSerializer.serialize(object.charAt(i), stream, startPosition + OIntegerSerializer.INT_SIZE + i * 2);
=======

    startPosition += OIntegerSerializer.INT_SIZE;
    char[] stringContent = new char[length];

    object.getChars(0, length, stringContent, 0);

    for (char character : stringContent) {
      stream[startPosition] = (byte) character;
      startPosition++;

      stream[startPosition] = (byte) (character >>> 8);
      startPosition++;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694468306/fstmerge_var2_2991191117284188478
    }

    System.arraycopy(binaryData, 0, stream, startPosition, binaryData.length);
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/main/java/com/orientechnologies/common/serialization/types/OStringSerializer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694468310/fstmerge_var1_5062057570993713936
public String deserialize(final byte[] stream, int startPosition) {
    int len = OIntegerSerializer.INSTANCE.deserialize(stream, startPosition);
    char[] buffer = new char[len];

    startPosition += OIntegerSerializer.INT_SIZE;

    byte[] binaryData = new byte[buffer.length * 2];
    System.arraycopy(stream, startPosition, binaryData, 0, binaryData.length);

    for (int i = 0; i < len; i++)
      buffer[i] = (char) ((0xFF & binaryData[i << 1]) | ((0xFF & binaryData[(i << 1) + 1]) << 8));

    return new String(buffer);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694468310/fstmerge_base_3058522768775061614
public String deserialize(final byte[] stream, final int startPosition) {
    final OCharSerializer charSerializer = OCharSerializer.INSTANCE;
    final int len = OIntegerSerializer.INSTANCE.deserialize(stream, startPosition);
    final StringBuilder stringBuilder = new StringBuilder();
    for (int i = 0; i < len; i++) {
      stringBuilder.append(charSerializer.deserialize(stream, startPosition + OIntegerSerializer.INT_SIZE + i * 2));
    }
    return stringBuilder.toString();
=======
public String deserialize(final byte[] stream, int startPosition) {
    int len = OIntegerSerializer.INSTANCE.deserialize(stream, startPosition);
    char[] buffer = new char[len];

    startPosition += OIntegerSerializer.INT_SIZE;

    for (int i = 0; i < len; i++) {
      buffer[i] = (char) ((0xFF & stream[startPosition]) | ((0xFF & stream[startPosition + 1]) << 8));
      startPosition += 2;
    }

    return new String(buffer);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694468310/fstmerge_var2_1173596659872242005
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/main/java/com/orientechnologies/common/serialization/types/OStringSerializer.java
Conflict type: LineBasedMCFd
Conflict body: 
public void serializeNative(String object, byte[] stream, int startPosition, Object[] hints) {
    int length = object.length();
    OIntegerSerializer.INSTANCE.serializeNative(length, stream, startPosition);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694468326/fstmerge_var1_1584676800101356937
    int pos = startPosition + OIntegerSerializer.INT_SIZE;

    byte[] binaryData = new byte[length * 2];
    char[] stringContent = new char[length];

    object.getChars(0, length, stringContent, 0);

    int counter = 0;
    for (char character : stringContent) {
      binaryData[counter] = (byte) character;
      counter++;

      binaryData[counter] = (byte) (character >>> 8);
      counter++;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694468326/fstmerge_base_6287214894887407648
    int pos = startPosition + OIntegerSerializer.INT_SIZE;
    for (int i = 0; i < length; i++) {
      final char strChar = object.charAt(i);
      CONVERTER.putChar(stream, pos, strChar, ByteOrder.nativeOrder());
      pos += 2;
=======
    startPosition += OIntegerSerializer.INT_SIZE;
    char[] stringContent = new char[length];

    object.getChars(0, length, stringContent, 0);

    for (char character : stringContent) {
      stream[startPosition] = (byte) character;
      startPosition++;

      stream[startPosition] = (byte) (character >>> 8);
      startPosition++;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694468326/fstmerge_var2_3597205831145107017
    }

    System.arraycopy(binaryData, 0, stream, pos, binaryData.length);
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/main/java/com/orientechnologies/common/serialization/types/OStringSerializer.java
Conflict type: LineBasedMCFd
Conflict body: 
public String deserializeNative(byte[] stream, int startPosition) {
    int len = OIntegerSerializer.INSTANCE.deserializeNative(stream, startPosition);
    char[] buffer = new char[len];

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694468330/fstmerge_var1_1760962143833758186
    startPosition += OIntegerSerializer.INT_SIZE;

    byte[] binaryData = new byte[buffer.length * 2];
    System.arraycopy(stream, startPosition, binaryData, 0, binaryData.length);

    for (int i = 0; i < len; i++)
      buffer[i] = (char) ((0xFF & binaryData[i << 1]) | ((0xFF & binaryData[(i << 1) + 1]) << 8));

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694468330/fstmerge_base_1924805496216446069
    int pos = startPosition + OIntegerSerializer.INT_SIZE;
    for (int i = 0; i < len; i++) {
      buffer[i] = CONVERTER.getChar(stream, pos, ByteOrder.nativeOrder());
      pos += 2;
    }
=======
    startPosition += OIntegerSerializer.INT_SIZE;

    for (int i = 0; i < len; i++) {
      buffer[i] = (char) ((0xFF & stream[startPosition]) | ((0xFF & stream[startPosition + 1]) << 8));
      startPosition += 2;
    }

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694468330/fstmerge_var2_2569724828460472050
    return new String(buffer);
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/main/java/com/orientechnologies/common/serialization/types/OStringSerializer.java
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeClass
  public void beforeClass() {
    stringSerializer = new OStringSerializer();
    Random random = new Random();
    StringBuilder sb = new StringBuilder();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694471830/fstmerge_var1_8477309026886378119
    for (int i = 0; i < 1; i++) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413694471830/fstmerge_base_5053656131819102291
    for (int i = 0; i < 100; i++) {
=======
    for (int i = 0; i < random.nextInt(20) + 5; i++) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694471830/fstmerge_var2_8541912289723744349
      sb.append((char) random.nextInt());
    }
    OBJECT = sb.toString();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413694471830/fstmerge_base_5053656131819102291
    FIELD_SIZE = OBJECT.length() * 2 + 4;
=======
    FIELD_SIZE = OBJECT.length() * 2 + 4 + 7;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413694471830/fstmerge_var2_8541912289723744349
    stream = new byte[FIELD_SIZE];
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_366a1_819cc/rev_366a1-819cc/commons/src/test/java/com/orientechnologies/common/serialization/types/StringSerializerTest.java

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final double            MERGE_THRESHOLD        = 0.2; ##FSTMerge## private static final double                             MERGE_THRESHOLD        = 0.2; ##FSTMerge## private static final double MERGE_THRESHOLD = 0.2;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final long              HASH_CODE_MIN_VALUE    = 0; ##FSTMerge## private static final long                               HASH_CODE_MIN_VALUE    = 0; ##FSTMerge## private static final long HASH_CODE_MIN_VALUE = 0;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final long              HASH_CODE_MAX_VALUE    = 0xFFFFFFFFFFFFFFFFL; ##FSTMerge## private static final long                               HASH_CODE_MAX_VALUE    = 0xFFFFFFFFFFFFFFFFL; ##FSTMerge## private static final long HASH_CODE_MAX_VALUE = 0xFFFFFFFFFFFFFFFFL;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private long[][]                       hashTree; ##FSTMerge## private long[][]                                        hashTree; ##FSTMerge## private long[][] hashTree;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OHashTreeNodeMetadata[]        nodesMetadata; ##FSTMerge## private OHashTreeNodeMetadata[]                         nodesMetadata; ##FSTMerge## private OHashTreeNodeMetadata[] nodesMetadata;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private int                            hashTreeSize; ##FSTMerge## private int                                             hashTreeSize; ##FSTMerge## private int hashTreeSize;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private long                           size; ##FSTMerge## private long                                            size; ##FSTMerge## private long size;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private int                            hashTreeTombstone      = -1; ##FSTMerge## private int                                             hashTreeTombstone      = -1; ##FSTMerge## private int hashTreeTombstone = -1;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private long                           bucketTombstonePointer = -1; ##FSTMerge## private long                                            bucketTombstonePointer = -1; ##FSTMerge## private long bucketTombstonePointer = -1;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final String                   metadataConfigurationFileExtension; ##FSTMerge## private final String                                    metadataConfigurationFileExtension; ##FSTMerge## private final String metadataConfigurationFileExtension;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final String                   treeStateFileExtension; ##FSTMerge## private final String                                    treeStateFileExtension; ##FSTMerge## private final String treeStateFileExtension;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final String                   bucketFileExtension; ##FSTMerge## private final String                                    bucketFileExtension; ##FSTMerge## private final String bucketFileExtension;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final int                HASH_CODE_SIZE         = 64; ##FSTMerge## public static final int                                 HASH_CODE_SIZE         = 64; ##FSTMerge## public static final int HASH_CODE_SIZE = 64;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final int                MAX_LEVEL_DEPTH        = 8; ##FSTMerge## public static final int                                 MAX_LEVEL_DEPTH        = 8; ##FSTMerge## public static final int MAX_LEVEL_DEPTH = 8;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final int                MAX_LEVEL_SIZE         = 1 << MAX_LEVEL_DEPTH; ##FSTMerge## public static final int                                 MAX_LEVEL_SIZE         = 1 << MAX_LEVEL_DEPTH; ##FSTMerge## public static final int MAX_LEVEL_SIZE = 1 << MAX_LEVEL_DEPTH;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final int                LEVEL_MASK             = Integer.MAX_VALUE >>> (31 - MAX_LEVEL_DEPTH); ##FSTMerge## public static final int                                 LEVEL_MASK             = Integer.MAX_VALUE >>> (31 - MAX_LEVEL_DEPTH); ##FSTMerge## public static final int LEVEL_MASK = Integer.MAX_VALUE >>> (31 - MAX_LEVEL_DEPTH);
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OStorageLocalAbstract          storage; ##FSTMerge## private OStorageLocalAbstract                           storage; ##FSTMerge## private OStorageLocalAbstract storage;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private String                         name; ##FSTMerge## private String                                          name; ##FSTMerge## private String name;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OHashIndexBufferStore          metadataStore; ##FSTMerge## private OHashIndexBufferStore                           metadataStore; ##FSTMerge## private OHashIndexBufferStore metadataStore;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OHashIndexTreeStateStore       treeStateStore; ##FSTMerge## private OHashIndexTreeStateStore                        treeStateStore; ##FSTMerge## private OHashIndexTreeStateStore treeStateStore;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private ODiskCache                     diskCache; ##FSTMerge## private ODiskCache                                      diskCache; ##FSTMerge## private ODiskCache diskCache;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final OHashFunction<K>         keyHashFunction; ##FSTMerge## private final OHashFunction<K>                          keyHashFunction; ##FSTMerge## private final OHashFunction<K> keyHashFunction;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OBinarySerializer<K>           keySerializer; ##FSTMerge## private OBinarySerializer<K>                            keySerializer; ##FSTMerge## private OBinarySerializer<K> keySerializer;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OBinarySerializer<V>           valueSerializer; ##FSTMerge## private OBinarySerializer<V>                            valueSerializer; ##FSTMerge## private OBinarySerializer<V> valueSerializer;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OType[]                        keyTypes; ##FSTMerge## private OType[]                                         keyTypes; ##FSTMerge## private OType[] keyTypes;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private OHashIndexFileLevelMetadata[]  filesMetadata          = new OHashIndexFileLevelMetadata[HASH_CODE_SIZE]; ##FSTMerge## private OHashIndexFileLevelMetadata[]                   filesMetadata          = new OHashIndexFileLevelMetadata[HASH_CODE_SIZE]; ##FSTMerge## private OHashIndexFileLevelMetadata[] filesMetadata = new OHashIndexFileLevelMetadata[HASH_CODE_SIZE];
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private final long[]                   fileLevelIds           = new long[HASH_CODE_SIZE]; ##FSTMerge## private final long[]                                    fileLevelIds           = new long[HASH_CODE_SIZE]; ##FSTMerge## private final long[] fileLevelIds = new long[HASH_CODE_SIZE];
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b524a_0f2c6/rev_b524a-0f2c6/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_37249_31713/rev_37249-31713.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_31713_c0e0c/rev_31713-c0e0c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_728d8_cb801/rev_728d8-cb801.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04e91_1a94c/rev_04e91-1a94c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eb586_176fe/rev_eb586-176fe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cb792_04197/rev_cb792-04197.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cb792_047d4/rev_cb792-047d4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c70e5_cb792/rev_c70e5-cb792.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1204d_e4ca6/rev_1204d-e4ca6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_95b4d_cf361/rev_95b4d-cf361.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b18d7_111d6/rev_b18d7-111d6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_001d4_79bdc/rev_001d4-79bdc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_af9f6_3cfbf/rev_af9f6-3cfbf.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413813856924/fstmerge_var1_8993349705230190333
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413813856924/fstmerge_base_2667312919289406398
protected boolean executeCommands(final Scanner iScanner, final boolean iExitOnException) {
    final StringBuilder commandBuffer = new StringBuilder();

    try {
      String commandLine = null;

      iScanner.useDelimiter(";(?=([^\"]*\"[^\"]*\")*[^\"]*$)(?=([^']*'[^']*')*[^']*$)|\n");

      while (iScanner.hasNext()) {

        commandLine = iScanner.next().trim();

        if (commandLine.isEmpty())
          // EMPTY LINE
          continue;

        if (isComment(commandLine))
          continue;

        // SCRIPT CASE: MANAGE ENSEMBLING ALL TOGETHER
        if (isCollectingCommands(commandLine)) {
          // BEGIN: START TO COLLECT
          commandBuffer.append(commandLine);
          commandLine = null;
        } else if (commandLine.startsWith("end") && commandBuffer.length() > 0) {
          // END: FLUSH IT
          commandLine = commandBuffer.toString();
          commandBuffer.setLength(0);

        } else if (commandBuffer.length() > 0) {
          // BUFFER IT
          commandBuffer.append(';');
          commandBuffer.append(commandLine);
          commandLine = null;
        }

        if (commandLine != null) {
          final RESULT status = execute(commandLine);
          commandLine = null;

          if (status == RESULT.EXIT || status == RESULT.ERROR && iExitOnException)
            return false;
        }
      }

      if (commandBuffer.length() > 0) {
        final RESULT status = execute(commandBuffer.toString());
        if (status == RESULT.EXIT || status == RESULT.ERROR && iExitOnException)
          return false;
      }
    } finally {
      iScanner.close();
    }
    return true;
  }
=======
protected boolean executeCommands(final Scanner iScanner, final boolean iExitOnException) {
    final StringBuilder commandBuffer = new StringBuilder();

    try {
      String commandLine = null;

      iScanner.useDelimiter("\n|;");

      while (iScanner.hasNext()) {

        commandLine = iScanner.next().trim();

        if (commandLine.isEmpty())
          // EMPTY LINE
          continue;

        if (isComment(commandLine))
          continue;

        // SCRIPT CASE: MANAGE ENSEMBLING ALL TOGETHER
        if (isCollectingCommands(commandLine)) {
          // BEGIN: START TO COLLECT
          commandBuffer.append(commandLine);
          commandLine = null;
        } else if (commandLine.startsWith("end") && commandBuffer.length() > 0) {
          // END: FLUSH IT
          commandLine = commandBuffer.toString();
          commandBuffer.setLength(0);

        } else if (commandBuffer.length() > 0) {
          // BUFFER IT
          commandBuffer.append(';');
          commandBuffer.append(commandLine);
          commandLine = null;
        }

        if (commandLine != null) {
          final RESULT status = execute(commandLine);
          commandLine = null;

          if (status == RESULT.EXIT || status == RESULT.ERROR && iExitOnException)
            return false;
        }
      }

      if (commandBuffer.length() > 0) {
        final RESULT status = execute(commandBuffer.toString());
        if (status == RESULT.EXIT || status == RESULT.ERROR && iExitOnException)
          return false;
      }
    } finally {
      iScanner.close();
    }
    return true;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413813856924/fstmerge_var2_8206271616848047943

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_af9f6_3cfbf/rev_af9f6-3cfbf/commons/src/main/java/com/orientechnologies/common/console/OConsoleApplication.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_49481_704b6/rev_49481-704b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e9b20_47011/rev_e9b20-47011.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e9b20_959f7/rev_e9b20-959f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ec1f_92c41/rev_0ec1f-92c41.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b4421_e9b20/rev_b4421-e9b20.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_54d1c_93f1a/rev_54d1c-93f1a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d8b07_b34aa/rev_d8b07-b34aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fd40c_d8b07/rev_fd40c-d8b07.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c6095_3bc90/rev_c6095-3bc90.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_41d51_c2b00/rev_41d51-c2b00.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_64609_dcf71/rev_64609-dcf71.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_64609_85d89/rev_64609-85d89.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1ac04_60ffb/rev_1ac04-60ffb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_57903_48c6e/rev_57903-48c6e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_57903_f3eff/rev_57903-f3eff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_99a98_7e7b8/rev_99a98-7e7b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f1f09_85282/rev_f1f09-85282.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_50325_0cb72/rev_50325-0cb72.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c1354_235eb/rev_c1354-235eb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_85ea2_9c9d3/rev_85ea2-9c9d3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413823250310/fstmerge_var1_7635343335935391235
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413823250310/fstmerge_base_3349985880019086834
public void setIntValue(int pageOffset, int value) throws IOException {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
      byte[] newValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
  }
=======
public int setIntValue(int pageOffset, int value) throws IOException {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
      byte[] newValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, OIntegerSerializer.INT_SIZE);
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      OIntegerSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
    return OIntegerSerializer.INT_SIZE;

  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413823250310/fstmerge_var2_8529164403107521298

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_85ea2_9c9d3/rev_85ea2-9c9d3/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurablePage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413823250314/fstmerge_var1_5077556036432284045
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413823250314/fstmerge_base_1916938344924991986
public void setByteValue(int pageOffset, byte value) {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = new byte[] { pagePointer.getByte(pageOffset) };
      pagePointer.setByte(pageOffset, value);
      byte[] newValues = new byte[] { pagePointer.getByte(pageOffset) };

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = new byte[] { pagePointer.getByte(pageOffset) };
      pagePointer.setByte(pageOffset, value);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      pagePointer.setByte(pageOffset, value);
  }
=======
public int setByteValue(int pageOffset, byte value) {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = new byte[] { pagePointer.getByte(pageOffset) };
      pagePointer.setByte(pageOffset, value);
      byte[] newValues = new byte[] { pagePointer.getByte(pageOffset) };

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = new byte[] { pagePointer.getByte(pageOffset) };
      pagePointer.setByte(pageOffset, value);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      pagePointer.setByte(pageOffset, value);
    return OByteSerializer.BYTE_SIZE;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413823250314/fstmerge_var2_2978746030228099370

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_85ea2_9c9d3/rev_85ea2-9c9d3/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurablePage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413823250318/fstmerge_var1_4533394638588254947
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413823250318/fstmerge_base_5281816123813899377
public void setLongValue(int pageOffset, long value) throws IOException {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
      byte[] newValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
  }
=======
public int setLongValue(int pageOffset, long value) throws IOException {
    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
      byte[] newValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);

      pageChanges.addChanges(pageOffset, newValues, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, OLongSerializer.LONG_SIZE);
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      OLongSerializer.INSTANCE.serializeInDirectMemory(value, pagePointer, pageOffset);
    return OLongSerializer.LONG_SIZE;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413823250318/fstmerge_var2_6792337653425917981

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_85ea2_9c9d3/rev_85ea2-9c9d3/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurablePage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413823250323/fstmerge_var1_4232845644162833366
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413823250323/fstmerge_base_6668267116757053286
public void setBinaryValue(int pageOffset, byte[] value) throws IOException {
    if (value.length == 0)
      return;

    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, value.length);
      pagePointer.set(pageOffset, value, 0, value.length);

      pageChanges.addChanges(pageOffset, value, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, value.length);
      pagePointer.set(pageOffset, value, 0, value.length);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      pagePointer.set(pageOffset, value, 0, value.length);
  }
=======
public int setBinaryValue(int pageOffset, byte[] value) throws IOException {
    if (value.length == 0)
      return 0;

    if (trackMode.equals(TrackMode.FULL)) {
      byte[] oldValues = pagePointer.get(pageOffset, value.length);
      pagePointer.set(pageOffset, value, 0, value.length);

      pageChanges.addChanges(pageOffset, value, oldValues);
    } else if (trackMode.equals(TrackMode.ROLLBACK_ONLY)) {
      byte[] oldValues = pagePointer.get(pageOffset, value.length);
      pagePointer.set(pageOffset, value, 0, value.length);

      pageChanges.addChanges(pageOffset, null, oldValues);
    } else
      pagePointer.set(pageOffset, value, 0, value.length);
    return value.length;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413823250323/fstmerge_var2_5530377090785282300

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_85ea2_9c9d3/rev_85ea2-9c9d3/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurablePage.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5c34e_f2713/rev_5c34e-f2713.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a390b_71db9/rev_a390b-71db9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_60eac_0567b/rev_60eac-0567b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_73a88_8cd5d/rev_73a88-8cd5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_52b82_d275b/rev_52b82-d275b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_73a88_edfe3/rev_73a88-edfe3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_787e5_964eb/rev_787e5-964eb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6229d_0ef4a/rev_6229d-0ef4a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d17e0_fec45/rev_d17e0-fec45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_77f1f_dd0f1/rev_77f1f-dd0f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7ee70_8f953/rev_7ee70-8f953.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7f4ed_1c8e7/rev_7f4ed-1c8e7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_a5c17/rev_effdd-a5c17.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354.revisions
Conflict type: LineBasedMCFd
Conflict body: 
protected String getBlock(String fieldValue) {
    if (fieldValue.startsWith("{") || fieldValue.startsWith("[") || fieldValue.startsWith("[")) {
      parserSkipWhiteSpaces();
      final StringBuilder buffer = new StringBuilder();
      parserSetCurrentPosition(OStringSerializerHelper.parse(parserText, buffer, parserGetCurrentPosition(), -1,
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829834003/fstmerge_var1_6918774829565482117
          OStringSerializerHelper.DEFAULT_FIELD_SEPARATOR, true, true, false, -1, OStringSerializerHelper.DEFAULT_IGNORE_CHARS));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829834003/fstmerge_base_5547181674259185200
          OStringSerializerHelper.DEFAULT_FIELD_SEPARATOR, true, true, false, OStringSerializerHelper.DEFAULT_IGNORE_CHARS));
=======
          OStringSerializerHelper.DEFAULT_FIELD_SEPARATOR, true, true, false, false, OStringSerializerHelper.DEFAULT_IGNORE_CHARS));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829834003/fstmerge_var2_7102326474291743061
      fieldValue = buffer.toString();
    }
    return fieldValue;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLUpdate.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private OWriteAheadLog                  writeAheadLog; ##FSTMerge## private OWriteAheadLog           writeAheadLog;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurableComponent.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829843136/fstmerge_var1_6636711775548392490
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829843136/fstmerge_base_153040127028647322
protected void logPageChanges(ODurablePage localPage, long fileId, long pageIndex, boolean isNewPage) throws IOException {
    if (writeAheadLog != null) {
      OPageChanges pageChanges = localPage.getPageChanges();
      if (pageChanges.isEmpty())
        return;

      OOperationUnitId unitId = currentUnitId.get();
      assert unitId != null;

      OLogSequenceNumber prevLsn;
      if (isNewPage)
        prevLsn = startLSN.get();
      else
        prevLsn = localPage.getLsn();

      OLogSequenceNumber lsn = writeAheadLog.log(new OUpdatePageRecord(pageIndex, fileId, unitId, pageChanges, prevLsn));

      localPage.setLsn(lsn);
    }
  }
=======
protected void logPageChanges(ODurablePage localPage, long fileId, long pageIndex, boolean isNewPage) throws IOException {
    if (writeAheadLog != null) {
      final OPageChanges pageChanges = localPage.getPageChanges();
      if (pageChanges.isEmpty())
        return;

      final OAtomicOperation atomicOperation = atomicOperationsManager.getCurrentOperation();
      assert atomicOperation != null;

      final OOperationUnitId unitId = atomicOperation.getOperationUnitId();
      final OLogSequenceNumber prevLsn;
      if (isNewPage)
        prevLsn = atomicOperation.getStartLSN();
      else
        prevLsn = localPage.getLsn();

      final OLogSequenceNumber lsn = writeAheadLog.log(new OUpdatePageRecord(pageIndex, fileId, unitId, pageChanges, prevLsn));
      localPage.setLsn(lsn);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829843136/fstmerge_var2_2770262903196001565

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ODurableComponent.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844617/fstmerge_var1_4345814782890329466
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844617/fstmerge_base_4283695042400290387
private void init(OLocalPaginatedStorage storage, OStorageClusterConfiguration config) throws IOException {
    OFileUtils.checkValidName(config.getName());

    this.config = (OStoragePaginatedClusterConfiguration) config;
    this.compression = OCompressionFactory.INSTANCE.getCompression(this.config.compression);

    storageLocal = storage;
    init(storage.getWALInstance());

    diskCache = storageLocal.getDiskCache();
    name = config.getName();
    this.id = config.getId();
  }
=======
private void init(OLocalPaginatedStorage storage, OStorageClusterConfiguration config) throws IOException {
    OFileUtils.checkValidName(config.getName());

    this.config = (OStoragePaginatedClusterConfiguration) config;
    this.compression = OCompressionFactory.INSTANCE.getCompression(this.config.compression);

    storageLocal = storage;
    init(storage.getAtomicOperationsManager(), storage.getWALInstance());

    diskCache = storageLocal.getDiskCache();
    name = config.getName();
    this.id = config.getId();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844617/fstmerge_var2_4112612335247901709

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844624/fstmerge_var1_5384591005010514152
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844624/fstmerge_base_476453708931214713
@Override
  public void create(int startSize) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        fileId = diskCache.openFile(name + DEF_EXTENSION);

        startDurableOperation(null);

        initCusterState();

        endDurableOperation(null, false);

        if (config.root.clusters.size() <= config.id)
          config.root.clusters.add(config);
        else
          config.root.clusters.set(config.id, config);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
=======
@Override
  public void create(int startSize) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        fileId = diskCache.openFile(name + DEF_EXTENSION);

        startAtomicOperation();

        initCusterState();

        endAtomicOperation(false);

        if (config.root.clusters.size() <= config.id)
          config.root.clusters.add(config);
        else
          config.root.clusters.set(config.id, config);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844624/fstmerge_var2_6983188214022328816

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844681/fstmerge_var1_8166100065946626551
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844681/fstmerge_base_3035124486387679410
public OPhysicalPosition createRecord(byte[] content, final ORecordVersion recordVersion, final byte recordType)
      throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();
        content = compression.compress(content);

        int grownContentSize = (int) (config.recordGrowFactor * content.length);
        int entryContentLength = grownContentSize + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE
            + OLongSerializer.LONG_SIZE;

        if (entryContentLength < OClusterPage.MAX_RECORD_SIZE) {
          startDurableOperation(transaction);

          byte[] entryContent = new byte[entryContentLength];

          int entryPosition = 0;
          entryContent[entryPosition] = recordType;
          entryPosition++;

          OIntegerSerializer.INSTANCE.serializeNative(content.length, entryContent, entryPosition);
          entryPosition += OIntegerSerializer.INT_SIZE;

          System.arraycopy(content, 0, entryContent, entryPosition, content.length);
          entryPosition += grownContentSize;

          entryContent[entryPosition] = 1;
          entryPosition++;

          OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryPosition);
          ODurablePage.TrackMode trackMode = getTrackMode();

          final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);

          updateClusterState(trackMode, 1, addEntryResult.recordsSizeDiff);
          endDurableOperation(transaction, false);

          return createPhysicalPosition(recordType, addEntryResult.pagePointer, addEntryResult.recordVersion);
        } else {
          startDurableOperation(transaction);

          final OClusterPage.TrackMode trackMode = getTrackMode();

          int entrySize = grownContentSize + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;

          int fullEntryPosition = 0;
          byte[] fullEntry = new byte[entrySize];

          fullEntry[fullEntryPosition] = recordType;
          fullEntryPosition++;

          OIntegerSerializer.INSTANCE.serializeNative(content.length, fullEntry, fullEntryPosition);
          fullEntryPosition += OIntegerSerializer.INT_SIZE;

          System.arraycopy(content, 0, fullEntry, fullEntryPosition, content.length);

          long prevPageRecordPointer = -1;
          long firstPagePointer = -1;
          ORecordVersion version = null;

          int from = 0;
          int to = from + (OClusterPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);

          int recordsSizeDiff = 0;

          do {
            byte[] entryContent = new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
            System.arraycopy(fullEntry, from, entryContent, 0, to - from);

            if (from > 0)
              entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
            else
              entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

            OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);

            final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);
            recordsSizeDiff += addEntryResult.recordsSizeDiff;

            if (firstPagePointer == -1) {
              firstPagePointer = addEntryResult.pagePointer;
              version = addEntryResult.recordVersion;
            }

            long addedPagePointer = addEntryResult.pagePointer;
            if (prevPageRecordPointer >= 0) {

              long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
              int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

              final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
              final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();
              prevPageMemoryPointer.acquireExclusiveLock();
              try {
                final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false,
                    ODurablePage.TrackMode.FULL);

                int prevRecordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
                int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

                prevPage.setLongValue(prevRecordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, addedPagePointer);

                logPageChanges(prevPage, fileId, prevPageIndex, false);

                prevPageCacheEntry.markDirty();
              } finally {
                prevPageMemoryPointer.releaseExclusiveLock();
                diskCache.release(prevPageCacheEntry);
              }
            }

            prevPageRecordPointer = addedPagePointer;
            from = to;
            to = to + (OClusterPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
            if (to > fullEntry.length)
              to = fullEntry.length;

          } while (from < to);

          updateClusterState(trackMode, 1, recordsSizeDiff);

          endDurableOperation(transaction, false);

          return createPhysicalPosition(recordType, firstPagePointer, version);
        }
      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
=======
public OPhysicalPosition createRecord(byte[] content, final ORecordVersion recordVersion, final byte recordType)
      throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();
        content = compression.compress(content);

        int grownContentSize = (int) (config.recordGrowFactor * content.length);
        int entryContentLength = grownContentSize + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE
            + OLongSerializer.LONG_SIZE;

        if (entryContentLength < OClusterPage.MAX_RECORD_SIZE) {
          startAtomicOperation();

          byte[] entryContent = new byte[entryContentLength];

          int entryPosition = 0;
          entryContent[entryPosition] = recordType;
          entryPosition++;

          OIntegerSerializer.INSTANCE.serializeNative(content.length, entryContent, entryPosition);
          entryPosition += OIntegerSerializer.INT_SIZE;

          System.arraycopy(content, 0, entryContent, entryPosition, content.length);
          entryPosition += grownContentSize;

          entryContent[entryPosition] = 1;
          entryPosition++;

          OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryPosition);
          ODurablePage.TrackMode trackMode = getTrackMode();

          final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);

          updateClusterState(trackMode, 1, addEntryResult.recordsSizeDiff);
          endAtomicOperation(false);

          return createPhysicalPosition(recordType, addEntryResult.pagePointer, addEntryResult.recordVersion);
        } else {
          startAtomicOperation();

          final OClusterPage.TrackMode trackMode = getTrackMode();

          int entrySize = grownContentSize + OIntegerSerializer.INT_SIZE + OByteSerializer.BYTE_SIZE;

          int fullEntryPosition = 0;
          byte[] fullEntry = new byte[entrySize];

          fullEntry[fullEntryPosition] = recordType;
          fullEntryPosition++;

          OIntegerSerializer.INSTANCE.serializeNative(content.length, fullEntry, fullEntryPosition);
          fullEntryPosition += OIntegerSerializer.INT_SIZE;

          System.arraycopy(content, 0, fullEntry, fullEntryPosition, content.length);

          long prevPageRecordPointer = -1;
          long firstPagePointer = -1;
          ORecordVersion version = null;

          int from = 0;
          int to = from + (OClusterPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);

          int recordsSizeDiff = 0;

          do {
            byte[] entryContent = new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
            System.arraycopy(fullEntry, from, entryContent, 0, to - from);

            if (from > 0)
              entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
            else
              entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

            OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);

            final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);
            recordsSizeDiff += addEntryResult.recordsSizeDiff;

            if (firstPagePointer == -1) {
              firstPagePointer = addEntryResult.pagePointer;
              version = addEntryResult.recordVersion;
            }

            long addedPagePointer = addEntryResult.pagePointer;
            if (prevPageRecordPointer >= 0) {

              long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
              int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

              final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
              final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();
              prevPageMemoryPointer.acquireExclusiveLock();
              try {
                final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false,
                    ODurablePage.TrackMode.FULL);

                int prevRecordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
                int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

                prevPage.setLongValue(prevRecordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, addedPagePointer);

                logPageChanges(prevPage, fileId, prevPageIndex, false);

                prevPageCacheEntry.markDirty();
              } finally {
                prevPageMemoryPointer.releaseExclusiveLock();
                diskCache.release(prevPageCacheEntry);
              }
            }

            prevPageRecordPointer = addedPagePointer;
            from = to;
            to = to + (OClusterPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
            if (to > fullEntry.length)
              to = fullEntry.length;

          } while (from < to);

          updateClusterState(trackMode, 1, recordsSizeDiff);

          endAtomicOperation(false);

          return createPhysicalPosition(recordType, firstPagePointer, version);
        }
      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844681/fstmerge_var2_8607629081598479784

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844704/fstmerge_var1_5033552855316661558
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844704/fstmerge_base_161169211582233386
public boolean deleteRecord(OClusterPosition clusterPosition) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();

        long pagePointer = clusterPosition.longValue();
        int recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);

        long pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

        if (diskCache.getFilledUpTo(fileId) <= pageIndex)
          return false;

        final OClusterPage.TrackMode trackMode = getTrackMode();

        long nextPagePointer = -1;
        int removedContentSize = 0;
        do {
          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, false);
          final OCachePointer pointer = cacheEntry.getCachePointer();

          pointer.acquireExclusiveLock();
          int initialFreePageIndex;
          try {
            final OClusterPage localPage = new OClusterPage(pointer.getDataPointer(), false, trackMode);
            initialFreePageIndex = calculateFreePageIndex(localPage);

            int recordPageOffset = localPage.getRecordPageOffset(recordPosition);
            if (recordPageOffset < 0) {
              if (removedContentSize == 0)
                return false;
              else
                throw new OStorageException("Content of record " + new ORecordId(id, clusterPosition) + " was broken.");
            } else if (removedContentSize == 0) {
              startDurableOperation(transaction);
            }

            byte[] content = localPage.getBinaryValue(recordPageOffset, localPage.getRecordSize(recordPosition));

            int initialFreeSpace = localPage.getFreeSpace();
            localPage.deleteRecord(recordPosition);

            removedContentSize += localPage.getFreeSpace() - initialFreeSpace;
            nextPagePointer = OLongSerializer.INSTANCE.deserializeNative(content, content.length - OLongSerializer.LONG_SIZE);

            logPageChanges(localPage, fileId, pageIndex, false);

            cacheEntry.markDirty();
          } finally {
            pointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

          updateFreePagesIndex(initialFreePageIndex, pageIndex, trackMode);

          pageIndex = nextPagePointer >>> PAGE_INDEX_OFFSET;
          recordPosition = (int) (nextPagePointer & RECORD_POSITION_MASK);
        } while (nextPagePointer >= 0);

        updateClusterState(trackMode, -1, -removedContentSize);

        endDurableOperation(transaction, false);

        return true;
      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
=======
public boolean deleteRecord(OClusterPosition clusterPosition) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();

        long pagePointer = clusterPosition.longValue();
        int recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);

        long pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

        if (diskCache.getFilledUpTo(fileId) <= pageIndex)
          return false;

        final OClusterPage.TrackMode trackMode = getTrackMode();

        long nextPagePointer = -1;
        int removedContentSize = 0;
        do {
          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, false);
          final OCachePointer pointer = cacheEntry.getCachePointer();

          pointer.acquireExclusiveLock();
          int initialFreePageIndex;
          try {
            final OClusterPage localPage = new OClusterPage(pointer.getDataPointer(), false, trackMode);
            initialFreePageIndex = calculateFreePageIndex(localPage);

            int recordPageOffset = localPage.getRecordPageOffset(recordPosition);
            if (recordPageOffset < 0) {
              if (removedContentSize == 0)
                return false;
              else
                throw new OStorageException("Content of record " + new ORecordId(id, clusterPosition) + " was broken.");
            } else if (removedContentSize == 0) {
              startAtomicOperation();
            }

            byte[] content = localPage.getBinaryValue(recordPageOffset, localPage.getRecordSize(recordPosition));

            int initialFreeSpace = localPage.getFreeSpace();
            localPage.deleteRecord(recordPosition);

            removedContentSize += localPage.getFreeSpace() - initialFreeSpace;
            nextPagePointer = OLongSerializer.INSTANCE.deserializeNative(content, content.length - OLongSerializer.LONG_SIZE);

            logPageChanges(localPage, fileId, pageIndex, false);

            cacheEntry.markDirty();
          } finally {
            pointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

          updateFreePagesIndex(initialFreePageIndex, pageIndex, trackMode);

          pageIndex = nextPagePointer >>> PAGE_INDEX_OFFSET;
          recordPosition = (int) (nextPagePointer & RECORD_POSITION_MASK);
        } while (nextPagePointer >= 0);

        updateClusterState(trackMode, -1, -removedContentSize);

        endAtomicOperation(false);

        return true;
      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844704/fstmerge_var2_7059691434287490572

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844709/fstmerge_var1_1563710607640409721
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844709/fstmerge_base_7068285761915231323
public void updateRecord(OClusterPosition clusterPosition, byte[] content, final ORecordVersion recordVersion,
      final byte recordType) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();
        byte[] fullEntryContent = readFullEntry(clusterPosition);
        if (fullEntryContent == null)
          return;

        content = compression.compress(content);

        int updatedContentLength = content.length + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE
            + OLongSerializer.LONG_SIZE;

        long pagePointer = clusterPosition.longValue();
        int recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);
        long pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

        byte[] recordEntry;
        if (updatedContentLength <= fullEntryContent.length)
          recordEntry = new byte[fullEntryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE];
        else {
          int grownContent = (int) (content.length * config.recordOverflowGrowFactor);
          recordEntry = new byte[grownContent + OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE];
        }

        final OClusterPage.TrackMode trackMode = getTrackMode();

        startDurableOperation(transaction);

        int entryPosition = 0;
        recordEntry[entryPosition] = recordType;
        entryPosition++;

        OIntegerSerializer.INSTANCE.serializeNative(content.length, recordEntry, entryPosition);
        entryPosition += OIntegerSerializer.INT_SIZE;

        System.arraycopy(content, 0, recordEntry, entryPosition, content.length);

        int recordsSizeDiff = 0;
        long prevPageRecordPointer = -1;

        int currentPos = 0;
        while (pagePointer >= 0 && currentPos < recordEntry.length) {
          recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);
          pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

          int freePageIndex;
          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, false);
          final OCachePointer dataPointer = cacheEntry.getCachePointer();

          dataPointer.acquireExclusiveLock();
          try {
            final OClusterPage localPage = new OClusterPage(dataPointer.getDataPointer(), false, trackMode);
            int freeSpace = localPage.getFreeSpace();
            freePageIndex = calculateFreePageIndex(localPage);

            int recordPageOffset = localPage.getRecordPageOffset(recordPosition);
            int chunkSize = localPage.getRecordSize(recordPosition);

            long nextPagePointer = localPage.getLongValue(recordPageOffset + +chunkSize - OLongSerializer.LONG_SIZE);

            int newChunkLen = Math.min(recordEntry.length - currentPos + OLongSerializer.LONG_SIZE + OByteSerializer.BYTE_SIZE,
                chunkSize);
            int dataLen = newChunkLen - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE;

            byte[] newRecordChunk = new byte[newChunkLen];
            System.arraycopy(recordEntry, currentPos, newRecordChunk, 0, dataLen);

            if (currentPos > 0)
              newRecordChunk[newRecordChunk.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
            else
              newRecordChunk[newRecordChunk.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

            OLongSerializer.INSTANCE.serializeNative(-1L, newRecordChunk, newRecordChunk.length - OLongSerializer.LONG_SIZE);

            if (prevPageRecordPointer >= 0) {
              long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
              int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

              final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
              final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();

              prevPageMemoryPointer.acquireExclusiveLock();
              try {
                final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false, trackMode);

                int prevRecordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
                int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

                prevPage.setLongValue(prevRecordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, pagePointer);

                logPageChanges(prevPage, fileId, prevPageIndex, false);

                prevPageCacheEntry.markDirty();
              } finally {
                prevPageMemoryPointer.releaseExclusiveLock();
                diskCache.release(prevPageCacheEntry);
              }
            }

            localPage.replaceRecord(recordPosition, newRecordChunk, recordVersion.getCounter() != -2 ? recordVersion : null);

            currentPos += dataLen;

            recordsSizeDiff += freeSpace - localPage.getFreeSpace();
            prevPageRecordPointer = pagePointer;
            pagePointer = nextPagePointer;

            logPageChanges(localPage, fileId, pageIndex, false);

            cacheEntry.markDirty();
          } finally {
            dataPointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

          updateFreePagesIndex(freePageIndex, pageIndex, trackMode);
        }

        int from = currentPos;
        int to = from + (OClusterPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
        if (to > recordEntry.length)
          to = recordEntry.length;

        while (from < to) {
          byte[] entryContent = new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
          System.arraycopy(recordEntry, from, entryContent, 0, to - from);

          if (from > 0)
            entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
          else
            entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

          OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);

          final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);
          recordsSizeDiff += addEntryResult.recordsSizeDiff;

          long addedPagePointer = addEntryResult.pagePointer;
          if (prevPageRecordPointer >= 0) {

            long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
            int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

            final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
            final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();

            prevPageMemoryPointer.acquireExclusiveLock();
            try {
              final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false, trackMode);

              int recordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
              int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

              prevPage.setLongValue(recordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, addedPagePointer);

              logPageChanges(prevPage, fileId, prevPageIndex, false);

              prevPageCacheEntry.markDirty();
            } finally {
              prevPageMemoryPointer.releaseExclusiveLock();
              diskCache.release(prevPageCacheEntry);
            }
          }

          prevPageRecordPointer = addedPagePointer;
          from = to;
          to = to + (OClusterPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > recordEntry.length)
            to = recordEntry.length;
        }

        updateClusterState(trackMode, 0, recordsSizeDiff);

        endDurableOperation(transaction, false);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
=======
public void updateRecord(OClusterPosition clusterPosition, byte[] content, final ORecordVersion recordVersion,
      final byte recordType) throws IOException {
    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        final OStorageTransaction transaction = storageLocal.getStorageTransaction();
        byte[] fullEntryContent = readFullEntry(clusterPosition);
        if (fullEntryContent == null)
          return;

        content = compression.compress(content);

        int updatedContentLength = content.length + 2 * OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE
            + OLongSerializer.LONG_SIZE;

        long pagePointer = clusterPosition.longValue();
        int recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);
        long pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

        byte[] recordEntry;
        if (updatedContentLength <= fullEntryContent.length)
          recordEntry = new byte[fullEntryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE];
        else {
          int grownContent = (int) (content.length * config.recordOverflowGrowFactor);
          recordEntry = new byte[grownContent + OByteSerializer.BYTE_SIZE + OIntegerSerializer.INT_SIZE];
        }

        final OClusterPage.TrackMode trackMode = getTrackMode();

        startAtomicOperation();

        int entryPosition = 0;
        recordEntry[entryPosition] = recordType;
        entryPosition++;

        OIntegerSerializer.INSTANCE.serializeNative(content.length, recordEntry, entryPosition);
        entryPosition += OIntegerSerializer.INT_SIZE;

        System.arraycopy(content, 0, recordEntry, entryPosition, content.length);

        int recordsSizeDiff = 0;
        long prevPageRecordPointer = -1;

        int currentPos = 0;
        while (pagePointer >= 0 && currentPos < recordEntry.length) {
          recordPosition = (int) (pagePointer & RECORD_POSITION_MASK);
          pageIndex = pagePointer >>> PAGE_INDEX_OFFSET;

          int freePageIndex;
          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, false);
          final OCachePointer dataPointer = cacheEntry.getCachePointer();

          dataPointer.acquireExclusiveLock();
          try {
            final OClusterPage localPage = new OClusterPage(dataPointer.getDataPointer(), false, trackMode);
            int freeSpace = localPage.getFreeSpace();
            freePageIndex = calculateFreePageIndex(localPage);

            int recordPageOffset = localPage.getRecordPageOffset(recordPosition);
            int chunkSize = localPage.getRecordSize(recordPosition);

            long nextPagePointer = localPage.getLongValue(recordPageOffset + +chunkSize - OLongSerializer.LONG_SIZE);

            int newChunkLen = Math.min(recordEntry.length - currentPos + OLongSerializer.LONG_SIZE + OByteSerializer.BYTE_SIZE,
                chunkSize);
            int dataLen = newChunkLen - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE;

            byte[] newRecordChunk = new byte[newChunkLen];
            System.arraycopy(recordEntry, currentPos, newRecordChunk, 0, dataLen);

            if (currentPos > 0)
              newRecordChunk[newRecordChunk.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
            else
              newRecordChunk[newRecordChunk.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

            OLongSerializer.INSTANCE.serializeNative(-1L, newRecordChunk, newRecordChunk.length - OLongSerializer.LONG_SIZE);

            if (prevPageRecordPointer >= 0) {
              long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
              int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

              final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
              final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();

              prevPageMemoryPointer.acquireExclusiveLock();
              try {
                final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false, trackMode);

                int prevRecordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
                int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

                prevPage.setLongValue(prevRecordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, pagePointer);

                logPageChanges(prevPage, fileId, prevPageIndex, false);

                prevPageCacheEntry.markDirty();
              } finally {
                prevPageMemoryPointer.releaseExclusiveLock();
                diskCache.release(prevPageCacheEntry);
              }
            }

            localPage.replaceRecord(recordPosition, newRecordChunk, recordVersion.getCounter() != -2 ? recordVersion : null);

            currentPos += dataLen;

            recordsSizeDiff += freeSpace - localPage.getFreeSpace();
            prevPageRecordPointer = pagePointer;
            pagePointer = nextPagePointer;

            logPageChanges(localPage, fileId, pageIndex, false);

            cacheEntry.markDirty();
          } finally {
            dataPointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

          updateFreePagesIndex(freePageIndex, pageIndex, trackMode);
        }

        int from = currentPos;
        int to = from + (OClusterPage.MAX_RECORD_SIZE - OByteSerializer.BYTE_SIZE - OLongSerializer.LONG_SIZE);
        if (to > recordEntry.length)
          to = recordEntry.length;

        while (from < to) {
          byte[] entryContent = new byte[to - from + OByteSerializer.BYTE_SIZE + OLongSerializer.LONG_SIZE];
          System.arraycopy(recordEntry, from, entryContent, 0, to - from);

          if (from > 0)
            entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 0;
          else
            entryContent[entryContent.length - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE] = 1;

          OLongSerializer.INSTANCE.serializeNative(-1L, entryContent, entryContent.length - OLongSerializer.LONG_SIZE);

          final AddEntryResult addEntryResult = addEntry(recordVersion, entryContent, trackMode);
          recordsSizeDiff += addEntryResult.recordsSizeDiff;

          long addedPagePointer = addEntryResult.pagePointer;
          if (prevPageRecordPointer >= 0) {

            long prevPageIndex = prevPageRecordPointer >>> PAGE_INDEX_OFFSET;
            int prevPageRecordPosition = (int) (prevPageRecordPointer & RECORD_POSITION_MASK);

            final OCacheEntry prevPageCacheEntry = diskCache.load(fileId, prevPageIndex, false);
            final OCachePointer prevPageMemoryPointer = prevPageCacheEntry.getCachePointer();

            prevPageMemoryPointer.acquireExclusiveLock();
            try {
              final OClusterPage prevPage = new OClusterPage(prevPageMemoryPointer.getDataPointer(), false, trackMode);

              int recordPageOffset = prevPage.getRecordPageOffset(prevPageRecordPosition);
              int prevPageRecordSize = prevPage.getRecordSize(prevPageRecordPosition);

              prevPage.setLongValue(recordPageOffset + prevPageRecordSize - OLongSerializer.LONG_SIZE, addedPagePointer);

              logPageChanges(prevPage, fileId, prevPageIndex, false);

              prevPageCacheEntry.markDirty();
            } finally {
              prevPageMemoryPointer.releaseExclusiveLock();
              diskCache.release(prevPageCacheEntry);
            }
          }

          prevPageRecordPointer = addedPagePointer;
          from = to;
          to = to + (OClusterPage.MAX_RECORD_SIZE - OLongSerializer.LONG_SIZE - OByteSerializer.BYTE_SIZE);
          if (to > recordEntry.length)
            to = recordEntry.length;
        }

        updateClusterState(trackMode, 0, recordsSizeDiff);

        endAtomicOperation(false);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844709/fstmerge_var2_7940558103501986671

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829844740/fstmerge_var1_6712665634305263868
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829844740/fstmerge_base_1772545466105240283
@Override
  public void truncate() throws IOException {
    storageLocal.checkForClusterPermissions(getName());

    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        if (config.useWal)
          startDurableOperation(null);

        diskCache.truncateFile(fileId);

        initCusterState();

        if (config.useWal)
          endDurableOperation(null, false);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }

    storageLocal.scheduleFullCheckpoint();
  }
=======
@Override
  public void truncate() throws IOException {
    storageLocal.checkForClusterPermissions(getName());

    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {
        if (config.useWal)
          startAtomicOperation();

        diskCache.truncateFile(fileId);

        initCusterState();

        if (config.useWal)
          endAtomicOperation(false);

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }

    storageLocal.scheduleFullCheckpoint();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829844740/fstmerge_var2_6115924032399276906

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/depricated/OPaginatedWithoutRidReuseCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849739/fstmerge_var1_6337442413921689247
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849739/fstmerge_base_4622561781313874429
public OSBTreeIndexRIDContainer(String fileName) {
    tree = new OSBTreeBonsai<OIdentifiable, Boolean>(INDEX_FILE_EXTENSION, 1, false);

    tree.create(fileName, OLinkSerializer.INSTANCE, OBooleanSerializer.INSTANCE,
        (OStorageLocalAbstract) ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying());
  }
=======
public OSBTreeIndexRIDContainer(String fileName) {
    tree = new OSBTreeBonsai<OIdentifiable, Boolean>(INDEX_FILE_EXTENSION, false);

    tree.create(fileName, OLinkSerializer.INSTANCE, OBooleanSerializer.INSTANCE,
        (OStorageLocalAbstract) ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849739/fstmerge_var2_1023487674338326858

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849743/fstmerge_var1_773487498128343085
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849743/fstmerge_base_444614092818651761
public OSBTreeIndexRIDContainer(String fileName, OBonsaiBucketPointer rootPointer) {
    tree = new OSBTreeBonsai<OIdentifiable, Boolean>(INDEX_FILE_EXTENSION, 1, false);
    tree.load(fileName, rootPointer, (OStorageLocalAbstract) ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying());
  }
=======
public OSBTreeIndexRIDContainer(String fileName, OBonsaiBucketPointer rootPointer) {
    tree = new OSBTreeBonsai<OIdentifiable, Boolean>(INDEX_FILE_EXTENSION, false);
    tree.load(fileName, rootPointer, (OStorageLocalAbstract) ODatabaseRecordThreadLocal.INSTANCE.get().getStorage().getUnderlying());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849743/fstmerge_var2_7437529034460589481

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849843/fstmerge_var1_1704210052156995024
private OSBTreeRIDSet(ODatabaseRecord database) {
    collectionManager = database.getSbTreeCollectionManager();

    OSBTreeBonsai<OIdentifiable, Boolean> tree = collectionManager.createSBTree();
    fileId = tree.getFileId();
    rootPointer = tree.getRootBucketPointer();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849843/fstmerge_base_5942907757283901738
private OSBTreeRIDSet(ODatabaseRecord database) {
    collectionManager = database.getSbTreeCollectionManager();

    OSBTreeBonsai<OIdentifiable, Boolean> tree = collectionManager.createSBTree();
    fileName = tree.getName();
    rootPointer = tree.getRootBucketPointer();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849843/fstmerge_var2_6819285895747321369

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSet.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849860/fstmerge_var1_7922759479990714433
private OSBTreeBonsai<OIdentifiable, Boolean> getTree() {
    return collectionManager.loadSBTree(fileId, rootPointer);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849860/fstmerge_base_8915685041009514487
private OSBTreeBonsai<OIdentifiable, Boolean> getTree() {
    return collectionManager.loadSBTree(fileName, rootPointer);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849860/fstmerge_var2_1306254922280374497

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSet.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849899/fstmerge_var1_4472746194418805934
private boolean add(OSBTreeBonsai<OIdentifiable, Boolean> tree, OIdentifiable oIdentifiable) {
    return tree.put(oIdentifiable, Boolean.TRUE);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849899/fstmerge_base_919764941315852878
private boolean add(OSBTreeBonsai<OIdentifiable, Boolean> tree, OIdentifiable oIdentifiable) {
    // TODO check if we can avoid get operation
    // TODO fix race condition
    if (getTree().get(oIdentifiable) != null)
      return false;

    getTree().put(oIdentifiable, Boolean.TRUE);
    return true;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849899/fstmerge_var2_6954410944863910452

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSet.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849927/fstmerge_var1_7527559094386825633
@Override
  public OSBTreeRIDSet toStream(StringBuilder iOutput) throws OSerializationException {
    final long timer = PROFILER.startChrono();

    try {
      iOutput.append(OStringSerializerHelper.LINKSET_PREFIX);

      final ODocument document = new ODocument();
      document.field("rootIndex", getRootPointer().getPageIndex());
      document.field("rootOffset", getRootPointer().getPageOffset());
      document.field("fileId", getFileId());
      iOutput.append(new String(document.toStream()));

      iOutput.append(OStringSerializerHelper.SET_END);
    } finally {
      PROFILER.stopChrono(PROFILER.getProcessMetric("mvrbtree.toStream"), "Serialize a MVRBTreeRID", timer);
    }
    return this;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849927/fstmerge_base_3846783088062525976
@Override
  public OSBTreeRIDSet toStream(StringBuilder iOutput) throws OSerializationException {
    final long timer = PROFILER.startChrono();

    try {
      iOutput.append(OStringSerializerHelper.LINKSET_PREFIX);

      final ODocument document = new ODocument();
      document.field("rootIndex", getRootPointer().getPageIndex());
      document.field("rootOffset", getRootPointer().getPageOffset());
      document.field("file", getFileName());
      iOutput.append(new String(document.toStream()));

      iOutput.append(OStringSerializerHelper.SET_END);
    } finally {
      PROFILER.stopChrono(PROFILER.getProcessMetric("mvrbtree.toStream"), "Serialize a MVRBTreeRID", timer);
    }
    return this;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849927/fstmerge_var2_7290658375780986328

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSet.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829849938/fstmerge_var1_6772070061336573727
public static OSBTreeRIDSet fromStream(String stream, ORecordInternal<?> owner) {
    stream = stream.substring(OStringSerializerHelper.LINKSET_PREFIX.length(), stream.length() - 1);

    final ODocument doc = new ODocument();
    doc.fromString(stream);
    final OBonsaiBucketPointer rootIndex = new OBonsaiBucketPointer((Long) doc.field("rootIndex"),
        (Integer) doc.field("rootOffset"));
    final long fileId = (Long) doc.field("fileId");

    return new OSBTreeRIDSet(owner, fileId, rootIndex);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829849938/fstmerge_base_7151160163321729714
public static OSBTreeRIDSet fromStream(String stream, ORecordInternal<?> owner) {
    stream = stream.substring(OStringSerializerHelper.LINKSET_PREFIX.length(), stream.length() - 1);

    final ODocument doc = new ODocument();
    doc.fromString(stream);
    final OBonsaiBucketPointer rootIndex = new OBonsaiBucketPointer((Long) doc.field("rootIndex"),
        (Integer) doc.field("rootOffset"));
    final String fileName = doc.field("file");

    return new OSBTreeRIDSet(owner, fileName, rootIndex);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829849938/fstmerge_var2_2318617634766026582

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSet.java
Conflict type: LineBasedMCFd
Conflict body: 
public static int getParameters(final String iText, final int iBeginPosition, int iEndPosition, final List<String> iParameters) {
    iParameters.clear();

    final int openPos = iText.indexOf(EMBEDDED_BEGIN, iBeginPosition);
    if (openPos == -1 || (iEndPosition > -1 && openPos > iEndPosition))
      return iBeginPosition;

    final StringBuilder buffer = new StringBuilder();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829854009/fstmerge_var1_186492115892451955
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false, -1);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829854009/fstmerge_base_4415391135869421026
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false);
=======
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false, false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829854009/fstmerge_var2_3291131771345396779
    if (buffer.length() == 0)
      return iBeginPosition;

    final String t = buffer.substring(1, buffer.length() - 1).trim();
    final List<String> pars = smartSplit(t, PARAMETER_SEPARATOR, 0, -1, true, true, false, false);

    for (int i = 0; i < pars.size(); ++i)
      iParameters.add(pars.get(i).trim());

    return iBeginPosition + buffer.length();
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/OStringSerializerHelper.java
Conflict type: LineBasedMCFd
Conflict body: 
public static int getEmbedded(final String iText, final int iBeginPosition, int iEndPosition, final StringBuilder iEmbedded) {
    final int openPos = iText.indexOf(EMBEDDED_BEGIN, iBeginPosition);
    if (openPos == -1 || (iEndPosition > -1 && openPos > iEndPosition))
      return iBeginPosition;

    final StringBuilder buffer = new StringBuilder();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829854013/fstmerge_var1_4749676944720138272
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false, -1);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829854013/fstmerge_base_7059461303208163345
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false);
=======
    parse(iText, buffer, openPos, iEndPosition, PARAMETER_EXT_SEPARATOR, true, true, false, false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829854013/fstmerge_var2_5297726699367764313
    if (buffer.length() == 0)
      return iBeginPosition;

    final String t = buffer.substring(1, buffer.length() - 1).trim();
    iEmbedded.append(t);
    return iBeginPosition + buffer.length();
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/OStringSerializerHelper.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829854079/fstmerge_var1_6628872291440647373
public static List<String> smartSplit(final String iSource, final char[] iRecordSeparator, int beginIndex, final int endIndex,
      final boolean iStringSeparatorExtended, boolean iConsiderBraces, boolean iConsiderSets, final char[] iJumpChars) {
    final StringBuilder buffer = new StringBuilder();
    final ArrayList<String> parts = new ArrayList<String>();

    if (iSource != null && !iSource.isEmpty()) {
      while ((beginIndex = parse(iSource, buffer, beginIndex, endIndex, iRecordSeparator, iStringSeparatorExtended,
          iConsiderBraces, iConsiderSets, -1, iJumpChars)) > -1) {
        parts.add(buffer.toString());
        buffer.setLength(0);
      }

      if (buffer.length() > 0 || isCharPresent(iSource.charAt(iSource.length() - 1), iRecordSeparator))
        parts.add(buffer.toString());
    }

    return parts;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829854079/fstmerge_base_7479641055051452240
public static List<String> smartSplit(final String iSource, final char[] iRecordSeparator, int beginIndex, final int endIndex,
      final boolean iStringSeparatorExtended, boolean iConsiderBraces, boolean iConsiderSets, final char[] iJumpChars) {
    final StringBuilder buffer = new StringBuilder();
    final ArrayList<String> parts = new ArrayList<String>();

    if (iSource != null && !iSource.isEmpty()) {
      while ((beginIndex = parse(iSource, buffer, beginIndex, endIndex, iRecordSeparator, iStringSeparatorExtended,
          iConsiderBraces, iConsiderSets, iJumpChars)) > -1) {
        parts.add(buffer.toString());
        buffer.setLength(0);
      }

      if (buffer.length() > 0 || isCharPresent(iSource.charAt(iSource.length() - 1), iRecordSeparator))
        parts.add(buffer.toString());
    }

    return parts;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829854079/fstmerge_var2_6995413589273512056

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/OStringSerializerHelper.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String                                   NAME                     = "icn"; ##FSTMerge## public static final String NAME = "ic"; ##FSTMerge## public static final String                                   NAME     = "ic";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/stream/OStreamSerializerSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private static final ORecordSerializerSchemaAware2CSV FORMAT = (ORecordSerializerSchemaAware2CSV) ORecordSerializerFactory
      .instance().getFormat(
          ORecordSerializerSchemaAware2CSV.NAME); ##FSTMerge## private static final ORecordSerializerSchemaAware2CSV        FORMAT   = (ORecordSerializerSchemaAware2CSV) ORecordSerializerFactory
                                                                            .instance().getFormat(
                                                                                ORecordSerializerSchemaAware2CSV.NAME);
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/stream/OStreamSerializerSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final byte                                     ID                       = 21; ##FSTMerge## public static final byte ID = 20; ##FSTMerge## public static final byte                                     ID       = 20;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/stream/OStreamSerializerSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
public byte[] toStream(final Object iObject) throws IOException {
    if (iObject == null)
      return null;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829854592/fstmerge_var1_68818749556488214
    throw new UnsupportedOperationException("not implemented yet");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829854592/fstmerge_base_1638286832090633846
    return ((OSBTreeRIDSet) iObject).toStream();
=======
    return ((OSBTreeRidBag) iObject).toStream();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829854592/fstmerge_var2_1676417943464786138
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/stream/OStreamSerializerSBTreeIndexRIDContainer.java
Conflict type: LineBasedMCFd
Conflict body: 
public void create(String name, OBinarySerializer<K> keySerializer, OBinarySerializer<V> valueSerializer,
      OStorageLocalAbstract storageLocal) {
    try {
      this.storage = storageLocal;

      this.diskCache = storage.getDiskCache();

      this.keySerializer = keySerializer;
      this.valueSerializer = valueSerializer;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var1_7533942889054337811
      this.fileId = diskCache.openFile(name + dataFileExtension);
      this.name = name;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_base_3079999179800167835
      fileId = diskCache.openFile(name + dataFileExtension);

      initDurableComponent(storageLocal);

      initSysBucket();

      super.startDurableOperation(null);

      final AllocationResult allocationResult = allocateBucket();
      OCacheEntry rootCacheEntry = allocationResult.getCacheEntry();
      this.rootBucketPointer = allocationResult.getPointer();

      OCachePointer rootPointer = rootCacheEntry.getCachePointer();

      rootPointer.acquireExclusiveLock();
      try {
        OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<K, V>(rootPointer.getDataPointer(),
            this.rootBucketPointer.getPageOffset(), true, keySerializer, valueSerializer, getTrackMode());
        rootBucket.setKeySerializerId(keySerializer.getId());
        rootBucket.setValueSerializerId(valueSerializer.getId());
        rootBucket.setTreeSize(0);

        super.logPageChanges(rootBucket, fileId, this.rootBucketPointer.getPageIndex(), true);
        rootCacheEntry.markDirty();
      } finally {
        rootPointer.releaseExclusiveLock();
        diskCache.release(rootCacheEntry);
      }
=======
      fileId = diskCache.openFile(name + dataFileExtension);

      initDurableComponent(storageLocal);

      initSysBucket();

      super.startAtomicOperation();

      final AllocationResult allocationResult = allocateBucket();
      OCacheEntry rootCacheEntry = allocationResult.getCacheEntry();
      this.rootBucketPointer = allocationResult.getPointer();

      OCachePointer rootPointer = rootCacheEntry.getCachePointer();

      rootPointer.acquireExclusiveLock();
      try {
        OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<K, V>(rootPointer.getDataPointer(),
            this.rootBucketPointer.getPageOffset(), true, keySerializer, valueSerializer, getTrackMode());
        rootBucket.setKeySerializerId(keySerializer.getId());
        rootBucket.setValueSerializerId(valueSerializer.getId());
        rootBucket.setTreeSize(0);

        super.logPageChanges(rootBucket, fileId, this.rootBucketPointer.getPageIndex(), true);
        rootCacheEntry.markDirty();
      } finally {
        rootPointer.releaseExclusiveLock();
        diskCache.release(rootCacheEntry);
      }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var2_5452894524178599965

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var1_7533942889054337811
      initAfterCreate();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_base_3079999179800167835
      super.endDurableOperation(null, false);
=======
      super.endAtomicOperation(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var2_5452894524178599965
    } catch (IOException e) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var1_7533942889054337811
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_base_3079999179800167835
      try {
        super.endDurableOperation(null, true);
      } catch (IOException e1) {
        OLogManager.instance().error(this, "Error during sbtree data rollback", e1);
      }
=======
      try {
        super.endAtomicOperation(true);
      } catch (IOException e1) {
        OLogManager.instance().error(this, "Error during sbtree data rollback", e1);
      }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861358/fstmerge_var2_5452894524178599965
      throw new OSBTreeException("Error creation of sbtree with name" + name, e);
    }
    create(fileId, keySerializer, valueSerializer, storageLocal);
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/index/sbtreebonsai/local/OSBTreeBonsai.java
Conflict type: LineBasedMCFd
Conflict body: 
public boolean put(K key, V value) {
    acquireExclusiveLock();
    try {
      startAtomicOperation();
      lockTillAtomicOperationCompletes();

      BucketSearchResult bucketSearchResult = findBucket(key);
      OBonsaiBucketPointer bucketPointer = bucketSearchResult.getLastPathItem();

      OCacheEntry keyBucketCacheEntry = diskCache.load(fileId, bucketPointer.getPageIndex(), false);
      OCachePointer keyBucketPointer = keyBucketCacheEntry.getCachePointer();

      keyBucketPointer.acquireExclusiveLock();
      OSBTreeBonsaiBucket<K, V> keyBucket = new OSBTreeBonsaiBucket<K, V>(keyBucketPointer.getDataPointer(),
          bucketPointer.getPageOffset(), keySerializer, valueSerializer, getTrackMode());

      final boolean itemFound = bucketSearchResult.itemIndex >= 0;
      boolean result = true;
      if (itemFound) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_var1_5485541320885028937
        final int updateResult = keyBucket.updateValue(bucketSearchResult.itemIndex, value);

        if (updateResult == 1) {
          logPageChanges(keyBucket, fileId, bucketSearchResult.getLastPathItem().getPageIndex(), false);
          keyBucketCacheEntry.markDirty();
        }

        assert updateResult == 0 || updateResult == 1;

        result = updateResult != 0;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_base_6396841651192146619
        while (!keyBucket.updateValue(bucketSearchResult.itemIndex, value)) {
          keyBucketPointer.releaseExclusiveLock();
          diskCache.release(keyBucketCacheEntry);

          bucketSearchResult = splitBucket(bucketSearchResult.path, bucketSearchResult.itemIndex, key);
          bucketPointer = bucketSearchResult.getLastPathItem();

          keyBucketCacheEntry = diskCache.load(fileId, bucketPointer.getPageIndex(), false);
          keyBucketPointer = keyBucketCacheEntry.getCachePointer();
          keyBucketPointer.acquireExclusiveLock();

          keyBucket = new OSBTreeBonsaiBucket<K, V>(keyBucketPointer.getDataPointer(), bucketPointer.getPageOffset(),
              keySerializer, valueSerializer, getTrackMode());
        }

        logPageChanges(keyBucket, fileId, bucketSearchResult.getLastPathItem().getPageIndex(), false);
=======
        keyBucket.updateValue(bucketSearchResult.itemIndex, value);
        logPageChanges(keyBucket, fileId, bucketSearchResult.getLastPathItem().getPageIndex(), false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_var2_8006475365146843845
      } else {
        int insertionIndex = -bucketSearchResult.itemIndex - 1;

        while (!keyBucket.addEntry(insertionIndex, new OSBTreeBonsaiBucket.SBTreeEntry<K, V>(OBonsaiBucketPointer.NULL,
            OBonsaiBucketPointer.NULL, key, value), true)) {
          keyBucketPointer.releaseExclusiveLock();
          diskCache.release(keyBucketCacheEntry);

          bucketSearchResult = splitBucket(bucketSearchResult.path, insertionIndex, key);
          bucketPointer = bucketSearchResult.getLastPathItem();

          insertionIndex = bucketSearchResult.itemIndex;

          keyBucketCacheEntry = diskCache.load(fileId, bucketSearchResult.getLastPathItem().getPageIndex(), false);
          keyBucketPointer = keyBucketCacheEntry.getCachePointer();
          keyBucketPointer.acquireExclusiveLock();

          keyBucket = new OSBTreeBonsaiBucket<K, V>(keyBucketPointer.getDataPointer(), bucketPointer.getPageOffset(),
              keySerializer, valueSerializer, getTrackMode());
        }

        logPageChanges(keyBucket, fileId, bucketPointer.getPageIndex(), false);
        keyBucketCacheEntry.markDirty();
      }

      keyBucketPointer.releaseExclusiveLock();
      diskCache.release(keyBucketCacheEntry);

      if (!itemFound)
        setSize(size() + 1);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_var1_5485541320885028937
      endDurableOperation(transaction, false);
      return result;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_base_6396841651192146619
      endDurableOperation(transaction, false);
=======
      endAtomicOperation(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861375/fstmerge_var2_8006475365146843845
    } catch (IOException e) {
      rollback();
      throw new OSBTreeException("Error during index update with key " + key + " and value " + value, e);
    } finally {
      releaseExclusiveLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/index/sbtreebonsai/local/OSBTreeBonsai.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861401/fstmerge_var1_6086861934830999397
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861401/fstmerge_base_5306464848884575399
public void load(String name, OBonsaiBucketPointer rootBucketPointer, OStorageLocalAbstract storageLocal) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.rootBucketPointer = rootBucketPointer;

      diskCache = storage.getDiskCache();

      this.name = name;

      fileId = diskCache.openFile(name + dataFileExtension);

      OCacheEntry rootCacheEntry = diskCache.load(fileId, this.rootBucketPointer.getPageIndex(), false);
      OCachePointer rootPointer = rootCacheEntry.getCachePointer();
      try {
        OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<K, V>(rootPointer.getDataPointer(),
            this.rootBucketPointer.getPageOffset(), keySerializer, valueSerializer, ODurablePage.TrackMode.NONE);
        keySerializer = (OBinarySerializer<K>) OBinarySerializerFactory.INSTANCE.getObjectSerializer(rootBucket
            .getKeySerializerId());
        valueSerializer = (OBinarySerializer<V>) OBinarySerializerFactory.INSTANCE.getObjectSerializer(rootBucket
            .getValueSerializerId());
      } finally {
        diskCache.release(rootCacheEntry);
      }

      initDurableComponent(storageLocal);
    } catch (IOException e) {
      throw new OSBTreeException("Exception during loading of sbtree " + name, e);
    } finally {
      releaseExclusiveLock();
    }
  }
=======
public void load(String name, OBonsaiBucketPointer rootBucketPointer, OStorageLocalAbstract storageLocal) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.rootBucketPointer = rootBucketPointer;

      diskCache = storage.getDiskCache();

      this.name = name;

      fileId = diskCache.openFile(name + dataFileExtension);

      OCacheEntry rootCacheEntry = diskCache.load(fileId, this.rootBucketPointer.getPageIndex(), false);
      OCachePointer rootPointer = rootCacheEntry.getCachePointer();

      rootPointer.acquireSharedLock();
      try {
        OSBTreeBonsaiBucket<K, V> rootBucket = new OSBTreeBonsaiBucket<K, V>(rootPointer.getDataPointer(),
            this.rootBucketPointer.getPageOffset(), keySerializer, valueSerializer, ODurablePage.TrackMode.NONE);
        keySerializer = (OBinarySerializer<K>) OBinarySerializerFactory.INSTANCE.getObjectSerializer(rootBucket
            .getKeySerializerId());
        valueSerializer = (OBinarySerializer<V>) OBinarySerializerFactory.INSTANCE.getObjectSerializer(rootBucket
            .getValueSerializerId());
      } finally {
        rootPointer.releaseSharedLock();
        diskCache.release(rootCacheEntry);
      }

      initDurableComponent(storageLocal);
    } catch (IOException e) {
      throw new OSBTreeException("Exception during loading of sbtree " + name, e);
    } finally {
      releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861401/fstmerge_var2_3414610413017366199

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/index/sbtreebonsai/local/OSBTreeBonsai.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var1_238882342081209270
public int updateValue(int index, V value) throws IOException {
    assert valueSerializer.isFixedLength();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_base_2930806872715889881
public boolean updateValue(int index, V value) throws IOException {
    if (valueSerializer.isFixedLength()) {
      int entryPosition = getIntValue(offset + index * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
=======
public void updateValue(int index, V value) throws IOException {
    assert valueSerializer.isFixedLength();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var2_4771233614647293311

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var1_238882342081209270
    int entryPosition = getIntValue(offset + index * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
    entryPosition += keySerializer.getObjectSizeInDirectMemory(pagePointer, offset + entryPosition);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_base_2930806872715889881
      entryPosition += keySerializer.getObjectSizeInDirectMemory(pagePointer, offset + entryPosition);
=======
    int entryPosition = getIntValue(offset + index * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var2_4771233614647293311

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var1_238882342081209270
    final int size = valueSerializer.getFixedLength();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_base_2930806872715889881
      byte[] serializedValue = new byte[valueSerializer.getFixedLength()];
      valueSerializer.serializeNative(value, serializedValue, 0);
=======
    entryPosition += keySerializer.getObjectSizeInDirectMemory(pagePointer, offset + entryPosition);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var2_4771233614647293311

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var1_238882342081209270
    byte[] serializedValue = new byte[size];
    valueSerializer.serializeNative(value, serializedValue, 0);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_base_2930806872715889881
      setBinaryValue(offset + entryPosition, serializedValue);
      return true;
    }
=======
    byte[] serializedValue = new byte[valueSerializer.getFixedLength()];
    valueSerializer.serializeNative(value, serializedValue, 0);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var2_4771233614647293311

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var1_238882342081209270
    byte[] oldSerializedValue = pagePointer.get(offset + entryPosition, size);

    if (ODefaultComparator.INSTANCE.compare(oldSerializedValue, serializedValue) == 0)
      return 0;

    setBinaryValue(offset + entryPosition, serializedValue);

    return 1;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_base_2930806872715889881
    final int entryPosition = getIntValue(offset + index * OIntegerSerializer.INT_SIZE + POSITIONS_ARRAY_OFFSET);

    int entreeSize = keySerializer.getObjectSizeInDirectMemory(pagePointer, offset + entryPosition);
    entreeSize += valueSerializer.getObjectSize(value);

    checkEntreeSize(entreeSize);

    final K key = getKey(index);
    remove(index);
    return addEntry(index, new SBTreeEntry<K, V>(OBonsaiBucketPointer.NULL, OBonsaiBucketPointer.NULL, key, value), false);
=======
    setBinaryValue(offset + entryPosition, serializedValue);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829861568/fstmerge_var2_4771233614647293311
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/main/java/com/orientechnologies/orient/core/index/sbtreebonsai/local/OSBTreeBonsaiBucket.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413829864386/fstmerge_var1_7660711079553551872
@Test
  public void testInitialization() throws Exception {
    OSBTreeRIDSet set = new OSBTreeRIDSet(doc);

    assertNotNull(set.getRootPointer());
    assertTrue(set.isEmpty());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413829864386/fstmerge_base_5806149966759958693
@Test
  public void testInitialization() throws Exception {
    OSBTreeRIDSet set = new OSBTreeRIDSet(doc);

    assertNotNull(set.getFileName());
    assertNotNull(set.getRootPointer());
    assertTrue(set.isEmpty());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413829864386/fstmerge_var2_5380620749535315484

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_effdd_c1354/rev_effdd-c1354/core/src/test/java/com/orientechnologies/orient/core/db/record/ridset/sbtree/OSBTreeRIDSetTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_53af5_cd30d/rev_53af5-cd30d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413830305907/fstmerge_var1_4780546877531202607
public void writeRecords(final Iterator<OIdentifiable> iRecords,
			final String iFetchPlan, String iFormat, final String accept)
			throws IOException {
		if (iRecords == null)
			return;

    if (accept != null && accept.contains("text/csv")) {
			sendStream(OHttpUtils.STATUS_OK_CODE, "OK",
                    OHttpUtils.CONTENT_JSON, "data.csv",
                    new OCallable<Void, OChunkedResponse>() {

                        @Override
                        public Void call(final OChunkedResponse iArgument) {
                            final LinkedHashSet<String> colNames = new LinkedHashSet<String>();
                            final List<ODocument> records = new ArrayList<ODocument>();

                            // BROWSE ALL THE RECORD TO HAVE THE COMPLETE COLUMN
                            // NAMES LIST
                            while (iRecords.hasNext()) {
                                final OIdentifiable r = iRecords.next();
                                if (r != null) {
                                    final ORecord<?> rec = r.getRecord();
                                    if (rec != null) {
                                        if (rec instanceof ODocument) {
                                            final ODocument doc = (ODocument) rec;
                                            records.add(doc);

                                            for (String fieldName : doc
                                                    .fieldNames())
                                                colNames.add(fieldName);
                                        }
                                    }
                                }
                            }

                            final List<String> orderedColumns = new ArrayList<String>(
                                    colNames);

                            try {
                                // WRITE THE HEADER
                                for (int col = 0; col < orderedColumns.size(); ++col) {
                                    if (col > 0)
                                        iArgument.write(',');
                                    iArgument.write(orderedColumns.get(col)
                                            .getBytes());
                                }
                                iArgument.write(OHttpUtils.EOL);

                                // WRITE EACH RECORD
                                for (ODocument doc : records) {
                                    for (int col = 0; col < orderedColumns
                                            .size(); ++col) {
                                        if (col > 0)
                                            iArgument.write(',');

                                        Object value = doc.field(orderedColumns
                                                .get(col));
                                        if (value != null) {
                                            if (!(value instanceof Number))
                                                value = "\"" + value + "\"";
                                            iArgument.write(value.toString()
                                                    .getBytes());
                                        }
                                    }
                                    iArgument.write(OHttpUtils.EOL);
                                }

                                iArgument.flush();

                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            return null;
                        }
                    });
		} else if (accept == null || (accept.contains(OHttpUtils.CONTENT_JSON))) {
			if (iFormat == null)
				iFormat = JSON_FORMAT;
			else
				iFormat = JSON_FORMAT + "," + iFormat;

			final StringWriter buffer = new StringWriter();
			final OJSONWriter json = new OJSONWriter(buffer, iFormat);
			json.beginObject();

			final String format = iFetchPlan != null ? iFormat + ",fetchPlan:"
					+ iFetchPlan : iFormat;

			// WRITE RECORDS
			json.beginCollection(-1, true, "result");
			formatMultiValue(iRecords, buffer, format);
			json.endCollection(-1, true);

			json.endObject();
			send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON,
					buffer.toString(), null);
		}
	}
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413830305907/fstmerge_base_6601181992205547526
public void writeRecords(final Iterator<OIdentifiable> iRecords,
			final String iFetchPlan, String iFormat, final String accept)
			throws IOException {
		if (iRecords == null)
			return;

		if (accept.contains("text/csv")) {
			sendStream(OHttpUtils.STATUS_OK_CODE, "OK",
					OHttpUtils.CONTENT_JSON, "data.csv",
					new OCallable<Void, OChunkedResponse>() {

						@Override
						public Void call(final OChunkedResponse iArgument) {
							final LinkedHashSet<String> colNames = new LinkedHashSet<String>();
							final List<ODocument> records = new ArrayList<ODocument>();

							// BROWSE ALL THE RECORD TO HAVE THE COMPLETE COLUMN
							// NAMES LIST
							while (iRecords.hasNext()) {
								final OIdentifiable r = iRecords.next();
								if (r != null) {
									final ORecord<?> rec = r.getRecord();
									if (rec != null) {
										if (rec instanceof ODocument) {
											final ODocument doc = (ODocument) rec;
											records.add(doc);

											for (String fieldName : doc
													.fieldNames())
												colNames.add(fieldName);
										}
									}
								}
							}

							final List<String> orderedColumns = new ArrayList<String>(
									colNames);

							try {
								// WRITE THE HEADER
								for (int col = 0; col < orderedColumns.size(); ++col) {
									if (col > 0)
										iArgument.write(',');
									iArgument.write(orderedColumns.get(col)
											.getBytes());
								}
								iArgument.write(OHttpUtils.EOL);

								// WRITE EACH RECORD
								for (ODocument doc : records) {
									for (int col = 0; col < orderedColumns
											.size(); ++col) {
										if (col > 0)
											iArgument.write(',');

										Object value = doc.field(orderedColumns
												.get(col));
										if (value != null) {
											if (!(value instanceof Number))
												value = "\"" + value + "\"";
											iArgument.write(value.toString()
													.getBytes());
										}
									}
									iArgument.write(OHttpUtils.EOL);
								}

								iArgument.flush();

							} catch (IOException e) {
								e.printStackTrace();
							}

							return null;
						}
					});
		} else if (accept == null || (accept.contains(OHttpUtils.CONTENT_JSON))) {
			if (iFormat == null)
				iFormat = JSON_FORMAT;
			else
				iFormat = JSON_FORMAT + "," + iFormat;

			final StringWriter buffer = new StringWriter();
			final OJSONWriter json = new OJSONWriter(buffer, iFormat);
			json.beginObject();

			final String format = iFetchPlan != null ? iFormat + ",fetchPlan:"
					+ iFetchPlan : iFormat;

			// WRITE RECORDS
			json.beginCollection(-1, true, "result");
			formatMultiValue(iRecords, buffer, format);
			json.endCollection(-1, true);

			json.endObject();
			send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON,
					buffer.toString(), null);
		}
	}
=======
public void writeRecords(final Iterator<OIdentifiable> iRecords, final String iFetchPlan, String iFormat, final String accept)
      throws IOException {
    if (iRecords == null)
      return;

    if (accept != null && accept.contains("text/csv")) {
      sendStream(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, "data.csv", new OCallable<Void, OChunkedResponse>() {

        @Override
        public Void call(final OChunkedResponse iArgument) {
          final LinkedHashSet<String> colNames = new LinkedHashSet<String>();
          final List<ODocument> records = new ArrayList<ODocument>();

          // BROWSE ALL THE RECORD TO HAVE THE COMPLETE COLUMN
          // NAMES LIST
          while (iRecords.hasNext()) {
            final OIdentifiable r = iRecords.next();
            if (r != null) {
              final ORecord<?> rec = r.getRecord();
              if (rec != null) {
                if (rec instanceof ODocument) {
                  final ODocument doc = (ODocument) rec;
                  records.add(doc);

                  for (String fieldName : doc.fieldNames())
                    colNames.add(fieldName);
                }
              }
            }
          }

          final List<String> orderedColumns = new ArrayList<String>(colNames);

          try {
            // WRITE THE HEADER
            for (int col = 0; col < orderedColumns.size(); ++col) {
              if (col > 0)
                iArgument.write(',');
              iArgument.write(orderedColumns.get(col).getBytes());
            }
            iArgument.write(OHttpUtils.EOL);

            // WRITE EACH RECORD
            for (ODocument doc : records) {
              for (int col = 0; col < orderedColumns.size(); ++col) {
                if (col > 0)
                  iArgument.write(',');

                Object value = doc.field(orderedColumns.get(col));
                if (value != null) {
                  if (!(value instanceof Number))
                    value = "\"" + value + "\"";
                  iArgument.write(value.toString().getBytes());
                }
              }
              iArgument.write(OHttpUtils.EOL);
            }

            iArgument.flush();

          } catch (IOException e) {
            e.printStackTrace();
          }

          return null;
        }
      });
    } else {
      /// JSON
      if (iFormat == null)
        iFormat = JSON_FORMAT;
      else
        iFormat = JSON_FORMAT + "," + iFormat;

      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      json.beginObject();

      final String format = iFetchPlan != null ? iFormat + ",fetchPlan:" + iFetchPlan : iFormat;

      // WRITE RECORDS
      json.beginCollection(-1, true, "result");
      formatMultiValue(iRecords, buffer, format);
      json.endCollection(-1, true);

      json.endObject();
      send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, buffer.toString(), null);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413830305907/fstmerge_var2_7304062735632184564

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_53af5_cd30d/rev_53af5-cd30d/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpResponse.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2b051_b9812/rev_2b051-b9812.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void writeRecords(final Iterator<OIdentifiable> iRecords, final String iFetchPlan, String iFormat, final String accept)
      throws IOException {
    if (iRecords == null)
      return;

    if (accept != null && accept.contains("text/csv")) {
      sendStream(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, "data.csv", new OCallable<Void, OChunkedResponse>() {

        @Override
        public Void call(final OChunkedResponse iArgument) {
          final LinkedHashSet<String> colNames = new LinkedHashSet<String>();
          final List<ODocument> records = new ArrayList<ODocument>();

          // BROWSE ALL THE RECORD TO HAVE THE COMPLETE COLUMN
          // NAMES LIST
          while (iRecords.hasNext()) {
            final OIdentifiable r = iRecords.next();
            if (r != null) {
              final ORecord<?> rec = r.getRecord();
              if (rec != null) {
                if (rec instanceof ODocument) {
                  final ODocument doc = (ODocument) rec;
                  records.add(doc);

                  for (String fieldName : doc.fieldNames())
                    colNames.add(fieldName);
                }
              }
            }
          }

          final List<String> orderedColumns = new ArrayList<String>(colNames);

          try {
            // WRITE THE HEADER
            for (int col = 0; col < orderedColumns.size(); ++col) {
              if (col > 0)
                iArgument.write(',');
              iArgument.write(orderedColumns.get(col).getBytes());
            }
            iArgument.write(OHttpUtils.EOL);

            // WRITE EACH RECORD
            for (ODocument doc : records) {
              for (int col = 0; col < orderedColumns.size(); ++col) {
                if (col > 0)
                  iArgument.write(',');

                Object value = doc.field(orderedColumns.get(col));
                if (value != null) {
                  if (!(value instanceof Number))
                    value = "\"" + value + "\"";
                  iArgument.write(value.toString().getBytes());
                }
              }
              iArgument.write(OHttpUtils.EOL);
            }

            iArgument.flush();

          } catch (IOException e) {
            e.printStackTrace();
          }

          return null;
        }
      });
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413830781161/fstmerge_var1_5680125733343897094
    } else if (accept == null || (accept.contains(OHttpUtils.CONTENT_JSON))) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413830781161/fstmerge_base_8952104823706560762
    } else {
      /// JSON
=======
    } else {
      // / JSON
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413830781161/fstmerge_var2_4754440555219244530
      if (iFormat == null)
        iFormat = JSON_FORMAT;
      else
        iFormat = JSON_FORMAT + "," + iFormat;

      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer, iFormat);
      json.beginObject();

      final String format = iFetchPlan != null ? iFormat + ",fetchPlan:" + iFetchPlan : iFormat;

      // WRITE RECORDS
      json.beginCollection(-1, true, "result");
      formatMultiValue(iRecords, buffer, format);
      json.endCollection(-1, true);

      json.endObject();
      send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, buffer.toString(), null);
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2b051_b9812/rev_2b051-b9812/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpResponse.java

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e7289_24be3/rev_e7289-24be3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d8b38_e0b86/rev_d8b38-e0b86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_da276_47dc6/rev_da276-47dc6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_027ba_c1e28/rev_027ba-c1e28.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_38b83_5f47f/rev_38b83-5f47f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_668cb_aadbf/rev_668cb-aadbf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5b200_11a4d/rev_5b200-11a4d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d46d5_0b990/rev_d46d5-0b990.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4db61_dd926/rev_4db61-dd926.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_49a92_9ab47/rev_49a92-9ab47.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_62b1d_1e88d/rev_62b1d-1e88d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_13fe8_b4ba2/rev_13fe8-b4ba2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3812d_a3c7b/rev_3812d-a3c7b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_063dc_570e6/rev_063dc-570e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_098ec_b13ee/rev_098ec-b13ee.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_464f9_87f51/rev_464f9-87f51.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_015cf_3a211/rev_015cf-3a211.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void testEdgePhysicalRemoval() {
    graph.command(new OCommandSQL("delete from e where name = 'forceCreationOfDocument'")).execute();

    Vertex v1 = graph.addVertex(null);
    Vertex v2 = graph.addVertex(null);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413988497263/fstmerge_var1_2542030015376896806
    OrientEdge e = graph.addEdge(null, v1, v2, "contains");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413988497263/fstmerge_base_5845677432869251766
    OrientEdge e = graph.addEdge(null, v1, v2, null);
=======
    OrientEdge e = graph.addEdge(null, v1, v2, "anyLabel");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413988497263/fstmerge_var2_8708986305828609648
    e.setProperty("key", "forceCreationOfDocument");

    Iterable<Edge> result = graph.command(new OSQLSynchQuery<Edge>("select from e where key = 'forceCreationOfDocument'"))
        .execute();
    Assert.assertTrue(result.iterator().hasNext());
    Assert.assertTrue(result.iterator().next() instanceof Edge);

    e.remove();
    graph.commit();

    result = graph.command(new OSQLSynchQuery<Edge>("select from e where key = 'forceCreationOfDocument'")).execute();
    Assert.assertFalse(result.iterator().hasNext());
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_015cf_3a211/rev_015cf-3a211/graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.6.4"; ##FSTMerge## public static final String ORIENT_VERSION = "1.6.3-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_015cf_3a211/rev_015cf-3a211/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413988505374/fstmerge_var1_3561732293155841450
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413988505374/fstmerge_base_149604288948564077
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.put(record.getIdentity(), record);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (!isEnabled())
      return null;

    if (!Orient.instance().getMemoryWatchDog().isMemoryAvailable())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.put(record.getIdentity(), record);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413988505374/fstmerge_var2_6778711619896634353

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_015cf_3a211/rev_015cf-3a211/core/src/main/java/com/orientechnologies/orient/core/cache/OAbstractMapCache.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2f49b_0c66c/rev_2f49b-0c66c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_03a24_e2fb7/rev_03a24-e2fb7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5c5e4_7f7eb/rev_5c5e4-7f7eb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a3633_b296d/rev_a3633-b296d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_20f6a_a3633/rev_20f6a-a3633.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e5ab4_c3fab/rev_e5ab4-c3fab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_25ac9_464cb/rev_25ac9-464cb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_171c2_96cab/rev_171c2-96cab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aba6_81eb1/rev_6aba6-81eb1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
protected void dropEdgeFromVertex(final OIdentifiable iEdge, final ODocument iVertex, final String iFieldName,
      final Object iFieldValue) {
    if (iFieldValue == null) {
      // NO EDGE? WARN
      OLogManager.instance().debug(this, "Edge not found in vertex's property %s.%s while removing the edge %s",
          iVertex.getIdentity(), iFieldName, iEdge.getIdentity());

    } else if (iFieldValue instanceof OIdentifiable) {
      // FOUND A SINGLE ITEM: JUST REMOVE IT

      if (iFieldValue.equals(iEdge))
        iVertex.removeField(iFieldName);
      else
        // NO EDGE? WARN
        OLogManager.instance().warn(this, "Edge not found in vertex's property %s.%s link while removing the edge %s",
            iVertex.getIdentity(), iFieldName, iEdge.getIdentity());

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_var1_6356237109807403430
    } else if (iFieldValue instanceof Collection<?>) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_base_3228391382191239210
    } else if (iFieldValue instanceof OMVRBTreeRIDSet) {
=======
    } else if (iFieldValue instanceof ORidBag) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_var2_2224166858705443507
      // ALREADY A SET: JUST REMOVE THE NEW EDGE
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_var1_6356237109807403430
      final Collection<Object> coll = (Collection<Object>) iFieldValue;

      if (!coll.remove(iEdge))
        OLogManager.instance().warn(this, "Edge not found in vertex's property %s.%s set while removing the edge %s",
            iVertex.getIdentity(), iFieldName, iEdge.getIdentity());

      if (coll.size() == 1)
        iVertex.field(iFieldName, coll.iterator().next());
      else if (coll.size() == 0)
        iVertex.removeField(iFieldName);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_base_3228391382191239210
      if (!((OMVRBTreeRIDSet) iFieldValue).remove(iEdge))
        OLogManager.instance().warn(this, "Edge not found in vertex's property %s.%s set while removing the edge %s",
            iVertex.getIdentity(), iFieldName, iEdge.getIdentity());

      if (((OMVRBTreeRIDSet) iFieldValue).size() == 1)
        iVertex.field(iFieldName, ((OMVRBTreeRIDSet) iFieldValue).iterator().next());
      else if (((OMVRBTreeRIDSet) iFieldValue).size() == 0)
        iVertex.removeField(iFieldName);

    } else if (iFieldValue instanceof Collection<?>) {
      // CONVERT COLLECTION IN TREE-SET AND REMOVE THE EDGE
      final OMVRBTreeRIDSet out = new OMVRBTreeRIDSet(iVertex, (Collection<OIdentifiable>) iFieldValue);
      if (!out.remove(iEdge))
        OLogManager.instance().warn(this, "Edge not found in vertex's property %s.%s collection while removing the edge %s",
            iVertex.getIdentity(), iFieldName, iEdge.getIdentity());
      else
        iVertex.field(iFieldName, out);
=======
      final ORidBag bag = (ORidBag) iFieldValue;
      bag.remove(iEdge);
    } else if (iFieldValue instanceof Collection<?>) {
      // CONVERT COLLECTION IN TREE-SET AND REMOVE THE EDGE
      final ORidBag out = new ORidBag();
      out.addAll((Collection<OIdentifiable>) iFieldValue);

      out.remove(iEdge);
      iVertex.field(iFieldName, out);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920023/fstmerge_var2_2224166858705443507
    } else
      throw new IllegalStateException("Wrong type found in the field '" + iFieldName + "': " + iFieldValue.getClass());
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aba6_81eb1/rev_6aba6-81eb1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientEdge.java
Conflict type: LineBasedMCFd
Conflict body: 
private boolean canCreateDynamicEdge(final ODocument iFromVertex, final ODocument iToVertex, final String iOutFieldName,
      final String iInFieldName, final Object[] fields, final String label) {

    if (!graph.isUseVertexFieldsForEdgeLabels() && label != null)
      return false;

    if (graph.isUseLightweightEdges() && (fields == null || fields.length == 0 || fields[0] == null)) {
      Object field = iFromVertex.field(iOutFieldName);
      if (field != null)
        if (field instanceof OIdentifiable) {
          if (field.equals(iToVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_var1_6843058787624897841
        } else if (field instanceof Collection<?>)
          if (((Collection<Object>) field).contains(iToVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_base_4964810255578521850
        } else if (field instanceof OMVRBTreeRIDSet)
          if (((OMVRBTreeRIDSet) field).contains(iToVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
=======
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_var2_252575234582287100

      field = iToVertex.field(iInFieldName);
      if (field != null)
        if (field instanceof OIdentifiable) {
          if (field.equals(iFromVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_var1_6843058787624897841
        } else if (field instanceof Collection<?>)
          if (((Collection<Object>) field).contains(iFromVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_base_4964810255578521850
        } else if (field instanceof OMVRBTreeRIDSet)
          if (((OMVRBTreeRIDSet) field).contains(iFromVertex)) {
            // ALREADY EXISTS, FORCE THE EDGE-DOCUMENT TO AVOID
            // MULTIPLE DYN-EDGES AGAINST THE SAME VERTICES
            new OrientEdge(graph, iFromVertex, iToVertex, label).convertToDocument();
            return false;
          }
=======
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920312/fstmerge_var2_252575234582287100

      if (graph.isUseClassForEdgeLabel()) {
        // CHECK IF THE EDGE CLASS HAS SPECIAL CONSTRAINTS
        final OClass cls = graph.getEdgeType(label);
        if (cls != null)
          for (OProperty p : cls.properties()) {
            if (p.isMandatory() || p.isNotNull())
              return false;
          }
      }

      // CAN USE DYNAMIC EDGES
      return true;
    }
    return false;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aba6_81eb1/rev_6aba6-81eb1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java
Conflict type: LineBasedMCFd
Conflict body: 
public static Object createLink(final ODocument iFromVertex, final OIdentifiable iTo, final String iFieldName) {
    final Object out;
    Object found = iFromVertex.field(iFieldName);
    if (found == null)
      // CREATE ONLY ONE LINK
      out = iTo;
    else if (found instanceof OIdentifiable) {
      // DOUBLE: SCALE UP THE LINK INTO A COLLECTION
      final ORidBag bag = new ORidBag();
      bag.add((OIdentifiable) found);
      bag.add(iTo);
      out = bag;
    } else if (found instanceof ORidBag) {
      // ADD THE LINK TO THE COLLECTION
      out = null;
      ((ORidBag) found).add(iTo);
    } else if (found instanceof Collection<?>) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920351/fstmerge_var1_924634707623277010
      // // CONVERT IT IN SET
      // out = new OMVRBTreeRIDSet(((Collection<?>) found).size());
      // ((OMVRBTreeRIDSet) out).addAll((Collection<? extends OIdentifiable>) found);

      // USE THE FOUND COLLECTION
      out = null;
      ((Collection<Object>) found).add(iTo);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920351/fstmerge_base_2544704080515733980
      // CONVERT IT IN SET
      out = new OMVRBTreeRIDSet(((Collection<?>) found).size());
      ((OMVRBTreeRIDSet) out).addAll((Collection<? extends OIdentifiable>) found);
      ((OMVRBTreeRIDSet) out).add(iTo);
=======
      // CONVERT IT TO BAG
      final ORidBag bag = new ORidBag();
      bag.addAll((Collection<OIdentifiable>) found);
      bag.add(iTo);
      out = bag;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920351/fstmerge_var2_7609216671462511305

    } else
      throw new IllegalStateException("Relationship content is invalid on field " + iFieldName + ". Found: " + found);

    if (out != null)
      // OVERWRITE IT
      iFromVertex.field(iFieldName, out);

    return out;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aba6_81eb1/rev_6aba6-81eb1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void removeEdges(final ODocument iVertex, final String iFieldName, final OIdentifiable iVertexToRemove,
      final boolean iAlsoInverse, final boolean useVertexFieldsForEdgeLabels) {
    if (iVertex == null)
      return;

    final Object fieldValue = iVertexToRemove != null ? iVertex.field(iFieldName) : iVertex.removeField(iFieldName);
    if (fieldValue == null)
      return;

    if (fieldValue instanceof OIdentifiable) {
      // SINGLE RECORD

      if (iVertexToRemove != null) {
        if (!fieldValue.equals(iVertexToRemove)) {
          // OLogManager.instance().warn(null,
          // "[OrientVertex.removeEdges] connections %s not found in field %s",
          // iVertexToRemove,
          // iFieldName);
          return;
        }
        iVertex.removeField(iFieldName);
      }

      if (iAlsoInverse)
        removeInverseEdge(iVertex, iFieldName, iVertexToRemove, fieldValue, useVertexFieldsForEdgeLabels);

      deleteEdgeIfAny((OIdentifiable) fieldValue);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var1_9052293364644072343
    } else if (fieldValue instanceof Collection<?>) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_base_6651750811945891404
    } else if (fieldValue instanceof OMVRBTreeRIDSet) {
=======
    } else if (fieldValue instanceof ORidBag) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var2_6725228081082634662
      // COLLECTION OF RECORDS: REMOVE THE ENTRY
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var1_9052293364644072343
      final Collection<Object> set = (Collection<Object>) fieldValue;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_base_6651750811945891404
      final OMVRBTreeRIDSet set = (OMVRBTreeRIDSet) fieldValue;
=======
      final ORidBag bag = (ORidBag) fieldValue;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var2_6725228081082634662

      if (iVertexToRemove != null) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var1_9052293364644072343
        if (!set.remove(iVertexToRemove)) {
          // SEARCH SEQUENTIALLY (SLOWER)
          boolean found = false;
          for (Iterator<Object> it = set.iterator(); it.hasNext();) {
            final ODocument curr = ((OIdentifiable) it.next()).getRecord();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_base_6651750811945891404
        if (!set.remove(iVertexToRemove)) {
          // SEARCH SEQUENTIALLY (SLOWER)
          boolean found = false;
          for (OLazyIterator<OIdentifiable> it = set.iterator(false); it.hasNext();) {
            final ODocument curr = it.next().getRecord();
=======
        // SEARCH SEQUENTIALLY (SLOWER)
        boolean found = false;
        for (Iterator<OIdentifiable> it = bag.rawIterator(); it.hasNext();) {
          final ODocument curr = it.next().getRecord();

          if (iVertexToRemove.equals(curr)) {
            // FOUND AS VERTEX
            it.remove();
            if (iAlsoInverse)
              removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
            found = true;
            break;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var2_6725228081082634662

          } else if (curr.getSchemaClass().isSubClassOf(OrientEdge.CLASS_NAME)) {
            final Direction direction = getConnectionDirection(iFieldName, useVertexFieldsForEdgeLabels);

            // EDGE, REMOVE THE EDGE
            if (iVertexToRemove.equals(OrientEdge.getConnection(curr, direction.opposite()))) {
              it.remove();
              if (iAlsoInverse)
                removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
              found = true;
              break;
            }
          }
        }

        if (!found)
          OLogManager.instance()
              .warn(null, "[OrientVertex.removeEdges] edge %s not found in field %s", iVertexToRemove, iFieldName);

        deleteEdgeIfAny(iVertexToRemove);

      } else {

        // DELETE ALL THE EDGES
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var1_9052293364644072343
        for (Iterator<Object> it = set.iterator(); it.hasNext();) {
          final OIdentifiable edge = (OIdentifiable) it.next();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_base_6651750811945891404
        for (OLazyIterator<OIdentifiable> it = set.iterator(false); it.hasNext();) {
          final OIdentifiable edge = it.next();
=======
        for (Iterator<OIdentifiable> it = bag.rawIterator(); it.hasNext();) {
          final OIdentifiable edge = it.next();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413992920366/fstmerge_var2_6725228081082634662

          if (iAlsoInverse)
            removeInverseEdge(iVertex, iFieldName, null, edge, useVertexFieldsForEdgeLabels);

          deleteEdgeIfAny(edge);
        }
      }

      if (bag.isEmpty())
        // FORCE REMOVAL OF ENTIRE FIELD
        iVertex.removeField(iFieldName);
    }

    iVertex.save();
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6aba6_81eb1/rev_6aba6-81eb1/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3ef71_d0f26/rev_3ef71-d0f26.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static Object createLink(final ODocument iFromVertex, final OIdentifiable iTo, final String iFieldName) {
    final Object out;
    Object found = iFromVertex.field(iFieldName);
    if (found == null)
      // CREATE ONLY ONE LINK
      out = iTo;
    else if (found instanceof OIdentifiable) {
      // DOUBLE: SCALE UP THE LINK INTO A COLLECTION
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413993413322/fstmerge_var1_8748000164144517549
      final OProperty prop = iFromVertex.getSchemaClass().getProperty(iFieldName);

      final Collection coll;
      if (prop != null && "true".equalsIgnoreCase(prop.getCustom("ordered")))
        coll = new OTrackedList<Object>(iFromVertex);
      else
        coll = new OMVRBTreeRIDSet(iFromVertex);

      coll.add(found);
      coll.add(iTo);
      out = coll;
    } else if (found instanceof OMVRBTreeRIDSet) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413993413322/fstmerge_base_7176933269627992375
      out = new OMVRBTreeRIDSet(iFromVertex);
      ((OMVRBTreeRIDSet) out).add((OIdentifiable) found);
      ((OMVRBTreeRIDSet) out).add(iTo);
    } else if (found instanceof OMVRBTreeRIDSet) {
=======
      final ORidBag bag = new ORidBag();
      bag.add((OIdentifiable) found);
      bag.add(iTo);
      out = bag;
    } else if (found instanceof ORidBag) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413993413322/fstmerge_var2_5468751175951526726
      // ADD THE LINK TO THE COLLECTION
      out = null;
      ((ORidBag) found).add(iTo);
    } else if (found instanceof Collection<?>) {

      // USE THE FOUND COLLECTION
      out = null;
      ((Collection<Object>) found).add(iTo);

    } else
      throw new IllegalStateException("Relationship content is invalid on field " + iFieldName + ". Found: " + found);

    if (out != null)
      // OVERWRITE IT
      iFromVertex.field(iFieldName, out);

    return out;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3ef71_d0f26/rev_3ef71-d0f26/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void removeEdges(final ODocument iVertex, final String iFieldName, final OIdentifiable iVertexToRemove,
      final boolean iAlsoInverse, final boolean useVertexFieldsForEdgeLabels) {
    if (iVertex == null)
      return;

    final Object fieldValue = iVertexToRemove != null ? iVertex.field(iFieldName) : iVertex.removeField(iFieldName);
    if (fieldValue == null)
      return;

    if (fieldValue instanceof OIdentifiable) {
      // SINGLE RECORD

      if (iVertexToRemove != null) {
        if (!fieldValue.equals(iVertexToRemove)) {
          // OLogManager.instance().warn(null,
          // "[OrientVertex.removeEdges] connections %s not found in field %s",
          // iVertexToRemove,
          // iFieldName);
          return;
        }
        iVertex.removeField(iFieldName);
      }

      if (iAlsoInverse)
        removeInverseEdge(iVertex, iFieldName, iVertexToRemove, fieldValue, useVertexFieldsForEdgeLabels);

      deleteEdgeIfAny((OIdentifiable) fieldValue);

    } else if (fieldValue instanceof ORidBag) {
      // COLLECTION OF RECORDS: REMOVE THE ENTRY
      final ORidBag bag = (ORidBag) fieldValue;

      if (iVertexToRemove != null) {
        // SEARCH SEQUENTIALLY (SLOWER)
        boolean found = false;
        for (Iterator<OIdentifiable> it = bag.rawIterator(); it.hasNext();) {
          final ODocument curr = it.next().getRecord();

          if (iVertexToRemove.equals(curr)) {
            // FOUND AS VERTEX
            it.remove();
            if (iAlsoInverse)
              removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
            found = true;
            break;

          } else if (curr.getSchemaClass().isSubClassOf(OrientEdge.CLASS_NAME)) {
            final Direction direction = getConnectionDirection(iFieldName, useVertexFieldsForEdgeLabels);

            // EDGE, REMOVE THE EDGE
            if (iVertexToRemove.equals(OrientEdge.getConnection(curr, direction.opposite()))) {
              it.remove();
              if (iAlsoInverse)
                removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
              found = true;
              break;
            }
          }
        }

        if (!found)
          OLogManager.instance()
              .warn(null, "[OrientVertex.removeEdges] edge %s not found in field %s", iVertexToRemove, iFieldName);

        deleteEdgeIfAny(iVertexToRemove);

      } else {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413993413337/fstmerge_var1_2508227160089195217
            } else if (curr.getSchemaClass().isSubClassOf(OrientEdgeType.CLASS_NAME)) {
              // EDGE
              if (curr.getSchemaClass().isSubClassOf(OrientEdgeType.CLASS_NAME)) {
                final Direction direction = getConnectionDirection(iFieldName, useVertexFieldsForEdgeLabels);

                // EDGE, REMOVE THE EDGE
                if (iVertexToRemove.equals(OrientEdge.getConnection(curr, direction.opposite()))) {
                  it.remove();
                  if (iAlsoInverse)
                    removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
                  found = true;
                  break;
                }
              }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413993413337/fstmerge_base_6812624406827565631
            } else if (curr.getSchemaClass().isSubClassOf(OrientEdge.CLASS_NAME)) {
              // EDGE
              if (curr.getSchemaClass().isSubClassOf(OrientEdge.CLASS_NAME)) {
                final Direction direction = getConnectionDirection(iFieldName, useVertexFieldsForEdgeLabels);

                // EDGE, REMOVE THE EDGE
                if (iVertexToRemove.equals(OrientEdge.getConnection(curr, direction.opposite()))) {
                  it.remove();
                  if (iAlsoInverse)
                    removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
                  found = true;
                  break;
                }
              }
=======
        // DELETE ALL THE EDGES
        for (Iterator<OIdentifiable> it = bag.rawIterator(); it.hasNext();) {
          final OIdentifiable edge = it.next();

          if (iAlsoInverse)
            removeInverseEdge(iVertex, iFieldName, null, edge, useVertexFieldsForEdgeLabels);

          deleteEdgeIfAny(edge);
        }
      }

      if (bag.isEmpty())
        // FORCE REMOVAL OF ENTIRE FIELD
        iVertex.removeField(iFieldName);
    } else if (fieldValue instanceof Collection) {
      final Collection col = (Collection) fieldValue;

      if (iVertexToRemove != null) {
        // SEARCH SEQUENTIALLY (SLOWER)
        boolean found = false;
        for (Iterator<OIdentifiable> it = col.iterator(); it.hasNext();) {
          final ODocument curr = it.next().getRecord();

          if (iVertexToRemove.equals(curr)) {
            // FOUND AS VERTEX
            it.remove();
            if (iAlsoInverse)
              removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
            found = true;
            break;

          } else if (curr.getSchemaClass().isSubClassOf(OrientEdge.CLASS_NAME)) {
            final Direction direction = getConnectionDirection(iFieldName, useVertexFieldsForEdgeLabels);

            // EDGE, REMOVE THE EDGE
            if (iVertexToRemove.equals(OrientEdge.getConnection(curr, direction.opposite()))) {
              it.remove();
              if (iAlsoInverse)
                removeInverseEdge(iVertex, iFieldName, iVertexToRemove, curr, useVertexFieldsForEdgeLabels);
              found = true;
              break;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413993413337/fstmerge_var2_1092182222931681730
            }
          }
        }

        if (!found)
          OLogManager.instance()
              .warn(null, "[OrientVertex.removeEdges] edge %s not found in field %s", iVertexToRemove, iFieldName);

        deleteEdgeIfAny(iVertexToRemove);

      } else {

        // DELETE ALL THE EDGES
        for (final OIdentifiable edge : (Iterable<OIdentifiable>) col) {
          if (iAlsoInverse)
            removeInverseEdge(iVertex, iFieldName, null, edge, useVertexFieldsForEdgeLabels);

          deleteEdgeIfAny(edge);
        }
      }

      if (col.isEmpty())
        // FORCE REMOVAL OF ENTIRE FIELD
        iVertex.removeField(iFieldName);
    }

    iVertex.save();
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3ef71_d0f26/rev_3ef71-d0f26/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientVertex.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_00fa6_171c2/rev_00fa6-171c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5df1d_c2c10/rev_5df1d-c2c10.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a4706_f3bb3/rev_a4706-f3bb3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_200e9_00fa6/rev_200e9-00fa6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1a2c2_f97b9/rev_1a2c2-f97b9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04ab5_87ae3/rev_04ab5-87ae3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void convertToDocument() {
    if (rawElement != null)
      // ALREADY CONVERTED
      return;

    graph.setCurrentGraphInThreadLocal();
    graph.autoStartTransaction();

    final ODocument vOutRecord = vOut.getRecord();
    final ODocument vInRecord = vIn.getRecord();

    final ODocument doc = createDocument(label);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1413996389854/fstmerge_var1_3791475678567564602
    doc.field(OrientBaseGraph.CONNECTION_OUT, settings.keepInMemoryReferences ? vOutRecord.getIdentity() : vOutRecord);
    doc.field(OrientBaseGraph.CONNECTION_IN, settings.keepInMemoryReferences ? vInRecord.getIdentity() : vInRecord);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1413996389854/fstmerge_base_5806892278382932323
    doc.field(OrientBaseGraph.CONNECTION_OUT, graph.isKeepInMemoryReferences() ? vOutRecord.getIdentity() : vOutRecord);
    doc.field(OrientBaseGraph.CONNECTION_IN, graph.isKeepInMemoryReferences() ? vInRecord.getIdentity() : vInRecord);
=======
    doc.field(OrientBaseGraph.CONNECTION_OUT, graph.isKeepInMemoryReferences() ? vOutRecord.getIdentity() : vOutRecord);
    doc.field(OrientBaseGraph.CONNECTION_IN, graph.isKeepInMemoryReferences() ? vInRecord.getIdentity() : vInRecord);
    doc.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1413996389854/fstmerge_var2_6737965339807459422
    rawElement = doc;

    final boolean useVertexFieldsForEdgeLabels = settings.useVertexFieldsForEdgeLabels;

    final String outFieldName = OrientVertex.getConnectionFieldName(Direction.OUT, label, useVertexFieldsForEdgeLabels);
    removeLightweightConnection(vOutRecord, outFieldName, vInRecord);

    // OUT-VERTEX ---> IN-VERTEX/EDGE
    OrientVertex.createLink(vOutRecord, doc, outFieldName);
    vOutRecord.save();

    final String inFieldName = OrientVertex.getConnectionFieldName(Direction.IN, label, useVertexFieldsForEdgeLabels);
    removeLightweightConnection(vInRecord, inFieldName, vOutRecord);

    // IN-VERTEX ---> OUT-VERTEX/EDGE
    OrientVertex.createLink(vInRecord, doc, inFieldName);
    vInRecord.save();

    vOut = null;
    vIn = null;
    label = null;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04ab5_87ae3/rev_04ab5-87ae3/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientEdge.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_249ef_5df1d/rev_249ef-5df1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c8961_77943/rev_c8961-77943.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_217e4_c8b45/rev_217e4-c8b45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_daa47_217e4/rev_daa47-217e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4e6ff_e37e6/rev_4e6ff-e37e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_673bb_4a3b7/rev_673bb-4a3b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_07854_673bb/rev_07854-673bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_65a58_79dd4/rev_65a58-79dd4.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@SuppressWarnings("unchecked")
  public boolean result(final Object iRecord) {
    final ODocument record = (ODocument) ((OIdentifiable) iRecord).getRecord();
    try {
      if (compiledFilter != null) {
        // ADDITIONAL FILTERING
        if (!(Boolean) compiledFilter.evaluate(record, null, context))
          return false;
      }

      final Set<ODocument> updatedRecords = new HashSet<ODocument>();

      parameters.reset();

      if (returning.equalsIgnoreCase("BEFORE"))
        allUpdatedRecords.add(record.copy());
      else if (returning.equalsIgnoreCase("AFTER"))
        allUpdatedRecords.add(record);

      if (content != null) {
        // REPLACE ALL THE CONTENT
        record.clear();
        record.merge(content, false, false);
        updatedRecords.add(record);
      }

      if (merge != null) {
        // MERGE THE CONTENT
        record.merge(merge, true, false);
        updatedRecords.add(record);
      }

      // BIND VALUES TO UPDATE
      if (!setEntries.isEmpty()) {
        Set<ODocument> changedDocuments = OSQLHelper.bindParameters(record, setEntries, parameters, context);
        if (changedDocuments != null)
          updatedRecords.addAll(changedDocuments);
      }

      // BIND VALUES TO INCREMENT
      if (!incrementEntries.isEmpty()) {
        for (Map.Entry<String, Number> entry : incrementEntries.entrySet()) {
          final Number prevValue = record.field(entry.getKey());

          if (prevValue == null)
            // NO PREVIOUS VALUE: CONSIDER AS 0
            record.field(entry.getKey(), entry.getValue());
          else
            // COMPUTING INCREMENT
            record.field(entry.getKey(), OType.increment(prevValue, entry.getValue()));
        }
        updatedRecords.add(record);
      }

      Object v;

      // BIND VALUES TO ADD
      Collection<Object> coll;
      Object fieldValue;
      if (!addEntries.isEmpty()) {
        for (OPair<String, Object> entry : addEntries) {
          coll = null;
          if (!record.containsField(entry.getKey())) {
            // GET THE TYPE IF ANY
            if (record.getSchemaClass() != null) {
              OProperty prop = record.getSchemaClass().getProperty(entry.getKey());
              if (prop != null && prop.getType() == OType.LINKSET)
                // SET TYPE
                coll = new HashSet<Object>();
            }

            if (coll == null)
              // IN ALL OTHER CASES USE A LIST
              coll = new ArrayList<Object>();

            record.field(entry.getKey(), coll);
          } else {
            fieldValue = record.field(entry.getKey());

            if (fieldValue instanceof Collection<?>)
              coll = (Collection<Object>) fieldValue;
            else
              continue;
          }

          v = entry.getValue();

          if (v instanceof OSQLFilterItem)
            v = ((OSQLFilterItem) v).getValue(record, null, context);
          else if (v instanceof OSQLFunctionRuntime)
            v = ((OSQLFunctionRuntime) v).execute(record, record, null, context);
          else if (v instanceof OCommandRequest)
            v = ((OCommandRequest) v).execute(record, null, context);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var1_4591266902876249375
          coll.add(v);
          updatedRecords.add(record);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_base_6891385447523348545
    // BIND VALUES TO ADD
    Collection<Object> coll;
    Object fieldValue;
    for (OPair<String, Object> entry : addEntries) {
      coll = null;
      if (!record.containsField(entry.getKey())) {
        // GET THE TYPE IF ANY
        if (record.getSchemaClass() != null) {
          OProperty prop = record.getSchemaClass().getProperty(entry.getKey());
          if (prop != null && prop.getType() == OType.LINKSET)
            // SET TYPE
            coll = new HashSet<Object>();
=======
    // BIND VALUES TO ADD
    Collection<Object> coll = null;
    ORidBag bag = null;
    Object fieldValue;
    for (OPair<String, Object> entry : addEntries) {
      coll = null;
      if (!record.containsField(entry.getKey())) {
        // GET THE TYPE IF ANY
        if (record.getSchemaClass() != null) {
          OProperty prop = record.getSchemaClass().getProperty(entry.getKey());
          if (prop != null && prop.getType() == OType.LINKSET)
            // SET TYPE
            coll = new HashSet<Object>();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var2_2072721131521846282
        }
      }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var1_4591266902876249375
      Map<String, Object> map;
      OPair<String, Object> pair;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_base_6891385447523348545
        if (coll == null)
          // IN ALL OTHER CASES USE A LIST
          coll = new ArrayList<Object>();

        record.field(entry.getKey(), coll);
      } else {
        fieldValue = record.field(entry.getKey());

        if (fieldValue instanceof Collection<?>)
          coll = (Collection<Object>) fieldValue;
        else
          continue;
      }

      v = entry.getValue();

      if (v instanceof OSQLFilterItem)
        v = ((OSQLFilterItem) v).getValue(record, null, context);
      else if (v instanceof OSQLFunctionRuntime)
        v = ((OSQLFunctionRuntime) v).execute(record, record, null, context);
      else if (v instanceof OCommandRequest)
        v = ((OCommandRequest) v).execute(record, null, context);

      coll.add(v);
      updatedRecords.add(record);
    }
=======
        if (coll == null)
          // IN ALL OTHER CASES USE A LIST
          coll = new ArrayList<Object>();

        record.field(entry.getKey(), coll);
      } else {
        fieldValue = record.field(entry.getKey());

        if (fieldValue instanceof Collection<?>)
          coll = (Collection<Object>) fieldValue;
        else if (fieldValue instanceof ORidBag)
          bag = (ORidBag) fieldValue;
        else
          continue;
      }

      v = entry.getValue();

      if (v instanceof OSQLFilterItem)
        v = ((OSQLFilterItem) v).getValue(record, null, context);
      else if (v instanceof OSQLFunctionRuntime)
        v = ((OSQLFunctionRuntime) v).execute(record, record, null, context);
      else if (v instanceof OCommandRequest)
        v = ((OCommandRequest) v).execute(record, null, context);

      if (coll != null)
        coll.add(v);
      else {
        if (!(v instanceof OIdentifiable))
          throw new OCommandExecutionException("Only links or records can be added to LINKBAG");

        bag.add((OIdentifiable) v);
      }

      updatedRecords.add(record);
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var2_2072721131521846282

      if (!putEntries.isEmpty()) {
        // BIND VALUES TO PUT (AS MAP)
        for (Entry<String, OPair<String, Object>> entry : putEntries.entrySet()) {
          fieldValue = record.field(entry.getKey());

          if (fieldValue == null) {
            if (record.getSchemaClass() != null) {
              final OProperty property = record.getSchemaClass().getProperty(entry.getKey());
              if (property != null
                  && (property.getType() != null && (!property.getType().equals(OType.EMBEDDEDMAP) && !property.getType().equals(
                      OType.LINKMAP)))) {
                throw new OCommandExecutionException("field " + entry.getKey() + " is not defined as a map");
              }
            }
            fieldValue = new HashMap<String, Object>();
            record.field(entry.getKey(), fieldValue);
          }

          if (fieldValue instanceof Map<?, ?>) {
            map = (Map<String, Object>) fieldValue;

            pair = entry.getValue();

            v = pair.getValue();

            if (v instanceof OSQLFilterItem)
              v = ((OSQLFilterItem) v).getValue(record, null, context);
            else if (pair.getValue() instanceof OSQLFunctionRuntime)
              v = ((OSQLFunctionRuntime) v).execute(record, record, null, context);
            else if (v instanceof OCommandRequest)
              v = ((OCommandRequest) v).execute(record, null, context);

            map.put(pair.getKey(), v);
            updatedRecords.add(record);
          }
        }
      }

      if (!removeEntries.isEmpty()) {
        // REMOVE FIELD IF ANY
        for (OPair<String, Object> entry : removeEntries) {
          v = entry.getValue();
          if (v == EMPTY_VALUE) {
            record.removeField(entry.getKey());
            updatedRecords.add(record);
          } else {
            fieldValue = record.field(entry.getKey());

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var1_4591266902876249375
            if (fieldValue instanceof Collection<?>) {
              coll = (Collection<Object>) fieldValue;
              if (coll.remove(v))
                updatedRecords.add(record);
            } else if (fieldValue instanceof Map<?, ?>) {
              map = (Map<String, Object>) fieldValue;
              if (map.remove(v) != null)
                updatedRecords.add(record);
            }
          }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_base_6891385447523348545
        if (fieldValue instanceof Collection<?>) {
          coll = (Collection<Object>) fieldValue;
          if (coll.remove(v))
            updatedRecords.add(record);
        } else if (fieldValue instanceof Map<?, ?>) {
          map = (Map<String, Object>) fieldValue;
          if (map.remove(v) != null)
            updatedRecords.add(record);
=======
        if (fieldValue instanceof Collection<?>) {
          coll = (Collection<Object>) fieldValue;
          if (coll.remove(v))
            updatedRecords.add(record);
        } else if (fieldValue instanceof Map<?, ?>) {
          map = (Map<String, Object>) fieldValue;
          if (map.remove(v) != null)
            updatedRecords.add(record);
        } else if (fieldValue instanceof ORidBag) {
          bag = (ORidBag) fieldValue;

          if (!(v instanceof OIdentifiable))
            throw new OCommandExecutionException("Only links or records can be removed from LINKBAG");

          bag.remove((OIdentifiable) v);
          if (record.isDirty())
            updatedRecords.add(record);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414000312777/fstmerge_var2_2072721131521846282
        }
      }

      for (ODocument d : updatedRecords) {
        d.setDirty();
        d.save();
        recordCount++;
      }

      return true;

    } finally {
      if (lockStrategy.equalsIgnoreCase("RECORD"))
        ((OStorageEmbedded) getDatabase().getStorage()).releaseWriteLock(record.getIdentity());
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_65a58_79dd4/rev_65a58-79dd4/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLUpdate.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414000330505/fstmerge_var1_6045157308827348675
public Iterable<ODocument> browseElements(final String iClass, final boolean iPolymorphic) {
    return new ORecordIteratorClass<ODocument>(this, (ODatabaseRecordAbstract) getUnderlying(), iClass, iPolymorphic, true, false,
        OStorage.LOCKING_STRATEGY.DEFAULT);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414000330505/fstmerge_base_642449445889860078
public Iterable<ODocument> browseElements(final String iClass, final boolean iPolymorphic) {
    return new ORecordIteratorClass<ODocument>(this, (ODatabaseRecordAbstract) getUnderlying(), iClass, iPolymorphic, true, false);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414000330505/fstmerge_var2_971702624927114992

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_65a58_79dd4/rev_65a58-79dd4/core/src/main/java/com/orientechnologies/orient/core/db/graph/OGraphDatabase.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_74fd6_b7e24/rev_74fd6-b7e24.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4002e_65a58/rev_4002e-65a58.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a66b9_d5c34/rev_a66b9-d5c34.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_accba_ac1a1/rev_accba-ac1a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_598db_2b467/rev_598db-2b467.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_32487_160b6/rev_32487-160b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_98c47_32752/rev_98c47-32752.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_28de7_2c5b0/rev_28de7-2c5b0.revisions

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_28de7_bdb71/rev_28de7-bdb71.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0badc_d6a99/rev_0badc-d6a99.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1dc33_f7e93/rev_1dc33-f7e93.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1f21_7b077/rev_e1f21-7b077.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4d184_d1365/rev_4d184-d1365.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7f648_b365c/rev_7f648-b365c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec1a9_20761/rev_ec1a9-20761.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0d2f6_649c6/rev_0d2f6-649c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6ab80_428b2/rev_6ab80-428b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b35dd_20554/rev_b35dd-20554.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ffe7e_cecb1/rev_ffe7e-cecb1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d4f21_1204d/rev_d4f21-1204d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_58f8e_d4f21/rev_58f8e-d4f21.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_53ad9_8d7ad/rev_53ad9-8d7ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ed1af_6c7bd/rev_ed1af-6c7bd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0232d_36c31/rev_0232d-36c31.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c0d19_10899/rev_c0d19-10899.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bfc19_b7c04/rev_bfc19-b7c04.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0d406_7aed4/rev_0d406-7aed4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0d406_d4900/rev_0d406-d4900.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6a7fc_94f3e/rev_6a7fc-94f3e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_42eba_5bf5d/rev_42eba-5bf5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2eec1_501da/rev_2eec1-501da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_81d29_e15cc/rev_81d29-e15cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4f5fe_e4c59/rev_4f5fe-e4c59.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3fe57_3d484/rev_3fe57-3d484.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_da68d_42220/rev_da68d-42220.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9f71f_22ece/rev_9f71f-22ece.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_07483_60383/rev_07483-60383.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a7bbf_c48ff/rev_a7bbf-c48ff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_474cd_b8ed5/rev_474cd-b8ed5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f0321_74889/rev_f0321-74889.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5189c_b5d7c/rev_5189c-b5d7c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_40584_764ec/rev_40584-764ec.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c3835_ff499/rev_c3835-ff499.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dd943_6d0bb/rev_dd943-6d0bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b959d_ffe57/rev_b959d-ffe57.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_896de_43679/rev_896de-43679.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1d621_b851b/rev_1d621-b851b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_47159_d7bdb/rev_47159-d7bdb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e4a3d_aa8ae/rev_e4a3d-aa8ae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2508b_8ba5f/rev_2508b-8ba5f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9d45d_5b48d/rev_9d45d-5b48d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1481d_f9427/rev_1481d-f9427.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_af193_f5144/rev_af193-f5144.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d2405_ea951/rev_d2405-ea951.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d2405_b4430/rev_d2405-b4430.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_80181_5164c/rev_80181-5164c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f2027_111aa/rev_f2027-111aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9fb77_63a91/rev_9fb77-63a91.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ab2a4_5d249/rev_ab2a4-5d249.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9957d_58341/rev_9957d-58341.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdde9_2ce7f/rev_bdde9-2ce7f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_adcd7_3028f/rev_adcd7-3028f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_adcd7_71b83/rev_adcd7-71b83.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_44bfe_c4d8b/rev_44bfe-c4d8b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eaf32_276fd/rev_eaf32-276fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6e0a6_bbca8/rev_6e0a6-bbca8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_293f3_265c3/rev_293f3-265c3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c24b8_40fce/rev_c24b8-40fce.revisions
Conflict type: SameSignatureCM
Conflict body: 
public <RET extends ORecordInternal<?>> RET executeReadRecord(final ORecordId iRid, ORecordInternal<?> iRecord,
      final String iFetchPlan, final boolean iIgnoreCache, final boolean loadTombstones,
      final OStorage.LOCKING_STRATEGY iLockingStrategy) {
    checkOpeness();

    try {
      checkSecurity(ODatabaseSecurityResources.CLUSTER, ORole.PERMISSION_READ, getClusterNameById(iRid.getClusterId()));

      // SEARCH IN LOCAL TX
      ORecordInternal<?> record = getTransaction().getRecord(iRid);
      if (record == OTransactionRealAbstract.DELETED_RECORD)
        // DELETED IN TX
        return null;

      if (record == null && !iIgnoreCache)
        // SEARCH INTO THE CACHE
        record = getLevel1Cache().findRecord(iRid);

      if (record != null) {
        if (iRecord != null) {
          iRecord.fromStream(record.toStream());
          iRecord.getRecordVersion().copyFrom(record.getRecordVersion());
          record = iRecord;
        }

        OFetchHelper.checkFetchPlanValid(iFetchPlan);
        if (callbackHooks(TYPE.BEFORE_READ, record) == ORecordHook.RESULT.SKIP)
          return null;

        if (record.getInternalStatus() == ORecordElement.STATUS.NOT_LOADED)
          record.reload();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414081538236/fstmerge_var1_7734217844439091413
        if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
          ((OStorageEmbedded) getStorage()).acquireReadLock(iRid);
        else if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK)
          ((OStorageEmbedded) getStorage()).acquireWriteLock(iRid);

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414081538236/fstmerge_base_9038761660313186935
=======
        if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
          record.lock(false);
        else if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK)
          record.lock(true);

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414081538236/fstmerge_var2_8448824296052785683
        callbackHooks(TYPE.AFTER_READ, record);
        return (RET) record;
      }

      final ORawBuffer recordBuffer = underlying.read(iRid, iFetchPlan, iIgnoreCache, loadTombstones, iLockingStrategy).getResult();
      if (recordBuffer == null)
        return null;

      if (iRecord == null || iRecord.getRecordType() != recordBuffer.recordType)
        // NO SAME RECORD TYPE: CAN'T REUSE OLD ONE BUT CREATE A NEW ONE FOR IT
        iRecord = Orient.instance().getRecordFactoryManager().newInstance(recordBuffer.recordType);

      iRecord.fill(iRid, recordBuffer.version, recordBuffer.buffer, false);

      if (iRecord.getRecordVersion().isTombstone())
        return (RET) iRecord;

      if (callbackHooks(TYPE.BEFORE_READ, iRecord) == RESULT.SKIP)
        return null;

      iRecord.fromStream(recordBuffer.buffer);

      callbackHooks(TYPE.AFTER_READ, iRecord);

      if (!iIgnoreCache)
        getLevel1Cache().updateRecord(iRecord);

      return (RET) iRecord;
    } catch (OException e) {
      // RE-THROW THE EXCEPTION
      throw e;

    } catch (Exception e) {
      // WRAP IT AS ODATABASE EXCEPTION
      OLogManager.instance().exception("Error on retrieving record " + iRid, e, ODatabaseException.class);
    }
    return null;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c24b8_40fce/rev_c24b8-40fce/core/src/main/java/com/orientechnologies/orient/core/db/record/ODatabaseRecordAbstract.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e14d6_a1e9a/rev_e14d6-a1e9a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f6bdb_da733/rev_f6bdb-da733.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ebf18_ffc38/rev_ebf18-ffc38.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_95583_9558c/rev_95583-9558c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ef90a_12f73/rev_ef90a-12f73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8b9bc_8b24d/rev_8b9bc-8b24d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_651f2_1393d/rev_651f2-1393d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8d3ec_6e6ca/rev_8d3ec-6e6ca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_43967_17eb7/rev_43967-17eb7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_baee5_2743c/rev_baee5-2743c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_430a6_cf2ca/rev_430a6-cf2ca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cd81a_b7fbf/rev_cd81a-b7fbf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1e80f_90583/rev_1e80f-90583.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_998b4_1899b/rev_998b4-1899b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eebb4_5e02a/rev_eebb4-5e02a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9946d_d9bf4/rev_9946d-d9bf4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_875b7_2541f/rev_875b7-2541f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_32fe0_ecaf9/rev_32fe0-ecaf9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1f793_f68fb/rev_1f793-f68fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_177b9_048f9/rev_177b9-048f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dc5f6_d860f/rev_dc5f6-d860f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c5099_64fb9/rev_c5099-64fb9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_aef20_a352a/rev_aef20-a352a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0f291_f1e09/rev_0f291-f1e09.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_46f41_5c87a/rev_46f41-5c87a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_abcd6_92b8d/rev_abcd6-92b8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cf0d7_821ab/rev_cf0d7-821ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0f464_2a4e4/rev_0f464-2a4e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6fe62_8c448/rev_6fe62-8c448.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7030a_795fd/rev_7030a-795fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c3b72_893d3/rev_c3b72-893d3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_22bf0_f8bdc/rev_22bf0-f8bdc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9352_c2561/rev_a9352-c2561.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414098798751/fstmerge_var1_8547670214286330922
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414098798751/fstmerge_base_2207404107487185065
public void getEntriesMajor(Object iRangeFrom, final boolean isInclusive, boolean ascOrder, final IndexEntriesResultListener entriesResultListener) {
    checkForRebuild();

    iRangeFrom = getCollatingValue(iRangeFrom);

    acquireSharedLock();
    try {
      indexEngine.getEntriesMajor(iRangeFrom, isInclusive, ascOrder, MultiValuesTransformer.INSTANCE, new OIndexEngine.EntriesResultListener() {
          @Override
          public boolean addResult(ODocument entry) {
            return entriesResultListener.addResult(entry);
          }
        }
      );
    } finally {
      releaseSharedLock();
    }
  }
=======
public void getEntriesMajor(Object iRangeFrom, final boolean isInclusive, boolean ascOrder,
      final IndexEntriesResultListener entriesResultListener) {
    checkForRebuild();

    iRangeFrom = getCollatingValue(iRangeFrom);

    acquireSharedLock();
    try {
      indexEngine.getEntriesMajor(iRangeFrom, isInclusive, ascOrder, MultiValuesTransformer.INSTANCE,
          new OIndexEngine.EntriesResultListener() {
            @Override
            public boolean addResult(ODocument entry) {
              return entriesResultListener.addResult(entry);
            }
          });
    } finally {
      releaseSharedLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414098798751/fstmerge_var2_5816136717454616950

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9352_c2561/rev_a9352-c2561/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414098798755/fstmerge_var1_5760964453409427111
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414098798755/fstmerge_base_5298011299501631779
public void getEntriesMinor(Object iRangeTo, boolean isInclusive, boolean ascOrder, final IndexEntriesResultListener entriesResultListener) {
    checkForRebuild();

    iRangeTo = getCollatingValue(iRangeTo);

    acquireSharedLock();
    try {
      indexEngine.getEntriesMinor(iRangeTo, isInclusive, ascOrder, MultiValuesTransformer.INSTANCE, new OIndexEngine.EntriesResultListener() {
          @Override
          public boolean addResult(ODocument entry) {
            return entriesResultListener.addResult(entry);
          }
        }
      );
    } finally {
      releaseSharedLock();
    }
  }
=======
public void getEntriesMinor(Object iRangeTo, boolean isInclusive, boolean ascOrder,
      final IndexEntriesResultListener entriesResultListener) {
    checkForRebuild();

    iRangeTo = getCollatingValue(iRangeTo);

    acquireSharedLock();
    try {
      indexEngine.getEntriesMinor(iRangeTo, isInclusive, ascOrder, MultiValuesTransformer.INSTANCE,
          new OIndexEngine.EntriesResultListener() {
            @Override
            public boolean addResult(ODocument entry) {
              return entriesResultListener.addResult(entry);
            }
          });
    } finally {
      releaseSharedLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414098798755/fstmerge_var2_5386731465684301834

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9352_c2561/rev_a9352-c2561/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414098798759/fstmerge_var1_7170179374586508654
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414098798759/fstmerge_base_6526329814673848681
public void getEntriesBetween(Object iRangeFrom, Object iRangeTo, boolean inclusive, boolean ascOrder, final IndexEntriesResultListener indexEntriesResultListener) {
    checkForRebuild();

    iRangeFrom = getCollatingValue(iRangeFrom);
    iRangeTo = getCollatingValue(iRangeTo);

    final OType[] types = getDefinition().getTypes();
    if (types.length == 1) {
      iRangeFrom = OType.convert(iRangeFrom, types[0].getDefaultJavaType());
      iRangeTo = OType.convert(iRangeTo, types[0].getDefaultJavaType());
    }

    acquireSharedLock();
    try {
      indexEngine.getEntriesBetween(iRangeFrom, iRangeTo, inclusive, ascOrder, MultiValuesTransformer.INSTANCE, new OIndexEngine.EntriesResultListener() {
          @Override
          public boolean addResult(ODocument entry) {
            return indexEntriesResultListener.addResult(entry);
          }
        }
      );
    } finally {
      releaseSharedLock();
    }

  }
=======
public void getEntriesBetween(Object iRangeFrom, Object iRangeTo, boolean inclusive, boolean ascOrder,
      final IndexEntriesResultListener indexEntriesResultListener) {
    checkForRebuild();

    iRangeFrom = getCollatingValue(iRangeFrom);
    iRangeTo = getCollatingValue(iRangeTo);

    final OType[] types = getDefinition().getTypes();
    if (types.length == 1) {
      iRangeFrom = OType.convert(iRangeFrom, types[0].getDefaultJavaType());
      iRangeTo = OType.convert(iRangeTo, types[0].getDefaultJavaType());
    }

    acquireSharedLock();
    try {
      indexEngine.getEntriesBetween(iRangeFrom, iRangeTo, inclusive, ascOrder, MultiValuesTransformer.INSTANCE,
          new OIndexEngine.EntriesResultListener() {
            @Override
            public boolean addResult(ODocument entry) {
              return indexEntriesResultListener.addResult(entry);
            }
          });
    } finally {
      releaseSharedLock();
    }

  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414098798759/fstmerge_var2_2453560965986620943

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9352_c2561/rev_a9352-c2561/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414098798775/fstmerge_var1_2810554115526175757
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414098798775/fstmerge_base_4599825166698284510
public Iterator<OIdentifiable> valuesIterator() {
    checkForRebuild();
    acquireSharedLock();
    try {

      return new OSharedResourceIterator<OIdentifiable>(this, new OMultiCollectionIterator<OIdentifiable>(indexEngine.valuesIterator()));

    } finally {
      releaseSharedLock();
    }
  }
=======
public Iterator<OIdentifiable> valuesIterator() {
    checkForRebuild();
    acquireSharedLock();
    try {

      return new OSharedResourceIterator<OIdentifiable>(this, new OMultiCollectionIterator<OIdentifiable>(
          indexEngine.valuesIterator()));

    } finally {
      releaseSharedLock();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414098798775/fstmerge_var2_6615356758219889484

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9352_c2561/rev_a9352-c2561/core/src/main/java/com/orientechnologies/orient/core/index/OIndexMultiValues.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4ef22_3fbe8/rev_4ef22-3fbe8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_68f0d_45873/rev_68f0d-45873.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_83478_d81ef/rev_83478-d81ef.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_02c29_943d2/rev_02c29-943d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_02c29_44fe1/rev_02c29-44fe1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5b83d_bc111/rev_5b83d-bc111.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8f434_570fe/rev_8f434-570fe.revisions

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9740d_3eaeb/rev_9740d-3eaeb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3a08a_177d0/rev_3a08a-177d0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_59cba_7f883/rev_59cba-7f883.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9aba_050c5/rev_a9aba-050c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9aba_389d4/rev_a9aba-389d4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7207c_83eb6/rev_7207c-83eb6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7689f_759d9/rev_7689f-759d9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_55c67_69862/rev_55c67-69862.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ef55_d5637/rev_0ef55-d5637.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_66e7c_ee6da/rev_66e7c-ee6da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public Object execute(final Map<Object, Object> iArgs) {
    if (!assignTarget(iArgs))
      throw new OQueryParsingException("No source found in query: specify class, cluster(s) or single record(s)");

    context = traverse.getContext();
    context.beginExecution(timeoutMs, timeoutStrategy);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636090/fstmerge_var1_7467623839503576280
    try {
      // BROWSE ALL THE RECORDS AND COLLECTS RESULT
      final List<OIdentifiable> result = traverse.execute();
      for (OIdentifiable r : result)
        if (!handleResult(r, true))
          // LIMIT REACHED
          break;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636090/fstmerge_base_3687513659401978194
    // BROWSE ALL THE RECORDS AND COLLECTS RESULT
    final List<OIdentifiable> result = traverse.execute();
    for (OIdentifiable r : result)
      handleResult(r, true);
=======
    // BROWSE ALL THE RECORDS AND COLLECTS RESULT
    final List<OIdentifiable> result = traverse.execute();
    for (OIdentifiable r : result)
      handleResult(r);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636090/fstmerge_var2_7481092612792876629

      return getResult();
    } finally {
      request.getResultListener().end();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLTraverse.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636365/fstmerge_var1_3380894892839996572
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636365/fstmerge_base_9218608735687529679
protected boolean executeSearchRecord(final OIdentifiable id) {
    if (Thread.interrupted())
      throw new OCommandExecutionException("The select execution has been interrupted");

    if (!context.checkTimeout())
      return false;

    final OStorage.LOCKING_STRATEGY contextLockingStrategy = context.getVariable("$locking") != null ? (OStorage.LOCKING_STRATEGY) context
        .getVariable("$locking") : null;

    final OStorage.LOCKING_STRATEGY localLockingStrategy = contextLockingStrategy != null ? contextLockingStrategy
        : lockingStrategy;

    ORecordInternal<?> record = null;
    try {
      if (id instanceof ORecordInternal<?>) {
        record = (ORecordInternal<?>) id;

        // LOCK THE RECORD IF NEEDED
        if (localLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK)
          record.lock(true);
        else if (localLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
          record.lock(false);

      } else
        record = getDatabase().load(id.getIdentity(), null, false, false, localLockingStrategy);

      context.updateMetric("recordReads", +1);

      if (record == null || record.getRecordType() != ODocument.RECORD_TYPE)
        // SKIP IT
        return true;

      context.updateMetric("documentReads", +1);

      if (filter(record))
        if (!handleResult(record, true))
          // END OF EXECUTION
          return false;
    } finally {
      if (record != null)
        if (contextLockingStrategy != null)
          // CONTEXT LOCK: lock must be released (no matter if filtered or not)
          if (contextLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK
              || contextLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
            record.unlock();
    }
    return true;
  }
=======
protected boolean executeSearchRecord(final OIdentifiable id) {
    if (Thread.interrupted())
      throw new OCommandExecutionException("The select execution has been interrupted");

    if (!context.checkTimeout())
      return false;

    final OStorage.LOCKING_STRATEGY contextLockingStrategy = context.getVariable("$locking") != null ? (OStorage.LOCKING_STRATEGY) context
        .getVariable("$locking") : null;

    final OStorage.LOCKING_STRATEGY localLockingStrategy = contextLockingStrategy != null ? contextLockingStrategy
        : lockingStrategy;

    ORecordInternal<?> record = null;
    try {
      if (id instanceof ORecordInternal<?>) {
        record = (ORecordInternal<?>) id;

        // LOCK THE RECORD IF NEEDED
        if (localLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK)
          record.lock(true);
        else if (localLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
          record.lock(false);

      } else
        record = getDatabase().load(id.getIdentity(), null, false, false, localLockingStrategy);

      context.updateMetric("recordReads", +1);

      if (record == null || record.getRecordType() != ODocument.RECORD_TYPE)
        // SKIP IT
        return true;

      context.updateMetric("documentReads", +1);

      if (filter(record))
        if (!handleResult(record))
          // END OF EXECUTION
          return false;
    } finally {
      if (record != null)
        if (contextLockingStrategy != null)
          // CONTEXT LOCK: lock must be released (no matter if filtered or not)
          if (contextLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK
              || contextLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
            record.unlock();
    }
    return true;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636365/fstmerge_var2_883856236870731587

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636393/fstmerge_var1_5925268561868053913
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636393/fstmerge_base_241843600697359324
protected void parseIndexSearchResult(final Collection<ODocument> entries) {
    for (final ODocument document : entries) {
      final boolean continueResultParsing = handleResult(document, false);
      if (!continueResultParsing)
        break;
    }
  }
=======
protected void parseIndexSearchResult(final Collection<ODocument> entries) {
    for (final ODocument document : entries) {
      final boolean continueResultParsing = handleResult(document);
      if (!continueResultParsing)
        break;
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636393/fstmerge_var2_7065950366226462313

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java
Conflict type: LineBasedMCFd
Conflict body: 
private void fetchValuesFromIndexCursor(final OIndexCursor cursor, final boolean evaluateRecords) {
    int needsToFetch;
    if (fetchLimit > 0)
      needsToFetch = fetchLimit + skip;
    else
      needsToFetch = -1;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636412/fstmerge_var1_6929032802675713246
    cursor.setPrefetchSize(needsToFetch);
    fetchFromTarget(cursor, evaluateRecords);
    //
    // Entry<Object, OIdentifiable> entryRecord = cursor.nextEntry();
    // if (needsToFetch > 0)
    // needsToFetch--;
    //
    // while (entryRecord != null) {
    // final OIdentifiable identifiable = entryRecord.getValue();
    // final ORecord record = identifiable.getRecord();
    //
    // if (!executeSearchRecord(record, evaluateRecords))
    // // LIMIT REACHED
    // break;
    //
    // entryRecord = cursor.nextEntry();
    //
    // if (needsToFetch > 0)
    // needsToFetch--;
    // }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636412/fstmerge_base_681762127971316573
    Entry<Object, OIdentifiable> entryRecord = cursor.next(needsToFetch);
    if (needsToFetch > 0)
      needsToFetch--;

    cursorLoop: while (entryRecord != null) {
      final OIdentifiable identifiable = entryRecord.getValue();
      final ORecord record = identifiable.getRecord();

      if (record instanceof ORecordSchemaAware<?>) {
        final ORecordSchemaAware<?> recordSchemaAware = (ORecordSchemaAware<?>) record;
        final Map<OClass, String> targetClasses = parsedTarget.getTargetClasses();
        if ((targetClasses != null) && (!targetClasses.isEmpty())) {
          for (OClass targetClass : targetClasses.keySet()) {
            if (!targetClass.isSuperClassOf(recordSchemaAware.getSchemaClass()))
              continue cursorLoop;
          }
        }
      }

      if (compiledFilter == null || !evaluateRecords || evaluateRecord(record)) {
        if (!handleResult(record, true))
          break;
      }

      entryRecord = cursor.next(needsToFetch);

      if (needsToFetch > 0)
        needsToFetch--;
    }
=======
    Entry<Object, OIdentifiable> entryRecord = cursor.next(needsToFetch);
    if (needsToFetch > 0)
      needsToFetch--;

    cursorLoop: while (entryRecord != null) {
      final OIdentifiable identifiable = entryRecord.getValue();
      final ORecord record = identifiable.getRecord();

      if (record instanceof ORecordSchemaAware<?>) {
        final ORecordSchemaAware<?> recordSchemaAware = (ORecordSchemaAware<?>) record;
        final Map<OClass, String> targetClasses = parsedTarget.getTargetClasses();
        if ((targetClasses != null) && (!targetClasses.isEmpty())) {
          for (OClass targetClass : targetClasses.keySet()) {
            if (!targetClass.isSuperClassOf(recordSchemaAware.getSchemaClass()))
              continue cursorLoop;
          }
        }
      }

      if (compiledFilter == null || !evaluateRecords || evaluateRecord(record)) {
        if (!handleResult(record))
          break;
      }

      entryRecord = cursor.next(needsToFetch);

      if (needsToFetch > 0)
        needsToFetch--;
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636412/fstmerge_var2_8567600164430485549
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java
Conflict type: LineBasedMCFd
Conflict body: 
private void fetchEntriesFromIndexCursor(final OIndexCursor cursor) {
    int needsToFetch;
    if (fetchLimit > 0)
      needsToFetch = fetchLimit + skip;
    else
      needsToFetch = -1;

    cursor.setPrefetchSize(needsToFetch);

    Entry<Object, OIdentifiable> entryRecord = cursor.nextEntry();
    if (needsToFetch > 0)
      needsToFetch--;

    while (entryRecord != null) {
      final ODocument doc = new ODocument().setOrdered(true);
      doc.field("key", entryRecord.getKey());
      doc.field("rid", entryRecord.getValue().getIdentity());
      doc.unsetDirty();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636415/fstmerge_var1_6735634717565810425
      if (!handleResult(doc, false))
        // LIMIT REACHED
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636415/fstmerge_base_775067134357814587
      if (!handleResult(doc, false))
=======
      if (!handleResult(doc))
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636415/fstmerge_var2_6377433944219667392
        break;

      if (needsToFetch > 0) {
        needsToFetch--;
        cursor.setPrefetchSize(needsToFetch);
      }

      entryRecord = cursor.nextEntry();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java
Conflict type: LineBasedMCFd
Conflict body: 
private void searchInIndex() {
    final OIndex<Object> index = (OIndex<Object>) getDatabase().getMetadata().getIndexManager()
        .getIndex(parsedTarget.getTargetIndex());

    if (index == null)
      throw new OCommandExecutionException("Target index '" + parsedTarget.getTargetIndex() + "' not found");

    boolean ascOrder = true;
    if (!orderedFields.isEmpty()) {
      if (orderedFields.size() != 1)
        throw new OCommandExecutionException("Index can be ordered only by key field");

      final String fieldName = orderedFields.get(0).getKey();
      if (!fieldName.equalsIgnoreCase("key"))
        throw new OCommandExecutionException("Index can be ordered only by key field");

      final String order = orderedFields.get(0).getValue();
      ascOrder = order.equalsIgnoreCase(KEYWORD_ASC);
    }

    // nothing was added yet, so index definition for manual index was not calculated
    if (index.getDefinition() == null)
      return;

    if (compiledFilter != null && compiledFilter.getRootCondition() != null) {
      if (!"KEY".equalsIgnoreCase(compiledFilter.getRootCondition().getLeft().toString()))
        throw new OCommandExecutionException("'Key' field is required for queries against indexes");

      final OQueryOperator indexOperator = compiledFilter.getRootCondition().getOperator();

      if (indexOperator instanceof OQueryOperatorBetween) {
        final Object[] values = (Object[]) compiledFilter.getRootCondition().getRight();

        final OIndexCursor cursor = index.iterateEntriesBetween(getIndexKey(index.getDefinition(), values[0], context), true,
            getIndexKey(index.getDefinition(), values[2], context), true, ascOrder);
        fetchEntriesFromIndexCursor(cursor);
      } else if (indexOperator instanceof OQueryOperatorMajor) {
        final Object value = compiledFilter.getRootCondition().getRight();

        final OIndexCursor cursor = index.iterateEntriesMajor(getIndexKey(index.getDefinition(), value, context), false, ascOrder);
        fetchEntriesFromIndexCursor(cursor);
      } else if (indexOperator instanceof OQueryOperatorMajorEquals) {
        final Object value = compiledFilter.getRootCondition().getRight();
        final OIndexCursor cursor = index.iterateEntriesMajor(getIndexKey(index.getDefinition(), value, context), true, ascOrder);
        fetchEntriesFromIndexCursor(cursor);

      } else if (indexOperator instanceof OQueryOperatorMinor) {
        final Object value = compiledFilter.getRootCondition().getRight();

        OIndexCursor cursor = index.iterateEntriesMinor(getIndexKey(index.getDefinition(), value, context), false, ascOrder);
        fetchEntriesFromIndexCursor(cursor);
      } else if (indexOperator instanceof OQueryOperatorMinorEquals) {
        final Object value = compiledFilter.getRootCondition().getRight();

        OIndexCursor cursor = index.iterateEntriesMinor(getIndexKey(index.getDefinition(), value, context), true, ascOrder);
        fetchEntriesFromIndexCursor(cursor);
      } else if (indexOperator instanceof OQueryOperatorIn) {
        final List<Object> origValues = (List<Object>) compiledFilter.getRootCondition().getRight();
        final List<Object> values = new ArrayList<Object>(origValues.size());
        for (Object val : origValues) {
          if (index.getDefinition() instanceof OCompositeIndexDefinition) {
            throw new OCommandExecutionException("Operator IN not supported yet.");
          }

          val = getIndexKey(index.getDefinition(), val, context);
          values.add(val);
        }

        OIndexCursor cursor = index.iterateEntries(values, true);
        fetchEntriesFromIndexCursor(cursor);
      } else {
        final Object right = compiledFilter.getRootCondition().getRight();
        Object keyValue = getIndexKey(index.getDefinition(), right, context);
        if (keyValue == null)
          return;

        final Object res;
        if (index.getDefinition().getParamCount() == 1) {
          // CONVERT BEFORE SEARCH IF NEEDED
          final OType type = index.getDefinition().getTypes()[0];
          keyValue = OType.convert(keyValue, type.getDefaultJavaType());

          res = index.get(keyValue);
        } else {
          final Object secondKey = getIndexKey(index.getDefinition(), right, context);
          if (keyValue instanceof OCompositeKey && secondKey instanceof OCompositeKey
              && ((OCompositeKey) keyValue).getKeys().size() == index.getDefinition().getParamCount()
              && ((OCompositeKey) secondKey).getKeys().size() == index.getDefinition().getParamCount())
            res = index.get(keyValue);
          else {
            OIndexCursor cursor = index.iterateEntriesBetween(keyValue, true, secondKey, true, true);
            fetchEntriesFromIndexCursor(cursor);
            return;
          }

        }

        if (res != null)
          if (res instanceof Collection<?>) {
            // MULTI VALUES INDEX
            for (final OIdentifiable r : (Collection<OIdentifiable>) res)
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_var1_5378368189917054496
              if (!handleResult(createIndexEntryAsDocument(keyValue, r.getIdentity()), true))
                // LIMIT REACHED
                break;
          } else {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_base_7712512538580946535
              handleResult(createIndexEntryAsDocument(keyValue, r.getIdentity()), true);
          else
=======
              handleResult(createIndexEntryAsDocument(keyValue, r.getIdentity()));
          else
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_var2_943922019410162679
            // SINGLE VALUE INDEX
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_var1_5378368189917054496
            handleResult(createIndexEntryAsDocument(keyValue, ((OIdentifiable) res).getIdentity()), true);
          }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_base_7712512538580946535
            handleResult(createIndexEntryAsDocument(keyValue, ((OIdentifiable) res).getIdentity()), true);
=======
            handleResult(createIndexEntryAsDocument(keyValue, ((OIdentifiable) res).getIdentity()));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414109636429/fstmerge_var2_943922019410162679
      }

    } else {
      if (isIndexSizeQuery()) {
        getProjectionGroup(null).applyValue(projections.keySet().iterator().next(), index.getSize());
        return;
      }

      if (isIndexKeySizeQuery()) {
        getProjectionGroup(null).applyValue(projections.keySet().iterator().next(), index.getKeySize());
        return;
      }

      final OIndexInternal<?> indexInternal = index.getInternal();
      if (indexInternal instanceof OSharedResource)
        ((OSharedResource) indexInternal).acquireExclusiveLock();

      try {
        // ADD ALL THE ITEMS AS RESULT
        if (ascOrder) {
          final Object firstKey = index.getFirstKey();
          if (firstKey == null)
            return;

          final OIndexCursor cursor = index.iterateEntriesMajor(firstKey, true, true);
          fetchEntriesFromIndexCursor(cursor);
        } else {
          final Object lastKey = index.getLastKey();
          if (lastKey == null)
            return;

          final OIndexCursor cursor = index.iterateEntriesMinor(lastKey, true, false);
          fetchEntriesFromIndexCursor(cursor);
        }
      } finally {
        if (indexInternal instanceof OSharedResource)
          ((OSharedResource) indexInternal).releaseExclusiveLock();
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9944b_fcf98/rev_9944b-fcf98/core/src/main/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelect.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4d1c1_7f584/rev_4d1c1-7f584.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b957a_cdbe9/rev_b957a-cdbe9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9b7c2_3482e/rev_9b7c2-3482e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f67fc_0c7a4/rev_f67fc-0c7a4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_6fa84_90cf8/rev_6fa84-90cf8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f4f8c_bbf81/rev_f4f8c-bbf81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_33fc1_ddca2/rev_33fc1-ddca2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1371f_10ad4/rev_1371f-10ad4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c2eec_24046/rev_c2eec-24046.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9f436_7b5ed/rev_9f436-7b5ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f58e9_e82f3/rev_f58e9-e82f3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_093bf_4f6e2/rev_093bf-4f6e2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1004a_25d25/rev_1004a-25d25.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_26da1_625c6/rev_26da1-625c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7063a_3c68a/rev_7063a-3c68a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7c2c8_c3020/rev_7c2c8-c3020.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_da07a_9434e/rev_da07a-9434e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5e0d4_91774/rev_5e0d4-91774.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_444d1_c8775/rev_444d1-c8775.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2941f_bdb71/rev_2941f-bdb71.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c2a8d_02e26/rev_c2a8d-02e26.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b9589_a7305/rev_b9589-a7305.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ec5d3_61061/rev_ec5d3-61061.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cc4da_ec5d3/rev_cc4da-ec5d3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b686a_0a143/rev_b686a-0a143.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5ec01_69a85/rev_5ec01-69a85.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_318dd_432ae/rev_318dd-432ae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eb44b_f3466/rev_eb44b-f3466.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1934c_b1c29/rev_1934c-b1c29.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_66acb_c1cde/rev_66acb-c1cde.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cd94f_905e8/rev_cd94f-905e8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_434b8_7a10e/rev_434b8-7a10e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bfcdc_1464b/rev_bfcdc-1464b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_268a4_bf572/rev_268a4-bf572.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2fd1b_3ba4e/rev_2fd1b-3ba4e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_130a0_86cc0/rev_130a0-86cc0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3a849_557de/rev_3a849-557de.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_55ac0_857a0/rev_55ac0-857a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_604c2_8616d/rev_604c2-8616d.revisions

=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_41745_8ea3a/rev_41745-8ea3a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0e748_fa8cb/rev_0e748-fa8cb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d922e_b13b2/rev_d922e-b13b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa106_b2c93/rev_fa106-b2c93.revisions
Conflict type: LineBasedMCFd
Conflict body: 
protected String checkForClassInSchema(final String className) {
    if (className == null)
      return null;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414158302238/fstmerge_var1_1861348775607024342
    if (isDetached())
      return iClassName;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414158302238/fstmerge_base_3829348507126165293
    if( isDetached() )
      return iClassName;
=======
    if (isDetached())
      return className;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414158302238/fstmerge_var2_6485871706198516430

    final OSchema schema = graph.getRawGraph().getMetadata().getSchema();

    if (!schema.existsClass(className)) {
      // CREATE A NEW CLASS AT THE FLY
      try {
        graph
            .executeOutsideTx(new OCallable<OClass, OrientBaseGraph>() {

              @Override
              public OClass call(final OrientBaseGraph g) {
                return schema.createClass(className, schema.getClass(getBaseClassName()));

              }
            }, "Committing the active transaction to create the new type '", className, "' as subclass of '", getBaseClassName(),
                "'. The transaction will be reopen right after that. To avoid this behavior create the classes outside the transaction");

      } catch (OSchemaException e) {
        if (!schema.existsClass(className))
          throw e;
      }
    } else {
      // CHECK THE CLASS INHERITANCE
      final OClass cls = schema.getClass(className);
      if (!cls.isSubClassOf(getBaseClassName()))
        throw new IllegalArgumentException("Class '" + className + "' is not an instance of " + getBaseClassName());
    }

    return className;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa106_b2c93/rev_fa106-b2c93/graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientElement.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_79d76_03cb0/rev_79d76-03cb0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2bd47_ff9a9/rev_2bd47-ff9a9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0923d_fff45/rev_0923d-fff45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c9af7_15ef5/rev_c9af7-15ef5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0eb4f_c9073/rev_0eb4f-c9073.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_db808_b1cc3/rev_db808-b1cc3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2ec09_69d5f/rev_2ec09-69d5f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_afa19_33509/rev_afa19-33509.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a2083_0111e/rev_a2083-0111e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fbeaf_8f42c/rev_fbeaf-8f42c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b3007_c1fbb/rev_b3007-c1fbb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eb68a_86128/rev_eb68a-86128.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_541ae_e505d/rev_541ae-e505d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a5e5a_ca63b/rev_a5e5a-ca63b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8c1d8_e4bc1/rev_8c1d8-e4bc1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_53a08_262bc/rev_53a08-262bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ce52_40f59/rev_0ce52-40f59.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.4-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.3-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.3";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ce52_40f59/rev_0ce52-40f59/core/src/main/java/com/orientechnologies/orient/core/OConstants.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_698df_bd764/rev_698df-bd764.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public Object executeInContext(final OCommandContext iContext, final Map<Object, Object> iArgs) {
    final String language = request.getLanguage();
    parserText = request.getText();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414167906999/fstmerge_var1_2795055130482292199
    if (language.equalsIgnoreCase("SQL"))
      // SPECIAL CASE: EXECUTE THE COMMANDS IN SEQUENCE
      return executeSQL();
    else
      return executeJsr223Script(language, iContext, iArgs);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414167906999/fstmerge_base_3201122028443153614
    ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
    if (db != null && !(db instanceof ODatabaseRecordTx))
      db = db.getUnderlying();

    final OScriptManager scriptManager = Orient.instance().getScriptManager();
    CompiledScript compiledScript = request.getCompiledScript();

    if (compiledScript == null) {
      ScriptEngine scriptEngine = scriptManager.getEngine(language);
      // COMPILE FUNCTION LIBRARY
      String lib = scriptManager.getLibrary(db, language);
      if (lib == null)
        lib = "";

      parserText = lib + parserText;

      Compilable c = (Compilable) scriptEngine;
      try {
        compiledScript = c.compile(parserText);
      } catch (ScriptException e) {
        scriptManager.getErrorMessage(e, parserText);
      }

      request.setCompiledScript(compiledScript);
    }

    final Bindings binding = scriptManager.bind(compiledScript.getEngine().createBindings(), (ODatabaseRecordTx) db, iContext,
        iArgs);

    try {
      return compiledScript.eval(binding);

    } catch (ScriptException e) {
      throw new OCommandScriptException("Error on execution of the script", request.getText(), e.getColumnNumber(), e);

    } finally {
      scriptManager.unbind(binding);
    }
=======
    ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.getIfDefined();
    if (db != null && !(db instanceof ODatabaseRecordTx))
      db = db.getUnderlying();

    final OScriptManager scriptManager = Orient.instance().getScriptManager();
    CompiledScript compiledScript = request.getCompiledScript();

    if (compiledScript == null) {
      ScriptEngine scriptEngine = scriptManager.getEngine(language);
      scriptEngine.put("engine", scriptEngine);
      // COMPILE FUNCTION LIBRARY
      String lib = scriptManager.getLibrary(db, language);
      if (lib == null)
        lib = "";

      parserText = lib + parserText;

      Compilable c = (Compilable) scriptEngine;
      try {
        compiledScript = c.compile(parserText);
      } catch (ScriptException e) {
        scriptManager.getErrorMessage(e, parserText);
      }

      request.setCompiledScript(compiledScript);
    }

    final Bindings binding = scriptManager.bind(compiledScript.getEngine().createBindings(), (ODatabaseRecordTx) db, iContext,
        iArgs);

    try {
      return compiledScript.eval(binding);

    } catch (ScriptException e) {
      throw new OCommandScriptException("Error on execution of the script", request.getText(), e.getColumnNumber(), e);

    } finally {
      scriptManager.unbind(binding);
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414167906999/fstmerge_var2_3759559445402482301
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_698df_bd764/rev_698df-bd764/core/src/main/java/com/orientechnologies/orient/core/command/script/OCommandExecutorScript.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_934a1_10938/rev_934a1-10938.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "2.0-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.4-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.4";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_934a1_10938/rev_934a1-10938/core/src/main/java/com/orientechnologies/orient/core/OConstants.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8ae37_aabe3/rev_8ae37-aabe3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_63786_579c1/rev_63786-579c1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eb99c_246bb/rev_eb99c-246bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170545845/fstmerge_var1_7323719390999379400
  public OStorageOperationResult<Boolean> hideRecord(ORecordId recordId, int mode, ORecordCallback<Boolean> callback) {
    pushSession();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170545845/fstmerge_base_4937974921912503474
  public OStorageOperationResult<Boolean> hideRecord(ORecordId recordId, int mode,
																										 ORecordCallback<Boolean> callback) {
    pushSession();
=======
  public OStorageOperationResult<Boolean> hideRecord(ORecordId recordId, int mode, ORecordCallback<Boolean> callback) {
 pushSession();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170545845/fstmerge_var2_1771976732898399813
    try {
      return delegate.hideRecord(recordId, mode, callback);
    } finally {
      popSession();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemoteThread.java
Conflict type: SameSignatureCM
Conflict body: 
public Graph configureGraphInstance(final GraphConfigurationContext context) throws GraphConfigurationException {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_base_80061803995433087
        final String graphFile = context.getProperties().getString(Tokens.REXSTER_GRAPH_LOCATION);
=======
    final String graphFile = context.getProperties().getString(Tokens.REXSTER_GRAPH_LOCATION);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_var2_2945497019404753063

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_base_80061803995433087
        if (graphFile == null || graphFile.length() == 0) {
            throw new GraphConfigurationException("Check graph configuration. Missing or empty configuration element: " + Tokens.REXSTER_GRAPH_LOCATION);
        }

        // get the <properties> section of the xml configuration
        final HierarchicalConfiguration graphSectionConfig = (HierarchicalConfiguration) context.getProperties();
        SubnodeConfiguration orientDbSpecificConfiguration;

        try {
            orientDbSpecificConfiguration = graphSectionConfig.configurationAt(Tokens.REXSTER_GRAPH_PROPERTIES);
        } catch (IllegalArgumentException iae) {
            throw new GraphConfigurationException("Check graph configuration. Missing or empty configuration element: " + Tokens.REXSTER_GRAPH_PROPERTIES);
        }

        try {

            final String username = orientDbSpecificConfiguration.getString("username", "");
            final String password = orientDbSpecificConfiguration.getString("password", "");

            // Caching must be turned off. OrientDB has different layers of cache:
            // http://code.google.com/p/orient/wiki/Caching There's one Level1 cache per OGraphDatabase instance
            // and one level2 per JVM. If a OGraphDatabase caches a vertex and then you change it in
            // another thread/transaction you could see the older one. To fix it just disable the Level1 cache.
            // If there were multiple running JVM you could have Level2 cache not updated for the same reason as
            // above. Then you've to disable Level2 cache[].per Luca.
            //
            // Disabling the level 1 cache seems to solve the problem where POSTs of edges in rapid succession
            // force a transaction error like: Cannot update record #6:0 in storage 'orientdb-graph' because the
            // version is not the latest. Probably you are updating an old record or it has been modified by
            // another user (db=v2 your=v0)
            OGlobalConfiguration.CACHE_LEVEL1_ENABLED.setValue(false);

            // calling the open method opens the connection to graphdb.  looks like the
            // implementation of shutdown will call the orientdb close method.
            return new OrientGraph(graphFile, username, password);

        } catch (Exception ex) {
            throw new GraphConfigurationException(ex);
        }
=======
    if (graphFile == null || graphFile.length() == 0) {
      throw new GraphConfigurationException("Check graph configuration. Missing or empty configuration element: "
          + Tokens.REXSTER_GRAPH_LOCATION);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_var2_2945497019404753063
    }
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_var1_1186725842386216124

    // get the <properties> section of the xml configuration
    final HierarchicalConfiguration graphSectionConfig = (HierarchicalConfiguration) context.getProperties();
    SubnodeConfiguration orientDbSpecificConfiguration;

    try {
      orientDbSpecificConfiguration = graphSectionConfig.configurationAt(Tokens.REXSTER_GRAPH_PROPERTIES);
    } catch (IllegalArgumentException iae) {
      throw new GraphConfigurationException("Check graph configuration. Missing or empty configuration element: "
          + Tokens.REXSTER_GRAPH_PROPERTIES);
    }

    try {

      final String username = orientDbSpecificConfiguration.getString("username", "");
      final String password = orientDbSpecificConfiguration.getString("password", "");

      // Caching must be turned off. OrientDB has different layers of cache:
      // http://code.google.com/p/orient/wiki/Caching There's one Level1 cache per OGraphDatabase instance
      // and one level2 per JVM. If a OGraphDatabase caches a vertex and then you change it in
      // another thread/transaction you could see the older one. To fix it just disable the Level1 cache.
      // If there were multiple running JVM you could have Level2 cache not updated for the same reason as
      // above. Then you've to disable Level2 cache[].per Luca.
      //
      // Disabling the level 1 cache seems to solve the problem where POSTs of edges in rapid succession
      // force a transaction error like: Cannot update record #6:0 in storage 'orientdb-graph' because the
      // version is not the latest. Probably you are updating an old record or it has been modified by
      // another user (db=v2 your=v0)
      OGlobalConfiguration.CACHE_LEVEL1_ENABLED.setValue(false);

      // calling the open method opens the connection to graphdb. looks like the
      // implementation of shutdown will call the orientdb close method.
      return new OrientGraph(graphFile, username, password);

    } catch (Exception ex) {
      throw new GraphConfigurationException(ex);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_base_80061803995433087
=======

    // get the <properties> section of the xml configuration
    final HierarchicalConfiguration graphSectionConfig = (HierarchicalConfiguration) context.getProperties();
    SubnodeConfiguration orientDbSpecificConfiguration;

    try {
      orientDbSpecificConfiguration = graphSectionConfig.configurationAt(Tokens.REXSTER_GRAPH_PROPERTIES);
    } catch (IllegalArgumentException iae) {
      throw new GraphConfigurationException("Check graph configuration. Missing or empty configuration element: "
          + Tokens.REXSTER_GRAPH_PROPERTIES);
    }

    try {

      final String username = orientDbSpecificConfiguration.getString("username", "");
      final String password = orientDbSpecificConfiguration.getString("password", "");

      // Caching must be turned off. OrientDB has different layers of cache:
      // http://code.google.com/p/orient/wiki/Caching There's one Level1 cache per OGraphDatabase instance
      // and one level2 per JVM. If a OGraphDatabase caches a vertex and then you change it in
      // another thread/transaction you could see the older one. To fix it just disable the Level1 cache.
      // If there were multiple running JVM you could have Level2 cache not updated for the same reason as
      // above. Then you've to disable Level2 cache[].per Luca.
      //
      // Disabling the level 1 cache seems to solve the problem where POSTs of edges in rapid succession
      // force a transaction error like: Cannot update record #6:0 in storage 'orientdb-graph' because the
      // version is not the latest. Probably you are updating an old record or it has been modified by
      // another user (db=v2 your=v0)
      OGlobalConfiguration.CACHE_LOCAL_ENABLED.setValue(false);

      // calling the open method opens the connection to graphdb. looks like the
      // implementation of shutdown will call the orientdb close method.
      return new OrientGraph(graphFile, username, password);

    } catch (Exception ex) {
      throw new GraphConfigurationException(ex);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170552314/fstmerge_var2_2945497019404753063

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/graphdb/src/main/java/com/tinkerpop/rexster/OrientGraphConfiguration.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170553524/fstmerge_var1_8252562703424654180
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170553524/fstmerge_base_4192123625900837505
private OrientGraphNoTx getGraph() {
    OrientGraphNoTx graph = new OrientGraphNoTx(DBURL);
    graph.getRawGraph().getLevel1Cache().setEnable(false);
    graph.getRawGraph().getLevel2Cache().setEnable(false);
    return graph;
  }
=======
private OrientGraphNoTx getGraph() {
    OrientGraphNoTx graph = new OrientGraphNoTx(DBURL);
    graph.getRawGraph().getLocalCache().setEnable(false);
    return graph;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170553524/fstmerge_var2_3156323501766852619

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsConcurrentAddEdgeTest.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.4"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.2"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562080/fstmerge_var1_7652487587329642855
@Override
  public OCache primaryCache(String storageName) {
    return new OEmptyCache();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562080/fstmerge_base_796061528160663463
@Override
	public OCache primaryCache(String storageName) {
		return new OEmptyCache();
	}
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562080/fstmerge_var2_1305859406849944566

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OCacheLevelTwoLocatorRemote.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562084/fstmerge_var1_511326472355084063
public OLevel1RecordCache(OCacheLevelOneLocator cacheLocator) {
    super(cacheLocator.threadLocalCache());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562084/fstmerge_base_2148884952990996592
public OLevel1RecordCache(OCacheLevelOneLocator cacheLocator) {
    super(cacheLocator.threadLocalCache());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562084/fstmerge_var2_160918406540219954

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562088/fstmerge_var1_2062267926431226222
@Override
  public void startup() {
    ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.get();
    secondary = db.getLevel2Cache();

    profilerPrefix = "db." + db.getName() + ".cache.level1.";
    profilerMetadataPrefix = "db.*.cache.level1.";

    CACHE_HIT = profilerPrefix + "cache.found";
    CACHE_MISS = profilerPrefix + "cache.notFound";

    excludedCluster = db.getClusterIdByName(CLUSTER_INDEX_NAME);

    super.startup();
    setEnable(OGlobalConfiguration.CACHE_LEVEL1_ENABLED.getValueAsBoolean());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562088/fstmerge_base_3889760588182150540
@Override
  public void startup() {
    ODatabaseRecord db = ODatabaseRecordThreadLocal.INSTANCE.get();
    secondary = db.getLevel2Cache();

    profilerPrefix = "db." + db.getName() + ".cache.level1.";
    profilerMetadataPrefix = "db.*.cache.level1.";

    CACHE_HIT = profilerPrefix + "cache.found";
    CACHE_MISS = profilerPrefix + "cache.notFound";

    excludedCluster = db.getClusterIdByName(CLUSTER_INDEX_NAME);

    super.startup();
    setEnable(OGlobalConfiguration.CACHE_LEVEL1_ENABLED.getValueAsBoolean());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562088/fstmerge_var2_4057730237517304598

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562092/fstmerge_var1_4656237417323971662
public void updateRecord(final ORecordInternal<?> record) {
    if (isEnabled() && record.getIdentity().getClusterId() != excludedCluster && record.getIdentity().isValid()
        && !record.getRecordVersion().isTombstone()) {
      underlying.lock(record.getIdentity());
      try {
        if (underlying.get(record.getIdentity()) != record)
          underlying.put(record);
      } finally {
        underlying.unlock(record.getIdentity());
      }
    }

    if (record.getIdentity().getClusterId() != excludedCluster)
      secondary.updateRecord(record);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562092/fstmerge_base_4398819441616042438
public void updateRecord(final ORecordInternal<?> record) {
    if (isEnabled() && record.getIdentity().getClusterId() != excludedCluster && record.getIdentity().isValid()
        && !record.getRecordVersion().isTombstone()) {
      underlying.lock(record.getIdentity());
      try {
        if (underlying.get(record.getIdentity()) != record)
          underlying.put(record);
      } finally {
        underlying.unlock(record.getIdentity());
      }
    }

    if (record.getIdentity().getClusterId() != excludedCluster)
      secondary.updateRecord(record);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562092/fstmerge_var2_3209214811894693248

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562097/fstmerge_var1_913702020930649521
public ORecordInternal<?> findRecord(final ORID rid) {
    if (!isEnabled()) {
      if (rid.getClusterId() != excludedCluster)
        return secondary.retrieveRecord(rid);
      else
        return null;
    }
    // DELEGATE TO THE 2nd LEVEL CACHE

    ORecordInternal<?> record;
    underlying.lock(rid);
    try {
      record = underlying.get(rid);

      if (record == null) {
        // DELEGATE TO THE 2nd LEVEL CACHE
        record = secondary.retrieveRecord(rid);

        if (record != null)
          // STORE IT LOCALLY
          underlying.put(record);
      }
    } finally {
      underlying.unlock(rid);
    }

    if (record != null)
      Orient.instance().getProfiler().updateCounter(CACHE_HIT, "Record found in Level1 Cache", 1L, "db.*.cache.level1.cache.found");
    else
      Orient.instance().getProfiler()
          .updateCounter(CACHE_MISS, "Record not found in Level1 Cache", 1L, "db.*.cache.level1.cache.notFound");

    return record;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562097/fstmerge_base_1514027870697379631
public ORecordInternal<?> findRecord(final ORID rid) {
    if (!isEnabled()) {
      if (rid.getClusterId() != excludedCluster)
        return secondary.retrieveRecord(rid);
      else
        return null;
    }
    // DELEGATE TO THE 2nd LEVEL CACHE

    ORecordInternal<?> record;
    underlying.lock(rid);
    try {
      record = underlying.get(rid);

      if (record == null) {
        // DELEGATE TO THE 2nd LEVEL CACHE
        record = secondary.retrieveRecord(rid);

        if (record != null)
          // STORE IT LOCALLY
          underlying.put(record);
      }
    } finally {
      underlying.unlock(rid);
    }

    if (record != null)
      Orient.instance().getProfiler().updateCounter(CACHE_HIT, "Record found in Level1 Cache", 1L, "db.*.cache.level1.cache.found");
    else
      Orient.instance().getProfiler()
          .updateCounter(CACHE_MISS, "Record not found in Level1 Cache", 1L, "db.*.cache.level1.cache.notFound");

    return record;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562097/fstmerge_var2_5765887128253399497

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562101/fstmerge_var1_4786088790447335598
public void deleteRecord(final ORID rid) {
    super.deleteRecord(rid);
    secondary.freeRecord(rid);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562101/fstmerge_base_2747942993040106899
public void deleteRecord(final ORID rid) {
    super.deleteRecord(rid);
    secondary.freeRecord(rid);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562101/fstmerge_var2_482610403133386272

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562105/fstmerge_var1_3346028698270494552
public void shutdown() {
    super.shutdown();
    secondary = null;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562105/fstmerge_base_7107453219741287323
public void shutdown() {
    super.shutdown();
    secondary = null;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562105/fstmerge_var2_9107541195790376888

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562109/fstmerge_var1_4147044483527289492
@Override
  public void clear() {
    moveRecordsToSecondaryCache();
    super.clear();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562109/fstmerge_base_8316267562225965629
@Override
  public void clear() {
    moveRecordsToSecondaryCache();
    super.clear();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562109/fstmerge_var2_654991627180037062

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562113/fstmerge_var1_1788016976838475883
private void moveRecordsToSecondaryCache() {
    if (secondary == null)
      return;

    for (ORID rid : underlying.keys())
      secondary.updateRecord(underlying.get(rid));
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562113/fstmerge_base_3296492916444659064
private void moveRecordsToSecondaryCache() {
    if (secondary == null)
      return;

    for (ORID rid : underlying.keys())
      secondary.updateRecord(underlying.get(rid));
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562113/fstmerge_var2_4701878474370838853

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562117/fstmerge_var1_4491235105431427573
public void invalidate() {
    underlying.clear();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562117/fstmerge_base_3864212658960230615
public void invalidate() {
    underlying.clear();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562117/fstmerge_var2_5830710694513778188

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562121/fstmerge_var1_1499232430119209855
@Override
  public String toString() {
    return "DB level1 cache records = " + getSize() + ", maxSize= " + getMaxSize();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562121/fstmerge_base_2727700182372870566
@Override
  public String toString() {
    return "DB level1 cache records = " + getSize() + ", maxSize= " + getMaxSize();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562121/fstmerge_var2_7977561832468000061

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel1RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562125/fstmerge_var1_3273423172362530266
public ODefaultCache(final String iName, final int initialLimit) {
    super(new OLinkedHashMapCache(initialLimit > 0 ? initialLimit : DEFAULT_LIMIT, 0.75f, initialLimit));
    limit = initialLimit;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562125/fstmerge_base_1223203230938907881
public ODefaultCache(final String iName, final int initialLimit) {
    super(new OLinkedHashMapCache(initialLimit > 0 ? initialLimit : DEFAULT_LIMIT, 0.75f, initialLimit));
    limit = initialLimit;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562125/fstmerge_var2_7683341946545639040

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562129/fstmerge_var1_2353733709345898853
@Override
  public void startup() {
    lowMemoryListener = Orient.instance().getMemoryWatchDog().addListener(new OLowMemoryListener());
    super.startup();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562129/fstmerge_base_1369782203618939549
@Override
  public void startup() {
    lowMemoryListener = Orient.instance().getMemoryWatchDog().addListener(new OLowMemoryListener());
    super.startup();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562129/fstmerge_var2_3225972424418542705

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562133/fstmerge_var1_3351573963705152914
@Override
  public void shutdown() {
    Orient.instance().getMemoryWatchDog().removeListener(lowMemoryListener);
    super.shutdown();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562133/fstmerge_base_5808065918794185274
@Override
  public void shutdown() {
    Orient.instance().getMemoryWatchDog().removeListener(lowMemoryListener);
    super.shutdown();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562133/fstmerge_var2_4398522286418385990

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562137/fstmerge_var1_6690363382957497269
private void removeEldest(final int threshold) {
    lock.acquireExclusiveLock();
    try {
      cache.removeEldest(threshold);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562137/fstmerge_base_8796360560757746999
private void removeEldest(final int threshold) {
    lock.acquireExclusiveLock();
    try {
      cache.removeEldest(threshold);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562137/fstmerge_var2_7319194092855658922

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562142/fstmerge_var1_7967684006669492991
@Override
  public int limit() {
    return limit;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562142/fstmerge_base_1267663183409184768
@Override
  public int limit() {
    return limit;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562142/fstmerge_var2_1353241218182360671

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562146/fstmerge_var1_504207577069006617
@Override
  public ORecordInternal<?> get(final ORID id) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.get(id);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562146/fstmerge_base_3817141473070845017
@Override
  public ORecordInternal<?> get(final ORID id) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.get(id);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562146/fstmerge_var2_502333291944161745

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562150/fstmerge_var1_6468305351912328795
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.put(record.getIdentity(), record);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562150/fstmerge_base_517647370896761684
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.put(record.getIdentity(), record);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562150/fstmerge_var2_1018297990022705172

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562154/fstmerge_var1_4891398275971257048
@Override
  public ORecordInternal<?> remove(final ORID id) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.remove(id);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562154/fstmerge_base_1240556992194111560
@Override
  public ORecordInternal<?> remove(final ORID id) {
    if (!isEnabled())
      return null;

    lock.acquireExclusiveLock();
    try {
      return cache.remove(id);
    } finally {
      lock.releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562154/fstmerge_var2_5752006765983126218

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @SuppressWarnings("serial")
  static final ##FSTMerge## @SuppressWarnings("serial")
  static final ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562159/fstmerge_var1_6734101608001177300
public OLinkedHashMapCache(final int initialCapacity, final float loadFactor, final int limit) {
      super(initialCapacity, loadFactor, limit);
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562159/fstmerge_base_636619823952747160
public OLinkedHashMapCache(final int initialCapacity, final float loadFactor, final int limit) {
      super(initialCapacity, loadFactor, limit);
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562159/fstmerge_var2_6525522922744315328

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562163/fstmerge_var1_7268502587167275377
void removeEldest(final int amount) {
      final ORID[] victims = new ORID[amount];

      final int skip = size() - amount;
      int skipped = 0;
      int selected = 0;

      for (Map.Entry<ORID, ORecordInternal<?>> entry : entrySet()) {
        if (entry.getValue().isDirty() || entry.getValue().isPinned() == Boolean.TRUE || skipped++ < skip)
          continue;
        victims[selected++] = entry.getKey();
      }

      for (ORID id : victims)
        remove(id);
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562163/fstmerge_base_2106831033901652913
void removeEldest(final int amount) {
      final ORID[] victims = new ORID[amount];

      final int skip = size() - amount;
      int skipped = 0;
      int selected = 0;

      for (Map.Entry<ORID, ORecordInternal<?>> entry : entrySet()) {
        if (entry.getValue().isDirty() || entry.getValue().isPinned() == Boolean.TRUE || skipped++ < skip)
          continue;
        victims[selected++] = entry.getKey();
      }

      for (ORID id : victims)
        remove(id);
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562163/fstmerge_var2_9087275388782721856

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562167/fstmerge_var1_3342193862057800631
public void lowMemory(final long freeMemory, final long freeMemoryPercentage) {
      try {
        final int oldSize = size();
        if (oldSize == 0)
          return;

        if (freeMemoryPercentage < 10) {
          OLogManager.instance()
              .warn(this, "Low free heap memory (%d%%): clearing %d cached records", freeMemoryPercentage, size());
          removeEldest(oldSize);
        } else {
          final int newSize = (int) (oldSize * 0.9f);
          removeEldest(oldSize - newSize);
          OLogManager.instance().warn(this, "Low free heap memory (%d%%): reducing cached records number from %d to %d",
              freeMemoryPercentage, oldSize, newSize);
        }
      } catch (Exception e) {
        OLogManager.instance().error(this, "Error occurred during default cache cleanup", e);
      }
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562167/fstmerge_base_8563403438538097554
public void lowMemory(final long freeMemory, final long freeMemoryPercentage) {
      try {
        final int oldSize = size();
        if (oldSize == 0)
          return;

        if (freeMemoryPercentage < 10) {
          OLogManager.instance().warn(this, "Low free heap memory (%d%%): clearing %d cached records", freeMemoryPercentage, size());
          removeEldest(oldSize);
        } else {
          final int newSize = (int) (oldSize * 0.9f);
          removeEldest(oldSize - newSize);
          OLogManager.instance().warn(this, "Low free heap memory (%d%%): reducing cached records number from %d to %d",
              freeMemoryPercentage, oldSize, newSize);
        }
      } catch (Exception e) {
        OLogManager.instance().error(this, "Error occurred during default cache cleanup", e);
      }
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562167/fstmerge_var2_4768470310780059421

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/ODefaultCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562171/fstmerge_var1_2313603975404381013
public OLevel2RecordCache(final OStorage storage, OCacheLevelTwoLocator cacheLocator) {
    super(cacheLocator.primaryCache(storage.getName()));

    profilerPrefix = "db." + storage.getName() + ".cache.level2.";
    profilerMetadataPrefix = "db.*.cache.level2.";

    CACHE_HIT = profilerPrefix + "cache.found";
    CACHE_MISS = profilerPrefix + "cache.notFound";

    strategy = STRATEGY.values()[(CACHE_LEVEL2_STRATEGY.getValueAsInteger())];
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562171/fstmerge_base_2462827206724382035
public OLevel2RecordCache(final OStorage storage, OCacheLevelTwoLocator cacheLocator) {
    super(cacheLocator.primaryCache(storage.getName()));

    profilerPrefix = "db." + storage.getName() + ".cache.level2.";
    profilerMetadataPrefix = "db.*.cache.level2.";

    CACHE_HIT = profilerPrefix + "cache.found";
    CACHE_MISS = profilerPrefix + "cache.notFound";

    strategy = STRATEGY.values()[(CACHE_LEVEL2_STRATEGY.getValueAsInteger())];
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562171/fstmerge_var2_6869659781694718815

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562175/fstmerge_var1_6159010020501506549
@Override
  public void startup() {
    super.startup();
    setEnable(OGlobalConfiguration.CACHE_LEVEL2_ENABLED.getValueAsBoolean());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562175/fstmerge_base_4875829795436798256
@Override
  public void startup() {
    super.startup();
    setEnable(OGlobalConfiguration.CACHE_LEVEL2_ENABLED.getValueAsBoolean());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562175/fstmerge_var2_4995413546515226250

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562179/fstmerge_var1_1875451515294141524
public void addPinnedCluster(int clusterId) {
    pinnedClusters.add(clusterId);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562179/fstmerge_base_7499711282125853399
public void addPinnedCluster(int clusterId) {
    pinnedClusters.add(clusterId);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562179/fstmerge_var2_7480601476299751901

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562182/fstmerge_var1_3732732661192060150
public void removePinnedCluster(int clusterId) {
    pinnedClusters.remove(clusterId);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562182/fstmerge_base_7163811664583027431
public void removePinnedCluster(int clusterId) {
    pinnedClusters.remove(clusterId);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562182/fstmerge_var2_2964709921178004278

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562185/fstmerge_var1_1620677268959842466
public void updateRecord(final ORecordInternal<?> fresh) {
    if (!isEnabled() || fresh == null || fresh.isDirty() || fresh.getIdentity().isNew() || !fresh.getIdentity().isValid()
        || fresh.getIdentity().getClusterId() == excludedCluster || fresh.getRecordVersion().isTombstone())
      return;

    if (pinnedClusters.contains(fresh.getIdentity().getClusterId()))
      fresh.pin();

    if (fresh.isPinned() == null || fresh.isPinned()) {
      underlying.lock(fresh.getIdentity());
      try {
        final ORecordInternal<?> current = underlying.get(fresh.getIdentity());
        if (current != null && current.getRecordVersion().compareTo(fresh.getRecordVersion()) >= 0)
          return;

        if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && !ODatabaseRecordThreadLocal.INSTANCE.get().isClosed())
          // CACHE A COPY
          underlying.put((ORecordInternal<?>) fresh.flatCopy());
        else {
          // CACHE THE DETACHED RECORD
          fresh.detach();
          underlying.put(fresh);
        }
      } finally {
        underlying.unlock(fresh.getIdentity());
      }
    } else
      underlying.remove(fresh.getIdentity());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562185/fstmerge_base_4199947456532936291
public void updateRecord(final ORecordInternal<?> fresh) {
    if (!isEnabled() || fresh == null || fresh.isDirty() || fresh.getIdentity().isNew() || !fresh.getIdentity().isValid()
        || fresh.getIdentity().getClusterId() == excludedCluster || fresh.getRecordVersion().isTombstone())
      return;

    if (pinnedClusters.contains(fresh.getIdentity().getClusterId()))
      fresh.pin();

    if (fresh.isPinned() == null || fresh.isPinned()) {
      underlying.lock(fresh.getIdentity());
      try {
        final ORecordInternal<?> current = underlying.get(fresh.getIdentity());
        if (current != null && current.getRecordVersion().compareTo(fresh.getRecordVersion()) >= 0)
          return;

        if (ODatabaseRecordThreadLocal.INSTANCE.isDefined() && !ODatabaseRecordThreadLocal.INSTANCE.get().isClosed())
          // CACHE A COPY
          underlying.put((ORecordInternal<?>) fresh.flatCopy());
        else {
          // CACHE THE DETACHED RECORD
          fresh.detach();
          underlying.put(fresh);
        }
      } finally {
        underlying.unlock(fresh.getIdentity());
      }
    } else
      underlying.remove(fresh.getIdentity());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562185/fstmerge_var2_6849715954717832514

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562189/fstmerge_var1_8507837025992083039
protected ORecordInternal<?> retrieveRecord(final ORID iRID) {
    if (!isEnabled() || iRID.getClusterId() == excludedCluster)
      return null;

    ORecordInternal<?> record;
    underlying.lock(iRID);
    try {
      record = underlying.remove(iRID);

      if (record == null || record.isDirty()) {
        Orient.instance().getProfiler()
            .updateCounter(CACHE_MISS, "Record not found in Level2 Cache", +1, "db.*.cache.level2.cache.notFound");
        return null;
      }

      if (strategy == STRATEGY.COPY_RECORD) {
        final ORecordInternal<?> resident = OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean() ? (ORecordInternal<?>) record
            .flatCopy() : record;
        // PUT BACK A COPY OR ThE ORIGINAL IF NOT MULTI-THREADS (THIS UPDATE ALSO THE LRU)
        underlying.put(resident);
      }

    } finally {
      underlying.unlock(iRID);
    }

    Orient.instance().getProfiler().updateCounter(CACHE_HIT, "Record found in Level2 Cache", +1, "db.*.cache.level2.cache.found");
    return record;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562189/fstmerge_base_4790459775234109549
protected ORecordInternal<?> retrieveRecord(final ORID iRID) {
    if (!isEnabled() || iRID.getClusterId() == excludedCluster)
      return null;

    ORecordInternal<?> record;
    underlying.lock(iRID);
    try {
      record = underlying.remove(iRID);

      if (record == null || record.isDirty()) {
        Orient.instance().getProfiler()
            .updateCounter(CACHE_MISS, "Record not found in Level2 Cache", +1, "db.*.cache.level2.cache.notFound");
        return null;
      }

      if (strategy == STRATEGY.COPY_RECORD) {
        final ORecordInternal<?> resident = OGlobalConfiguration.ENVIRONMENT_CONCURRENT.getValueAsBoolean() ? (ORecordInternal<?>) record
            .flatCopy() : record;
        // PUT BACK A COPY OR ThE ORIGINAL IF NOT MULTI-THREADS (THIS UPDATE ALSO THE LRU)
        underlying.put(resident);
      }

    } finally {
      underlying.unlock(iRID);
    }

    Orient.instance().getProfiler().updateCounter(CACHE_HIT, "Record found in Level2 Cache", +1, "db.*.cache.level2.cache.found");
    return record;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562189/fstmerge_var2_8678401226105541058

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562192/fstmerge_var1_4385959715085631135
public void setStrategy(final STRATEGY newStrategy) {
    strategy = newStrategy;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562192/fstmerge_base_896640551772275845
public void setStrategy(final STRATEGY newStrategy) {
    strategy = newStrategy;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562192/fstmerge_var2_8388535091068210900

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170562194/fstmerge_var1_9046389585660361767
@Override
  public String toString() {
    return "STORAGE level2 cache records = " + getSize() + ", maxSize = " + getMaxSize();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170562194/fstmerge_base_4465837725596865901
@Override
  public String toString() {
    return "STORAGE level2 cache records = " + getSize() + ", maxSize = " + getMaxSize();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170562194/fstmerge_var2_2984345037595177964

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/cache/OLevel2RecordCache.java
Conflict type: LineBasedMCFd
Conflict body: 
public boolean dropCluster(final int clusterId, final boolean iTruncate) {
    lock.acquireExclusiveLock();
    try {

      if (clusterId < 0 || clusterId >= clusters.length)
        throw new IllegalArgumentException("Cluster id '" + clusterId + "' is outside the of range of configured clusters (0-"
            + (clusters.length - 1) + ") in database '" + name + "'");

      final OCluster cluster = clusters[clusterId];
      if (cluster == null)
        return false;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170563039/fstmerge_var1_3504303013632068542
      getLevel2Cache().freeCluster(clusterId);

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170563039/fstmerge_base_3200573485653407783
      getLevel2Cache().freeCluster(iClusterId);

=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170563039/fstmerge_var2_4445626419473741254
      if (iTruncate)
        cluster.truncate();
      cluster.delete();

      clusterMap.remove(cluster.getName());
      clusters[clusterId] = null;

      // UPDATE CONFIGURATION
      configuration.dropCluster(clusterId);

      return true;
    } catch (Exception e) {
      throw new OStorageException("Error while removing cluster '" + clusterId + "'", e);

    } finally {
      lock.releaseExclusiveLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OStorageLocal.java
Conflict type: LineBasedMCFd
Conflict body: 
public boolean dropCluster(final int clusterId, final boolean iTruncate) {
    lock.acquireExclusiveLock();
    try {

      if (clusterId < 0 || clusterId >= clusters.size())
        throw new IllegalArgumentException("Cluster id '" + clusterId + "' is outside the of range of configured clusters (0-"
            + (clusters.size() - 1) + ") in database '" + name + "'");

      final OCluster cluster = clusters.get(clusterId);
      if (cluster == null)
        return false;

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170564360/fstmerge_var1_7220284155718631663
      getLevel2Cache().freeCluster(clusterId);

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170564360/fstmerge_base_2497270502410844251
      getLevel2Cache().freeCluster(iClusterId);

=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170564360/fstmerge_var2_5777293539338954197
      if (iTruncate)
        cluster.truncate();
      cluster.delete();

      dirtyFlag.makeDirty();
      clusterMap.remove(cluster.getName().toLowerCase());
      clusters.set(clusterId, null);

      // UPDATE CONFIGURATION
      configuration.dropCluster(clusterId);

      makeFullCheckpoint();
      return true;
    } catch (Exception e) {
      throw new OStorageException("Error while removing cluster '" + clusterId + "'", e);

    } finally {
      lock.releaseExclusiveLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
public <RET extends ORecordInternal<?>> RET executeReadRecord(final ORecordId rid, ORecordInternal<?> iRecord,
      final String iFetchPlan, final boolean iIgnoreCache, final boolean loadTombstones,
      final OStorage.LOCKING_STRATEGY iLockingStrategy) {
    checkOpeness();

    try {
      checkSecurity(ODatabaseSecurityResources.CLUSTER, ORole.PERMISSION_READ, getClusterNameById(rid.getClusterId()));

      // SEARCH IN LOCAL TX
      ORecordInternal<?> record = getTransaction().getRecord(rid);
      if (record == OTransactionRealAbstract.DELETED_RECORD)
        // DELETED IN TX
        return null;

      if (record == null && !iIgnoreCache)
        // SEARCH INTO THE CACHE
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170570693/fstmerge_var1_8216675274893583657
        record = getLevel1Cache().findRecord(rid);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170570693/fstmerge_base_5153458055971645450
        record = getLevel1Cache().findRecord(iRid);
=======
        record = getLocalCache().findRecord(iRid);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170570693/fstmerge_var2_4958597439584604863

      if (record != null) {
        if (iRecord != null) {
          iRecord.fromStream(record.toStream());
          iRecord.getRecordVersion().copyFrom(record.getRecordVersion());
          record = iRecord;
        }

        OFetchHelper.checkFetchPlanValid(iFetchPlan);
        if (callbackHooks(TYPE.BEFORE_READ, record) == ORecordHook.RESULT.SKIP)
          return null;

        if (record.getInternalStatus() == ORecordElement.STATUS.NOT_LOADED)
          record.reload();

        if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_SHARED_LOCK)
          record.lock(false);
        else if (iLockingStrategy == OStorage.LOCKING_STRATEGY.KEEP_EXCLUSIVE_LOCK)
          record.lock(true);

        callbackHooks(TYPE.AFTER_READ, record);
        return (RET) record;
      }

      final ORawBuffer recordBuffer = underlying.read(rid, iFetchPlan, iIgnoreCache, loadTombstones, iLockingStrategy).getResult();
      if (recordBuffer == null)
        return null;

      if (iRecord == null || iRecord.getRecordType() != recordBuffer.recordType)
        // NO SAME RECORD TYPE: CAN'T REUSE OLD ONE BUT CREATE A NEW ONE FOR IT
        iRecord = Orient.instance().getRecordFactoryManager().newInstance(recordBuffer.recordType);

      iRecord.fill(rid, recordBuffer.version, recordBuffer.buffer, false);

      if (iRecord.getRecordVersion().isTombstone())
        return (RET) iRecord;

      if (callbackHooks(TYPE.BEFORE_READ, iRecord) == RESULT.SKIP)
        return null;

      iRecord.fromStream(recordBuffer.buffer);

      callbackHooks(TYPE.AFTER_READ, iRecord);

      if (!iIgnoreCache)
        getLocalCache().updateRecord(iRecord);

      return (RET) iRecord;
    } catch (OException e) {
      // RE-THROW THE EXCEPTION
      throw e;

    } catch (Exception e) {
      // WRAP IT AS ODATABASE EXCEPTION
      throw new ODatabaseException("Error on retrieving record " + rid, e);
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/db/record/ODatabaseRecordAbstract.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private OUser                                       currentUser; ##FSTMerge## ##FSTMerge## private OUser                       currentUser;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/intent/OIntentMassiveInsert.java
Conflict type: LineBasedMCFd
Conflict body: 
public void begin(final ODatabaseRaw iDatabase, final Object[] iArgs) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170576821/fstmerge_var1_5423757375086435883
    // DISABLE CHECK OF SECURITY
    currentUser = iDatabase.getDatabaseOwner().getUser();
    iDatabase.getDatabaseOwner().setUser(null);

    previousLevel1CacheEnabled = iDatabase.getDatabaseOwner().getLevel1Cache().isEnabled();
    iDatabase.getDatabaseOwner().getLevel1Cache().setEnable(false);
    previousLevel2CacheEnabled = iDatabase.getDatabaseOwner().getLevel2Cache().isEnabled();
    iDatabase.getDatabaseOwner().getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170576821/fstmerge_base_4088491272080062422
    previousLevel1CacheEnabled = iDatabase.getDatabaseOwner().getLevel1Cache().isEnabled();
    iDatabase.getDatabaseOwner().getLevel1Cache().setEnable(false);
    previousLevel2CacheEnabled = iDatabase.getDatabaseOwner().getLevel2Cache().isEnabled();
    iDatabase.getDatabaseOwner().getLevel2Cache().setEnable(false);
=======
    // DISABLE CHECK OF SECURITY
    currentUser = iDatabase.getDatabaseOwner().getUser();
    iDatabase.getDatabaseOwner().setUser(null);

    previousLocalCacheEnabled = iDatabase.getDatabaseOwner().getLocalCache().isEnabled();
    iDatabase.getDatabaseOwner().getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170576821/fstmerge_var2_7666404382409676609

    ODatabaseComplex<?> ownerDb = iDatabase.getDatabaseOwner();

    if (ownerDb instanceof ODatabaseRecord) {
      previousRetainRecords = ((ODatabaseRecord) ownerDb).isRetainRecords();
      ((ODatabaseRecord) ownerDb).setRetainRecords(false);
    }

    while (ownerDb.getDatabaseOwner() != ownerDb)
      ownerDb = ownerDb.getDatabaseOwner();

    if (ownerDb instanceof ODatabaseObject) {
      previousRetainObjects = ((ODatabaseObject) ownerDb).isRetainObjects();
      ((ODatabaseObject) ownerDb).setRetainObjects(false);
    }

    // REMOVE ALL HOOKS BUT INDEX
    removedHooks = new HashMap<ORecordHook, ORecordHook.HOOK_POSITION>();
    HashMap<ORecordHook, ORecordHook.HOOK_POSITION> hooks = new HashMap<ORecordHook, ORecordHook.HOOK_POSITION>(ownerDb.getHooks());
    for (Map.Entry<ORecordHook, ORecordHook.HOOK_POSITION> hook : hooks.entrySet()) {
      if (!(hook.getKey() instanceof OClassIndexManager)) {
        removedHooks.put(hook.getKey(), hook.getValue());
        ownerDb.unregisterHook(hook.getKey());
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/intent/OIntentMassiveInsert.java
Conflict type: LineBasedMCFd
Conflict body: 
public void end(final ODatabaseRaw iDatabase) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170576824/fstmerge_var1_1822554508316817135
    if (currentUser != null)
      // RE-ENABLE CHECK OF SECURITY
      iDatabase.getDatabaseOwner().setUser(currentUser);

    iDatabase.getDatabaseOwner().getLevel1Cache().setEnable(previousLevel1CacheEnabled);
    iDatabase.getDatabaseOwner().getLevel2Cache().setEnable(previousLevel2CacheEnabled);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170576824/fstmerge_base_7233625039012194573
    iDatabase.getDatabaseOwner().getLevel1Cache().setEnable(previousLevel1CacheEnabled);
    iDatabase.getDatabaseOwner().getLevel2Cache().setEnable(previousLevel2CacheEnabled);
=======
    if (currentUser != null)
      // RE-ENABLE CHECK OF SECURITY
      iDatabase.getDatabaseOwner().setUser(currentUser);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170576824/fstmerge_var2_5438552855270614394

    iDatabase.getDatabaseOwner().getLocalCache().setEnable(previousLocalCacheEnabled);
    ODatabaseComplex<?> ownerDb = iDatabase.getDatabaseOwner();

    if (ownerDb instanceof ODatabaseRecord)
      ((ODatabaseRecord) ownerDb).setRetainRecords(previousRetainRecords);

    while (ownerDb.getDatabaseOwner() != ownerDb)
      ownerDb = ownerDb.getDatabaseOwner();

    if (ownerDb instanceof ODatabaseObject)
      ((ODatabaseObject) ownerDb).setRetainObjects(previousRetainObjects);

    if (removedHooks != null) {
      // RESTORE ALL REMOVED HOOKS
      for (Map.Entry<ORecordHook, ORecordHook.HOOK_POSITION> hook : removedHooks.entrySet()) {
        ownerDb.registerHook(hook.getKey(), hook.getValue());
      }
    }

  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/main/java/com/orientechnologies/orient/core/intent/OIntentMassiveInsert.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @Test
public ##FSTMerge## @Test
public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589467/fstmerge_var1_5743826056313618204
public void removesGivenAmountOfRecords() {
    // Given filled cache backend
    ODefaultCache.OLinkedHashMapCache sut = filledCacheBackend();
    int originalSize = sut.size();

    // When asked to remove eldest items
    int amount = 10;
    sut.removeEldest(amount);

    // Then new cache size should be of original size minus amount of deleted items
    assertEquals(sut.size(), originalSize - amount);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589467/fstmerge_base_7923973735523858410
public void removesGivenAmountOfRecords() {
    // Given filled cache backend
    ODefaultCache.OLinkedHashMapCache sut = filledCacheBackend();
    int originalSize = sut.size();

    // When asked to remove eldest items
    int amount = 10;
    sut.removeEldest(amount);

    // Then new cache size should be of original size minus amount of deleted items
    assertEquals(sut.size(), originalSize - amount);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589467/fstmerge_var2_1985817272059903476

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589471/fstmerge_var1_7148070899993169206
public void doesNotTakeDirtyRecordsIntoAccountWhenSkips() {
    // Given filled cache backend
    // With some dirty records in it
    ODefaultCache.OLinkedHashMapCache sut = filledCacheBackendWithSomeDirtyRecords();
    int originalSize = sut.size();

    // When asked to remove eldest items
    int amount = 10;
    sut.removeEldest(amount);

    // Then removes less then asked
    assertTrue(amount > originalSize - sut.size());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589471/fstmerge_base_2653861498626940116
public void doesNotTakeDirtyRecordsIntoAccountWhenSkips() {
    // Given filled cache backend
    // With some dirty records in it
    ODefaultCache.OLinkedHashMapCache sut = filledCacheBackendWithSomeDirtyRecords();
    int originalSize = sut.size();

    // When asked to remove eldest items
    int amount = 10;
    sut.removeEldest(amount);

    // Then removes less then asked
    assertTrue(amount > originalSize - sut.size());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589471/fstmerge_var2_335859534951135702

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589474/fstmerge_var1_4396308593392073599
public void clearsWholeCacheIfMemoryCriticallyLow() {
    // Given running filled cache
    ODefaultCache sut = runningFilledCache();

    // When watchdog listener invoked with critically low memory
    int freeMemoryPercentageBelowCriticalPoint = 8;
    sut.lowMemoryListener.lowMemory(1, freeMemoryPercentageBelowCriticalPoint);

    // Then whole cache cleared
    assertEquals(sut.size(), 0, "Cache has entries in it yet");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589474/fstmerge_base_2596028616834268439
public void clearsWholeCacheIfMemoryCriticallyLow() {
    // Given running filled cache
    ODefaultCache sut = runningFilledCache();

    // When watchdog listener invoked with critically low memory
    int freeMemoryPercentageBelowCriticalPoint = 8;
    sut.lowMemoryListener.lowMemory(1, freeMemoryPercentageBelowCriticalPoint);

    // Then whole cache cleared
    assertEquals(sut.size(), 0, "Cache has entries in it yet");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589474/fstmerge_var2_2964777086954689406

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589476/fstmerge_var1_6055973874435462183
public void removesPartOfEntriesInCaseOfLowMemory() {
    // Given running filled cache
    ODefaultCache sut = runningFilledCache();
    int originalSize = sut.size();

    // When watchdog listener invoked with critically low memory
    int freeMemoryPercentageBelowCriticalPoint = 20;
    sut.lowMemoryListener.lowMemory(1, freeMemoryPercentageBelowCriticalPoint);

    // Then whole cache cleared
    assertTrue(sut.size() < originalSize, "Cache was not cleaned");
    assertTrue(sut.size() > 0, "Cache was cleared wholly");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589476/fstmerge_base_6762386676474202193
public void removesPartOfEntriesInCaseOfLowMemory() {
    // Given running filled cache
    ODefaultCache sut = runningFilledCache();
    int originalSize = sut.size();

    // When watchdog listener invoked with critically low memory
    int freeMemoryPercentageBelowCriticalPoint = 20;
    sut.lowMemoryListener.lowMemory(1, freeMemoryPercentageBelowCriticalPoint);

    // Then whole cache cleared
    assertTrue(sut.size() < originalSize, "Cache was not cleaned");
    assertTrue(sut.size() > 0, "Cache was cleared wholly");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589476/fstmerge_var2_2800025289592037326

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589479/fstmerge_var1_1982772718177465848
private ODefaultCache.OLinkedHashMapCache filledCacheBackend() {
    ODefaultCache.OLinkedHashMapCache cache = new ODefaultCache.OLinkedHashMapCache(100, 0.75f, 100);
    for (int i = 100; i > 0; i--) {
      ODocument entry = new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i)));
      cache.put(entry.getIdentity(), entry);
    }
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589479/fstmerge_base_1286090060854912161
private ODefaultCache.OLinkedHashMapCache filledCacheBackend() {
    ODefaultCache.OLinkedHashMapCache cache = new ODefaultCache.OLinkedHashMapCache(100, 0.75f, 100);
    for (int i = 100; i > 0; i--) {
      ODocument entry = new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i)));
      cache.put(entry.getIdentity(), entry);
    }
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589479/fstmerge_var2_4868886909786654661

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589482/fstmerge_var1_5627146973217789746
private ODefaultCache.OLinkedHashMapCache filledCacheBackendWithSomeDirtyRecords() {
    ODefaultCache.OLinkedHashMapCache cache = filledCacheBackend();
    int i = 0;
    for (Map.Entry<ORID, ORecordInternal<?>> entry : cache.entrySet()) {
      if (i++ % 3 == 0)
        entry.getValue().setDirty();
    }
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589482/fstmerge_base_7311029842644316341
private ODefaultCache.OLinkedHashMapCache filledCacheBackendWithSomeDirtyRecords() {
    ODefaultCache.OLinkedHashMapCache cache = filledCacheBackend();
    int i = 0;
    for (Map.Entry<ORID, ORecordInternal<?>> entry : cache.entrySet()) {
      if (i++ % 3 == 0)
        entry.getValue().setDirty();
    }
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589482/fstmerge_var2_53905081946435542

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589485/fstmerge_var1_7392327679333021618
private ODefaultCache runningFilledCache() {
    ODefaultCache cache = new ODefaultCache(null, 100);
    cache.startup();
    for (int i = 100; i > 0; i--)
      cache.put(new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i))));
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589485/fstmerge_base_4538956084302872610
private ODefaultCache runningFilledCache() {
    ODefaultCache cache = new ODefaultCache(null, 100);
    cache.startup();
    for (int i = 100; i > 0; i--)
      cache.put(new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i))));
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589485/fstmerge_var2_5311185416166915844

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheCleanUpTest.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @Test
public ##FSTMerge## @Test
public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589488/fstmerge_var1_8172346996173921771
public void enabledAfterStartup() {
    // Given cache created
    // And not started
    // And not enabled
    OCache sut = newCache();

    // When started
    sut.startup();

    // Then it should be enabled
    assertTrue(sut.isEnabled());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589488/fstmerge_base_2437926506306243532
public void enabledAfterStartup() {
    // Given cache created
    // And not started
    // And not enabled
    OCache sut = newCache();

    // When started
    sut.startup();

    // Then it should be enabled
    assertTrue(sut.isEnabled());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589488/fstmerge_var2_1290303978008355118

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589491/fstmerge_var1_2592020052136390627
public void disabledAfterShutdown() {
    // Given running cache
    OCache sut = runningCache();

    // When started
    sut.shutdown();

    // Then it should be disabled
    assertFalse(sut.isEnabled());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589491/fstmerge_base_7872997326153418333
public void disabledAfterShutdown() {
    // Given running cache
    OCache sut = runningCache();

    // When started
    sut.shutdown();

    // Then it should be disabled
    assertFalse(sut.isEnabled());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589491/fstmerge_var2_3757836304837344982

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589494/fstmerge_var1_3108309739745383826
public void disablesOnlyIfWasEnabled() {
    // Given enabled cache
    OCache sut = enabledCache();

    // When disabled more than once
    boolean disableConfirmed = sut.disable();
    boolean disableNotConfirmed = sut.disable();

    // Then should return confirmation of switching from enabled to disabled state for first time
    // And no confirmation on subsequent disables
    assertTrue(disableConfirmed);
    assertFalse(disableNotConfirmed);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589494/fstmerge_base_5968723554654163678
public void disablesOnlyIfWasEnabled() {
    // Given enabled cache
    OCache sut = enabledCache();

    // When disabled more than once
    boolean disableConfirmed = sut.disable();
    boolean disableNotConfirmed = sut.disable();

    // Then should return confirmation of switching from enabled to disabled state for first time
    // And no confirmation on subsequent disables
    assertTrue(disableConfirmed);
    assertFalse(disableNotConfirmed);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589494/fstmerge_var2_1989564149543487639

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589497/fstmerge_var1_6221330659563519810
public void enablesOnlyIfWasDisabled() {
    // Given disabled cache
    OCache sut = newCache();

    // When enabled more than once
    boolean enableConfirmed = sut.enable();
    boolean enableNotConfirmed = sut.enable();

    // Then should return confirmation of switching from disabled to enabled state for first time
    // And no confirmation on subsequent enables
    assertTrue(enableConfirmed);
    assertFalse(enableNotConfirmed);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589497/fstmerge_base_3986061194728093597
public void enablesOnlyIfWasDisabled() {
    // Given disabled cache
    OCache sut = newCache();

    // When enabled more than once
    boolean enableConfirmed = sut.enable();
    boolean enableNotConfirmed = sut.enable();

    // Then should return confirmation of switching from disabled to enabled state for first time
    // And no confirmation on subsequent enables
    assertTrue(enableConfirmed);
    assertFalse(enableNotConfirmed);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589497/fstmerge_var2_2234085435236202132

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589500/fstmerge_var1_1632073304815801811
public void doesNothingWhileDisabled() {
    // Given cache created
    // And not started
    // And not enabled
    OCache sut = new ODefaultCache(null, 1);

    // When any operation called on it
    ODocument record = new ODocument();
    ORID recordId = record.getIdentity();
    sut.put(record);
    ORecordInternal<?> recordGot = sut.get(recordId);
    int cacheSizeAfterPut = sut.size();
    ORecordInternal<?> recordRemoved = sut.remove(recordId);
    int cacheSizeAfterRemove = sut.size();

    // Then it has no effect on cache's state
    assertEquals(sut.isEnabled(), false, "Cache should be disabled at creation");
    assertEquals(recordGot, null, "Cache should return empty records while disabled");
    assertEquals(recordRemoved, null, "Cache should return empty records while disabled");
    assertEquals(cacheSizeAfterPut, 0, "Cache should ignore insert while disabled");
    assertEquals(cacheSizeAfterRemove, cacheSizeAfterPut, "Cache should ignore remove while disabled");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589500/fstmerge_base_8907202383002775000
public void doesNothingWhileDisabled() {
    // Given cache created
    // And not started
    // And not enabled
    OCache sut = new ODefaultCache(null, 1);

    // When any operation called on it
    ODocument record = new ODocument();
    ORID recordId = record.getIdentity();
    sut.put(record);
    ORecordInternal<?> recordGot = sut.get(recordId);
    int cacheSizeAfterPut = sut.size();
    ORecordInternal<?> recordRemoved = sut.remove(recordId);
    int cacheSizeAfterRemove = sut.size();

    // Then it has no effect on cache's state
    assertEquals(sut.isEnabled(), false, "Cache should be disabled at creation");
    assertEquals(recordGot, null, "Cache should return empty records while disabled");
    assertEquals(recordRemoved, null, "Cache should return empty records while disabled");
    assertEquals(cacheSizeAfterPut, 0, "Cache should ignore insert while disabled");
    assertEquals(cacheSizeAfterRemove, cacheSizeAfterPut, "Cache should ignore remove while disabled");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589500/fstmerge_var2_3774263801857517940

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589503/fstmerge_var1_6202891966015784158
public void hasZeroSizeAfterClear() {
    // Given enabled non-empty cache
    OCache sut = enabledNonEmptyCache();

    // When cleared
    sut.clear();

    // Then size of cache should be zero
    assertEquals(sut.size(), 0, "Cache was not cleaned up");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589503/fstmerge_base_5760229156597771569
public void hasZeroSizeAfterClear() {
    // Given enabled non-empty cache
    OCache sut = enabledNonEmptyCache();

    // When cleared
    sut.clear();

    // Then size of cache should be zero
    assertEquals(sut.size(), 0, "Cache was not cleaned up");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589503/fstmerge_var2_9033799354685420863

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589506/fstmerge_var1_8791106845263892420
public void providesAccessToAllKeysInCache() {
    // Given enabled non-empty cache
    OCache sut = enabledNonEmptyCache();

    // When asked for keys
    Collection<ORID> keys = sut.keys();

    // Then keys count should be same as size of cache
    // And records available for keys
    assertEquals(keys.size(), sut.size(), "Cache provided not all keys?");
    for (ORID key : keys) {
      assertNotNull(sut.get(key));
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589506/fstmerge_base_643508527674785326
public void providesAccessToAllKeysInCache() {
    // Given enabled non-empty cache
    OCache sut = enabledNonEmptyCache();

    // When asked for keys
    Collection<ORID> keys = sut.keys();

    // Then keys count should be same as size of cache
    // And records available for keys
    assertEquals(keys.size(), sut.size(), "Cache provided not all keys?");
    for (ORID key : keys) {
      assertNotNull(sut.get(key));
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589506/fstmerge_var2_4976006015527663849

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589509/fstmerge_var1_4036795851640888565
public void storesRecordsUsingTheirIdentity() {
    // Given an enabled cache
    OCache sut = enabledCache();

    // When new record put into
    ORecordId id = new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1));
    ODocument record = new ODocument(id);
    sut.put(record);

    // Then it can be retrieved later by it's id
    assertEquals(sut.get(id), record);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589509/fstmerge_base_8150019159973303492
public void storesRecordsUsingTheirIdentity() {
    // Given an enabled cache
    OCache sut = enabledCache();

    // When new record put into
    ORecordId id = new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1));
    ODocument record = new ODocument(id);
    sut.put(record);

    // Then it can be retrieved later by it's id
    assertEquals(sut.get(id), record);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589509/fstmerge_var2_6381710348066478948

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589512/fstmerge_var1_9003461071253059791
public void storesRecordsOnlyOnceForEveryIdentity() {
    // Given an enabled cache
    OCache sut = enabledCache();
    final int initialSize = sut.size();

    // When some records with same identity put in several times
    ODocument first = new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1)));
    ODocument last = new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1)));
    sut.put(first);
    sut.put(last);

    // Then cache ends up storing only one item
    assertEquals(sut.size(), initialSize + 1);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589512/fstmerge_base_8517655323164578487
public void storesRecordsOnlyOnceForEveryIdentity() {
    // Given an enabled cache
    OCache sut = enabledCache();
    final int initialSize = sut.size();

    // When some records with same identity put in several times
    ODocument first = new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1)));
    ODocument last = new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1)));
    sut.put(first);
    sut.put(last);

    // Then cache ends up storing only one item
    assertEquals(sut.size(), initialSize + 1);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589512/fstmerge_var2_2404055951119819025

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589516/fstmerge_var1_3106716451702180123
public void removesOnlyOnce() {
    // Given an enabled cache with records in it
    OCache sut = enabledCache();
    ORecordId id = new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1));
    ODocument record = new ODocument(id);
    sut.put(record);
    sut.remove(id);

    // When removing already removed record
    ORecordInternal<?> removedSecond = sut.remove(id);

    // Then empty result returned
    assertNull(removedSecond);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589516/fstmerge_base_7426949239170175444
public void removesOnlyOnce() {
    // Given an enabled cache with records in it
    OCache sut = enabledCache();
    ORecordId id = new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1));
    ODocument record = new ODocument(id);
    sut.put(record);
    sut.remove(id);

    // When removing already removed record
    ORecordInternal<?> removedSecond = sut.remove(id);

    // Then empty result returned
    assertNull(removedSecond);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589516/fstmerge_var2_4423616641320505729

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589519/fstmerge_var1_1076590860216814532
public void storesNoMoreElementsThanSpecifiedLimit() {
    // Given an enabled cache
    OCache sut = enabledCache();

    // When stored more distinct elements than cache limit allows
    for (int i = sut.limit() + 2; i > 0; i--)
      sut.put(new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i))));

    // Then size of cache should be exactly as it's limit
    assertEquals(sut.size(), sut.limit(), "Cache doesn't meet limit requirements");
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589519/fstmerge_base_8724857059234623004
public void storesNoMoreElementsThanSpecifiedLimit() {
    // Given an enabled cache
    OCache sut = enabledCache();

    // When stored more distinct elements than cache limit allows
    for (int i = sut.limit() + 2; i > 0; i--)
      sut.put(new ODocument(new ORecordId(i, OClusterPositionFactory.INSTANCE.valueOf(i))));

    // Then size of cache should be exactly as it's limit
    assertEquals(sut.size(), sut.limit(), "Cache doesn't meet limit requirements");
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589519/fstmerge_var2_5941686359268583995

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589522/fstmerge_var1_2687369254492733218
private ODefaultCache newCache() {
    return new ODefaultCache(null, 5);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589522/fstmerge_base_8137170997265815988
private ODefaultCache newCache() {
    return new ODefaultCache(null, 5);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589522/fstmerge_var2_8624072252047892568

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589525/fstmerge_var1_4305172548720850227
private OCache enabledCache() {
    ODefaultCache cache = newCache();
    cache.enable();
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589525/fstmerge_base_8086075826789209058
private OCache enabledCache() {
    ODefaultCache cache = newCache();
    cache.enable();
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589525/fstmerge_var2_193759255034600901

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589527/fstmerge_var1_7236205761287695104
private OCache enabledNonEmptyCache() {
    OCache cache = enabledCache();
    cache.put(new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1))));
    cache.put(new ODocument(new ORecordId(2, OClusterPositionFactory.INSTANCE.valueOf(2))));
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589527/fstmerge_base_6810779097084747821
private OCache enabledNonEmptyCache() {
    OCache cache = enabledCache();
    cache.put(new ODocument(new ORecordId(1, OClusterPositionFactory.INSTANCE.valueOf(1))));
    cache.put(new ODocument(new ORecordId(2, OClusterPositionFactory.INSTANCE.valueOf(2))));
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589527/fstmerge_var2_1505008307851287922

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170589530/fstmerge_var1_6452943545988836111
private OCache runningCache() {
    ODefaultCache cache = newCache();
    cache.startup();
    return cache;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170589530/fstmerge_base_6927682527559314401
private OCache runningCache() {
    ODefaultCache cache = newCache();
    cache.startup();
    return cache;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170589530/fstmerge_var2_4881837019422674233

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/core/src/test/java/com/orientechnologies/orient/core/cache/ODefaultCacheTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
  public void createLotsOfRecordsWithBigContent() {
    ODatabaseDocumentTx vDb = new ODatabaseDocumentTx("plocal:target/MemoryLeaksTest");
    vDb.create();
    for (int i = 0; i < 10000000; i++) {
      ODocument vDoc = new ODocument();
      vDoc.field("test", new byte[100000]);
      vDoc.save();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170591347/fstmerge_var1_7123267686851281577
      if (i % 10 == 0)
        System.out.println("Records created:" + i + " cacheSize: " + vDb.getLevel1Cache().getSize());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170591347/fstmerge_base_3430459371112236482
      if (i % 10 == 0) System.out.println("Records created:" + i + " cacheSize: " + vDb.getLevel1Cache().getSize());
=======
      if (i % 10 == 0)
        System.out.println("Records created:" + i + " cacheSize: " + vDb.getLocalCache().getSize());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170591347/fstmerge_var2_7722870729909137532
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/load/MemoryLeaksTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@AfterMethod
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170593357/fstmerge_var1_2080286966161295216
  public void tearDown() throws Exception {
    database.command(new OCommandSQL("drop class SchemaIndexTest")).execute();
    database.command(new OCommandSQL("drop class SchemaSharedIndexSuperTest")).execute();
    database.getMetadata().getSchema().reload();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170593357/fstmerge_base_5747251642622531635
	public void tearDown() throws Exception {
		database.command(new OCommandSQL("drop class SchemaIndexTest")).execute();
		database.command(new OCommandSQL("drop class SchemaSharedIndexSuperTest")).execute();
		database.getMetadata().getSchema().reload();
    database.getLevel2Cache().clear();
=======
  public void tearDown() throws Exception {
    database.command(new OCommandSQL("drop class SchemaIndexTest")).execute();
    database.command(new OCommandSQL("drop class SchemaSharedIndexSuperTest")).execute();
    database.getMetadata().getSchema().reload();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170593357/fstmerge_var2_1463812280360384978

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170593357/fstmerge_base_5747251642622531635

		database.close();
	}
=======
    database.close();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170593357/fstmerge_var2_1463812280360384978

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaIndexTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentEmbeddedListTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var1_6903455845402091759
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var1_6903455845402091759
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		final ODocument document = new ODocument();
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		final List<String> list = new ArrayList<String>();
		list.add("value1");
=======
    final List<String> list = new ArrayList<String>();
    list.add("value1");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		document.field("embeddedlist", list, OType.EMBEDDEDLIST);
		document.field("val", 1);
		document.save();
=======
    document.field("embeddedlist", list, OType.EMBEDDEDLIST);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
		Assert.assertFalse(document.isDirty());
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
    Assert.assertFalse(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		final List<String> trackedList = document.field("embeddedlist");
		trackedList.add("value2");
=======
    final List<String> trackedList = document.field("embeddedlist");
    trackedList.add("value2");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		Assert.assertTrue(document.isDirty());
=======
    Assert.assertTrue(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedlist");
		Assert.assertNotNull(timeLine);
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedlist");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
=======
    Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
		firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, 1, "value2"));
=======
    final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
    firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, 1, "value2"));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);
=======
    Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		Assert.assertEquals(document.getDirtyFields(), new String[]{"embeddedlist"});
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "embeddedlist" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var1_6903455845402091759
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);

  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_base_6236600055330453343
		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);

	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595446/fstmerge_var2_8598193164422779480

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentEmbeddedMapTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var1_6001973594190731546
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var1_6001973594190731546
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		final ODocument document = new ODocument();
=======
    final Map<String, String> map = new HashMap<String, String>();
    map.put("key1", "value1");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		final Map<String, String> map = new HashMap<String, String>();
		map.put("key1", "value1");
=======
    document.field("embeddedmap", map, OType.EMBEDDEDMAP);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
    Assert.assertFalse(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		document.field("embeddedmap", map, OType.EMBEDDEDMAP);
		document.field("val", 1);
		document.save();
=======
    final Map<String, String> trackedMap = document.field("embeddedmap");
    trackedMap.put("key2", "value2");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
		Assert.assertFalse(document.isDirty());
=======
    Assert.assertTrue(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		final Map<String, String> trackedMap = document.field("embeddedmap");
		trackedMap.put("key2", "value2");
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedmap");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		Assert.assertTrue(document.isDirty());
=======
    Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedmap");
		Assert.assertNotNull(timeLine);
=======
    final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
    firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, "key2", "value2"));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
=======
    Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
		firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, "key2", "value2"));
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "embeddedmap" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var1_6001973594190731546
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);

  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_base_2514090911544359130
		Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);

		Assert.assertEquals(document.getDirtyFields(), new String[]{"embeddedmap"});

		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);

	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595451/fstmerge_var2_553790235560378669

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentEmbeddedSetTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var1_7507610975624223636
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var1_7507610975624223636
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		final ODocument document = new ODocument();
=======
    final Set<String> set = new HashSet<String>();
    set.add("value1");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		final Set<String> set = new HashSet<String>();
		set.add("value1");
=======
    document.field("embeddedset", set, OType.EMBEDDEDSET);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
=======
    Assert.assertFalse(document.isDirty());
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		document.field("embeddedset", set, OType.EMBEDDEDSET);
		document.field("val", 1);
		document.save();
=======
    final Set<String> trackedSet = document.field("embeddedset");
    trackedSet.add("value2");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		Assert.assertFalse(document.isDirty());
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
=======
    Assert.assertTrue(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		final Set<String> trackedSet = document.field("embeddedset");
		trackedSet.add("value2");
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedset");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		Assert.assertTrue(document.isDirty());
=======
    Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("embeddedset");
		Assert.assertNotNull(timeLine);
=======
    final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
    firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, "value2", "value2"));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		Assert.assertNotNull(timeLine.getMultiValueChangeEvents());
=======
    Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		final List<OMultiValueChangeEvent> firedEvents = new ArrayList<OMultiValueChangeEvent>();
		firedEvents.add(new OMultiValueChangeEvent(OMultiValueChangeEvent.OChangeType.ADD, "value2", "value2"));
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "embeddedset" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var1_7507610975624223636
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);

  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_base_1407747226141329373
		Assert.assertEquals(timeLine.getMultiValueChangeEvents(), firedEvents);

		Assert.assertEquals(document.getDirtyFields(), new String[]{"embeddedset"});

		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);

	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595456/fstmerge_var2_3225076586603739801

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentLinkSetTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var1_2797917694799398951
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var1_2797917694799398951
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
=======
    final ODocument docOne = new ODocument();
    docOne.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		final ODocument docOne = new ODocument();
		docOne.save();
=======
    final ODocument docTwo = new ODocument();
    docTwo.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		final ODocument docTwo = new ODocument();
		docTwo.save();
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
=======
    final Set<ORID> set = new HashSet<ORID>();
    set.add(docOne.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		final ODocument document = new ODocument();
=======
    document.field("linkset", set, OType.LINKSET);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		final Set<ORID> set = new HashSet<ORID>();
		set.add(docOne.getIdentity());
=======
    Assert.assertFalse(document.isDirty());
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
=======
    final Set<ORID> trackedSet = document.field("linkset");
    trackedSet.add(docTwo.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		document.field("linkset", set, OType.LINKSET);
		document.field("val", 1);
		document.save();
=======
    Assert.assertTrue(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		Assert.assertFalse(document.isDirty());
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linkset");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		final Set<ORID> trackedSet = document.field("linkset");
		trackedSet.add(docTwo.getIdentity());
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "linkset" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var1_2797917694799398951
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_base_2917509393374222235
		Assert.assertTrue(document.isDirty());

		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linkset");
		Assert.assertNotNull(timeLine);

		Assert.assertEquals(document.getDirtyFields(), new String[]{"linkset"});

		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);
	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595461/fstmerge_var2_6803663323730157907

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentLinkListTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var1_2016138471325279527
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var1_2016138471325279527
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
=======
    final ODocument docOne = new ODocument();
    docOne.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		final ODocument docOne = new ODocument();
		docOne.save();
=======
    final ODocument docTwo = new ODocument();
    docTwo.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		final ODocument docTwo = new ODocument();
		docTwo.save();
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
=======
    final List<ORID> list = new ArrayList<ORID>();
    list.add(docOne.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		final ODocument document = new ODocument();
=======
    document.field("linklist", list, OType.LINKLIST);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		final List<ORID> list = new ArrayList<ORID>();
		list.add(docOne.getIdentity());
=======
    Assert.assertFalse(document.isDirty());
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
=======
    final List<ORID> trackedList = document.field("linklist");
    trackedList.add(docTwo.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		document.field("linklist", list, OType.LINKLIST);
		document.field("val", 1);
		document.save();
=======
    Assert.assertTrue(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		Assert.assertFalse(document.isDirty());
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linklist");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		final List<ORID> trackedList = document.field("linklist");
		trackedList.add(docTwo.getIdentity());
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "linklist" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var1_2016138471325279527
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);

  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_base_2350609171531487968
		Assert.assertTrue(document.isDirty());

		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linklist");
		Assert.assertNotNull(timeLine);

		Assert.assertEquals(document.getDirtyFields(), new String[]{"linklist"});

		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);

	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595465/fstmerge_var2_2120522435898953260

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: SameSignatureCM
Conflict body: 
public void testDocumentLinkMapTrackingAfterSaveCacheDisabled() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var1_6044616966171708367
    database.getLevel1Cache().clear();
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		database.getLevel1Cache().clear();
		database.getLevel2Cache().clear();
=======
    database.getLocalCache().clear();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var1_6044616966171708367
    database.getLevel1Cache().setEnable(false);
    database.getLevel2Cache().setEnable(false);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		database.getLevel1Cache().setEnable(false);
		database.getLevel2Cache().setEnable(false);
=======
    database.getLocalCache().setEnable(false);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
=======
    final ODocument docOne = new ODocument();
    docOne.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		final ODocument docOne = new ODocument();
		docOne.save();
=======
    final ODocument docTwo = new ODocument();
    docTwo.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		final ODocument docTwo = new ODocument();
		docTwo.save();
=======
    final ODocument document = new ODocument();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
=======
    final Map<String, ORID> map = new HashMap<String, ORID>();
    map.put("key1", docOne.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		final ODocument document = new ODocument();
=======
    document.field("linkmap", map, OType.LINKMAP);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		final Map<String, ORID> map = new HashMap<String, ORID>();
		map.put("key1", docOne.getIdentity());
=======
    Assert.assertFalse(document.isDirty());
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
=======
    final Map<String, ORID> trackedMap = document.field("linkmap");
    trackedMap.put("key2", docTwo.getIdentity());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		document.field("linkmap", map, OType.LINKMAP);
		document.field("val", 1);
		document.save();
=======
    final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linkmap");
    Assert.assertNotNull(timeLine);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		Assert.assertFalse(document.isDirty());
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] { "linkmap" });
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var1_6044616966171708367
    database.getLevel1Cache().setEnable(true);
    database.getLevel2Cache().setEnable(true);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_base_3533624443664695205
		final Map<String, ORID> trackedMap = document.field("linkmap");
		trackedMap.put("key2", docTwo.getIdentity());

		final OMultiValueChangeTimeLine timeLine = document.getCollectionTimeLine("linkmap");
		Assert.assertNotNull(timeLine);

		Assert.assertEquals(document.getDirtyFields(), new String[]{"linkmap"});

		database.getLevel1Cache().setEnable(true);
		database.getLevel2Cache().setEnable(true);
	}
=======
    database.getLocalCache().setEnable(true);
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595470/fstmerge_var2_6236305725621745901

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: LineBasedMCFd
Conflict body: 
public void testUnsetDirty() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		final ODocument document = new ODocument("DocumentTrackingTestClass");
=======
    final ODocument document = new ODocument("DocumentTrackingTestClass");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		final List<String> list = new ArrayList<String>();
		list.add("value1");
=======
    final List<String> list = new ArrayList<String>();
    list.add("value1");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		document.field("embeddedlist", list);
		document.field("val", 1);
		document.save();
=======
    document.field("embeddedlist", list);
    document.field("val", 1);
    document.save();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		Assert.assertEquals(document.getDirtyFields(), new String[]{});
		Assert.assertFalse(document.isDirty());
=======
    Assert.assertEquals(document.getDirtyFields(), new String[] {});
    Assert.assertFalse(document.isDirty());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		final List<String> trackedList = document.field("embeddedlist");
		trackedList.add("value2");
=======
    final List<String> trackedList = document.field("embeddedlist");
    trackedList.add("value2");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		document.unsetDirty();
=======
    document.unsetDirty();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var1_4591434077926295088
    // Assert.assertEquals(document.getDirtyFields(), new String[]{});
    Assert.assertFalse(document.isDirty());
    // Assert.assertNull(document.getCollectionTimeLine("embeddedlist"));
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_base_4658323618649291844
		//Assert.assertEquals(document.getDirtyFields(), new String[]{});
		Assert.assertFalse(document.isDirty());
		//Assert.assertNull(document.getCollectionTimeLine("embeddedlist"));
	}
=======
    Assert.assertFalse(document.isDirty());
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170595550/fstmerge_var2_4212582078511625457

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DocumentTrackingTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609383/fstmerge_var1_1944522277276671151
public OHazelcastCache(final OServer iServer, final HazelcastInstance iInstance, final String iStorageName, final int iLimit) {
    mapName = iStorageName + ".level2cache";
    limit = iLimit;
    hInstance = iInstance;
    server = iServer;
    server.registerLifecycleListener(this);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609383/fstmerge_base_8689383912618927592
public OHazelcastCache(final OServer iServer, final HazelcastInstance iInstance, final String iStorageName, final int iLimit) {
    mapName = iStorageName + ".level2cache";
    limit = iLimit;
    hInstance = iInstance;
    server = iServer;
    server.registerLifecycleListener(this);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609383/fstmerge_var2_6195788728704864701

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609388/fstmerge_var1_7694940065425098410
@Override
  public void startup() {
    if (map == null && hInstance != null)
      map = hInstance.getMap(mapName);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609388/fstmerge_base_430952973910925819
@Override
  public void startup() {
    if (map == null && hInstance != null)
      map = hInstance.getMap(mapName);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609388/fstmerge_var2_2646459445557405350

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609392/fstmerge_var1_4054515516952031852
@Override
  public void shutdown() {
    if (map != null && hInstance.getCluster().getMembers().size() <= 1)
      // I'M LAST MEMBER: REMOVE ALL THE ENTRIES
      map.clear();
    map = null;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609392/fstmerge_base_7916582500140270559
@Override
  public void shutdown() {
    if (map != null && hInstance.getCluster().getMembers().size() <= 1)
      // I'M LAST MEMBER: REMOVE ALL THE ENTRIES
      map.clear();
    map = null;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609392/fstmerge_var2_1767101993199383562

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609397/fstmerge_var1_1351727557538640680
@Override
  public boolean isEnabled() {
    return enabled;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609397/fstmerge_base_6611763041988060194
@Override
  public boolean isEnabled() {
    return enabled;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609397/fstmerge_var2_4460758805615918479

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609402/fstmerge_var1_1119778187501245598
@Override
  public boolean enable() {
    if (!enabled) {
      enabled = true;
      startup();
    }
    return true;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609402/fstmerge_base_2247980203332117861
@Override
  public boolean enable() {
    if (!enabled) {
      enabled = true;
      startup();
    }
    return true;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609402/fstmerge_var2_4277915184569445010

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609407/fstmerge_var1_6184876288581191669
@Override
  public boolean disable() {
    if (enabled) {
      enabled = false;
      shutdown();
    }
    return true;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609407/fstmerge_base_4433089349780773526
@Override
  public boolean disable() {
    if (enabled) {
      enabled = false;
      shutdown();
    }
    return true;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609407/fstmerge_var2_1246155745678044030

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609412/fstmerge_var1_415743315939681
@Override
  public ORecordInternal<?> get(final ORID id) {
    if (map == null)
      return null;
    return map.get(id);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609412/fstmerge_base_6055389084539455625
@Override
  public ORecordInternal<?> get(final ORID id) {
    if (map == null)
      return null;
    return map.get(id);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609412/fstmerge_var2_1070346640418073821

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609416/fstmerge_var1_7970282260080518775
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (map == null)
      return null;
    if (limit < 0 || map.size() < limit)
      return map.put(record.getIdentity(), record);
    return null;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609416/fstmerge_base_5142871678345721436
@Override
  public ORecordInternal<?> put(final ORecordInternal<?> record) {
    if (map == null)
      return null;
    if (limit < 0 || map.size() < limit)
      return map.put(record.getIdentity(), record);
    return null;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609416/fstmerge_var2_2471323719977215167

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609421/fstmerge_var1_2736956558906997035
@Override
  public ORecordInternal<?> remove(final ORID id) {
    if (map == null)
      return null;
    return map.remove(id);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609421/fstmerge_base_2143069711884088976
@Override
  public ORecordInternal<?> remove(final ORID id) {
    if (map == null)
      return null;
    return map.remove(id);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609421/fstmerge_var2_4408764624421719692

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609426/fstmerge_var1_2538809986247890958
@Override
  public void clear() {
    if (enabled)
      map.clear();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609426/fstmerge_base_8582135672783460429
@Override
  public void clear() {
    if (enabled)
      map.clear();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609426/fstmerge_var2_3052967852724969520

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609431/fstmerge_var1_8985258726752247490
@Override
  public int size() {
    if (!enabled)
      return 0;
    return map.size();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609431/fstmerge_base_3824102552639777378
@Override
  public int size() {
    if (!enabled)
      return 0;
    return map.size();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609431/fstmerge_var2_4313450009290158570

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609435/fstmerge_var1_978340016808608869
@Override
  public int limit() {
    if (!enabled)
      return 0;
    return limit;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609435/fstmerge_base_8264800044605654663
@Override
  public int limit() {
    if (!enabled)
      return 0;
    return limit;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609435/fstmerge_var2_4207270407521363010

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609440/fstmerge_var1_617909752569480408
@Override
  public Collection<ORID> keys() {
    if (!enabled)
      return Collections.emptyList();
    return map.keySet();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609440/fstmerge_base_6376053822451556872
@Override
  public Collection<ORID> keys() {
    if (!enabled)
      return Collections.emptyList();
    return map.keySet();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609440/fstmerge_var2_756326782710657040

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609444/fstmerge_var1_967745385616829379
@Override
  public void lock(ORID id) {
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609444/fstmerge_base_8347172602011073098
@Override
  public void lock(ORID id) {
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609444/fstmerge_var2_1792242249499478570

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609449/fstmerge_var1_3819540619813559382
@Override
  public void unlock(ORID id) {
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609449/fstmerge_base_8340191228016756256
@Override
  public void unlock(ORID id) {
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609449/fstmerge_var2_3767542795577245320

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609453/fstmerge_var1_4457946219030810503
@Override
  public void onBeforeActivate() {
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609453/fstmerge_base_756377702273956136
@Override
  public void onBeforeActivate() {
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609453/fstmerge_var2_486802163030957218

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609458/fstmerge_var1_8499723267121010558
@Override
  public void onAfterActivate() {
    startup();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609458/fstmerge_base_5287133171748431155
@Override
  public void onAfterActivate() {
    startup();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609458/fstmerge_var2_4520949381961270560

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609463/fstmerge_var1_3390724012778397477
@Override
  public void onBeforeDeactivate() {
    shutdown();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609463/fstmerge_base_8072972765206934607
@Override
  public void onBeforeDeactivate() {
    shutdown();
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609463/fstmerge_var2_3554521797615900782

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414170609467/fstmerge_var1_3889597168991017329
@Override
  public void onAfterDeactivate() {
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414170609467/fstmerge_base_7453966595805460330
@Override
  public void onAfterDeactivate() {
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414170609467/fstmerge_var2_629550194531864636

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0bd02_fe131/rev_0bd02-fe131/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastCache.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_63786_0e785/rev_63786-0e785.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d1819_7b4dd/rev_d1819-7b4dd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d7f29_9d78c/rev_d7f29-9d78c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1fcd_fc851/rev_b1fcd-fc851.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.5-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.4"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1fcd_fc851/rev_b1fcd-fc851/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414172715708/fstmerge_var1_8717873107290002263
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size() - 1; i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = logSegments.remove(0);
        logSegment.delete(false);
      }
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414172715708/fstmerge_base_8080031996865446251
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size(); i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = logSegments.remove(0);
        logSegment.delete(false);
      }
    }
  }
=======
void cutTill(OLogSequenceNumber lsn) throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414172715708/fstmerge_var2_7894074207520799364

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1fcd_fc851/rev_b1fcd-fc851/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_43703_61143/rev_43703-61143.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7189a_17329/rev_7189a-17329.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_48f6c_36e15/rev_48f6c-36e15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_64571_0e98f/rev_64571-0e98f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dfeb9_06e8f/rev_dfeb9-06e8f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public ODatabaseDocument getDatabase() {
    ODatabaseDocument db = null;
    try {
      String url = OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(BASEPATH + this.databaseName)
          .getPath()));
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414175387146/fstmerge_var1_6014539289641446871
      if (this.exists(url)) {
        db = new ODatabaseDocumentTx("plocal:" + url).open(this.user, this.pass);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414175387146/fstmerge_base_4701122856521829650
      if (this.exists(url)) {
        db = new ODatabaseDocumentTx("local:" + url).open(this.user, this.pass);
=======
      if(this.existsPLocal(url)) {
        db = new ODatabaseDocumentTx("plocal:" + url).open(this.user, this.pass);
      } else if (this.existsLocal(url)) {
        db = new ODatabaseDocumentTx("local:" + url).open(this.user, this.pass);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414175387146/fstmerge_var2_6789308962910722376
      } else {
        db = null;
        OLogManager.instance().error(this, "database " + this.databaseName + " does not exist");
      }
    } catch (Exception ex) {
      ex.printStackTrace();
      db = null;
      OLogManager.instance().error(this, "failed to open database");
    }
    return db;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_dfeb9_06e8f/rev_dfeb9-06e8f/server/src/main/java/com/orientechnologies/orient/server/schedule/OScheduleHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_41201_e2c5e/rev_41201-e2c5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b2263_dfeb9/rev_b2263-dfeb9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_decd4_90261/rev_decd4-90261.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1f5cc_436b4/rev_1f5cc-436b4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8f537_1415e/rev_8f537-1415e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_52d96_fa5b6/rev_52d96-fa5b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e54f2_f72b3/rev_e54f2-f72b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_29bcd_e4b78/rev_29bcd-e4b78.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_eca59_3c2ec/rev_eca59-3c2ec.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180746693/fstmerge_var1_7452165255501804434
void setUserName(String userName);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180746693/fstmerge_base_3382879293750459772
=======
void setUserName(String requestLoginUserName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180746693/fstmerge_var2_6251866799201738760

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedRequest.java
Conflict type: LineBasedMCFd
Conflict body: 
public void truncate() throws IOException {
    getDatabase().checkSecurity(ODatabaseSecurityResources.CLASS, ORole.PERMISSION_UPDATE);

    if (isSubClassOf(OSecurityShared.RESTRICTED_CLASSNAME))
      throw new OSecurityException("Class " + getName()
          + " cannot be truncated because has record level security enabled (extends " + OSecurityShared.RESTRICTED_CLASSNAME + ")");

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180775634/fstmerge_var1_5409700875734265540
    acquireSchemaReadLock();
    try {
      for (int id : clusterIds) {
        final OStorage storage = getDatabase().getStorage();
        storage.getClusterById(id).truncate();
        storage.getLevel2Cache().freeCluster(id);
      }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180775634/fstmerge_base_8532462147730107168
    getDatabase().getStorage().callInLock(new Callable<Object>() {
      public Object call() throws Exception {
        for (int id : clusterIds) {
          final OStorage storage = getDatabase().getStorage();
          storage.getClusterById(id).truncate();
          storage.getLevel2Cache().freeCluster(id);
        }
=======
    getDatabase().getStorage().callInLock(new Callable<Object>() {
      public Object call() throws Exception {
        for (int id : clusterIds) {
          final OStorage storage = getDatabase().getStorage();
          storage.getClusterById(id).truncate();
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180775634/fstmerge_var2_6060955004421798208

      for (OIndex<?> index : getClassIndexes())
        index.clear();
    } finally {
      releaseSchemaReadLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassImpl.java
Conflict type: LineBasedMCFd
Conflict body: 
@AfterMethod
  public void tearDown() throws Exception {
    database.command(new OCommandSQL("drop class SchemaIndexTest")).execute();
    database.command(new OCommandSQL("drop class SchemaSharedIndexSuperTest")).execute();
    database.getMetadata().getSchema().reload();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180791429/fstmerge_var1_1651097896687326372
    database.getLevel2Cache().clear();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180791429/fstmerge_base_364792339305570144
    database.getLevel2Cache().clear();

    database.close();
=======

    database.close();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180791429/fstmerge_var2_4429675365663893316
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SchemaIndexTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180795234/fstmerge_var1_841463117147555650
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180795234/fstmerge_base_3902799642137448651
@BeforeClass
  public void init() throws IOException {
    database = new OObjectDatabaseTx(url + "_objectschema");
    ODatabaseHelper.createDatabase(database, url + "_objectschema");
    database.close();
    try {
      ODatabaseDocumentTx exportDatabase = new ODatabaseDocumentTx(url);
      exportDatabase.open("admin", "admin");

      OCommandOutputListener listener = new OCommandOutputListener() {
        @Override
        public void onMessage(String iText) {

        }
      };
      ODatabaseExport export = new ODatabaseExport(exportDatabase, EXPORT_DIR, listener);
      export.exportDatabase();
      export.close();
      exportDatabase.close();
      ODatabaseDocumentTx importDatabase = new ODatabaseDocumentTx(url + "_objectschema");
      importDatabase.open("admin", "admin");
      ODatabaseImport impor = new ODatabaseImport(importDatabase, EXPORT_DIR, listener);

      if (url.startsWith("local:") || url.startsWith("memory:"))
        impor.setPreserveClusterIDs(false);

      // UNREGISTER ALL THE HOOKS
      for (ORecordHook hook : new ArrayList<ORecordHook>(importDatabase.getHooks().keySet())) {
        importDatabase.unregisterHook(hook);
      }

      impor.setDeleteRIDMapping(true);
      impor.importDatabase();
      impor.close();

      importDatabase.close();
      final File importDir = new File(EXPORT_DIR);
      importDir.delete();
    } catch (IOException e) {
      Assert.fail("Export import didn't go as expected", e);
    }
    database.open("admin", "admin");
    if (database.getMetadata().getSchema().existsClass("Company"))
      database.command(new OCommandSQL("delete from Company")).execute();
    if (database.getMetadata().getSchema().existsClass("Account"))
      database.command(new OCommandSQL("delete from Account")).execute();
    if (database.getMetadata().getSchema().existsClass("JavaComplexTestClass"))
      database.command(new OCommandSQL("delete from JavaComplexTestClass")).execute();
    if (database.getMetadata().getSchema().existsClass("Profile"))
      database.command(new OCommandSQL("delete from Profile")).execute();
    if (database.getMetadata().getSchema().existsClass("IdentityChild"))
      database.command(new OCommandSQL("delete from IdentityChild")).execute();
    // database.command(
    // new OCommandSQL("delete from Profile where nick = 'PresidentSon1' or nick = 'PresidentSon2' or nick = 'ThePresident'"))
    // .execute();
    database.close();
  }
=======
@BeforeClass
  public void init() throws IOException {
    database = new OObjectDatabaseTx(url + "_objectschema");
    ODatabaseHelper.createDatabase(database, url + "_objectschema");
    database.close();
    try {
      ODatabaseDocumentTx exportDatabase = new ODatabaseDocumentTx(url);
      exportDatabase.open("admin", "admin");

      OCommandOutputListener listener = new OCommandOutputListener() {
        @Override
        public void onMessage(String iText) {

        }
      };
      ODatabaseExport export = new ODatabaseExport(exportDatabase, EXPORT_DIR, listener);
      export.exportDatabase();
      export.close();
      exportDatabase.close();
      ODatabaseDocumentTx importDatabase = new ODatabaseDocumentTx(url + "_objectschema");
      importDatabase.open("admin", "admin");
      ODatabaseImport impor = new ODatabaseImport(importDatabase, EXPORT_DIR, listener);

      if (url.startsWith("memory:"))
        impor.setPreserveClusterIDs(false);

      // UNREGISTER ALL THE HOOKS
      for (ORecordHook hook : new ArrayList<ORecordHook>(importDatabase.getHooks().keySet())) {
        importDatabase.unregisterHook(hook);
      }

      impor.setDeleteRIDMapping(true);
      impor.importDatabase();
      impor.close();

      importDatabase.close();
      final File importDir = new File(EXPORT_DIR);
      importDir.delete();
    } catch (IOException e) {
      Assert.fail("Export import didn't go as expected", e);
    }
    database.open("admin", "admin");
    if (database.getMetadata().getSchema().existsClass("Company"))
      database.command(new OCommandSQL("delete from Company")).execute();
    if (database.getMetadata().getSchema().existsClass("Account"))
      database.command(new OCommandSQL("delete from Account")).execute();
    if (database.getMetadata().getSchema().existsClass("JavaComplexTestClass"))
      database.command(new OCommandSQL("delete from JavaComplexTestClass")).execute();
    if (database.getMetadata().getSchema().existsClass("Profile"))
      database.command(new OCommandSQL("delete from Profile")).execute();
    if (database.getMetadata().getSchema().existsClass("IdentityChild"))
      database.command(new OCommandSQL("delete from IdentityChild")).execute();
    // database.command(
    // new OCommandSQL("delete from Profile where nick = 'PresidentSon1' or nick = 'PresidentSon2' or nick = 'ThePresident'"))
    // .execute();
    database.close();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180795234/fstmerge_var2_1332003745281869577

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/tests/src/test/java/com/orientechnologies/orient/test/database/auto/CRUDObjectInheritanceTestSchemaFull.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180804973/fstmerge_var1_347147467637901556
public void setUserName(final String userName) {
    this.userName = userName;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180804973/fstmerge_base_3044101290782438166
=======
public void setUserName(String userName) {
    this.userName = userName;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180804973/fstmerge_var2_4695311160687361847

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedRequest.java
Conflict type: SameSignatureCM
Conflict body: 
public void initDatabaseInstance() {
    if (database == null) {
      // OPEN IT
      final OServerUserConfiguration replicatorUser = manager.getServerInstance().getUser(
          ODistributedAbstractPlugin.REPLICATOR_USER);
      database = (ODatabaseDocumentTx) manager.getServerInstance().openDatabase("document", databaseName, replicatorUser.name,
          replicatorUser.password);
    } else if (database.isClosed()) {
      // DATABASE CLOSED, REOPEN IT
      final OServerUserConfiguration replicatorUser = manager.getServerInstance().getUser(
          ODistributedAbstractPlugin.REPLICATOR_USER);
      database.open(replicatorUser.name, replicatorUser.password);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180805086/fstmerge_var1_2275712688025054302
    } else {
      // After initialize database, create replicator user in DB and reset database with OSecurityShared instead of OSecurityNull
      OSecurity security = database.getMetadata().getSecurity();
      if (security == null || security instanceof OSecurityNull) {
        final OServerUserConfiguration replicatorUser = manager.getServerInstance().getUser(
            ODistributedAbstractPlugin.REPLICATOR_USER);
        createReplicatorUser(database, replicatorUser);
        database = (ODatabaseDocumentTx) manager.getServerInstance().openDatabase("document", databaseName, replicatorUser.name,
            replicatorUser.password);
      }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180805086/fstmerge_base_8995837765643365110
=======
    } else {
      // After initialize database, create replicator user in DB and reset database with OSecurityShared instead of OSecurityNull 
      OSecurity security = database.getMetadata().getSecurity();
      if(security == null || security instanceof OSecurityNull) {
        final OServerUserConfiguration replicatorUser = manager.getServerInstance().getUser(
            ODistributedAbstractPlugin.REPLICATOR_USER);
        createReplicatorUser(database, replicatorUser);
        database = (ODatabaseDocumentTx) manager.getServerInstance().openDatabase("document", databaseName, replicatorUser.name,
            replicatorUser.password);
      }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180805086/fstmerge_var2_4108549088778721075
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180805090/fstmerge_var1_9102434911628849361
private void createReplicatorUser(ODatabaseDocumentTx database, final OServerUserConfiguration replicatorUser) {
    String strQuery = "select from ouser where name = '" + replicatorUser.name + "'";
    OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(strQuery);
    List<ODocument> result = database.command(query).execute();
    if (result == null || result.size() == 0) {
      String strExec = "insert into ouser (name, password, status, roles) values ('" + replicatorUser.name + "', '"
          + replicatorUser.password + "', 'ACTIVE', [#4:0])";
      database.command(new OCommandSQL(strExec)).execute();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180805090/fstmerge_base_1190566319994750187
=======
private void createReplicatorUser(ODatabaseDocumentTx database, final OServerUserConfiguration replicatorUser) {
    String strQuery = "select from ouser where name = '" + replicatorUser.name +"'";
    OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(strQuery);
    List<ODocument> result = database.command(query).execute();
    if(result == null || result.size() == 0) {
      String strExec = "insert into ouser (name, password, status, roles) values ('"+replicatorUser.name+"', '"+replicatorUser.password+"', 'ACTIVE', [#4:0])";
      database.command(new OCommandSQL(strExec)).execute();
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180805090/fstmerge_var2_8717194562734856523

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java
Conflict type: SameSignatureCM
Conflict body: 
protected void onMessage(final ODistributedRequest iRequest) {
    OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.RUNNING_DISTRIBUTED);

    try {
      final OAbstractRemoteTask task = iRequest.getTask();

      if (ODistributedServerLog.isDebugEnabled())
        ODistributedServerLog.debug(this, manager.getLocalNodeName(), iRequest.getSenderNodeName(), DIRECTION.OUT,
            "received request: %s", iRequest);

      // EXECUTE IT LOCALLY
      final Serializable responsePayload;
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_base_6603529276906352089
=======
      OUser origin = null;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_var2_1281231648477435330
      try {
        if (task.isRequiredOpenDatabase())
          initDatabaseInstance();

        ODatabaseRecordThreadLocal.INSTANCE.set(database);

        task.setNodeSource(iRequest.getSenderNodeName());
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_var1_4018488724419079825

        // keep original user in database, check the username passed in request and set new user in DB, after document saved, reset
        // to original user
        if (database != null) {
          origin = database.getUser();
          try {
            if (lastUser == null || !(lastUser.getName()).equals(iRequest.getUserName()))
              lastUser = database.getMetadata().getSecurity().getUser(iRequest.getUserName());
            database.setUser(lastUser);// set to new user
          } catch (Throwable ex) {
            OLogManager.instance().error(this, "failed to convert to OUser " + ex.getMessage());
          }
        }

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_base_6603529276906352089

=======
        //keep original user in database, check the username passed in request and set new user in DB, after document saved, reset to original user  
        origin = ODatabaseRecordThreadLocal.INSTANCE.get().getUser();
        if(ODatabaseRecordThreadLocal.INSTANCE.get() != null) {
          try {
            if (database != null) {
              if(lastUser == null || !(lastUser.getName()).equals(iRequest.getUserName()))
                lastUser = database.getMetadata().getSecurity().getUser(iRequest.getUserName());
              ODatabaseRecordThreadLocal.INSTANCE.get().setUser(lastUser);//set to new user
            }
          } catch(Throwable ex) {
            OLogManager.instance().error(this, "failed to convert to OUser " + ex.getMessage());
          }
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_var2_1281231648477435330
        responsePayload = manager.executeOnLocalNode(iRequest, database);

      } finally {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_var1_4018488724419079825
        if (database != null) {
          database.getLevel1Cache().clear();
          database.setUser(origin);
        }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_base_6603529276906352089
        if (database != null)
          database.getLevel1Cache().clear();
=======
        if (database != null)
          database.getLocalCache().clear();
        if (ODatabaseRecordThreadLocal.INSTANCE.get() != null)
          ODatabaseRecordThreadLocal.INSTANCE.get().setUser(origin);//set back to origin
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414180805130/fstmerge_var2_1281231648477435330
      }

      if (ODistributedServerLog.isDebugEnabled())
        ODistributedServerLog.debug(this, manager.getLocalNodeName(), iRequest.getSenderNodeName(), DIRECTION.OUT,
            "sending back response '%s' to request: %s", responsePayload, task);

      final OHazelcastDistributedResponse response = new OHazelcastDistributedResponse(iRequest.getId(),
          manager.getLocalNodeName(), iRequest.getSenderNodeName(), responsePayload);

      try {
        // GET THE SENDER'S RESPONSE QUEUE
        final IQueue<ODistributedResponse> queue = msgService.getQueue(OHazelcastDistributedMessageService
            .getResponseQueueName(iRequest.getSenderNodeName()));

        if (!queue.offer(response, OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong(), TimeUnit.MILLISECONDS))
          throw new ODistributedException("Timeout on dispatching response to the thread queue " + iRequest.getSenderNodeName());

      } catch (Exception e) {
        throw new ODistributedException("Cannot dispatch response to the thread queue " + iRequest.getSenderNodeName(), e);
      }

    } finally {
      OScenarioThreadLocal.INSTANCE.set(OScenarioThreadLocal.RUN_MODE.DEFAULT);
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_d44d1/rev_bdbc6-d44d1/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a9e59_89280/rev_a9e59-89280.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bdbc6_30cfc/rev_bdbc6-30cfc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a5b31_2d5b4/rev_a5b31-2d5b4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f35c7_327e5/rev_f35c7-327e5.revisions

=========================================================
=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ebea0_79257/rev_ebea0-79257.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_77205_eb957/rev_77205-eb957.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1aae7_998dc/rev_1aae7-998dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188225391/fstmerge_var1_1257731581158681737
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188225391/fstmerge_base_3831813412470626546
protected ORecordVersion updateRecord(final ODatabaseRecord iDatabase, final ORecordId rid, final byte[] buffer,
      final ORecordVersion version, final byte recordType) {
    final ORecordInternal<?> newRecord = Orient.instance().getRecordFactoryManager().newInstance(recordType);
    newRecord.fill(rid, version, buffer, true);

    // if (((OSchemaProxy) iDatabase.getMetadata().getSchema()).getIdentity().equals(rid))
    // // || ((OIndexManagerImpl) connection.database.getMetadata().getIndexManager()).getDocument().getIdentity().equals(rid)) {
    // throw new OSecurityAccessException("Cannot update internal record " + rid);

    final ORecordInternal<?> currentRecord;
    if (newRecord instanceof ODocument) {
      currentRecord = iDatabase.load(rid);

      if (currentRecord == null)
        throw new ORecordNotFoundException(rid.toString());

      ((ODocument) currentRecord).merge((ODocument) newRecord, false, false);

    } else
      currentRecord = newRecord;

    currentRecord.getRecordVersion().copyFrom(version);

    iDatabase.save(currentRecord);

    if (currentRecord.getIdentity().toString().equals(iDatabase.getStorage().getConfiguration().indexMgrRecordId)
        && !iDatabase.getStatus().equals(STATUS.IMPORTING)) {
      // FORCE INDEX MANAGER UPDATE. THIS HAPPENS FOR DIRECT CHANGES FROM REMOTE LIKE IN GRAPH
      iDatabase.getMetadata().getIndexManager().reload();
    }
    return currentRecord.getRecordVersion();
  }
=======
protected ORecordVersion updateRecord(final ODatabaseRecord iDatabase, final ORecordId rid, final byte[] buffer,
      final ORecordVersion version, final byte recordType) {
    final ORecordInternal<?> newRecord = Orient.instance().getRecordFactoryManager().newInstance(recordType);
    fillRecord(rid, buffer, version, newRecord, null);

    final ORecordInternal<?> currentRecord;
    if (newRecord instanceof ODocument) {
      currentRecord = iDatabase.load(rid);

      if (currentRecord == null)
        throw new ORecordNotFoundException(rid.toString());

      ((ODocument) currentRecord).merge((ODocument) newRecord, false, false);

    } else
      currentRecord = newRecord;

    currentRecord.getRecordVersion().copyFrom(version);

    iDatabase.save(currentRecord);

    if (currentRecord.getIdentity().toString().equals(iDatabase.getStorage().getConfiguration().indexMgrRecordId)
        && !iDatabase.getStatus().equals(STATUS.IMPORTING)) {
      // FORCE INDEX MANAGER UPDATE. THIS HAPPENS FOR DIRECT CHANGES FROM REMOTE LIKE IN GRAPH
      iDatabase.getMetadata().getIndexManager().reload();
    }
    return currentRecord.getRecordVersion();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188225391/fstmerge_var2_8474842396830162720

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/OBinaryNetworkProtocolAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188242085/fstmerge_var1_2731230063884023205
private void commitEntry(final OTransaction clientTx, final ORecordOperation txEntry) throws IOException {

    final ORecordInternal<?> rec = txEntry.getRecord();
    if (txEntry.type != ORecordOperation.DELETED && !rec.isDirty())
      return;

    final ORecordId rid = (ORecordId) rec.getIdentity();

    ORecordSerializationContext.pushContext();
    try {
      if (rid.clusterId == ORID.CLUSTER_ID_INVALID && rec instanceof ODocument && ((ODocument) rec).getSchemaClass() != null) {
        // TRY TO FIX CLUSTER ID TO THE DEFAULT CLUSTER ID DEFINED IN SCHEMA CLASS
        rid.clusterId = ((ODocument) rec).getSchemaClass().getDefaultClusterId();
      }

      final OCluster cluster = getClusterById(rid.clusterId);

      if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME)
          || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))
        // AVOID TO COMMIT INDEX STUFF
        return;

      if (rec instanceof OTxListener)
        ((OTxListener) rec).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

      switch (txEntry.type) {
      case ORecordOperation.LOADED:
        break;

      case ORecordOperation.CREATED: {
        // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD

        byte[] stream = rec.toStream();
        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
          break;
        }

        final ORecordId oldRID = rid.isNew() ? rid.copy() : rid;

        if (rid.isNew()) {
          rid.clusterId = cluster.getId();
          final OPhysicalPosition ppos;
          ppos = createRecord(-1, rid, stream, rec.getRecordVersion(), rec.getRecordType(), -1, null).getResult();

          rid.clusterPosition = ppos.clusterPosition;
          rec.getRecordVersion().copyFrom(ppos.recordVersion);

          clientTx.updateIdentityAfterCommit(oldRID, rid);
        } else {
          rec.getRecordVersion().copyFrom(
              updateRecord(rid, rec.isContentChanged(), stream, rec.getRecordVersion(), rec.getRecordType(), -1, null).getResult());
        }

        break;
      }

      case ORecordOperation.UPDATED: {
        byte[] stream = rec.toStream();
        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
          break;
        }

        rec.getRecordVersion().copyFrom(
            updateRecord(rid, rec.isContentChanged(), stream, rec.getRecordVersion(), rec.getRecordType(), -1, null).getResult());

        break;
      }

      case ORecordOperation.DELETED: {
        deleteRecord(rid, rec.getRecordVersion(), -1, null);
        break;
      }
      }
    } finally {
      ORecordSerializationContext.pullContext();
    }

    rec.unsetDirty();

    if (rec instanceof OTxListener)
      ((OTxListener) rec).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188242085/fstmerge_base_5857850889522976179
private void commitEntry(final OTransaction clientTx, final ORecordOperation txEntry) throws IOException {

    if (txEntry.type != ORecordOperation.DELETED && !txEntry.getRecord().isDirty())
      return;

    final ORecordId rid = (ORecordId) txEntry.getRecord().getIdentity();

    ORecordSerializationContext.pushContext();
    try {
      if (rid.clusterId == ORID.CLUSTER_ID_INVALID && txEntry.getRecord() instanceof ODocument
          && ((ODocument) txEntry.getRecord()).getSchemaClass() != null) {
        // TRY TO FIX CLUSTER ID TO THE DEFAULT CLUSTER ID DEFINED IN SCHEMA CLASS
        rid.clusterId = ((ODocument) txEntry.getRecord()).getSchemaClass().getDefaultClusterId();
      }

      final OCluster cluster = getClusterById(rid.clusterId);

      if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME)
          || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))
        // AVOID TO COMMIT INDEX STUFF
        return;

      if (txEntry.getRecord() instanceof OTxListener)
        ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

      switch (txEntry.type) {
      case ORecordOperation.LOADED:
        break;

      case ORecordOperation.CREATED: {
        // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD

        byte[] stream = txEntry.getRecord().toStream();
        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
          break;
        }

        final ORecordId oldRID = rid.isNew() ? rid.copy() : rid;

        if (rid.isNew()) {
          rid.clusterId = cluster.getId();
          final OPhysicalPosition ppos;
          ppos = createRecord(-1, rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), -1,
              null).getResult();

          rid.clusterPosition = ppos.clusterPosition;
          txEntry.getRecord().getRecordVersion().copyFrom(ppos.recordVersion);

          clientTx.updateIdentityAfterCommit(oldRID, rid);
        } else {
          txEntry
              .getRecord()
              .getRecordVersion()
              .copyFrom(
                  updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), -1, null)
                      .getResult());
        }

        break;
      }

      case ORecordOperation.UPDATED: {
        byte[] stream = txEntry.getRecord().toStream();
        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
          break;
        }

        txEntry
            .getRecord()
            .getRecordVersion()
            .copyFrom(
                updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), -1, null)
                    .getResult());

        break;
      }

      case ORecordOperation.DELETED: {
        deleteRecord(rid, txEntry.getRecord().getRecordVersion(), -1, null);
        break;
      }
      }
    } finally {
      ORecordSerializationContext.pullContext();
    }

    txEntry.getRecord().unsetDirty();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188242085/fstmerge_var2_3566770105177472023

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188244454/fstmerge_var1_6035563295746387424
private void commitEntry(final OTransaction iTx, final ORecordOperation txEntry, final boolean iUseLog) throws IOException {

    final ORecordInternal<?> record = txEntry.getRecord();
    if (txEntry.type != ORecordOperation.DELETED && !record.isDirty())
      return;

    final ORecordId rid = (ORecordId) record.getIdentity();

    if (rid.clusterId == ORID.CLUSTER_ID_INVALID && record instanceof ODocument && ((ODocument) record).getSchemaClass() != null) {
      // TRY TO FIX CLUSTER ID TO THE DEFAULT CLUSTER ID DEFINED IN SCHEMA CLASS
      final OClass schemaClass = ((ODocument) record).getSchemaClass();

      rid.clusterId = schemaClass.getClusterForNewInstance();
    }

    final OCluster cluster = storage.getClusterById(rid.clusterId);
    final ODataLocal dataSegment = storage.getDataSegmentById(txEntry.dataSegmentId);

    if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME)
        || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))
      // AVOID TO COMMIT INDEX STUFF
      return;

    if (!(cluster instanceof OClusterLocal))
      // ONLY LOCAL CLUSTER ARE INVOLVED IN TX
      return;

    if (record instanceof OTxListener)
      ((OTxListener) record).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

    switch (txEntry.type) {
    case ORecordOperation.LOADED:
      break;

    case ORecordOperation.CREATED: {
      // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD
      final byte[] stream = record.toStream();
      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
        break;
      }

      final ORecordId oldRID = rid.isNew() ? rid.copy() : rid;

      if (rid.isNew()) {
        rid.clusterId = cluster.getId();
        final OPhysicalPosition ppos;
        if (iUseLog)
          ppos = createRecord(iTx.getId(), dataSegment, cluster, rid, stream, record.getRecordVersion(), record.getRecordType());
        else
          ppos = iTx
              .getDatabase()
              .getStorage()
              .createRecord(txEntry.dataSegmentId, rid, stream, OVersionFactory.instance().createVersion(), record.getRecordType(),
                  (byte) 0, null).getResult();

        rid.clusterPosition = ppos.clusterPosition;
        record.getRecordVersion().copyFrom(ppos.recordVersion);

        iTx.updateIdentityAfterCommit(oldRID, rid);
      } else {
        final ORecordVersion version;
        if (iUseLog) {
          version = updateRecord(iTx.getId(), cluster, rid, stream, record.getRecordVersion(), record.getRecordType());
        } else {
          version = iTx
              .getDatabase()
              .getStorage()
              .updateRecord(rid, record.isContentChanged(), stream, record.getRecordVersion(), record.getRecordType(), (byte) 0,
                  null).getResult();
        }
        record.getRecordVersion().copyFrom(version);
      }
      break;
    }

    case ORecordOperation.UPDATED: {
      final byte[] stream = record.toStream();
      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
        break;
      }

      if (!record.isContentChanged())
        break;

      if (iUseLog)
        record.getRecordVersion().copyFrom(
            updateRecord(iTx.getId(), cluster, rid, stream, record.getRecordVersion(), record.getRecordType()));
      else
        record.getRecordVersion().copyFrom(
            iTx.getDatabase()
                .getStorage()
                .updateRecord(rid, record.isContentChanged(), stream, record.getRecordVersion(), record.getRecordType(), (byte) 0,
                    null).getResult());
      break;
    }

    case ORecordOperation.DELETED: {
      if (iUseLog)
        deleteRecord(iTx.getId(), cluster, rid.clusterPosition, record.getRecordVersion());
      else
        iTx.getDatabase().getStorage().deleteRecord(rid, record.getRecordVersion(), (byte) 0, null);
    }
      break;
    }

    record.unsetDirty();

    if (record instanceof OTxListener)
      ((OTxListener) record).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188244454/fstmerge_base_8496497290584213612
private void commitEntry(final OTransaction iTx, final ORecordOperation txEntry, final boolean iUseLog) throws IOException {

    if (txEntry.type != ORecordOperation.DELETED && !txEntry.getRecord().isDirty())
      return;

    final ORecordId rid = (ORecordId) txEntry.getRecord().getIdentity();

    if (rid.clusterId == ORID.CLUSTER_ID_INVALID && txEntry.getRecord() instanceof ODocument
        && ((ODocument) txEntry.getRecord()).getSchemaClass() != null) {
      // TRY TO FIX CLUSTER ID TO THE DEFAULT CLUSTER ID DEFINED IN SCHEMA CLASS
      final OClass schemaClass = ((ODocument) txEntry.getRecord()).getSchemaClass();

      rid.clusterId = schemaClass.getClusterForNewInstance();
    }

    final OCluster cluster = storage.getClusterById(rid.clusterId);
    final ODataLocal dataSegment = storage.getDataSegmentById(txEntry.dataSegmentId);

    if (cluster.getName().equals(OMetadataDefault.CLUSTER_INDEX_NAME)
        || cluster.getName().equals(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME))
      // AVOID TO COMMIT INDEX STUFF
      return;

    if (!(cluster instanceof OClusterLocal))
      // ONLY LOCAL CLUSTER ARE INVOLVED IN TX
      return;

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

    switch (txEntry.type) {
    case ORecordOperation.LOADED:
      break;

    case ORecordOperation.CREATED: {
      // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD
      final byte[] stream = txEntry.getRecord().toStream();
      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
        break;
      }

      final ORecordId oldRID = rid.isNew() ? rid.copy() : rid;

      if (rid.isNew()) {
        rid.clusterId = cluster.getId();
        final OPhysicalPosition ppos;
        if (iUseLog)
          ppos = createRecord(iTx.getId(), dataSegment, cluster, rid, stream, txEntry.getRecord().getRecordVersion(), txEntry
              .getRecord().getRecordType());
        else
          ppos = iTx
              .getDatabase()
              .getStorage()
              .createRecord(txEntry.dataSegmentId, rid, stream, OVersionFactory.instance().createVersion(),
                  txEntry.getRecord().getRecordType(), (byte) 0, null).getResult();

        rid.clusterPosition = ppos.clusterPosition;
        txEntry.getRecord().getRecordVersion().copyFrom(ppos.recordVersion);

        iTx.updateIdentityAfterCommit(oldRID, rid);
      } else {
        if (iUseLog)
          txEntry
              .getRecord()
              .getRecordVersion()
              .copyFrom(
                  updateRecord(iTx.getId(), cluster, rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord()
                      .getRecordType()));
        else
          txEntry
              .getRecord()
              .getRecordVersion()
              .copyFrom(
                  iTx.getDatabase()
                      .getStorage()
                      .updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(),
                          (byte) 0, null).getResult());
      }
      break;
    }

    case ORecordOperation.UPDATED: {
      final byte[] stream = txEntry.getRecord().toStream();
      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
        break;
      }

      if (iUseLog)
        txEntry
            .getRecord()
            .getRecordVersion()
            .copyFrom(
                updateRecord(iTx.getId(), cluster, rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord()
                    .getRecordType()));
      else
        txEntry
            .getRecord()
            .getRecordVersion()
            .copyFrom(
                iTx.getDatabase()
                    .getStorage()
                    .updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(),
                        (byte) 0, null).getResult());
      break;
    }

    case ORecordOperation.DELETED: {
      if (iUseLog)
        deleteRecord(iTx.getId(), cluster, rid.clusterPosition, txEntry.getRecord().getRecordVersion());
      else
        iTx.getDatabase().getStorage().deleteRecord(rid, txEntry.getRecord().getRecordVersion(), (byte) 0, null);
    }
      break;
    }

    txEntry.getRecord().unsetDirty();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188244454/fstmerge_var2_6530532213669568117

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/OStorageLocalTxExecuter.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188245174/fstmerge_var1_8344916409277970017
private void commitEntry(final OTransaction iTx, final ORecordOperation txEntry) throws IOException {

    final ORecordId rid = (ORecordId) txEntry.getRecord().getIdentity();

    final OCluster cluster = getClusterById(rid.clusterId);
    rid.clusterId = cluster.getId();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

    switch (txEntry.type) {
    case ORecordOperation.LOADED:
      break;

    case ORecordOperation.CREATED:
      if (rid.isNew()) {
        // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD
        final byte[] stream = txEntry.getRecord().toStream();

        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
          break;
        }

        if (rid.isNew()) {
          final ORecordId oldRID = rid.copy();

          final OPhysicalPosition ppos = createRecord(txEntry.dataSegmentId, rid, stream,
              OVersionFactory.instance().createVersion(), txEntry.getRecord().getRecordType(), 0, null).getResult();

          txEntry.getRecord().getRecordVersion().copyFrom(ppos.recordVersion);

          iTx.updateIdentityAfterCommit(oldRID, rid);
        } else {
          txEntry
              .getRecord()
              .getRecordVersion()
              .copyFrom(
                  updateRecord(rid, true, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), 0,
                      null).getResult());
        }
      }
      break;

    case ORecordOperation.UPDATED:
      final byte[] stream = txEntry.getRecord().toStream();

      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
        break;
      }

      txEntry
          .getRecord()
          .getRecordVersion()
          .copyFrom(
              updateRecord(rid, true, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), 0, null)
                  .getResult());
      break;

    case ORecordOperation.DELETED:
      deleteRecord(rid, txEntry.getRecord().getRecordVersion(), 0, null);
      break;
    }

    txEntry.getRecord().unsetDirty();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188245174/fstmerge_base_5021965692873992122
private void commitEntry(final OTransaction iTx, final ORecordOperation txEntry) throws IOException {

    final ORecordId rid = (ORecordId) txEntry.getRecord().getIdentity();

    final OCluster cluster = getClusterById(rid.clusterId);
    rid.clusterId = cluster.getId();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.BEFORE_COMMIT);

    switch (txEntry.type) {
    case ORecordOperation.LOADED:
      break;

    case ORecordOperation.CREATED:
      if (rid.isNew()) {
        // CHECK 2 TIMES TO ASSURE THAT IT'S A CREATE OR AN UPDATE BASED ON RECURSIVE TO-STREAM METHOD
        final byte[] stream = txEntry.getRecord().toStream();

        if (stream == null) {
          OLogManager.instance().warn(this, "Null serialization on committing new record %s in transaction", rid);
          break;
        }

        if (rid.isNew()) {
          final ORecordId oldRID = rid.copy();

          final OPhysicalPosition ppos = createRecord(txEntry.dataSegmentId, rid, stream,
              OVersionFactory.instance().createVersion(), txEntry.getRecord().getRecordType(), 0, null).getResult();

          txEntry.getRecord().getRecordVersion().copyFrom(ppos.recordVersion);

          iTx.updateIdentityAfterCommit(oldRID, rid);
        } else {
          txEntry
              .getRecord()
              .getRecordVersion()
              .copyFrom(
                  updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), 0, null)
                      .getResult());
        }
      }
      break;

    case ORecordOperation.UPDATED:
      final byte[] stream = txEntry.getRecord().toStream();

      if (stream == null) {
        OLogManager.instance().warn(this, "Null serialization on committing updated record %s in transaction", rid);
        break;
      }

      txEntry
          .getRecord()
          .getRecordVersion()
          .copyFrom(
              updateRecord(rid, stream, txEntry.getRecord().getRecordVersion(), txEntry.getRecord().getRecordType(), 0, null)
                  .getResult());
      break;

    case ORecordOperation.DELETED:
      deleteRecord(rid, txEntry.getRecord().getRecordVersion(), 0, null);
      break;
    }

    txEntry.getRecord().unsetDirty();

    if (txEntry.getRecord() instanceof OTxListener)
      ((OTxListener) txEntry.getRecord()).onEvent(txEntry, OTxListener.EVENT.AFTER_COMMIT);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188245174/fstmerge_var2_8084390062541794382

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/core/src/main/java/com/orientechnologies/orient/core/storage/impl/memory/OStorageMemory.java
Conflict type: LineBasedMCFd
Conflict body: 
public <RET extends ORecordInternal<?>> RET executeSaveRecord(final ORecordInternal<?> record, String iClusterName,
      final ORecordVersion iVersion, boolean iCallTriggers, final OPERATION_MODE iMode, boolean iForceCreate,
      final ORecordCallback<? extends Number> iRecordCreatedCallback, ORecordCallback<ORecordVersion> iRecordUpdatedCallback) {
    checkOpeness();
    setCurrentDatabaseinThreadLocal();

    if (!record.isDirty())
      return (RET) record;

    final ORecordId rid = (ORecordId) record.getIdentity();

    if (rid == null)
      throw new ODatabaseException(
          "Cannot create record because it has no identity. Probably is not a regular record or contains projections of fields rather than a full record");

    final Set<OIndex<?>> lockedIndexes = new HashSet<OIndex<?>>();
    record.setInternalStatus(ORecordElement.STATUS.MARSHALLING);
    try {
      if (record instanceof ODocument)
        acquireIndexModificationLock((ODocument) record, lockedIndexes);

      final boolean wasNew = iForceCreate || rid.isNew();

      if (wasNew && rid.clusterId == -1)
        // ASSIGN THE CLUSTER ID
        rid.clusterId = iClusterName != null ? getClusterIdByName(iClusterName) : getDefaultClusterId();

      byte[] stream;
      final OStorageOperationResult<ORecordVersion> operationResult;

      ORecordSerializationContext.pushContext();
      try {
        // STREAM.LENGTH == 0 -> RECORD IN STACK: WILL BE SAVED AFTER
        stream = record.toStream();

        final boolean isNew = iForceCreate || rid.isNew();
        if (isNew)
          // NOTIFY IDENTITY HAS CHANGED
          record.onBeforeIdentityChanged(record);
        else if (stream == null || stream.length == 0)
          // ALREADY CREATED AND WAITING FOR THE RIGHT UPDATE (WE'RE IN A GRAPH)
          return (RET) record;

        if (isNew && rid.clusterId < 0)
          rid.clusterId = iClusterName != null ? getClusterIdByName(iClusterName) : getDefaultClusterId();

        if (rid.clusterId > -1 && iClusterName == null)
          iClusterName = getClusterNameById(rid.clusterId);

        checkRecordClass(record, iClusterName, rid, isNew);

        checkSecurity(ODatabaseSecurityResources.CLUSTER, wasNew ? ORole.PERMISSION_CREATE : ORole.PERMISSION_UPDATE, iClusterName);

        if (stream != null && stream.length > 0) {
          if (iCallTriggers) {
            final TYPE triggerType = wasNew ? TYPE.BEFORE_CREATE : TYPE.BEFORE_UPDATE;

            final RESULT hookResult = callbackHooks(triggerType, record);
            if (hookResult == RESULT.RECORD_CHANGED)
              stream = updateStream(record);
            else if (hookResult == RESULT.SKIP_IO)
              return (RET) record;
          }
        }

        if (!record.isDirty())
          return (RET) record;

        // CHECK IF ENABLE THE MVCC OR BYPASS IT
        final ORecordVersion realVersion = !mvcc || iVersion.isUntracked() ? OVersionFactory.instance().createUntrackedVersion()
            : record.getRecordVersion();

        final int dataSegmentId = dataSegmentStrategy.assignDataSegmentId(this, record);
        try {
          // SAVE IT
          operationResult = underlying.save(dataSegmentId, rid, record.isContentChanged(), stream == null ? new byte[0] : stream,
              realVersion, record.getRecordType(), iMode.ordinal(), iForceCreate, iRecordCreatedCallback, iRecordUpdatedCallback);

          final ORecordVersion version = operationResult.getResult();

          if (isNew) {
            // UPDATE INFORMATION: CLUSTER ID+POSITION
            ((ORecordId) record.getIdentity()).copyFrom(rid);
            // NOTIFY IDENTITY HAS CHANGED
            record.onAfterIdentityChanged(record);
            // UPDATE INFORMATION: CLUSTER ID+POSITION
          }

          record.fill(rid, version, stream, stream == null || stream.length == 0);

          callbackHookSuccess(record, iCallTriggers, wasNew, stream, operationResult);
        } catch (Throwable t) {
          callbackHookFailure(record, iCallTriggers, wasNew, stream);
          throw t;
        }
      } finally {
        ORecordSerializationContext.pullContext();
      }

      if (stream != null && stream.length > 0 && !operationResult.isMoved())
        // ADD/UPDATE IT IN CACHE IF IT'S ACTIVE
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188249606/fstmerge_var1_6524085319841631489
        getLevel1Cache().updateRecord(record);

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188249606/fstmerge_base_1665642800677063203
        getLevel1Cache().updateRecord(record);
=======
        getLocalCache().updateRecord(record);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188249606/fstmerge_var2_8745711408276320576
    } catch (OException e) {
      throw e;
    } catch (Throwable t) {
      throw new ODatabaseException("Error on saving record in cluster #" + record.getIdentity().getClusterId(), t);
    } finally {
      releaseIndexModificationLock(lockedIndexes);
      record.setInternalStatus(ORecordElement.STATUS.LOADED);
    }
    return (RET) record;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/core/src/main/java/com/orientechnologies/orient/core/db/record/ODatabaseRecordAbstract.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public OStringBuilderSerializable toStream(StringBuilder output) throws OSerializationException {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414188249914/fstmerge_var1_7991194479708727285
    final ORecordSerializationContext context = ORecordSerializationContext.getContext();
    if (context != null) {
      if (delegate.size() >= topThreshold && isEmbedded()
          && ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager() != null) {
        ORidBagDelegate oldDelegate = delegate;
        delegate = new OSBTreeRidBag();
        boolean oldAutoConvert = oldDelegate.isAutoConvertToRecord();
        oldDelegate.setAutoConvertToRecord(false);

        for (OIdentifiable identifiable : oldDelegate)
          delegate.add(identifiable);

        final ORecord<?> owner = oldDelegate.getOwner();
        delegate.setOwner(owner);
        owner.setDirty();

        oldDelegate.setAutoConvertToRecord(oldAutoConvert);
        oldDelegate.requestDelete();

      } else if (delegate.size() <= bottomThreshold && !isEmbedded()) {
        ORidBagDelegate oldDelegate = delegate;
        boolean oldAutoConvert = oldDelegate.isAutoConvertToRecord();
        oldDelegate.setAutoConvertToRecord(false);
        delegate = new OEmbeddedRidBag();

        for (OIdentifiable identifiable : oldDelegate)
          delegate.add(identifiable);

        final ORecord<?> owner = oldDelegate.getOwner();
        delegate.setOwner(owner);
        owner.setDirty();

        oldDelegate.setAutoConvertToRecord(oldAutoConvert);
        oldDelegate.requestDelete();
      }
    }

    final UUID oldUuid = uuid;
    final OSBTreeCollectionManager sbTreeCollectionManager = ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager();
    if (sbTreeCollectionManager != null)
      uuid = sbTreeCollectionManager.listenForChanges(this);
    else
      uuid = null;

    boolean hasUuid = uuid != null;

    final int serializedSize = OByteSerializer.BYTE_SIZE + delegate.getSerializedSize()
        + ((hasUuid) ? OUUIDSerializer.UUID_SIZE : 0);
    final byte[] stream = new byte[serializedSize];

    byte configByte = 0;
    if (isEmbedded())
      configByte |= 1;

    if (hasUuid)
      configByte |= 2;

    stream[0] = configByte;

    int offset = 1;
    if (hasUuid) {
      OUUIDSerializer.INSTANCE.serialize(uuid, stream, offset);
      offset += OUUIDSerializer.UUID_SIZE;
    }

    delegate.serialize(stream, offset, oldUuid);

    output.append(OBase64Utils.encodeBytes(stream));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414188249914/fstmerge_base_7071161093793614657
    final ORecordSerializationContext context = ORecordSerializationContext.getContext();
    if (context != null) {
      if (delegate.size() >= topThreshold && isEmbedded() && ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager() != null  ) {
        ORidBagDelegate oldDelegate = delegate;
        delegate = new OSBTreeRidBag();
        boolean oldAutoConvert = oldDelegate.isAutoConvertToRecord();
        oldDelegate.setAutoConvertToRecord(false);

        for (OIdentifiable identifiable : oldDelegate)
          delegate.add(identifiable);

        delegate.setOwner(oldDelegate.getOwner());
        oldDelegate.setAutoConvertToRecord(oldAutoConvert);
        oldDelegate.requestDelete();

      } else if (delegate.size() <= bottomThreshold && !isEmbedded()) {
        ORidBagDelegate oldDelegate = delegate;
        boolean oldAutoConvert = oldDelegate.isAutoConvertToRecord();
        oldDelegate.setAutoConvertToRecord(false);
        delegate = new OEmbeddedRidBag();

        for (OIdentifiable identifiable : oldDelegate)
          delegate.add(identifiable);

        delegate.setOwner(oldDelegate.getOwner());
        oldDelegate.setAutoConvertToRecord(oldAutoConvert);
        oldDelegate.requestDelete();
      }
    }

    final UUID oldUuid = uuid;
    final OSBTreeCollectionManager sbTreeCollectionManager = ODatabaseRecordThreadLocal.INSTANCE.get().getSbTreeCollectionManager();
    if (sbTreeCollectionManager != null)
      uuid = sbTreeCollectionManager.listenForChanges(this);
    else
      uuid = null;

    boolean hasUuid = uuid != null;

    final int serializedSize = OByteSerializer.BYTE_SIZE + delegate.getSerializedSize()
        + ((hasUuid) ? OUUIDSerializer.UUID_SIZE : 0);
    final byte[] stream = new byte[serializedSize];

    byte configByte = 0;
    if (isEmbedded())
      configByte |= 1;

    if (hasUuid)
      configByte |= 2;

    stream[0] = configByte;

    int offset = 1;
    if (hasUuid) {
      OUUIDSerializer.INSTANCE.serialize(uuid, stream, offset);
      offset += OUUIDSerializer.UUID_SIZE;
    }

    delegate.serialize(stream, offset, oldUuid);

    output.append(OBase64Utils.encodeBytes(stream));
=======
    final BytesContainer container = new BytesContainer();
    toStream(container);
    output.append(OBase64Utils.encodeBytes(container.bytes, 0, container.offset));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414188249914/fstmerge_var2_3223666905411341319
    return this;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0ccab_f0f20/rev_0ccab-f0f20/core/src/main/java/com/orientechnologies/orient/core/db/record/ridbag/ORidBag.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_998dc_b511a/rev_998dc-b511a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5cbe8_654f9/rev_5cbe8-654f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_3a6c3_711ab/rev_3a6c3-711ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5c99c_d6968/rev_5c99c-d6968.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a3fa7_0aec5/rev_a3fa7-0aec5.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## protected boolean                  sorted              = true; ##FSTMerge## protected boolean sorted              = true;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a3fa7_0aec5/rev_a3fa7-0aec5/core/src/main/java/com/orientechnologies/orient/core/db/record/ORecordLazySet.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_264ec_a3fa7/rev_264ec-a3fa7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_71af7_1bfa5/rev_71af7-1bfa5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9511c_71af7/rev_9511c-71af7.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.6-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.5-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9511c_71af7/rev_9511c-71af7/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414192524059/fstmerge_var1_1029679547736004876
public OLogSequenceNumber log(OWALRecord record) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      final byte[] serializedForm = OWALRecordsFactory.INSTANCE.toStream(record);

      LogSegment last = logSegments.get(logSegments.size() - 1);
      long lastSize = last.filledUpTo();

      final OLogSequenceNumber lsn = last.logRecord(serializedForm);
      record.setLsn(lsn);

      if (record.isUpdateMasterRecord()) {
        lastCheckpoint = lsn;
        if (useFirstMasterRecord) {
          firstMasterRecord = lsn;
          writeMasterRecord(0, firstMasterRecord);
          useFirstMasterRecord = false;
        } else {
          secondMasterRecord = lsn;
          writeMasterRecord(1, secondMasterRecord);
          useFirstMasterRecord = true;
        }
      }

      final long sizeDiff = last.filledUpTo() - lastSize;
      logSize += sizeDiff;

      if (logSize >= maxLogSize) {
        final LogSegment first = removeHeadSegmentFromList();

				if (first != null) {
					first.stopFlush(false);

					logSize -= first.filledUpTo();

					first.delete(false);
					fixMasterRecords();
				}
      }

      if (last.filledUpTo() >= maxSegmentSize) {
        last.stopFlush(true);

        last = new LogSegment(new File(walLocation, getSegmentName(last.getOrder() + 1)), maxPagesCacheSize);
        last.init();
        last.startFlush();

        logSegments.add(last);
      }

      return lsn;
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414192524059/fstmerge_base_7806297378163389533
public OLogSequenceNumber log(OWALRecord record) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      final byte[] serializedForm = OWALRecordsFactory.INSTANCE.toStream(record);

      LogSegment last = logSegments.get(logSegments.size() - 1);
      long lastSize = last.filledUpTo();

      final OLogSequenceNumber lsn = last.logRecord(serializedForm);
      record.setLsn(lsn);

      if (record.isUpdateMasterRecord()) {
        lastCheckpoint = lsn;
        if (useFirstMasterRecord) {
          firstMasterRecord = lsn;
          writeMasterRecord(0, firstMasterRecord);
          useFirstMasterRecord = false;
        } else {
          secondMasterRecord = lsn;
          writeMasterRecord(1, secondMasterRecord);
          useFirstMasterRecord = true;
        }
      }

      final long sizeDiff = last.filledUpTo() - lastSize;
      logSize += sizeDiff;

      if (logSize >= maxLogSize) {
        LogSegment first = logSegments.get(0);
        first.stopFlush(false);

        logSize -= first.filledUpTo();

        first.delete(false);
        logSegments.remove(0);

        fixMasterRecords();
      }

      if (last.filledUpTo() >= maxSegmentSize) {
        last.stopFlush(true);

        last = new LogSegment(new File(walLocation, getSegmentName(last.getOrder() + 1)), maxPagesCacheSize);
        last.init();
        last.startFlush();

        logSegments.add(last);
      }

      return lsn;
    }
  }
=======
OLogSequenceNumber log(OWALRecord record) throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414192524059/fstmerge_var2_2992463803799208619

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9511c_71af7/rev_9511c-71af7/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414192524093/fstmerge_var1_7224937383720405029
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size() - 1; i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = removeHeadSegmentFromList();
        if (logSegment != null)
          logSegment.delete(false);
      }
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414192524093/fstmerge_base_7453146970478586833
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size() - 1; i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = logSegments.remove(0);
        logSegment.delete(false);
      }
    }
  }
=======
void cutTill(OLogSequenceNumber lsn) throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414192524093/fstmerge_var2_5622585878449699646

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9511c_71af7/rev_9511c-71af7/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9752f_c3060/rev_9752f-c3060.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0fe90_23b7d/rev_0fe90-23b7d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public void onOpen(final ODatabase iDatabase) {
    final String dbUrl = OSystemVariableResolver.resolveSystemVariables(iDatabase.getURL());

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414193573721/fstmerge_var1_6930034338026535460
    if (dbUrl.startsWith("plocal:")) {
      // CHECK SPECIAL CASE WITH MULTIPLE SERVER INSTANCES ON THE SAME JVM
      final String dbDirectory = serverInstance.getDatabaseDirectory();
      if (!dbUrl.substring("plocal:".length()).startsWith(dbDirectory))
        // SKIP IT: THIS HAPPENS ONLY ON MULTIPLE SERVER INSTANCES ON THE SAME JVM
        return;
    }

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414193573721/fstmerge_base_8055520111436345689
    if (!dbUrl.substring(dbUrl.indexOf(":") + 1).startsWith(dbDirectory))
      // NOT OWN DB, SKIP IT
      return;

=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414193573721/fstmerge_var2_4777889329576853422
    synchronized (cachedDatabaseConfiguration) {
      final ODistributedConfiguration cfg = getDatabaseConfiguration(iDatabase.getName());
      if (cfg == null)
        return;

      if (iDatabase instanceof ODatabaseComplex<?> && !(iDatabase.getStorage() instanceof ODistributedStorage)) {
        ODistributedStorage storage = storages.get(iDatabase.getURL());
        if (storage == null) {
          storage = new ODistributedStorage(serverInstance, (OStorageEmbedded) iDatabase.getStorage());
          final ODistributedStorage oldStorage = storages.putIfAbsent(iDatabase.getURL(), storage);
          if (oldStorage != null)
            storage = oldStorage;
        }

        iDatabase.replaceStorage(storage);
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0fe90_23b7d/rev_0fe90-23b7d/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedAbstractPlugin.java
Conflict type: LineBasedMCFd
Conflict body: 
private boolean checkClusterRenameOk(int clusterId, String newName) {
    for (OClass clazz : owner.getClasses()) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414193600301/fstmerge_var1_4734009058469185291
      if (!clazz.getName().equals(newName) && (clazz.getDefaultClusterId() == clusterId || clazz.hasClusterId(clusterId))) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414193600301/fstmerge_base_7582456059422412404
      if (!clazz.getName().equals(newName)
          && (clazz.getDefaultClusterId() == clusterId || Arrays.asList(clazz.getClusterIds()).contains(clusterId))) {
=======
      if (!clazz.getName().equals(newName)
 && (clazz.getDefaultClusterId() == clusterId || clazz.hasClusterId(clusterId))) {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414193600301/fstmerge_var2_2180736703325016089
        return false;
      }
    }
    return true;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0fe90_23b7d/rev_0fe90-23b7d/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassImpl.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a8bb0_f2162/rev_a8bb0-f2162.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a8bb0_f5f5c/rev_a8bb0-f5f5c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_787bb_471c6/rev_787bb-471c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1f0cd_12011/rev_1f0cd-12011.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b587f_b70bc/rev_b587f-b70bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_be366_c89d0/rev_be366-c89d0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_13219_86f22/rev_13219-86f22.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197268672/fstmerge_var1_1941984957206736586
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197268672/fstmerge_base_8328593326640128982
public String getDataSegmentName();
=======
@Deprecated
  public String getDataSegmentName();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197268672/fstmerge_var2_7728398948287362124

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_13219_86f22/rev_13219-86f22/core/src/main/java/com/orientechnologies/orient/core/record/ORecord.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197268676/fstmerge_var1_6050736596599211410
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197268676/fstmerge_base_6432697760286339111
public <RET extends ORecord<T>> RET setDataSegmentName(String iName);
=======
@Deprecated
  public <RET extends ORecord<T>> RET setDataSegmentName(String iName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197268676/fstmerge_var2_685511523035599660

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_13219_86f22/rev_13219-86f22/core/src/main/java/com/orientechnologies/orient/core/record/ORecord.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.6"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.6-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197809544/fstmerge_var1_6945221261454841356
public OLogSequenceNumber log(OWALRecord record) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      final byte[] serializedForm = OWALRecordsFactory.INSTANCE.toStream(record);

      LogSegment last = logSegments.get(logSegments.size() - 1);
      long lastSize = last.filledUpTo();

      final OLogSequenceNumber lsn = last.logRecord(serializedForm);
      record.setLsn(lsn);

      if (record.isUpdateMasterRecord()) {
        lastCheckpoint = lsn;
        if (useFirstMasterRecord) {
          firstMasterRecord = lsn;
          writeMasterRecord(0, firstMasterRecord);
          useFirstMasterRecord = false;
        } else {
          secondMasterRecord = lsn;
          writeMasterRecord(1, secondMasterRecord);
          useFirstMasterRecord = true;
        }
      }

      final long sizeDiff = last.filledUpTo() - lastSize;
      logSize += sizeDiff;

      if (logSize >= maxLogSize) {
        final LogSegment first = removeHeadSegmentFromList();

        if (first != null) {
          first.stopFlush(false);

          first.delete(false);

          recalculateLogSize();

          fixMasterRecords();
        }
      }

      if (last.filledUpTo() >= maxSegmentSize) {
        last.stopFlush(true);

        last = new LogSegment(new File(walLocation, getSegmentName(last.getOrder() + 1)), maxPagesCacheSize);
        last.init();
        last.startFlush();

        logSegments.add(last);
      }

      return lsn;
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197809544/fstmerge_base_5896511201699563610
public OLogSequenceNumber log(OWALRecord record) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      final byte[] serializedForm = OWALRecordsFactory.INSTANCE.toStream(record);

      LogSegment last = logSegments.get(logSegments.size() - 1);
      long lastSize = last.filledUpTo();

      final OLogSequenceNumber lsn = last.logRecord(serializedForm);
      record.setLsn(lsn);

      if (record.isUpdateMasterRecord()) {
        lastCheckpoint = lsn;
        if (useFirstMasterRecord) {
          firstMasterRecord = lsn;
          writeMasterRecord(0, firstMasterRecord);
          useFirstMasterRecord = false;
        } else {
          secondMasterRecord = lsn;
          writeMasterRecord(1, secondMasterRecord);
          useFirstMasterRecord = true;
        }
      }

      final long sizeDiff = last.filledUpTo() - lastSize;
      logSize += sizeDiff;

      if (logSize >= maxLogSize) {
        final LogSegment first = removeHeadSegmentFromList();

				if (first != null) {
					first.stopFlush(false);

					logSize -= first.filledUpTo();

					first.delete(false);
					fixMasterRecords();
				}
      }

      if (last.filledUpTo() >= maxSegmentSize) {
        last.stopFlush(true);

        last = new LogSegment(new File(walLocation, getSegmentName(last.getOrder() + 1)), maxPagesCacheSize);
        last.init();
        last.startFlush();

        logSegments.add(last);
      }

      return lsn;
    }
  }
=======
OLogSequenceNumber log(OWALRecord record) throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197809544/fstmerge_var2_8488697792006859429

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197809548/fstmerge_var1_4996919005856257877
public void truncate() throws IOException {
    synchronized (syncObject) {
      if (logSegments.size() < 2)
        return;

      ListIterator<LogSegment> iterator = logSegments.listIterator(logSegments.size() - 1);
      while (iterator.hasPrevious()) {
        final LogSegment logSegment = iterator.previous();
        logSegment.delete(false);
        iterator.remove();
      }

			recalculateLogSize();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197809548/fstmerge_base_247070618898615429
public void truncate() throws IOException {
    synchronized (syncObject) {
      if (logSegments.size() < 2)
        return;

      ListIterator<LogSegment> iterator = logSegments.listIterator(logSegments.size() - 1);
      while (iterator.hasPrevious()) {
        final LogSegment logSegment = iterator.previous();
        logSegment.delete(false);
        iterator.remove();
      }
    }
  }
=======
void truncate() throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197809548/fstmerge_var2_2000960048572141410

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197809578/fstmerge_var1_3488015846921971323
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size() - 1; i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = removeHeadSegmentFromList();
        if (logSegment != null)
          logSegment.delete(false);
      }

      recalculateLogSize();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197809578/fstmerge_base_8652506959610567004
public void cutTill(OLogSequenceNumber lsn) throws IOException {
    synchronized (syncObject) {
      checkForClose();

      flush();

      int lastTruncateIndex = -1;

      for (int i = 0; i < logSegments.size() - 1; i++) {
        final LogSegment logSegment = logSegments.get(i);

        if (logSegment.end().compareTo(lsn) < 0)
          lastTruncateIndex = i;
        else
          break;
      }

      for (int i = 0; i <= lastTruncateIndex; i++) {
        final LogSegment logSegment = removeHeadSegmentFromList();
        if (logSegment != null)
          logSegment.delete(false);
      }
    }
  }
=======
void cutTill(OLogSequenceNumber lsn) throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197809578/fstmerge_var2_5027104823124252074

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414197809686/fstmerge_var1_4637566800900713448
public OWriteAheadLog(int maxPagesCacheSize, int commitDelay, long maxSegmentSize, long maxLogSize, OStorageLocalAbstract storage)
      throws IOException {
    this.maxPagesCacheSize = maxPagesCacheSize;
    this.commitDelay = commitDelay;
    this.maxSegmentSize = maxSegmentSize;
    this.maxLogSize = maxLogSize;
    this.storage = storage;

    try {
      this.walLocation = new File(calculateWalPath(this.storage));

      File[] walFiles = this.walLocation.listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
          return validateName(name);
        }
      });

      if (walFiles == null)
        throw new IllegalStateException(
            "Location passed in WAL does not exist, or IO error was happened. DB can not work in durable mode in such case.");

      if (walFiles.length == 0) {
        LogSegment logSegment = new LogSegment(new File(this.walLocation, getSegmentName(0)), maxPagesCacheSize);
        logSegment.init();
        logSegment.startFlush();
        logSegments.add(logSegment);

        logSize = 0;

        flushedLsn = null;
      } else {

				logSize = 0;

        for (File walFile : walFiles) {
          LogSegment logSegment = new LogSegment(walFile, maxPagesCacheSize);
          logSegment.init();

          logSegments.add(logSegment);
          logSize += logSegment.filledUpTo();
        }

        Collections.sort(logSegments);

        logSegments.get(logSegments.size() - 1).startFlush();
        flushedLsn = readFlushedLSN();
      }

      masterRecordFile = new File(walLocation, this.storage.getName() + MASTER_RECORD_EXTENSION);
      masterRecordLSNHolder = new RandomAccessFile(masterRecordFile, "rws");

      if (masterRecordLSNHolder.length() > 0) {
        firstMasterRecord = readMasterRecord(this.storage.getName(), 0);
        secondMasterRecord = readMasterRecord(this.storage.getName(), 1);

        if (firstMasterRecord == null) {
          useFirstMasterRecord = true;
          lastCheckpoint = secondMasterRecord;
        } else if (secondMasterRecord == null) {
          useFirstMasterRecord = false;
          lastCheckpoint = firstMasterRecord;
        } else {
          if (firstMasterRecord.compareTo(secondMasterRecord) >= 0) {
            lastCheckpoint = firstMasterRecord;
            useFirstMasterRecord = false;
          } else {
            lastCheckpoint = secondMasterRecord;
            useFirstMasterRecord = true;
          }
        }
      }

      fixMasterRecords();

    } catch (FileNotFoundException e) {
      // never happened
      OLogManager.instance().error(this, "Error during file initialization for storage %s", e, this.storage.getName());
      throw new IllegalStateException("Error during file initialization for storage " + this.storage.getName(), e);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414197809686/fstmerge_base_1483904758864210694
public OWriteAheadLog(int maxPagesCacheSize, int commitDelay, long maxSegmentSize, long maxLogSize, OStorageLocalAbstract storage)
      throws IOException {
    this.maxPagesCacheSize = maxPagesCacheSize;
    this.commitDelay = commitDelay;
    this.maxSegmentSize = maxSegmentSize;
    this.maxLogSize = maxLogSize;
    this.storage = storage;

    try {
      this.walLocation = new File(calculateWalPath(this.storage));

      File[] walFiles = this.walLocation.listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
          return validateName(name);
        }
      });

      if (walFiles == null)
        throw new IllegalStateException(
            "Location passed in WAL does not exist, or IO error was happened. DB can not work in durable mode in such case.");

      if (walFiles.length == 0) {
        LogSegment logSegment = new LogSegment(new File(this.walLocation, getSegmentName(0)), maxPagesCacheSize);
        logSegment.init();
        logSegment.startFlush();
        logSegments.add(logSegment);

        logSize = 0;

        flushedLsn = null;
      } else {

        for (File walFile : walFiles) {
          LogSegment logSegment = new LogSegment(walFile, maxPagesCacheSize);
          logSegment.init();

          logSegments.add(logSegment);
          logSize += logSegment.filledUpTo();
        }

        Collections.sort(logSegments);

        logSegments.get(logSegments.size() - 1).startFlush();
        flushedLsn = readFlushedLSN();
      }

      masterRecordFile = new File(walLocation, this.storage.getName() + MASTER_RECORD_EXTENSION);
      masterRecordLSNHolder = new RandomAccessFile(masterRecordFile, "rws");

      if (masterRecordLSNHolder.length() > 0) {
        firstMasterRecord = readMasterRecord(this.storage.getName(), 0);
        secondMasterRecord = readMasterRecord(this.storage.getName(), 1);

        if (firstMasterRecord == null) {
          useFirstMasterRecord = true;
          lastCheckpoint = secondMasterRecord;
        } else if (secondMasterRecord == null) {
          useFirstMasterRecord = false;
          lastCheckpoint = firstMasterRecord;
        } else {
          if (firstMasterRecord.compareTo(secondMasterRecord) >= 0) {
            lastCheckpoint = firstMasterRecord;
            useFirstMasterRecord = false;
          } else {
            lastCheckpoint = secondMasterRecord;
            useFirstMasterRecord = true;
          }
        }
      }

      fixMasterRecords();

    } catch (FileNotFoundException e) {
      // never happened
      OLogManager.instance().error(this, "Error during file initialization for storage %s", e, this.storage.getName());
      throw new IllegalStateException("Error during file initialization for storage " + this.storage.getName(), e);
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414197809686/fstmerge_var2_4902127010989200997

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final int VERSION           = 8; ##FSTMerge## public static final int VERSION = 8; ##FSTMerge## public static final int VERSION = 9;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fee36_13219/rev_fee36-13219/core/src/main/java/com/orientechnologies/orient/core/db/tool/ODatabaseExport.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_98f4b_010db/rev_98f4b-010db.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa84d_63259/rev_fa84d-63259.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.7-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.6"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa84d_63259/rev_fa84d-63259/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414198879579/fstmerge_var1_7545903575594818509
public String getClusterType(final String iClusterName) {
    return storage.getClusterTypeByName(iClusterName.toLowerCase());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414198879579/fstmerge_base_8991745191341579139
public String getClusterType(final String iClusterName) {
    return storage.getClusterTypeByName(iClusterName);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414198879579/fstmerge_var2_9086441343100527972

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa84d_63259/rev_fa84d-63259/core/src/main/java/com/orientechnologies/orient/core/db/raw/ODatabaseRaw.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414198888319/fstmerge_var1_7130734722618623648
private String chooseTreeAlgorithm(String algorithm, OStorage storage) {
    if (algorithm == null)
      if (storage.getType().equals(OEngineMemory.NAME) || !useSBTree)
        algorithm = ODefaultIndexFactory.MVRBTREE_ALGORITHM;
      else
        algorithm = ODefaultIndexFactory.SBTREE_ALGORITHM;
    return algorithm;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414198888319/fstmerge_base_1566667777192964128
private String chooseTreeAlgorithm(String algorithm, OStorage storage) {
    if (algorithm == null)
      if ((storage.getType().equals(OEngineLocal.NAME) || storage.getType().equals(OEngineLocalPaginated.NAME)) && useSBTree)
        algorithm = ODefaultIndexFactory.SBTREE_ALGORITHM;
      else
        algorithm = ODefaultIndexFactory.MVRBTREE_ALGORITHM;
    return algorithm;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414198888319/fstmerge_var2_8648039093727343801

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fa84d_63259/rev_fa84d-63259/core/src/main/java/com/orientechnologies/orient/core/index/OIndexManagerShared.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1d65d_50b50/rev_1d65d-50b50.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_912d8_e8a5c/rev_912d8-e8a5c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b1d20_09553/rev_b1d20-09553.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a054e_ab9cd/rev_a054e-ab9cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201544882/fstmerge_var1_3766854591245314638
public void commit(final OTransaction clientTx, Runnable callback) {
    modificationLock.requestModificationLock();
    try {
      lock.acquireExclusiveLock();
      try {
        if (writeAheadLog == null)
          throw new OStorageException("WAL mode is not active. Transactions are not supported in given mode");

        dirtyFlag.makeDirty();
        startStorageTx(clientTx);

        final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

        while (clientTx.getCurrentRecordEntries().iterator().hasNext()) {
          for (ORecordOperation txEntry : clientTx.getCurrentRecordEntries())
            tmpEntries.add(txEntry);

          clientTx.clearRecordEntries();

          for (ORecordOperation txEntry : tmpEntries)
            // COMMIT ALL THE SINGLE ENTRIES ONE BY ONE
            commitEntry(clientTx, txEntry);
        }

        if (callback != null)
          callback.run();

        endStorageTx();

        OTransactionAbstract.updateCacheFromEntries(clientTx, clientTx.getAllRecordEntries(), true);

      } catch (Exception e) {
        // WE NEED TO CALL ROLLBACK HERE, IN THE LOCK
        OLogManager.instance().debug(this, "Error during transaction commit, transaction will be rolled back (tx-id=%d)", e,
            clientTx.getId());
        rollback(clientTx);
        if (e instanceof OException)
          throw ((OException) e);
        else
          throw new OStorageException("Error during transaction commit.", e);
      } finally {
        transaction.set(null);
        lock.releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201544882/fstmerge_base_5614752231599357928
public void commit(final OTransaction clientTx, Runnable callback) {
    modificationLock.requestModificationLock();
    try {
      lock.acquireExclusiveLock();
      try {
        if (writeAheadLog == null)
          throw new OStorageException("WAL mode is not active. Transactions are not supported in given mode");

        dirtyFlag.makeDirty();
        startStorageTx(clientTx);

        final List<ORecordOperation> tmpEntries = new ArrayList<ORecordOperation>();

        while (clientTx.getCurrentRecordEntries().iterator().hasNext()) {
          for (ORecordOperation txEntry : clientTx.getCurrentRecordEntries())
            tmpEntries.add(txEntry);

          clientTx.clearRecordEntries();

          for (ORecordOperation txEntry : tmpEntries)
            // COMMIT ALL THE SINGLE ENTRIES ONE BY ONE
            commitEntry(clientTx, txEntry);
        }

        if (callback != null)
          callback.run();

        endStorageTx();

        OTransactionAbstract.updateCacheFromEntries(clientTx, clientTx.getAllRecordEntries(), false);

      } catch (Exception e) {
        // WE NEED TO CALL ROLLBACK HERE, IN THE LOCK
        OLogManager.instance().debug(this, "Error during transaction commit, transaction will be rolled back (tx-id=%d)", e,
            clientTx.getId());
        rollback(clientTx);
        if (e instanceof OException)
          throw ((OException) e);
        else
          throw new OStorageException("Error during transaction commit.", e);
      } finally {
        transaction.set(null);
        lock.releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201544882/fstmerge_var2_5902204781507492306

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201545001/fstmerge_var1_5832903571895464872
private void doClose(boolean force, boolean onDelete) {
    if (status == STATUS.CLOSED)
      return;

    final long timer = Orient.instance().getProfiler().startChrono();

    lock.acquireExclusiveLock();
    try {
      if (!checkForClose(force))
        return;

      status = STATUS.CLOSING;

      if (!onDelete)
        makeFullCheckpoint();

      if (writeAheadLog != null) {
        fuzzyCheckpointExecutor.shutdown();
        if (!fuzzyCheckpointExecutor.awaitTermination(
            OGlobalConfiguration.WAL_FUZZY_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(), TimeUnit.SECONDS))
          throw new OStorageException("Can not terminate fuzzy checkpoint task");

        checkpointExecutor.shutdown();
        if (!checkpointExecutor.awaitTermination(OGlobalConfiguration.WAL_FULL_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(),
            TimeUnit.SECONDS))
          throw new OStorageException("Can not terminate full checkpoint task");
      }

      for (OCluster cluster : clusters)
        if (cluster != null)
          cluster.close(!onDelete);

      clusters.clear();
      clusterMap.clear();

      if (configuration != null)
        configuration.close();

      level2Cache.shutdown();

      super.close(force, onDelete);

      if (!onDelete)
        diskCache.close();
      else
        diskCache.delete();

      if (writeAheadLog != null) {
        writeAheadLog.close();
        if (onDelete)
          writeAheadLog.delete();
      }

      if (onDelete)
        dirtyFlag.delete();
      else {
        dirtyFlag.clearDirty();
        dirtyFlag.close();
      }

      status = STATUS.CLOSED;
    } catch (InterruptedException ie) {
      OLogManager.instance().error(this, "Error on closing of storage '" + name, ie, OStorageException.class);
      Thread.interrupted();
    } catch (IOException e) {
      OLogManager.instance().error(this, "Error on closing of storage '" + name, e, OStorageException.class);
    } finally {
      lock.releaseExclusiveLock();

      Orient.instance().getProfiler().stopChrono("db." + name + ".close", "Close a database", timer, "db.*.close");
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201545001/fstmerge_base_3895644928856591027
private void doClose(boolean force, boolean onDelete) {
    if (status == STATUS.CLOSED)
      return;

    final long timer = Orient.instance().getProfiler().startChrono();

    lock.acquireExclusiveLock();
    try {
      if (!checkForClose(force))
        return;

      status = STATUS.CLOSING;

      if (!onDelete)
        makeFullCheckpoint();

      if (writeAheadLog != null) {
        fuzzyCheckpointExecutor.shutdown();
        if (!fuzzyCheckpointExecutor.awaitTermination(
            OGlobalConfiguration.WAL_FUZZY_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(), TimeUnit.SECONDS))
          throw new OStorageException("Can not terminate fuzzy checkpoint task");

        checkpointExecutor.shutdown();
        if (!checkpointExecutor.awaitTermination(OGlobalConfiguration.WAL_FULL_CHECKPOINT_SHUTDOWN_TIMEOUT.getValueAsInteger(),
            TimeUnit.SECONDS))
          throw new OStorageException("Can not terminate full checkpoint task");
      }

      for (OCluster cluster : clusters)
        if (cluster != null)
          cluster.close(!onDelete);

      clusters.clear();
      clusterMap.clear();

      if (configuration != null)
        configuration.close();

      level2Cache.shutdown();

      super.close(force, onDelete);

      if (!onDelete)
        diskCache.close();
      else
        diskCache.delete();

      if (writeAheadLog != null && onDelete)
        writeAheadLog.delete();

      if (onDelete)
        dirtyFlag.delete();
      else {
        dirtyFlag.clearDirty();
        dirtyFlag.close();
      }

      status = STATUS.CLOSED;
    } catch (InterruptedException ie) {
      OLogManager.instance().error(this, "Error on closing of storage '" + name, ie, OStorageException.class);
      Thread.interrupted();
    } catch (IOException e) {
      OLogManager.instance().error(this, "Error on closing of storage '" + name, e, OStorageException.class);
    } finally {
      lock.releaseExclusiveLock();

      Orient.instance().getProfiler().stopChrono("db." + name + ".close", "Close a database", timer, "db.*.close");
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201545001/fstmerge_var2_1649722566609941711

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: SameSignatureCM
Conflict body: 
@Override
  public void set(OCluster.ATTRIBUTES attribute, Object value) throws IOException {
    if (attribute == null)
      throw new IllegalArgumentException("attribute is null");

    final String stringValue = value != null ? value.toString() : null;

    externalModificationLock.requestModificationLock();
    try {
      acquireExclusiveLock();
      try {

        switch (attribute) {
        case NAME:
          setNameInternal(stringValue);
          break;
        case USE_WAL:
          setUseWalInternal(stringValue);
          break;
        case RECORD_GROW_FACTOR:
          setRecordGrowFactorInternal(stringValue);
          break;
        case RECORD_OVERFLOW_GROW_FACTOR:
          setRecordOverflowGrowFactorInternal(stringValue);
          break;
        case COMPRESSION:
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201545304/fstmerge_var1_4433078196867697390
          if (getEntries() > 0)
            throw new IllegalArgumentException("Cannot change compression setting on cluster '" + getName()
                                                 + "' because it is not empty");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201545304/fstmerge_base_9108877457521178003
=======
          if (getEntries() > 0)
            throw new IllegalArgumentException("Cannot change compression setting on cluster '" + getName()
                + "' because it is not empty");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201545304/fstmerge_var2_649925072794106321
          setCompressionInternal(stringValue);
          break;
        default:
          throw new IllegalArgumentException("Runtime change of attribute '" + attribute + " is not supported");
        }

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      externalModificationLock.releaseModificationLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OPaginatedCluster.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201546026/fstmerge_var1_7244787399334153567
public void truncate() throws IOException {
    synchronized (syncObject) {
      if (logSegments.size() < 2)
        return;

      ListIterator<LogSegment> iterator = logSegments.listIterator(logSegments.size() - 1);
      while (iterator.hasPrevious()) {
        final LogSegment logSegment = iterator.previous();
        logSegment.delete(false);
        iterator.remove();
      }

      recalculateLogSize();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201546026/fstmerge_base_8589043651217948440
public void truncate() throws IOException {
    synchronized (syncObject) {
      if (logSegments.size() < 2)
        return;

      ListIterator<LogSegment> iterator = logSegments.listIterator(logSegments.size() - 1);
      while (iterator.hasPrevious()) {
        final LogSegment logSegment = iterator.previous();
        logSegment.delete(false);
        iterator.remove();
      }

			recalculateLogSize();
    }
  }
=======
void truncate() throws IOException;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201546026/fstmerge_var2_240279253249925306

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201546054/fstmerge_var1_5808154719389548256
public OLogSequenceNumber getFlushedLSN() {
    return flushedLsn;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201546054/fstmerge_base_5733554027286986528
public OLogSequenceNumber getFlushedLSN() {
    synchronized (syncObject) {
      checkForClose();

      return flushedLsn;
    }
  }
=======
OLogSequenceNumber getFlushedLSN();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201546054/fstmerge_var2_2045978722662982341

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201546113/fstmerge_var1_271082206553209442
public void delete(boolean flush) throws IOException {
      close(flush);

      boolean deleted = OFileUtils.delete(file);
      int retryCount = 0;

      while (!deleted) {
        OMemoryWatchDog.freeMemoryForResourceCleanup(100);

        deleted = OFileUtils.delete(file);
        retryCount++;

        if (retryCount > 10)
          throw new IOException("Can not delete file. Retry limit exceeded. (" + retryCount + ").");
      }
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201546113/fstmerge_base_1080130107184477141
public void delete(boolean flush) throws IOException {
      close(flush);

      boolean deleted = file.delete();
      while (!deleted) {
        OMemoryWatchDog.freeMemoryForResourceCleanup(100);
        deleted = !file.exists() || file.delete();
      }
    }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201546113/fstmerge_var2_3073087486572008187

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201546165/fstmerge_var1_4089963338438901474
public OWriteAheadLog(int maxPagesCacheSize, int commitDelay, long maxSegmentSize, long maxLogSize, OStorageLocalAbstract storage)
      throws IOException {
    this.maxPagesCacheSize = maxPagesCacheSize;
    this.commitDelay = commitDelay;
    this.maxSegmentSize = maxSegmentSize;
    this.maxLogSize = maxLogSize;
    this.storage = storage;

    try {
      this.walLocation = new File(calculateWalPath(this.storage));

      File[] walFiles = this.walLocation.listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
          return validateName(name);
        }
      });

      if (walFiles == null)
        throw new IllegalStateException(
            "Location passed in WAL does not exist, or IO error was happened. DB can not work in durable mode in such case.");

      if (walFiles.length == 0) {
        LogSegment logSegment = new LogSegment(new File(this.walLocation, getSegmentName(0)), maxPagesCacheSize);
        logSegment.init();
        logSegment.startFlush();
        logSegments.add(logSegment);

        logSize = 0;

        flushedLsn = null;
      } else {

        logSize = 0;

        for (File walFile : walFiles) {
          LogSegment logSegment = new LogSegment(walFile, maxPagesCacheSize);
          logSegment.init();

          logSegments.add(logSegment);
          logSize += logSegment.filledUpTo();
        }

        Collections.sort(logSegments);

        logSegments.get(logSegments.size() - 1).startFlush();
        flushedLsn = readFlushedLSN();
      }

      masterRecordFile = new File(walLocation, this.storage.getName() + MASTER_RECORD_EXTENSION);
      masterRecordLSNHolder = new RandomAccessFile(masterRecordFile, "rws");

      if (masterRecordLSNHolder.length() > 0) {
        firstMasterRecord = readMasterRecord(this.storage.getName(), 0);
        secondMasterRecord = readMasterRecord(this.storage.getName(), 1);

        if (firstMasterRecord == null) {
          useFirstMasterRecord = true;
          lastCheckpoint = secondMasterRecord;
        } else if (secondMasterRecord == null) {
          useFirstMasterRecord = false;
          lastCheckpoint = firstMasterRecord;
        } else {
          if (firstMasterRecord.compareTo(secondMasterRecord) >= 0) {
            lastCheckpoint = firstMasterRecord;
            useFirstMasterRecord = false;
          } else {
            lastCheckpoint = secondMasterRecord;
            useFirstMasterRecord = true;
          }
        }
      }

      fixMasterRecords();

    } catch (FileNotFoundException e) {
      // never happened
      OLogManager.instance().error(this, "Error during file initialization for storage %s", e, this.storage.getName());
      throw new IllegalStateException("Error during file initialization for storage " + this.storage.getName(), e);
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201546165/fstmerge_base_8069570845347903462
public OWriteAheadLog(int maxPagesCacheSize, int commitDelay, long maxSegmentSize, long maxLogSize, OStorageLocalAbstract storage)
      throws IOException {
    this.maxPagesCacheSize = maxPagesCacheSize;
    this.commitDelay = commitDelay;
    this.maxSegmentSize = maxSegmentSize;
    this.maxLogSize = maxLogSize;
    this.storage = storage;

    try {
      this.walLocation = new File(calculateWalPath(this.storage));

      File[] walFiles = this.walLocation.listFiles(new FilenameFilter() {
        @Override
        public boolean accept(File dir, String name) {
          return validateName(name);
        }
      });

      if (walFiles == null)
        throw new IllegalStateException(
            "Location passed in WAL does not exist, or IO error was happened. DB can not work in durable mode in such case.");

      if (walFiles.length == 0) {
        LogSegment logSegment = new LogSegment(new File(this.walLocation, getSegmentName(0)), maxPagesCacheSize);
        logSegment.init();
        logSegment.startFlush();
        logSegments.add(logSegment);

        logSize = 0;

        flushedLsn = null;
      } else {

				logSize = 0;

        for (File walFile : walFiles) {
          LogSegment logSegment = new LogSegment(walFile, maxPagesCacheSize);
          logSegment.init();

          logSegments.add(logSegment);
          logSize += logSegment.filledUpTo();
        }

        Collections.sort(logSegments);

        logSegments.get(logSegments.size() - 1).startFlush();
        flushedLsn = readFlushedLSN();
      }

      masterRecordFile = new File(walLocation, this.storage.getName() + MASTER_RECORD_EXTENSION);
      masterRecordLSNHolder = new RandomAccessFile(masterRecordFile, "rws");

      if (masterRecordLSNHolder.length() > 0) {
        firstMasterRecord = readMasterRecord(this.storage.getName(), 0);
        secondMasterRecord = readMasterRecord(this.storage.getName(), 1);

        if (firstMasterRecord == null) {
          useFirstMasterRecord = true;
          lastCheckpoint = secondMasterRecord;
        } else if (secondMasterRecord == null) {
          useFirstMasterRecord = false;
          lastCheckpoint = firstMasterRecord;
        } else {
          if (firstMasterRecord.compareTo(secondMasterRecord) >= 0) {
            lastCheckpoint = firstMasterRecord;
            useFirstMasterRecord = false;
          } else {
            lastCheckpoint = secondMasterRecord;
            useFirstMasterRecord = true;
          }
        }
      }

      fixMasterRecords();

    } catch (FileNotFoundException e) {
      // never happened
      OLogManager.instance().error(this, "Error during file initialization for storage %s", e, this.storage.getName());
      throw new IllegalStateException("Error during file initialization for storage " + this.storage.getName(), e);
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201546165/fstmerge_var2_2966930601639499688

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWriteAheadLog.java
Conflict type: LineBasedMCFd
Conflict body: 
public static boolean delete(File file) throws IOException {
    if (!file.exists())
      return true;

    if (useOldFileAPI)
      return file.delete();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var1_1500719431884458869
    try {
      final FileSystem fileSystem = FileSystems.getDefault();
      final Path path = fileSystem.getPath(file.getAbsolutePath());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_base_20831347507440196
    final FileSystem fileSystem = FileSystems.getDefault();
    final Path path = fileSystem.getPath(file.getAbsolutePath());
=======
    try {
		final FileSystem fileSystem = FileSystems.getDefault();
		final Path path = fileSystem.getPath(file.getAbsolutePath());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var2_6134109645707457209

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var1_1500719431884458869
      Files.delete(path);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_base_20831347507440196
    Files.delete(path);
=======
		Files.delete(path);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var2_6134109645707457209

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var1_1500719431884458869
      return true;
    } catch (FileSystemException e) {
      return false;
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_base_20831347507440196
    return true;
=======
		return true;
	} catch (FileSystemException e) {
		return false;
	}
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414201590684/fstmerge_var2_6134109645707457209
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8081e_b125d/rev_8081e-b125d/commons/src/main/java/com/orientechnologies/common/io/OFileUtils.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_182dc_64638/rev_182dc-64638.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b765b_616c8/rev_b765b-616c8.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public OIndexInternal<T> delete() {
    modificationLock.requestModificationLock();

    try {
      acquireExclusiveLock();

      try {
        indexEngine.delete();

        // REMOVE THE INDEX ALSO FROM CLASS MAP
        if (getDatabase().getMetadata() != null)
          getDatabase().getMetadata().getIndexManager().removeClassPropertyIndex(this);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414202649778/fstmerge_var1_2681825143411305226
        removeValuesContainer();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414202649778/fstmerge_base_2813771880171655451
        if (valueContainerAlgorithm.equals(ODefaultIndexFactory.SBTREEBONSAI_VALUE_CONTAINER)) {
          final OStorage storage = getDatabase().getStorage();
          if (storage instanceof OStorageLocal) {
            final ODiskCache diskCache = ((OStorageLocal) storage).getDiskCache();
            try {
              final String fileName = getName() + OIndexRIDContainer.INDEX_FILE_EXTENSION;
              if (diskCache.exists(fileName)) {
                final long fileId = diskCache.openFile(fileName);
                diskCache.deleteFile(fileId);
              }
            } catch (IOException e) {
              OLogManager.instance().error(this, "Can't delete file for value containers", e);
            }
          }
        }
=======
        if (valueContainerAlgorithm.equals(ODefaultIndexFactory.SBTREEBONSAI_VALUE_CONTAINER)) {
          final OStorage storage = getDatabase().getStorage();
          if (storage instanceof OLocalPaginatedStorage) {
            final ODiskCache diskCache = ((OLocalPaginatedStorage) storage).getDiskCache();
            try {
              final String fileName = getName() + OIndexRIDContainer.INDEX_FILE_EXTENSION;
              if (diskCache.exists(fileName)) {
                final long fileId = diskCache.openFile(fileName);
                diskCache.deleteFile(fileId);
              }
            } catch (IOException e) {
              OLogManager.instance().error(this, "Can't delete file for value containers", e);
            }
          }
        }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414202649778/fstmerge_var2_577772329041985119

        return this;

      } finally {
        releaseExclusiveLock();
      }
    } finally {
      modificationLock.releaseModificationLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b765b_616c8/rev_b765b-616c8/core/src/main/java/com/orientechnologies/orient/core/index/OIndexAbstract.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_aa56c_f88db/rev_aa56c-f88db.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1aa86_cf211/rev_1aa86-cf211.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_725cb_68349/rev_725cb-68349.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_95fa8_1c05e/rev_95fa8-1c05e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a95f2_9f20a/rev_a95f2-9f20a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ededb_3b3c3/rev_ededb-3b3c3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414205864570/fstmerge_var1_654836546560603590
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414205864570/fstmerge_base_6923037585636526927
public ODatabaseDocument getDatabase() {
    ODatabaseDocument db = null;
    try {
      String url = OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(BASEPATH + this.databaseName)
          .getPath()));
      if (this.exists(url)) {
        db = new ODatabaseDocumentTx("local:" + url).open(this.user, this.pass);
      } else {
        db = null;
        OLogManager.instance().error(this, "database " + this.databaseName + " does not exist");
      }
    } catch (Exception ex) {
      ex.printStackTrace();
      db = null;
      OLogManager.instance().error(this, "failed to open database");
    }
    return db;
  }
=======
public ODatabaseDocument getDatabase() {
    ODatabaseDocument db = null;
    try {
      String url = OSystemVariableResolver.resolveSystemVariables(OFileUtils.getPath(new File(BASEPATH + this.databaseName)
          .getPath()));
      if (this.exists(url)) {
        db = new ODatabaseDocumentTx("plocal:" + url).open(this.user, this.pass);
      } else {
        db = null;
        OLogManager.instance().error(this, "database " + this.databaseName + " does not exist");
      }
    } catch (Exception ex) {
      db = null;
      OLogManager.instance().error(this, "failed to open database", ex);
    }
    return db;
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414205864570/fstmerge_var2_2505621594937390017

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ededb_3b3c3/rev_ededb-3b3c3/server/src/main/java/com/orientechnologies/orient/server/schedule/OScheduleHandler.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.8-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.7-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ededb_3b3c3/rev_ededb-3b3c3/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414205881776/fstmerge_var1_8446426017411781780
private long restoreWALBatch(List<OWALRecord> batch, Map<OOperationUnitId, List<OLogSequenceNumber>> operationUnits,
      long recordsProcessed, int reportInterval) throws IOException {
    for (OWALRecord walRecord : batch) {
      final OLogSequenceNumber lsn = walRecord.getLsn();

      if (walRecord instanceof OAtomicUnitStartRecord) {
        List<OLogSequenceNumber> operationList = new ArrayList<OLogSequenceNumber>();
        operationUnits.put(((OAtomicUnitStartRecord) walRecord).getOperationUnitId(), operationList);
        operationList.add(lsn);
      } else if (walRecord instanceof OOperationUnitRecord) {
        OOperationUnitRecord operationUnitRecord = (OOperationUnitRecord) walRecord;
        OOperationUnitId unitId = operationUnitRecord.getOperationUnitId();

        final List<OLogSequenceNumber> records = operationUnits.get(unitId);

        assert records != null;

        if (records == null) {
          OLogManager.instance().warn(this,
              "Record with lsn %s  which indication of start of atomic operation was truncated will be skipped.",
              walRecord.getLsn());
          continue;
        }

        records.add(lsn);

        if (operationUnitRecord instanceof OUpdatePageRecord) {
          final OUpdatePageRecord updatePageRecord = (OUpdatePageRecord) operationUnitRecord;

          final long fileId = updatePageRecord.getFileId();
          final long pageIndex = updatePageRecord.getPageIndex();

          if (!diskCache.exists(fileId)) {
            OLogManager.instance().warn(this,
                "Record %s will be skipped during data restore because file which it is related to was deleted.", walRecord);
            continue;
          }

          if (!diskCache.isOpen(fileId))
            diskCache.openFile(fileId);

          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, true);
          final OCachePointer cachePointer = cacheEntry.getCachePointer();
          cachePointer.acquireExclusiveLock();
          try {
            ODurablePage durablePage = new ODurablePage(cacheEntry, ODurablePage.TrackMode.NONE);
            durablePage.restoreChanges(updatePageRecord.getChanges());
            durablePage.setLsn(lsn);

            cacheEntry.markDirty();
          } finally {
            cachePointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

        } else if (operationUnitRecord instanceof OFileCreatedCreatedWALRecord) {

          final OFileCreatedCreatedWALRecord fileCreatedCreatedRecord = (OFileCreatedCreatedWALRecord) operationUnitRecord;
          diskCache.openFile(fileCreatedCreatedRecord.getFileName(), fileCreatedCreatedRecord.getFileId());

        } else if (operationUnitRecord instanceof OAtomicUnitEndRecord) {
          final OAtomicUnitEndRecord atomicUnitEndRecord = (OAtomicUnitEndRecord) walRecord;

          if (atomicUnitEndRecord.isRollback())
            undoOperation(records);

          operationUnits.remove(unitId);
        } else {
          OLogManager.instance().error(this, "Invalid WAL record type was passed %s. Given record will be skipped.",
              operationUnitRecord.getClass());
          assert false : "Invalid WAL record type was passed " + operationUnitRecord.getClass().getName();
        }
      } else
        OLogManager.instance().warn(this, "Record %s will be skipped during data restore.", walRecord);

      recordsProcessed++;
      if (reportInterval > 0 && recordsProcessed % reportInterval == 0)
        OLogManager.instance().info(this, "%d operations were processed, current LSN is %s last LSN is %s", recordsProcessed, lsn,
            writeAheadLog.end());
    }

    return recordsProcessed;
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414205881776/fstmerge_base_3678982722530330588
private long restoreWALBatch(List<OWALRecord> batch, Map<OOperationUnitId, List<OLogSequenceNumber>> operationUnits,
      long recordsProcessed, int reportInterval) throws IOException {
    for (OWALRecord walRecord : batch) {
      final OLogSequenceNumber lsn = walRecord.getLsn();

      if (walRecord instanceof OAtomicUnitStartRecord) {
        List<OLogSequenceNumber> operationList = new ArrayList<OLogSequenceNumber>();
        operationUnits.put(((OAtomicUnitStartRecord) walRecord).getOperationUnitId(), operationList);
        operationList.add(lsn);
      } else if (walRecord instanceof OOperationUnitRecord) {
        OOperationUnitRecord operationUnitRecord = (OOperationUnitRecord) walRecord;
        OOperationUnitId unitId = operationUnitRecord.getOperationUnitId();

        final List<OLogSequenceNumber> records = operationUnits.get(unitId);

        assert records != null;

        if (records == null) {
          OLogManager.instance().warn(this,
              "Record with lsn %s  which indication of start of atomic operation was truncated will be skipped.",
              walRecord.getLsn());
          continue;
        }

        records.add(lsn);

        if (operationUnitRecord instanceof OUpdatePageRecord) {
          final OUpdatePageRecord updatePageRecord = (OUpdatePageRecord) operationUnitRecord;

          final long fileId = updatePageRecord.getFileId();
          final long pageIndex = updatePageRecord.getPageIndex();

          if (!diskCache.isOpen(fileId))
            diskCache.openFile(fileId);

          final OCacheEntry cacheEntry = diskCache.load(fileId, pageIndex, true);
          final OCachePointer cachePointer = cacheEntry.getCachePointer();
          cachePointer.acquireExclusiveLock();
          try {
            ODurablePage durablePage = new ODurablePage(cacheEntry, ODurablePage.TrackMode.NONE);
            durablePage.restoreChanges(updatePageRecord.getChanges());
            durablePage.setLsn(lsn);

            cacheEntry.markDirty();
          } finally {
            cachePointer.releaseExclusiveLock();
            diskCache.release(cacheEntry);
          }

        } else if (operationUnitRecord instanceof OFileCreatedCreatedWALRecord) {

          final OFileCreatedCreatedWALRecord fileCreatedCreatedRecord = (OFileCreatedCreatedWALRecord) operationUnitRecord;
          diskCache.openFile(fileCreatedCreatedRecord.getFileName(), fileCreatedCreatedRecord.getFileId());

        } else if (operationUnitRecord instanceof OAtomicUnitEndRecord) {
          final OAtomicUnitEndRecord atomicUnitEndRecord = (OAtomicUnitEndRecord) walRecord;

          if (atomicUnitEndRecord.isRollback())
            undoOperation(records);

          operationUnits.remove(unitId);
        } else {
          OLogManager.instance().error(this, "Invalid WAL record type was passed %s. Given record will be skipped.",
              operationUnitRecord.getClass());
          assert false : "Invalid WAL record type was passed " + operationUnitRecord.getClass().getName();
        }
      } else
        OLogManager.instance().warn(this, "Record %s will be skipped during data restore.", walRecord);

      recordsProcessed++;
      if (reportInterval > 0 && recordsProcessed % reportInterval == 0)
        OLogManager.instance().info(this, "%d operations were processed, current LSN is %s last LSN is %s", recordsProcessed, lsn,
            writeAheadLog.end());
    }

    return recordsProcessed;
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414205881776/fstmerge_var2_5948127351919062609

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ededb_3b3c3/rev_ededb-3b3c3/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414205929820/fstmerge_var1_8874285944382436930
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414205929820/fstmerge_base_7172960829514507797
protected void installDatabase(final OHazelcastDistributedDatabase distrDatabase, final String databaseName, final String dbPath,
      final String iNode, final String iDatabaseCompressedFile) {
    ODistributedServerLog.warn(this, getLocalNodeName(), iNode, DIRECTION.IN, "installing database '%s' to: %s[]", databaseName,
        dbPath);

    try {
      File f = new File(iDatabaseCompressedFile);

      new File(dbPath).mkdirs();
      final ODatabaseDocumentTx db = new ODatabaseDocumentTx("local:" + dbPath);

      final FileInputStream in = new FileInputStream(f);
      try {
        db.restore(in, null, null, this);
      } finally {
        in.close();
      }

      db.close();
      Orient.instance().unregisterStorageByName(db.getURL().substring(db.getStorage().getType().length() + 1));

      ODistributedServerLog.info(this, getLocalNodeName(), null, DIRECTION.NONE, "installed database '%s'", databaseName);

      distrDatabase.setOnline();

      ODistributedServerLog.warn(this, getLocalNodeName(), null, DIRECTION.NONE, "database '%s' is online", databaseName);

    } catch (IOException e) {
      ODistributedServerLog.warn(this, getLocalNodeName(), null, DIRECTION.IN, "error on copying database '%s' on local server", e,
          databaseName);
    }
  }
=======
protected void installDatabase(final OHazelcastDistributedDatabase distrDatabase, final String databaseName, final String dbPath,
      final String iNode, final String iDatabaseCompressedFile) {
    ODistributedServerLog.warn(this, getLocalNodeName(), iNode, DIRECTION.IN, "installing database '%s' to: %s[]", databaseName,
        dbPath);

    try {
      File f = new File(iDatabaseCompressedFile);

      new File(dbPath).mkdirs();
      final ODatabaseDocumentTx db = new ODatabaseDocumentTx("plocal:" + dbPath);

      final FileInputStream in = new FileInputStream(f);
      try {
        db.restore(in, null, null, this);
      } finally {
        in.close();
      }

      db.close();
      Orient.instance().unregisterStorageByName(db.getURL().substring(db.getStorage().getType().length() + 1));

      ODistributedServerLog.info(this, getLocalNodeName(), null, DIRECTION.NONE, "installed database '%s'", databaseName);

      distrDatabase.setOnline();

      ODistributedServerLog.warn(this, getLocalNodeName(), null, DIRECTION.NONE, "database '%s' is online", databaseName);

    } catch (IOException e) {
      ODistributedServerLog.warn(this, getLocalNodeName(), null, DIRECTION.IN, "error on copying database '%s' on local server", e,
          databaseName);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414205929820/fstmerge_var2_1427995658247211944

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_ededb_3b3c3/rev_ededb-3b3c3/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7fd78_d8a5e/rev_7fd78-d8a5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7fd78_4d0f1/rev_7fd78-4d0f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7fd78_464f9/rev_7fd78-464f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_95bc0_7066b/rev_95bc0-7066b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4c8e4_37066/rev_4c8e4-37066.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_bce9f_4e181/rev_bce9f-4e181.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04d84_512d4/rev_04d84-512d4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a33c0_7e12f/rev_a33c0-7e12f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_53bc3_59495/rev_53bc3-59495.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1a9cf_53bc3/rev_1a9cf-53bc3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_4ee35_b1115/rev_4ee35-b1115.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_95ab5_a83d7/rev_95ab5-a83d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e74d9_077ce/rev_e74d9-077ce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b537b_dbd9a/rev_b537b-dbd9a.revisions
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public static final int         PAGE_PADDING        = OWOWCache.PAGE_PADDING; ##FSTMerge## ##FSTMerge## protected static final int         PAGE_PADDING        = OWOWCache.PAGE_PADDING;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b537b_dbd9a/rev_b537b-dbd9a/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/base/ODurablePage.java
Conflict type: LineBasedMCFd
Conflict body: 
public void updateWithReturn() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_var1_1630226857215454119
    ODocument doc = new ODocument("Data");
    doc.field("name", "Pawel");
    doc.field("city", "Wroclaw");
    doc.field("really_big_field", "BIIIIIIIIIIIIIIIGGGGGGG!!!");
    doc.save();
    // check AFTER
    String sqlString = "UPDATE " + doc.getIdentity().toString() + " SET gender='male' RETURN AFTER";
    List<ODocument> result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertEquals(result1.get(0).getIdentity(), doc.getIdentity());
    Assert.assertEquals((String) result1.get(0).field("gender"), "male");
    final ODocument lastOne = result1.get(0).copy();
    // check record attributes and BEFORE
    sqlString = "UPDATE " + doc.getIdentity().toString() + " SET Age=1 RETURN BEFORE @this";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertEquals(lastOne.getVersion(), result1.get(0).getVersion());
    Assert.assertFalse(result1.get(0).containsField("Age"));
    // check INCREMENT, AFTER + $current + field
    sqlString = "UPDATE " + doc.getIdentity().toString() + " INCREMENT Age = 100 RETURN AFTER $current.Age";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertTrue(result1.get(0).containsField("value"));
    Assert.assertEquals(result1.get(0).field("value"), 101);
    // check exclude + WHERE + LIMIT
    sqlString = "UPDATE " + doc.getIdentity().toString()
        + " INCREMENT Age = 100 RETURN AFTER $current.Exclude('really_big_field') WHERE Age=101 LIMIT 1";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertTrue(result1.get(0).containsField("Age"));
    Assert.assertEquals(result1.get(0).field("Age"), 201);
    Assert.assertFalse(result1.get(0).containsField("really_big_field"));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_base_5373887785455351734
        ODocument doc = new ODocument("Data");
        doc.field("name", "Pawel");
        doc.field("city", "Wroclaw");
        doc.field("really_big_field", "BIIIIIIIIIIIIIIIGGGGGGG!!!");
        doc.save();
        // check AFTER
        String sqlString = "UPDATE "+doc.getIdentity().toString()+" SET gender='male' RETURN AFTER";
        List<ODocument> result1 = database.command(new OCommandSQL(sqlString)).execute();
        Assert.assertEquals(result1.size(),1);
        Assert.assertEquals(result1.get(0).getIdentity(), doc.getIdentity());
        Assert.assertEquals((String) result1.get(0).field("gender"), "male");
        final ODocument lastOne = result1.get(0).copy();
        // check record attributes and BEFORE
        sqlString = "UPDATE "+doc.getIdentity().toString()+" SET Age=1 RETURN BEFORE @this";
        result1 = database.command(new OCommandSQL(sqlString)).execute();
        Assert.assertEquals(result1.size(),1);
        Assert.assertEquals(lastOne.getVersion(), result1.get(0).getVersion());
        Assert.assertFalse(result1.get(0).containsField("Age"));
        // check INCREMENT, AFTER + $current + field
        sqlString = "UPDATE "+doc.getIdentity().toString()+" INCREMENT Age = 100 RETURN AFTER $current.Age";
        result1 = database.command(new OCommandSQL(sqlString)).execute();
        Assert.assertEquals(result1.size(),1);
        Assert.assertTrue(result1.get(0).containsField("result"));
        Assert.assertEquals(result1.get(0).field("result"), 101);
        Assert.assertTrue(result1.get(0).containsField("rid"));
        Assert.assertTrue(result1.get(0).containsField("version"));
        // check exclude   + WHERE + LIMIT
        sqlString = "UPDATE "+doc.getIdentity().toString()+" INCREMENT Age = 100 RETURN AFTER $current.Exclude('really_big_field') WHERE Age=101 LIMIT 1";
        result1 = database.command(new OCommandSQL(sqlString)).execute();
        Assert.assertEquals(result1.size(),1);
        Assert.assertTrue(result1.get(0).containsField("Age"));
        Assert.assertEquals(result1.get(0).field("Age"), 201);
        Assert.assertFalse(result1.get(0).containsField("really_big_field"));
=======
    ODocument doc = new ODocument("Data");
    doc.field("name", "Pawel");
    doc.field("city", "Wroclaw");
    doc.field("really_big_field", "BIIIIIIIIIIIIIIIGGGGGGG!!!");
    doc.save();
    // check AFTER
    String sqlString = "UPDATE " + doc.getIdentity().toString() + " SET gender='male' RETURN AFTER";
    List<ODocument> result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertEquals(result1.get(0).getIdentity(), doc.getIdentity());
    Assert.assertEquals((String) result1.get(0).field("gender"), "male");
    final ODocument lastOne = result1.get(0).copy();
    // check record attributes and BEFORE
    sqlString = "UPDATE " + doc.getIdentity().toString() + " SET Age=1 RETURN BEFORE @this";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertEquals(lastOne.getVersion(), result1.get(0).getVersion());
    Assert.assertFalse(result1.get(0).containsField("Age"));
    // check INCREMENT, AFTER + $current + field
    sqlString = "UPDATE " + doc.getIdentity().toString() + " INCREMENT Age = 100 RETURN AFTER $current.Age";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
		Assert.assertTrue(result1.get(0).containsField("value"));
		Assert.assertEquals(result1.get(0).field("value"), 101);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_var2_4901327931226314786

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_var1_1630226857215454119
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_base_5373887785455351734
    }
=======
		// check exclude + WHERE + LIMIT
    sqlString = "UPDATE " + doc.getIdentity().toString()
        + " INCREMENT Age = 100 RETURN AFTER $current.Exclude('really_big_field') WHERE Age=101 LIMIT 1";
    result1 = database.command(new OCommandSQL(sqlString)).execute();
    Assert.assertEquals(result1.size(), 1);
    Assert.assertTrue(result1.get(0).containsField("Age"));
    Assert.assertEquals(result1.get(0).field("Age"), 201);
    Assert.assertFalse(result1.get(0).containsField("really_big_field"));

  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414213364824/fstmerge_var2_4901327931226314786

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b537b_dbd9a/rev_b537b-dbd9a/tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLUpdateTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_52868_90bbe/rev_52868-90bbe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_67dc9_65b60/rev_67dc9-65b60.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_567f7_83e7c/rev_567f7-83e7c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_a0715_d6e2b/rev_a0715-d6e2b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7b4d6_8b6bd/rev_7b4d6-8b6bd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_13a9f_c6367/rev_13a9f-c6367.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e42fb_f8f3f/rev_e42fb-f8f3f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_c1c6a_82077/rev_c1c6a-82077.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public boolean execute(final OHttpRequest iRequest, final OHttpResponse iResponse) throws Exception {
    String[] urlParts = checkSyntax(iRequest.url, 2, "Syntax error: allocation/<database>");

    iRequest.data.commandInfo = "Storage allocation";
    iRequest.data.commandDetail = urlParts[1];

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414218232822/fstmerge_var1_5336854185702470565
    ODatabaseDocumentTx db = null;

    try {
      db = getProfiledDatabaseInstance(iRequest);

      if (!(db.getStorage() instanceof OStorageLocal))
        throw new IllegalArgumentException("Cannot get allocation information for database '" + iRequest.databaseName
            + "' because the storage is not 'local'");

      final List<ODataHoleInfo> holes = ((OStorageLocal) db.getStorage()).getHolesList();
      Collections.sort(holes);

      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer);

      final ODataLocal dataSegment = ((OStorageLocal) db.getStorage()).getDataSegmentById(0);
      final long dbSize = dataSegment.getFilledUpTo();

      json.beginObject();
      json.writeAttribute(1, true, "size", dbSize);

      long current = 0;

      long holesSize = 0;

      json.beginCollection(1, true, "segments");
      for (ODataHoleInfo h : holes) {
        if (h.dataOffset == -1)
          continue;

        if (current < h.dataOffset) {
          // DATA SEGMENT
          json.beginObject(2, true, null);
          json.writeAttribute(3, false, "type", "d");
          json.writeAttribute(3, false, "offset", current);
          json.writeAttribute(3, false, "size", h.dataOffset - current);
          json.endObject(2, false);
        }

        json.beginObject(2, true, null);
        json.writeAttribute(3, false, "type", "h");
        json.writeAttribute(3, false, "offset", h.dataOffset);
        json.writeAttribute(3, false, "size", h.size);
        json.endObject(2, false);
        holesSize += h.size;

        current = h.dataOffset + h.size;
      }

      if (dbSize > current) {
        // DATA SEGMENT
        json.beginObject(2, true, null);
        json.writeAttribute(3, false, "type", "d");
        json.writeAttribute(3, false, "offset", current);
        json.writeAttribute(3, false, "size", dbSize - current);
        json.endObject(2, false);
      }

      json.endCollection(1, true);

      json.writeAttribute(1, true, "dataSize", dbSize - holesSize);
      json.writeAttribute(1, true, "dataSizePercent", (dbSize - holesSize) * 100 / dbSize);
      json.writeAttribute(1, true, "holesSize", holesSize);
      json.writeAttribute(1, true, "holesSizePercent", 100 - (dbSize - holesSize) * 100 / dbSize);

      json.endObject();
      json.flush();

      iResponse.send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, buffer.toString(), null);
    } finally {
      if (db != null)
        db.close();
    }
    return false;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414218232822/fstmerge_base_8724453014796936894
    ODatabaseDocumentTx db = null;

    try {
      db = getProfiledDatabaseInstance(iRequest);

      if (!(db.getStorage() instanceof OStorageLocal))
        throw new IllegalArgumentException("Cannot get allocation information for database '" + iRequest.databaseName
            + "' because it is not a disk-based database");

      final List<ODataHoleInfo> holes = ((OStorageLocal) db.getStorage()).getHolesList();
      Collections.sort(holes);

      final StringWriter buffer = new StringWriter();
      final OJSONWriter json = new OJSONWriter(buffer);

      final ODataLocal dataSegment = ((OStorageLocal) db.getStorage()).getDataSegmentById(0);
      final long dbSize = dataSegment.getFilledUpTo();

      json.beginObject();
      json.writeAttribute(1, true, "size", dbSize);

      long current = 0;

      long holesSize = 0;

      json.beginCollection(1, true, "segments");
      for (ODataHoleInfo h : holes) {
        if (h.dataOffset == -1)
          continue;

        if (current < h.dataOffset) {
          // DATA SEGMENT
          json.beginObject(2, true, null);
          json.writeAttribute(3, false, "type", "d");
          json.writeAttribute(3, false, "offset", current);
          json.writeAttribute(3, false, "size", h.dataOffset - current);
          json.endObject(2, false);
        }

        json.beginObject(2, true, null);
        json.writeAttribute(3, false, "type", "h");
        json.writeAttribute(3, false, "offset", h.dataOffset);
        json.writeAttribute(3, false, "size", h.size);
        json.endObject(2, false);
        holesSize += h.size;

        current = h.dataOffset + h.size;
      }

      if (dbSize > current) {
        // DATA SEGMENT
        json.beginObject(2, true, null);
        json.writeAttribute(3, false, "type", "d");
        json.writeAttribute(3, false, "offset", current);
        json.writeAttribute(3, false, "size", dbSize - current);
        json.endObject(2, false);
      }

      json.endCollection(1, true);

      json.writeAttribute(1, true, "dataSize", dbSize - holesSize);
      json.writeAttribute(1, true, "dataSizePercent", (dbSize - holesSize) * 100 / dbSize);
      json.writeAttribute(1, true, "holesSize", holesSize);
      json.writeAttribute(1, true, "holesSizePercent", 100 - (dbSize - holesSize) * 100 / dbSize);

      json.endObject();
      json.flush();

      iResponse.send(OHttpUtils.STATUS_OK_CODE, "OK", OHttpUtils.CONTENT_JSON, buffer.toString(), null);
    } finally {
      if (db != null)
        db.close();
    }
    return false;
=======
    throw new IllegalArgumentException("Cannot get allocation information for database '" + iRequest.databaseName
        + "' because it is not implemented yet.");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414218232822/fstmerge_var2_2540192719429878544
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368/server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/command/get/OServerCommandGetStorageAllocation.java
Conflict type: LineBasedMCFd
Conflict body: 
private long importClusters() throws ParseException, IOException {
    listener.onMessage("\nImporting clusters[]");

    long total = 0;

    jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);

    boolean makeFullCheckPointAfterClusterCreation = false;
    if (database.getStorage() instanceof OLocalPaginatedStorage) {
      makeFullCheckPointAfterClusterCreation = ((OLocalPaginatedStorage) database.getStorage())
          .isMakeFullCheckPointAfterClusterCreate();
      ((OLocalPaginatedStorage) database.getStorage()).disableFullCheckPointAfterClusterCreate();
    }

    boolean recreateManualIndex = false;
    if (exporterVersion <= 4) {
      removeDefaultClusters();
      recreateManualIndex = true;
    }

    final Set<String> indexesToRebuild = new HashSet<String>();

    @SuppressWarnings("unused")
    ORecordId rid = null;
    while (jsonReader.lastChar() != ']') {
      jsonReader.readNext(OJSONReader.BEGIN_OBJECT);

      String name = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"name\"")
          .readString(OJSONReader.COMMA_SEPARATOR);

      if (name.length() == 0)
        name = null;

      if (name != null)
        // CHECK IF THE CLUSTER IS INCLUDED
        if (includeClusters != null) {
          if (!includeClusters.contains(name)) {
            jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
            continue;
          }
        } else if (excludeClusters != null) {
          if (excludeClusters.contains(name)) {
            jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
            continue;
          }
        }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414218256123/fstmerge_var1_5141448023267578301
      int id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.NEXT_IN_OBJECT);

      String type;
      if (jsonReader.lastChar() == ',')
        type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"").readString(OJSONReader.NEXT_IN_OBJECT);
      else
        type = "PHYSICAL";
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414218256123/fstmerge_base_1425847792449895503
      int id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.COMMA_SEPARATOR);
      String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"")
          .readString(OJSONReader.NEXT_IN_OBJECT);
=======
      int id;
      if (exporterVersion < 9) {
        id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.COMMA_SEPARATOR);
        String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"type\"")
            .readString(OJSONReader.NEXT_IN_OBJECT);
      } else
        id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"id\"").readInteger(OJSONReader.NEXT_IN_OBJECT);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414218256123/fstmerge_var2_6036783823284067220

      if (jsonReader.lastChar() == ',') {
        rid = new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent("\"rid\"")
            .readString(OJSONReader.NEXT_IN_OBJECT));
      } else
        rid = null;

      listener.onMessage("\n- Creating cluster " + (name != null ? "'" + name + "'" : "NULL") + "[]");

      int clusterId = name != null ? database.getClusterIdByName(name) : -1;
      if (clusterId == -1) {
        // CREATE IT
        if (!preserveClusterIDs)
          clusterId = database.addCluster(name);
        else {
          clusterId = database.addCluster(name, id, null);
          assert clusterId == id;
        }
      }

      if (clusterId != id) {
        if (!preserveClusterIDs) {
          if (database.countClusterElements(clusterId - 1) == 0) {
            listener.onMessage("Found previous version: migrating old clusters[]");
            database.dropCluster(name, true);
            database.addCluster("temp_" + clusterId, null);
            clusterId = database.addCluster(name);
          } else
            throw new OConfigurationException("Imported cluster '" + name + "' has id=" + clusterId
                + " different from the original: " + id + ". To continue the import drop the cluster '"
                + database.getClusterNameById(clusterId - 1) + "' that has " + database.countClusterElements(clusterId - 1)
                + " records");
        } else {
          database.dropCluster(clusterId, false);
          database.addCluster(name, id, null);
        }
      }

      if (name != null
          && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME)
              || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name
                .equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME))) {
        database.command(new OCommandSQL("truncate cluster " + name)).execute();

        for (OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes()) {
          if (existingIndex.getClusters().contains(name)) {
            indexesToRebuild.add(existingIndex.getName());
          }
        }
      }

      listener.onMessage("OK, assigned id=" + clusterId);

      total++;

      jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);
    }
    jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);

    listener.onMessage("\nRebuilding indexes of truncated clusters []");

    for (final String indexName : indexesToRebuild)
      database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {
        @Override
        public void onBegin(Object iTask, long iTotal, Object metadata) {
          listener.onMessage("\nCluster content was truncated and index " + indexName + " will be rebuilt");
        }

        @Override
        public boolean onProgress(Object iTask, long iCounter, float iPercent) {
          listener.onMessage(String.format("\nIndex %s is rebuilt on %f percent", indexName, iPercent));
          return true;
        }

        @Override
        public void onCompletition(Object iTask, boolean iSucceed) {
          listener.onMessage("\nIndex " + indexName + " was successfully rebuilt.");
        }
      });

    listener.onMessage("\nDone " + indexesToRebuild.size() + " indexes were rebuilt.");

    if (recreateManualIndex) {
      database.addCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);
      database.getMetadata().getIndexManager().create();

      listener.onMessage("\nManual index cluster was recreated.");
    }

    listener.onMessage("\nDone. Imported " + total + " clusters");

    if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null) {
      ODocument indexDocument = new ODocument();
      indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);

      database.getStorage().getConfiguration().indexMgrRecordId = indexDocument.getIdentity().toString();
      database.getStorage().getConfiguration().update();
    }

    if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)
      ((OLocalPaginatedStorage) database.getStorage()).enableFullCheckPointAfterClusterCreate();

    return total;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368/core/src/main/java/com/orientechnologies/orient/core/db/tool/ODatabaseImport.java
Conflict type: LineBasedMCFd
Conflict body: 
public <DB extends ODatabase> DB set(final ATTRIBUTES iAttribute, final Object iValue) {
    if (iAttribute == null)
      throw new IllegalArgumentException("attribute is null");

    final String stringValue = OStringSerializerHelper.getStringContent(iValue != null ? iValue.toString() : null);

    switch (iAttribute) {
    case STATUS:
      if (stringValue == null)
        throw new IllegalArgumentException("DB status can't be null");
      setStatus(STATUS.valueOf(stringValue.toUpperCase(Locale.ENGLISH)));
      break;

    case DEFAULTCLUSTERID:
      if (iValue != null) {
        if (iValue instanceof Number)
          storage.setDefaultClusterId(((Number) iValue).intValue());
        else
          storage.setDefaultClusterId(storage.getClusterIdByName(iValue.toString()));
      }
      break;

    case TYPE:
      throw new IllegalArgumentException("Database type property is not supported");

    case DATEFORMAT:
      storage.getConfiguration().dateFormat = stringValue;
      storage.getConfiguration().update();
      break;

    case DATETIMEFORMAT:
      storage.getConfiguration().dateTimeFormat = stringValue;
      storage.getConfiguration().update();
      break;

    case TIMEZONE:
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414218256522/fstmerge_var1_3683792376377656652
      storage.getConfiguration().setTimeZone(TimeZone.getTimeZone(stringValue));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414218256522/fstmerge_base_763658425525907235
      storage.getConfiguration().setTimeZone(TimeZone.getTimeZone(stringValue.toUpperCase()));
=======
      if (stringValue == null)
        throw new IllegalArgumentException("Timezone can't be null");

      storage.getConfiguration().setTimeZone(TimeZone.getTimeZone(stringValue.toUpperCase()));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414218256522/fstmerge_var2_3776189965148999576
      storage.getConfiguration().update();
      break;

    case LOCALECOUNTRY:
      storage.getConfiguration().setLocaleCountry(stringValue);
      storage.getConfiguration().update();
      break;

    case LOCALELANGUAGE:
      storage.getConfiguration().setLocaleLanguage(stringValue);
      storage.getConfiguration().update();
      break;

    case CHARSET:
      storage.getConfiguration().setCharset(stringValue);
      storage.getConfiguration().update();
      break;

    case CUSTOM:
      if (iValue == null)
        throw new IllegalArgumentException("CUSTOM attribute value can't be null. expected <name> = <value> or clear");

      if (!iValue.toString().contains("=")) {
        if (iValue.toString().equalsIgnoreCase("clear")) {
          clearCustomInternal();
        } else
          throw new IllegalArgumentException("Syntax error: expected <name> = <value> or clear, instead found: " + iValue);
      } else {
        final List<String> words = OStringSerializerHelper.smartSplit(iValue.toString(), '=');
        setCustomInternal(words.get(0).trim(), words.get(1).trim());
      }
      break;

    case CLUSTERSELECTION:
      storage.getConfiguration().setClusterSelection(stringValue);
      storage.getConfiguration().update();
      break;

    case MINIMUMCLUSTERS:
      if (iValue != null) {
        if (iValue instanceof Number)
          storage.getConfiguration().setMinimumClusters(((Number) iValue).intValue());
        else
          storage.getConfiguration().setMinimumClusters(Integer.parseInt(stringValue));
      } else
        // DEFAULT = 1
        storage.getConfiguration().setMinimumClusters(1);

      storage.getConfiguration().update();
      break;

    default:
      throw new IllegalArgumentException("Option '" + iAttribute + "' not supported on alter database");

    }

    return (DB) this;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368/core/src/main/java/com/orientechnologies/orient/core/db/raw/ODatabaseRaw.java
Conflict type: LineBasedMCFd
Conflict body: 
private OClass createClassInternal(final String className, final OClass superClass, final int[] clusterIdsToAdd) {
    acquireSchemaWriteLock();
    try {
      if (className == null || className.length() == 0)
        throw new OSchemaException("Found class name null or empty");

      if (Character.isDigit(className.charAt(0)))
        throw new OSchemaException("Found invalid class name. Cannot start with numbers");

      final Character wrongCharacter = checkNameIfValid(className);
      if (wrongCharacter != null)
        throw new OSchemaException("Found invalid class name. Character '" + wrongCharacter + "' cannot be used in class name.");

      final ODatabaseRecord database = getDatabase();
      final OStorage storage = database.getStorage();
      checkEmbedded(storage);

      checkClustersAreAbsent(clusterIdsToAdd);

      final int[] clusterIds;
      if (clusterIdsToAdd == null || clusterIdsToAdd.length == 0) {
        // CREATE A NEW CLUSTER(S)
        final int minimumClusters = storage.getConfiguration().getMinimumClusters();

        clusterIds = new int[minimumClusters];
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414218261785/fstmerge_var1_8664739135693164173
        if (minimumClusters <= 1) {
          clusterIds[0] = database.getClusterIdByName(className);
          if (clusterIds[0] == -1)
            clusterIds[0] = database.addCluster(CLUSTER_TYPE.PHYSICAL.toString(), className, null, null);
        }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414218261785/fstmerge_base_6818011041580504335
        if (minimumClusters <= 1)
          clusterIds[0] = database.addCluster(CLUSTER_TYPE.PHYSICAL.toString(), className, null, null);
=======
        if (minimumClusters <= 1)
          clusterIds[0] = database.addCluster(className);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414218261785/fstmerge_var2_2307291976812482848
        else
          for (int i = 0; i < minimumClusters; ++i) {
            clusterIds[i] = database.getClusterIdByName(className + "_" + i);
            if (clusterIds[i] == -1)
              clusterIds[i] = database.addCluster(className + "_" + i);
          }
      } else
        clusterIds = clusterIdsToAdd;

      database.checkSecurity(ODatabaseSecurityResources.SCHEMA, ORole.PERMISSION_CREATE);

      final String key = className.toLowerCase();

      if (classes.containsKey(key))
        throw new OSchemaException("Class " + className + " already exists in current database");

      OClassImpl cls = new OClassImpl(this, className, clusterIds);

      classes.put(key, cls);
      if (cls.getShortName() != null)
        // BIND SHORT NAME TOO
        classes.put(cls.getShortName().toLowerCase(), cls);

      if (superClass != null) {
        cls.setSuperClassInternal(superClass);

        // UPDATE INDEXES
        final int[] clustersToIndex = superClass.getPolymorphicClusterIds();
        final String[] clusterNames = new String[clustersToIndex.length];
        for (int i = 0; i < clustersToIndex.length; i++)
          clusterNames[i] = database.getClusterNameById(clustersToIndex[i]);

        for (OIndex<?> index : superClass.getIndexes())
          for (String clusterName : clusterNames)
            if (clusterName != null)
              database.getMetadata().getIndexManager().addClusterToIndex(clusterName, index.getName());
      }

      addClusterClassMap(cls);

      return cls;
    } finally {
      releaseSchemaWriteLock();
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchemaShared.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414218283815/fstmerge_var1_7703299261279715974
public static void main(String[] iArgs) throws InstantiationException, IllegalAccessException {
    // System.setProperty("url", "memory:test");
    SuperNodeInsertSpeedTest test = new SuperNodeInsertSpeedTest();
    test.data.go(test);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414218283815/fstmerge_base_2811912026694124391
=======
public static void main(String[] args) throws InterruptedException {
    System.out.println("Test insert super-node");

    for (int threadCount = 1; threadCount <= THREAD_COUNT; threadCount++) {

      List<Double> results = new ArrayList<Double>();
      for (int i = 0; i < 20; i++) {
        final double time = new SuperNodeInsertSpeedTest(threadCount).start();

        results.add(time);
      }
      System.out.println();
      System.out.println("Thread count: " + threadCount);
      stat(results);
    }
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414218283815/fstmerge_var2_5399570525265146231

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e1891_fd368/rev_e1891-fd368/tests/src/test/java/com/orientechnologies/orient/test/database/speed/SuperNodeInsertSpeedTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_56788_159ef/rev_56788-159ef.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f403b_cb6bc/rev_f403b-cb6bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_726f9_3c2c7/rev_726f9-3c2c7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d8937_d745f/rev_d8937-d745f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_45207_f90cd/rev_45207-f90cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_871a6_77581/rev_871a6-77581.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_115ad_f0ca6/rev_115ad-f0ca6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_d2787_115ad/rev_d2787-115ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_960d3_17dd5/rev_960d3-17dd5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_64672_51fb9/rev_64672-51fb9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_04823_d78d7/rev_04823-d78d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9e053_1bd03/rev_9e053-1bd03.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_97887_569ce/rev_97887-569ce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_71229_8161e/rev_71229-8161e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_94ac5_68a76/rev_94ac5-68a76.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_09705_0bc0b/rev_09705-0bc0b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_74a73_a900a/rev_74a73-a900a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_e3a30_fc3b7/rev_e3a30-fc3b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private void sbTreeBonsaiFirstKey() throws IOException {
    setDataCommandInfo("SB-Tree bonsai get first key");

    OBonsaiCollectionPointer collectionPointer = OCollectionNetworkSerializer.INSTANCE.readCollectionPointer(channel);

    final OSBTreeCollectionManager sbTreeCollectionManager = connection.database.getSbTreeCollectionManager();
    final OSBTreeBonsai<OIdentifiable, Integer> tree = sbTreeCollectionManager.loadSBTree(collectionPointer);
    try {
      OIdentifiable result = tree.firstKey();
      final OBinarySerializer<? super OIdentifiable> keySerializer;
      if (result == null) {
        keySerializer = ONullSerializer.INSTANCE;
      } else {
        keySerializer = tree.getKeySerializer();
      }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228617706/fstmerge_var1_1341137516181240456
      byte[] stream = new byte[OByteSerializer.BYTE_SIZE + keySerializer.getObjectSize(result)];
      OByteSerializer.INSTANCE.serialize(keySerializer.getId(), stream, 0);
      keySerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228617706/fstmerge_base_5699080271324818651
    byte[] stream = new byte[OByteSerializer.BYTE_SIZE + keySerializer.getObjectSize(result)];
    OByteSerializer.INSTANCE.serialize(keySerializer.getId(), stream, 0);
    keySerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);
=======
    byte[] stream = new byte[OByteSerializer.BYTE_SIZE + keySerializer.getObjectSize(result)];
    OByteSerializer.INSTANCE.serializeLiteral(keySerializer.getId(), stream, 0);
    keySerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228617706/fstmerge_var2_3731691916517107472

      beginResponse();
      try {
        sendOk(clientTxId);
        channel.writeBytes(stream);
      } finally {
        endResponse();
      }
    } finally {
      sbTreeCollectionManager.releaseSBTree(collectionPointer);
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/ONetworkProtocolBinary.java
Conflict type: LineBasedMCFd
Conflict body: 
private void sbTreeBonsaiGet() throws IOException {
    setDataCommandInfo("SB-Tree bonsai get");

    OBonsaiCollectionPointer collectionPointer = OCollectionNetworkSerializer.INSTANCE.readCollectionPointer(channel);
    final byte[] keyStream = channel.readBytes();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228617710/fstmerge_var1_4045409149841014566
    final OSBTreeCollectionManager sbTreeCollectionManager = connection.database.getSbTreeCollectionManager();
    final OSBTreeBonsai<OIdentifiable, Integer> tree = sbTreeCollectionManager.loadSBTree(collectionPointer);
    try {
      final OIdentifiable key = tree.getKeySerializer().deserialize(keyStream, 0);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228617710/fstmerge_base_7378531585359520235
    OSBTreeBonsai<OIdentifiable, Integer> tree = connection.database.getSbTreeCollectionManager().loadSBTree(collectionPointer);

    final OIdentifiable key = tree.getKeySerializer().deserialize(keyStream, 0);

    Integer result = tree.get(key);
    final OBinarySerializer<? super Integer> valueSerializer;
    if (result == null) {
      valueSerializer = ONullSerializer.INSTANCE;
    } else {
      valueSerializer = tree.getValueSerializer();
    }

    byte[] stream = new byte[OByteSerializer.BYTE_SIZE + valueSerializer.getObjectSize(result)];
    OByteSerializer.INSTANCE.serialize(valueSerializer.getId(), stream, 0);
    valueSerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);
=======
    OSBTreeBonsai<OIdentifiable, Integer> tree = connection.database.getSbTreeCollectionManager().loadSBTree(collectionPointer);

    final OIdentifiable key = tree.getKeySerializer().deserialize(keyStream, 0);

    Integer result = tree.get(key);
    final OBinarySerializer<? super Integer> valueSerializer;
    if (result == null) {
      valueSerializer = ONullSerializer.INSTANCE;
    } else {
      valueSerializer = tree.getValueSerializer();
    }

    byte[] stream = new byte[OByteSerializer.BYTE_SIZE + valueSerializer.getObjectSize(result)];
    OByteSerializer.INSTANCE.serializeLiteral(valueSerializer.getId(), stream, 0);
    valueSerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228617710/fstmerge_var2_2388255253526243568

      Integer result = tree.get(key);
      final OBinarySerializer<? super Integer> valueSerializer;
      if (result == null) {
        valueSerializer = ONullSerializer.INSTANCE;
      } else {
        valueSerializer = tree.getValueSerializer();
      }

      byte[] stream = new byte[OByteSerializer.BYTE_SIZE + valueSerializer.getObjectSize(result)];
      OByteSerializer.INSTANCE.serialize(valueSerializer.getId(), stream, 0);
      valueSerializer.serialize(result, stream, OByteSerializer.BYTE_SIZE);

      beginResponse();
      try {
        sendOk(clientTxId);
        channel.writeBytes(stream);
      } finally {
        endResponse();
      }
    } finally {
      sbTreeCollectionManager.releaseSBTree(collectionPointer);
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/ONetworkProtocolBinary.java
Conflict type: LineBasedMCFd
Conflict body: 
public boolean collectResponse(final ODistributedResponse response) {
    final String executorNode = response.getExecutorNodeName();

    synchronized (responseLock) {
      if (!responses.containsKey(executorNode)) {
        ODistributedServerLog.warn(this, response.getSenderNodeName(), executorNode, DIRECTION.IN,
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_base_8654092989440317174
            "received response for request %s from unexpected node. Expected are: %s", request, getExpectedNodes());
=======
            "received response for request (%s) from unexpected node. Expected are: %s", request, getExpectedNodes());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_var2_7970084370171989261

        Orient.instance().getProfiler()
            .updateCounter("distributed.node.unexpectedNodeResponse", "Number of responses from unexpected nodes", +1);

        return false;
      }

      Orient.instance().getProfiler()
          .stopChrono("distributed.node.latency", "Latency of distributed messages", sentOn, "distributed.node.latency");

      Orient
          .instance()
          .getProfiler()
          .stopChrono("distributed.node." + executorNode + ".latency", "Latency of distributed messages per node", sentOn,
              "distributed.node.*.latency");

      boolean completed = false;
      responses.put(executorNode, response);
      receivedResponses++;

      if (waitForLocalNode && response.isExecutedOnLocalNode())
        receivedCurrentNode = true;

      if (ODistributedServerLog.isDebugEnabled())
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_var1_4143963330386290280
        ODistributedServerLog.debug(this, response.getSenderNodeName(), executorNode, DIRECTION.IN,
            "received response '%s' for request (%s) (receivedCurrentNode=%s receivedResponses=%d)", response, request,
            receivedCurrentNode, receivedResponses);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_base_8654092989440317174
        ODistributedServerLog.debug(this, response.getSenderNodeName(), executorNode, DIRECTION.IN,
            "received response '%s' for request %s (receivedCurrentNode=%s receivedResponses=%d)", response, request,
            receivedCurrentNode, receivedResponses);
=======
        ODistributedServerLog
            .debug(
                this,
                response.getSenderNodeName(),
                executorNode,
                DIRECTION.IN,
                "received response '%s' for request (%s) (receivedCurrentNode=%s receivedResponses=%d expectedSynchronousResponses=%d quorum=%d)",
                response, request, receivedCurrentNode, receivedResponses, expectedSynchronousResponses, quorum);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_var2_7970084370171989261

      // PUT THE RESPONSE IN THE RIGHT RESPONSE GROUP
      if (groupResponsesByResult) {
        boolean foundBucket = false;
        for (int i = 0; i < responseGroups.size(); ++i) {
          final List<ODistributedResponse> sameResponse = responseGroups.get(i);
          if (sameResponse.isEmpty() || (sameResponse.get(0).getPayload() == null && response.getPayload() == null)
              || sameResponse.get(0).getPayload().equals(response.getPayload())) {
            sameResponse.add(response);
            foundBucket = true;
            break;
          }
        }

        if (!foundBucket) {
          // CREATE A NEW BUCKET
          final ArrayList<ODistributedResponse> newBucket = new ArrayList<ODistributedResponse>();
          responseGroups.add(newBucket);
          newBucket.add(response);
        }
      }

      completed = getExpectedResponses() == receivedResponses;

      if (receivedResponses >= expectedSynchronousResponses && (!waitForLocalNode || receivedCurrentNode)) {
        if (completed || isMinimumQuorumReached(false)) {
          // NOTIFY TO THE WAITER THE RESPONSE IS COMPLETE NOW
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_base_8654092989440317174
          synchronousResponsesLock.lock();
          try {
            synchronousResponsesArrived.signalAll();
          } finally {
            synchronousResponsesLock.unlock();
          }
=======
          notifyWaiters();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619302/fstmerge_var2_7970084370171989261
        }
      }
      return completed;
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedResponseManager.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void manageConflicts() {
    if (!groupResponsesByResult || request.getTask().getQuorumType() == OAbstractRemoteTask.QUORUM_TYPE.NONE)
      // NO QUORUM
      return;

    if (dManager.getNodeStatus() != ODistributedServerManager.NODE_STATUS.ONLINE)
      // CURRENT NODE OFFLINE: JUST RETURN
      return;

    final int bestResponsesGroupIndex = getBestResponsesGroup();
    final List<ODistributedResponse> bestResponsesGroup = responseGroups.get(bestResponsesGroupIndex);

    final int maxCoherentResponses = bestResponsesGroup.size();
    final int conflicts = getExpectedResponses() - maxCoherentResponses;

    if (isMinimumQuorumReached(true)) {
      // QUORUM SATISFIED

      if (responseGroups.size() == 1)
        // NO CONFLICT
        return;

      if (checkNoWinnerCase(bestResponsesGroup))
        return;

      // NO FIFTY/FIFTY CASE: FIX THE CONFLICTED NODES BY OVERWRITING THE RECORD WITH THE WINNER'S RESULT
      ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE,
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_base_3302298688153422509
          "detected %d conflicts, but the quorum (%d) has been reached. Fixing remote records. Request: %s", conflicts, quorum,
=======
          "detected %d conflicts, but the quorum (%d) has been reached. Fixing remote records. Request (%s)", conflicts, quorum,
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_var2_7659231810735702337
          request);

      fixNodesInConflict(bestResponsesGroup);

    } else {
      // QUORUM HASN'T BEEN REACHED
      ODistributedServerLog
          .warn(
              this,
              dManager.getLocalNodeName(),
              null,
              DIRECTION.NONE,
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_base_3302298688153422509
              "detected %d node(s) in timeout or in conflict and quorum (%d) has not been reached, rolling back changes for request: %s",
=======
              "detected %d node(s) in timeout or in conflict and quorum (%d) has not been reached, rolling back changes for request (%s)",
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_var2_7659231810735702337
              conflicts, quorum, request);

      undoRequest();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_var1_7301405553528135307
      final StringBuilder msg = new StringBuilder();
      msg.append("Quorum " + getQuorum() + " not reached for request (" + request + ").");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_base_3302298688153422509
      final StringBuilder msg = new StringBuilder();
      msg.append("Quorum " + getQuorum() + " not reached for request=" + request + ".");
=======
      final StringBuilder msg = new StringBuilder(256);
      msg.append("Quorum " + getQuorum() + " not reached for request (" + request + ").");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228619396/fstmerge_var2_7659231810735702337
      final List<ODistributedResponse> res = getConflictResponses();
      if (res.isEmpty())
        msg.append(" No server in conflict. ");
      else {
        msg.append(" Servers in timeout/conflict are:");
        for (ODistributedResponse r : res) {
          msg.append("\n - ");
          msg.append(r.getExecutorNodeName());
          msg.append(": ");
          msg.append(r.getPayload());
        }
        msg.append("\n");
      }

      msg.append("Received: ");
      msg.append(responses);

      throw new ODistributedException(msg.toString());
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/server/src/main/java/com/orientechnologies/orient/server/distributed/ODistributedResponseManager.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public static final String ORIENT_VERSION = "1.7.9-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "1.7.8-SNAPSHOT"; ##FSTMerge## public static final String ORIENT_VERSION = "2.0-SNAPSHOT";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/OConstants.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public Object getResult() {
    if (returnDistributedResult()) {
      final Map<String, Object> doc = new HashMap<String, Object>();
      doc.put("sum", sum);
      doc.put("total", total);
      return doc;
    } else {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228626238/fstmerge_var1_5638208208073799335
      if (sum instanceof Integer)
        return sum.intValue() / total;
      else if (sum instanceof Long)
        return sum.longValue() / total;
      else if (sum instanceof Float)
        return sum.floatValue() / total;
      else if (sum instanceof Double)
        return sum.doubleValue() / total;
      else if (sum instanceof BigDecimal)
        return ((BigDecimal) sum).divide(new BigDecimal(total), RoundingMode.HALF_UP);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228626238/fstmerge_base_7641902880491179218
      if (sum instanceof Integer)
        return sum.intValue() / total;
      else if (sum instanceof Long)
        return sum.longValue() / total;
      else if (sum instanceof Float)
        return sum.floatValue() / total;
      else if (sum instanceof Double)
        return sum.doubleValue() / total;
      else if (sum instanceof BigDecimal)
        return ((BigDecimal) sum).divide(new BigDecimal(total));
=======
    	return computeAverage(sum, total);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228626238/fstmerge_var2_8281567591019539733
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAverage.java
Conflict type: LineBasedMCFd
Conflict body: 
public ODocument merge(final Map<String, Object> iOther, final boolean iUpdateOnlyMode,
      boolean iMergeSingleItemsOfMultiValueFields) {
    checkForLoading();
    checkForFields();

    _source = null;

    for (String f : iOther.keySet()) {
      final Object value = field(f);
      final Object otherValue = iOther.get(f);

      if (containsField(f) && iMergeSingleItemsOfMultiValueFields) {
        if (value instanceof Map<?, ?>) {
          final Map<String, Object> map = (Map<String, Object>) value;
          final Map<String, Object> otherMap = (Map<String, Object>) otherValue;

          for (Entry<String, Object> entry : otherMap.entrySet()) {
            map.put(entry.getKey(), entry.getValue());
          }
          continue;
        } else if (value instanceof Collection<?>) {
          final Collection<Object> coll = (Collection<Object>) value;
          final Collection<Object> otherColl = (Collection<Object>) otherValue;

          for (Object item : otherColl) {
            if (coll.contains(item))
              // REMOVE PREVIOUS ITEM BECAUSE THIS COULD BE UPDATED INSIDE OF IT
              coll.remove(item);
            coll.add(item);
          }

          // JUMP RAW REPLACE
          continue;
        }
      }

      // RESET THE FIELD TYPE
      setFieldType(f, null);

      boolean bagsMerged = false;
      if (value instanceof ORidBag && otherValue instanceof ORidBag)
        bagsMerged = ((ORidBag) value).tryMerge((ORidBag) otherValue, iMergeSingleItemsOfMultiValueFields);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228629338/fstmerge_var1_5574419393256412432
      if ( value== null || !value.equals(otherValue) )
        field(f, otherValue);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228629338/fstmerge_base_4060187363998465194
      if ((value != null && !value.equals(otherValue)) || (value == null && otherValue != null))
        field(f, iOther.get(f));
=======
      if (!bagsMerged && (value != null && !value.equals(otherValue)) || (value == null && otherValue != null))
        field(f, otherValue);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228629338/fstmerge_var2_5952315457708580072
    }

    if (!iUpdateOnlyMode) {
      // REMOVE PROPERTIES NOT FOUND IN OTHER DOC
      for (String f : fieldNames())
        if (!iOther.containsKey(f))
          removeField(f);
    }

    return this;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228633957/fstmerge_var1_3594646150140922247
public OStorageOperationResult<OPhysicalPosition> createRecord(final int dataSegmentId, final ORecordId rid,
      final byte[] content, ORecordVersion recordVersion, final byte recordType, final int mode,
      final ORecordCallback<OClusterPosition> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);
    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        checkOpeness();

        if (content == null)
          throw new IllegalArgumentException("Record is null");

        OPhysicalPosition ppos = new OPhysicalPosition(-1, -1, recordType);
        try {
          lock.acquireSharedLock();
          try {
            if (recordVersion.getCounter() > -1)
              recordVersion.increment();
            else
              recordVersion = OVersionFactory.instance().createVersion();

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              ppos = cluster.createRecord(content, recordVersion, recordType);
              rid.clusterPosition = ppos.clusterPosition;

              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (Throwable e) {
              atomicOperationsManager.endAtomicOperation(true);

              try {
                if (ppos.clusterPosition != null && ppos.clusterPosition.compareTo(OClusterPosition.INVALID_POSITION) != 0)
                  cluster.deleteRecord(ppos.clusterPosition);
              } catch (IOException ioe) {
                OLogManager.instance().error(this, "Error on removing record in cluster: " + cluster, ioe);
              }

              throw new OStorageException("Error on creating record in cluster: " + cluster, e);
            }

            if (callback != null)
              callback.call(rid, ppos.clusterPosition);

            return new OStorageOperationResult<OPhysicalPosition>(ppos);
          } finally {
            lock.releaseSharedLock();
          }
        } catch (IOException ioe) {
          try {
            if (ppos.clusterPosition != null && ppos.clusterPosition.compareTo(OClusterPosition.INVALID_POSITION) != 0)
              cluster.deleteRecord(ppos.clusterPosition);
          } catch (IOException e) {
            OLogManager.instance().error(this, "Error on removing record in cluster: " + cluster, e);
          }

          OLogManager.instance().error(this, "Error on creating record in cluster: " + cluster, ioe);
          return null;
        }
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler().stopChrono(PROFILER_CREATE_RECORD, "Create a record in database", timer, "db.*.createRecord");
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228633957/fstmerge_base_4807826726867137183
public OStorageOperationResult<OPhysicalPosition> createRecord(final int dataSegmentId, final ORecordId rid,
      final byte[] content, ORecordVersion recordVersion, final byte recordType, final int mode,
      final ORecordCallback<OClusterPosition> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);
    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        checkOpeness();

        if (content == null)
          throw new IllegalArgumentException("Record is null");

        OPhysicalPosition ppos = new OPhysicalPosition(-1, -1, recordType);
        try {
          lock.acquireSharedLock();
          try {
            if (recordVersion.getCounter() > -1)
              recordVersion.increment();
            else
              recordVersion = OVersionFactory.instance().createVersion();

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              ppos = cluster.createRecord(content, recordVersion, recordType);
              rid.clusterPosition = ppos.clusterPosition;

              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (RuntimeException e) {
              atomicOperationsManager.endAtomicOperation(true);
              throw e;
            }

            if (callback != null)
              callback.call(rid, ppos.clusterPosition);

            return new OStorageOperationResult<OPhysicalPosition>(ppos);
          } finally {
            lock.releaseSharedLock();
          }
        } catch (IOException ioe) {
          try {
            if (ppos.clusterPosition != null && ppos.clusterPosition.compareTo(OClusterPosition.INVALID_POSITION) != 0)
              cluster.deleteRecord(ppos.clusterPosition);
          } catch (IOException e) {
            OLogManager.instance().error(this, "Error on removing record in cluster: " + cluster, e);
          }

          OLogManager.instance().error(this, "Error on creating record in cluster: " + cluster, ioe);
          return null;
        }
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler().stopChrono(PROFILER_CREATE_RECORD, "Create a record in database", timer, "db.*.createRecord");
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228633957/fstmerge_var2_4924385556537182215

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228633969/fstmerge_var1_157046453306160502
public OStorageOperationResult<ORecordVersion> updateRecord(final ORecordId rid, final byte[] content,
      final ORecordVersion version, final byte recordType, final int mode, ORecordCallback<ORecordVersion> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          // GET THE SHARED LOCK AND GET AN EXCLUSIVE LOCK AGAINST THE RECORD
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            // UPDATE IT
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
            if (!checkForRecordValidity(ppos)) {
              final ORecordVersion recordVersion = OVersionFactory.instance().createUntrackedVersion();
              if (callback != null)
                callback.call(rid, recordVersion);

              return new OStorageOperationResult<ORecordVersion>(recordVersion);
            }

            // VERSION CONTROL CHECK
            switch (version.getCounter()) {
            // DOCUMENT UPDATE, NO VERSION CONTROL
            case -1:
              ppos.recordVersion.increment();
              break;

            // DOCUMENT UPDATE, NO VERSION CONTROL, NO VERSION UPDATE
            case -2:
              ppos.recordVersion.setCounter(-2);
              break;

            default:
              // MVCC CONTROL AND RECORD UPDATE OR WRONG VERSION VALUE
              // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME
              if (!version.equals(ppos.recordVersion))
                if (OFastConcurrentModificationException.enabled())
                  throw OFastConcurrentModificationException.instance();
                else
                  throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.UPDATED);
              ppos.recordVersion.increment();
            }

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              cluster.updateRecord(rid.clusterPosition, content, ppos.recordVersion, recordType);

              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (Throwable e) {
              atomicOperationsManager.endAtomicOperation(true);
              throw new OStorageException("Error on updating record " + rid + " (cluster: " + cluster + ")", e);
            }

            if (callback != null)
              callback.call(rid, ppos.recordVersion);

            return new OStorageOperationResult<ORecordVersion>(ppos.recordVersion);

          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } catch (IOException e) {
          OLogManager.instance().error(this, "Error on updating record " + rid + " (cluster: " + cluster + ")", e);

          final ORecordVersion recordVersion = OVersionFactory.instance().createUntrackedVersion();
          if (callback != null)
            callback.call(rid, recordVersion);

          return new OStorageOperationResult<ORecordVersion>(recordVersion);
        } finally {
          lock.releaseSharedLock();
        }
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler().stopChrono(PROFILER_UPDATE_RECORD, "Update a record to database", timer, "db.*.updateRecord");
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228633969/fstmerge_base_4788472492801469097
public OStorageOperationResult<ORecordVersion> updateRecord(final ORecordId rid, final byte[] content,
      final ORecordVersion version, final byte recordType, final int mode, ORecordCallback<ORecordVersion> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          // GET THE SHARED LOCK AND GET AN EXCLUSIVE LOCK AGAINST THE RECORD
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            // UPDATE IT
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));
            if (!checkForRecordValidity(ppos)) {
              final ORecordVersion recordVersion = OVersionFactory.instance().createUntrackedVersion();
              if (callback != null)
                callback.call(rid, recordVersion);

              return new OStorageOperationResult<ORecordVersion>(recordVersion);
            }

            // VERSION CONTROL CHECK
            switch (version.getCounter()) {
            // DOCUMENT UPDATE, NO VERSION CONTROL
            case -1:
              ppos.recordVersion.increment();
              break;

            // DOCUMENT UPDATE, NO VERSION CONTROL, NO VERSION UPDATE
            case -2:
              ppos.recordVersion.setCounter(-2);
              break;

            default:
              // MVCC CONTROL AND RECORD UPDATE OR WRONG VERSION VALUE
              // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME
              if (!version.equals(ppos.recordVersion))
                if (OFastConcurrentModificationException.enabled())
                  throw OFastConcurrentModificationException.instance();
                else
                  throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.UPDATED);
              ppos.recordVersion.increment();
            }

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              cluster.updateRecord(rid.clusterPosition, content, ppos.recordVersion, recordType);

              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (RuntimeException e) {
              atomicOperationsManager.endAtomicOperation(true);
              throw e;
            }

            if (callback != null)
              callback.call(rid, ppos.recordVersion);

            return new OStorageOperationResult<ORecordVersion>(ppos.recordVersion);

          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } catch (IOException e) {
          OLogManager.instance().error(this, "Error on updating record " + rid + " (cluster: " + cluster + ")", e);

          final ORecordVersion recordVersion = OVersionFactory.instance().createUntrackedVersion();
          if (callback != null)
            callback.call(rid, recordVersion);

          return new OStorageOperationResult<ORecordVersion>(recordVersion);
        } finally {
          lock.releaseSharedLock();
        }
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler().stopChrono(PROFILER_UPDATE_RECORD, "Update a record to database", timer, "db.*.updateRecord");
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228633969/fstmerge_var2_7573963612685195945

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228633975/fstmerge_var1_9109649657712040996
@Override
  public OStorageOperationResult<Boolean> deleteRecord(final ORecordId rid, final ORecordVersion version, final int mode,
      ORecordCallback<Boolean> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));

            if (ppos == null)
              // ALREADY DELETED
              return new OStorageOperationResult<Boolean>(false);

            // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME
            if (version.getCounter() > -1 && !ppos.recordVersion.equals(version))
              if (OFastConcurrentModificationException.enabled())
                throw OFastConcurrentModificationException.instance();
              else
                throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.DELETED);

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);

              cluster.deleteRecord(ppos.clusterPosition);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (Throwable e) {
              atomicOperationsManager.endAtomicOperation(true);
              throw new OStorageException("Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
            }

            return new OStorageOperationResult<Boolean>(true);
          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } finally {
          lock.releaseSharedLock();
        }
      } catch (IOException e) {
        OLogManager.instance().error(this, "Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler()
          .stopChrono(PROFILER_DELETE_RECORD, "Delete a record from database", timer, "db.*.deleteRecord");
    }

    return new OStorageOperationResult<Boolean>(false);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228633975/fstmerge_base_543168648684760831
@Override
  public OStorageOperationResult<Boolean> deleteRecord(final ORecordId rid, final ORecordVersion version, final int mode,
      ORecordCallback<Boolean> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));

            if (ppos == null)
              // ALREADY DELETED
              return new OStorageOperationResult<Boolean>(false);

            // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME
            if (version.getCounter() > -1 && !ppos.recordVersion.equals(version))
              if (OFastConcurrentModificationException.enabled())
                throw OFastConcurrentModificationException.instance();
              else
                throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.DELETED);

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);

              cluster.deleteRecord(ppos.clusterPosition);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (RuntimeException e) {
              atomicOperationsManager.endAtomicOperation(true);
            }

            return new OStorageOperationResult<Boolean>(true);
          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } finally {
          lock.releaseSharedLock();
        }
      } catch (IOException e) {
        OLogManager.instance().error(this, "Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler()
          .stopChrono(PROFILER_DELETE_RECORD, "Delete a record from database", timer, "db.*.deleteRecord");
    }

    return new OStorageOperationResult<Boolean>(false);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228633975/fstmerge_var2_5887019207991482312

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228633979/fstmerge_var1_1829622938212173043
@Override
  public OStorageOperationResult<Boolean> hideRecord(final ORecordId rid, final int mode, ORecordCallback<Boolean> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));

            if (ppos == null)
              // ALREADY HIDDEN
              return new OStorageOperationResult<Boolean>(false);

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);

              cluster.hideRecord(ppos.clusterPosition);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (Throwable e) {
              atomicOperationsManager.endAtomicOperation(true);
              throw new OStorageException("Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
            }

            return new OStorageOperationResult<Boolean>(true);
          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } finally {
          lock.releaseSharedLock();
        }
      } catch (IOException e) {
        OLogManager.instance().error(this, "Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler()
          .stopChrono(PROFILER_DELETE_RECORD, "Delete a record from database", timer, "db.*.deleteRecord");
    }

    return new OStorageOperationResult<Boolean>(false);
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228633979/fstmerge_base_2482469207657837780
@Override
  public OStorageOperationResult<Boolean> hideRecord(final ORecordId rid, final int mode, ORecordCallback<Boolean> callback) {
    checkOpeness();

    final long timer = Orient.instance().getProfiler().startChrono();

    final OCluster cluster = getClusterById(rid.clusterId);

    cluster.getExternalModificationLock().requestModificationLock();
    try {
      modificationLock.requestModificationLock();
      try {
        lock.acquireSharedLock();
        try {
          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          try {
            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));

            if (ppos == null)
              // ALREADY HIDDEN
              return new OStorageOperationResult<Boolean>(false);

            dirtyFlag.makeDirty();
            atomicOperationsManager.startAtomicOperation();
            try {
              final ORecordSerializationContext context = ORecordSerializationContext.getContext();
              if (context != null)
                context.executeOperations(this);

              cluster.hideRecord(ppos.clusterPosition);
              atomicOperationsManager.endAtomicOperation(false);
            } catch (RuntimeException e) {
              atomicOperationsManager.endAtomicOperation(true);
            }

            return new OStorageOperationResult<Boolean>(true);
          } finally {
            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);
          }
        } finally {
          lock.releaseSharedLock();
        }
      } catch (IOException e) {
        OLogManager.instance().error(this, "Error on deleting record " + rid + "( cluster: " + cluster + ")", e);
      } finally {
        modificationLock.releaseModificationLock();
      }
    } finally {
      cluster.getExternalModificationLock().releaseModificationLock();
      Orient.instance().getProfiler()
          .stopChrono(PROFILER_DELETE_RECORD, "Delete a record from database", timer, "db.*.deleteRecord");
    }

    return new OStorageOperationResult<Boolean>(false);
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228633979/fstmerge_var2_7008898813935019948

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/OLocalPaginatedStorage.java
Conflict type: LineBasedMCFd
Conflict body: 
public ORecordInternal<?> fromString(String iSource, ORecordInternal<?> iRecord, final String[] iFields, final String iOptions,
      boolean needReload) {
    iSource = unwrapSource(iSource);

    boolean noMap = false;
    if (iOptions != null) {
      final String[] format = iOptions.split(",");
      for (String f : format)
        if (f.equalsIgnoreCase("noMap"))
          noMap = true;
    }

    if (iRecord != null)
      // RESET ALL THE FIELDS
      iRecord.clear();

    final List<String> fields = OStringSerializerHelper.smartSplit(iSource, PARAMETER_SEPARATOR, 0, -1, true, true, false, false,
        ' ', '\n', '\r', '\t');

    if (fields.size() % 2 != 0)
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228647716/fstmerge_var1_8738783482131471793
      throw new OSerializationException("Error on unmarshalling JSON content: wrong format. Use <field> : <value>, but found: "
          + iSource);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228647716/fstmerge_base_6577149486334975147
      throw new OSerializationException("Error on unmarshalling JSON content: wrong format. Use <field> : <value>");
=======
      throw new OSerializationException("Error on unmarshalling JSON content: wrong format \"" + iSource
          + "\". Use <field> : <value>");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228647716/fstmerge_var2_3289062758305371462

    Map<String, Character> fieldTypes = null;

    if (fields != null && fields.size() > 0) {
      // SEARCH FOR FIELD TYPES IF ANY
      for (int i = 0; i < fields.size(); i += 2) {
        final String fieldName = OStringSerializerHelper.getStringContent(fields.get(i));
        final String fieldValue = fields.get(i + 1);
        final String fieldValueAsString = OStringSerializerHelper.getStringContent(fieldValue);

        if (fieldName.equals(ATTRIBUTE_FIELD_TYPES) && iRecord instanceof ODocument) {
          fieldTypes = loadFieldTypes(fieldTypes, fieldValueAsString);
        } else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_TYPE)) {
          if (iRecord == null || iRecord.getRecordType() != fieldValueAsString.charAt(0)) {
            // CREATE THE RIGHT RECORD INSTANCE
            iRecord = Orient.instance().getRecordFactoryManager().newInstance((byte) fieldValueAsString.charAt(0));
          }
        } else if (needReload && fieldName.equals(ODocumentHelper.ATTRIBUTE_RID) && iRecord instanceof ODocument) {
          if (fieldValue != null && fieldValue.length() > 0) {
            ORecordInternal<?> localRecord = ODatabaseRecordThreadLocal.INSTANCE.get().load(new ORecordId(fieldValueAsString));
            if (localRecord != null)
              iRecord = localRecord;
          }
        } else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_CLASS) && iRecord instanceof ODocument) {
          ((ODocument) iRecord).setClassNameIfExists("null".equals(fieldValueAsString) ? null : fieldValueAsString);
        }
      }

      if (iRecord == null)
        iRecord = new ODocument();

      try {
        int recordVersion = 0;
        long timestamp = 0L;
        long macAddress = 0L;
        for (int i = 0; i < fields.size(); i += 2) {
          final String fieldName = OStringSerializerHelper.getStringContent(fields.get(i));
          final String fieldValue = fields.get(i + 1);
          final String fieldValueAsString = OStringSerializerHelper.getStringContent(fieldValue);

          // RECORD ATTRIBUTES
          if (fieldName.equals(ODocumentHelper.ATTRIBUTE_RID))
            iRecord.setIdentity(new ORecordId(fieldValueAsString));
          else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_VERSION))
            if (OGlobalConfiguration.DB_USE_DISTRIBUTED_VERSION.getValueAsBoolean())
              recordVersion = Integer.parseInt(fieldValue);
            else
              iRecord.getRecordVersion().setCounter(Integer.parseInt(fieldValue));
          else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_VERSION_TIMESTAMP)) {
            if (OGlobalConfiguration.DB_USE_DISTRIBUTED_VERSION.getValueAsBoolean())
              timestamp = Long.parseLong(fieldValue);
          } else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_VERSION_MACADDRESS)) {
            if (OGlobalConfiguration.DB_USE_DISTRIBUTED_VERSION.getValueAsBoolean())
              macAddress = Long.parseLong(fieldValue);

          } else if (fieldName.equals(ODocumentHelper.ATTRIBUTE_TYPE)) {
            continue;
          } else if (fieldName.equals(ATTRIBUTE_FIELD_TYPES) && iRecord instanceof ODocument) {
            continue;
          } else if (fieldName.equals("value") && !(iRecord instanceof ODocument)) {
            // RECORD VALUE(S)
            if ("null".equals(fieldValue))
              iRecord.fromStream(new byte[] {});
            else if (iRecord instanceof ORecordBytes) {
              // BYTES
              iRecord.fromStream(OBase64Utils.decode(fieldValueAsString));
            } else if (iRecord instanceof ORecordStringable) {
              ((ORecordStringable) iRecord).value(fieldValueAsString);
            } else
              throw new IllegalArgumentException("unsupported type of record");
          } else if (iRecord instanceof ODocument) {
            final ODocument doc = ((ODocument) iRecord);

            // DETERMINE THE TYPE FROM THE SCHEMA
            OType type = determineType(doc, fieldName);

            final Object v = getValue(doc, fieldName, fieldValue, fieldValueAsString, type, null, fieldTypes, noMap, iOptions);

            if (v != null)
              if (v instanceof Collection<?> && !((Collection<?>) v).isEmpty()) {
                if (v instanceof ORecordLazyMultiValue)
                  ((ORecordLazyMultiValue) v).setAutoConvertToRecord(false);

                // CHECK IF THE COLLECTION IS EMBEDDED
                if (type == null) {
                  // TRY TO UNDERSTAND BY FIRST ITEM
                  Object first = ((Collection<?>) v).iterator().next();
                  if (first != null && first instanceof ORecord<?> && !((ORecord<?>) first).getIdentity().isValid())
                    type = v instanceof Set<?> ? OType.EMBEDDEDSET : OType.EMBEDDEDLIST;
                }

                if (type != null) {
                  // TREAT IT AS EMBEDDED
                  doc.field(fieldName, v, type);
                  continue;
                }
              } else if (v instanceof Map<?, ?> && !((Map<?, ?>) v).isEmpty()) {
                // CHECK IF THE MAP IS EMBEDDED
                Object first = ((Map<?, ?>) v).values().iterator().next();
                if (first != null && first instanceof ORecord<?> && !((ORecord<?>) first).getIdentity().isValid()) {
                  doc.field(fieldName, v, OType.EMBEDDEDMAP);
                  continue;
                }
              } else if (v instanceof ODocument && type != null && type.isLink()) {
                String className = ((ODocument) v).getClassName();
                if (className != null && className.length() > 0)
                  ((ODocument) v).save();
              }

            if (type == null && fieldTypes != null && fieldTypes.containsKey(fieldName))
              type = ORecordSerializerStringAbstract.getType(fieldValue, fieldTypes.get(fieldName));

            if (v instanceof OTrackedSet<?>) {
              if (OMultiValue.getFirstValue((Set<?>) v) instanceof OIdentifiable)
                type = OType.LINKSET;
            } else if (v instanceof OTrackedList<?>) {
              if (OMultiValue.getFirstValue((List<?>) v) instanceof OIdentifiable)
                type = OType.LINKLIST;
            }

            if (type != null)
              doc.field(fieldName, v, type);
            else
              doc.field(fieldName, v);
          }

        }
        if (timestamp != 0 && OGlobalConfiguration.DB_USE_DISTRIBUTED_VERSION.getValueAsBoolean()) {
          ((ODistributedVersion) iRecord.getRecordVersion()).update(recordVersion, timestamp, macAddress);
        }

      } catch (Exception e) {
        if (iRecord.getIdentity().isValid())
          throw new OSerializationException("Error on unmarshalling JSON content for record " + iRecord.getIdentity(), e);
        else
          throw new OSerializationException("Error on unmarshalling JSON content for record: " + iSource, e);
      }
    }

    return iRecord;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/string/ORecordSerializerJSON.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228655431/fstmerge_var1_8203940866289801604
public void create(String name, OBinarySerializer<K> keySerializer, OBinarySerializer<V> valueSerializer, OType[] keyTypes,
      OStorageLocalAbstract storageLocal, boolean nullKeyIsSupported) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.keyTypes = keyTypes;
      this.nullKeyIsSupported = nullKeyIsSupported;

      this.diskCache = storage.getDiskCache();
      if (this.diskCache == null)
        throw new IllegalStateException("Disk cache was not initialized on storage level");

      this.name = name;

      init(storage);
      this.directory = new OHashTableDirectory(treeStateFileExtension, name, durableInNonTxMode, storage);

      startAtomicOperation();
      try {
        fileStateId = diskCache.openFile(name + metadataConfigurationFileExtension);
        logFileCreation(name + metadataConfigurationFileExtension, fileStateId);

        directory.create();

        hashStateEntry = diskCache.allocateNewPage(fileStateId);
        diskCache.pinPage(hashStateEntry);

        hashStateEntry.acquireExclusiveLock();
        try {
          OHashIndexFileLevelMetadataPage page = new OHashIndexFileLevelMetadataPage(hashStateEntry, getTrackMode(), true);

          createFileMetadata(0, page);
          hashStateEntry.markDirty();

          logPageChanges(page, hashStateEntry.getFileId(), hashStateEntry.getPageIndex(), true);
        } finally {
          hashStateEntry.releaseExclusiveLock();
          diskCache.release(hashStateEntry);
        }

        setKeySerializer(keySerializer);
        setValueSerializer(valueSerializer);

        initHashTreeState();

        if (nullKeyIsSupported) {
          nullBucketFileId = diskCache.openFile(name + nullBucketFileExtension);
          logFileCreation(name + nullBucketFileExtension, nullBucketFileId);
        }

        endAtomicOperation(false);
      } catch (IOException e) {
        endAtomicOperation(true);
        throw e;
      } catch (Throwable e) {
        endAtomicOperation(true);
        throw new OStorageException(null, e);
      }

    } catch (IOException e) {
      throw new OIndexException("Error during local hash table creation.", e);
    } finally {
      releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228655431/fstmerge_base_5773833923426834763
public void create(String name, OBinarySerializer<K> keySerializer, OBinarySerializer<V> valueSerializer, OType[] keyTypes,
      OStorageLocalAbstract storageLocal, boolean nullKeyIsSupported) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.keyTypes = keyTypes;
      this.nullKeyIsSupported = nullKeyIsSupported;

      this.diskCache = storage.getDiskCache();
      if (this.diskCache == null)
        throw new IllegalStateException("Disk cache was not initialized on storage level");

      this.name = name;

      init(storage);
      this.directory = new OHashTableDirectory(treeStateFileExtension, name, durableInNonTxMode, storage);

      startAtomicOperation();
      try {
        fileStateId = diskCache.openFile(name + metadataConfigurationFileExtension);
        logFileCreation(name + metadataConfigurationFileExtension, fileStateId);

        directory.create();

        hashStateEntry = diskCache.allocateNewPage(fileStateId);
        diskCache.pinPage(hashStateEntry);

        hashStateEntry.acquireExclusiveLock();
        try {
          OHashIndexFileLevelMetadataPage page = new OHashIndexFileLevelMetadataPage(hashStateEntry, getTrackMode(), true);

          createFileMetadata(0, page);
          hashStateEntry.markDirty();

          logPageChanges(page, hashStateEntry.getFileId(), hashStateEntry.getPageIndex(), true);
        } finally {
          hashStateEntry.releaseExclusiveLock();
          diskCache.release(hashStateEntry);
        }

        setKeySerializer(keySerializer);
        setValueSerializer(valueSerializer);

        initHashTreeState();

        if (nullKeyIsSupported) {
          nullBucketFileId = diskCache.openFile(name + nullBucketFileExtension);
          logFileCreation(name + nullBucketFileExtension, nullBucketFileId);
        }

        endAtomicOperation(false);
      } catch (IOException e) {
        endAtomicOperation(true);
        throw e;
      } catch (RuntimeException e) {
        endAtomicOperation(true);
        throw e;
      }

    } catch (IOException e) {
      throw new OIndexException("Error during local hash table creation.", e);
    } finally {
      releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228655431/fstmerge_var2_4712238854241691625

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/index/hashindex/local/OLocalHashTable.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228658164/fstmerge_var1_3224465377779900040
public void create(String name, OBinarySerializer<K> keySerializer, OBinarySerializer<V> valueSerializer, OType[] keyTypes,
      OStorageLocalAbstract storageLocal, boolean nullPointerSupport) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.keyTypes = keyTypes;

      this.diskCache = storage.getDiskCache();

      this.name = name;
      this.keySerializer = keySerializer;
      this.valueSerializer = valueSerializer;
      this.nullPointerSupport = nullPointerSupport;

      fileId = diskCache.openFile(name + dataFileExtension);

      if (nullPointerSupport)
        nullBucketFileId = diskCache.openFile(name + nullFileExtension);

      initDurableComponent(storageLocal);

      OCacheEntry rootCacheEntry = diskCache.load(fileId, ROOT_INDEX, false);
      rootCacheEntry.acquireExclusiveLock();
      try {
        super.startAtomicOperation();

        OSBTreeBucket<K, V> rootBucket = new OSBTreeBucket<K, V>(rootCacheEntry, true, keySerializer, keyTypes, valueSerializer,
            getTrackMode());
        rootBucket.setTreeSize(0);

        super.logPageChanges(rootBucket, fileId, ROOT_INDEX, true);
        rootCacheEntry.markDirty();
      } finally {
        rootCacheEntry.releaseExclusiveLock();
        diskCache.release(rootCacheEntry);
      }

      super.endAtomicOperation(false);
    } catch (Throwable e) {
      try {
        super.endAtomicOperation(true);
      } catch (IOException e1) {
        OLogManager.instance().error(this, "Error during sbtree data rollback", e1);
      }
      throw new OSBTreeException("Error creation of sbtree with name" + name, e);
    } finally {
      releaseExclusiveLock();
    }
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228658164/fstmerge_base_6785274745425399122
public void create(String name, OBinarySerializer<K> keySerializer, OBinarySerializer<V> valueSerializer, OType[] keyTypes,
      OStorageLocalAbstract storageLocal, boolean nullPointerSupport) {
    acquireExclusiveLock();
    try {
      this.storage = storageLocal;
      this.keyTypes = keyTypes;

      this.diskCache = storage.getDiskCache();

      this.name = name;
      this.keySerializer = keySerializer;
      this.valueSerializer = valueSerializer;
      this.nullPointerSupport = nullPointerSupport;

      fileId = diskCache.openFile(name + dataFileExtension);

      if (nullPointerSupport)
        nullBucketFileId = diskCache.openFile(name + nullFileExtension);

      initDurableComponent(storageLocal);

      OCacheEntry rootCacheEntry = diskCache.load(fileId, ROOT_INDEX, false);
      rootCacheEntry.acquireExclusiveLock();
      try {
        super.startAtomicOperation();

        OSBTreeBucket<K, V> rootBucket = new OSBTreeBucket<K, V>(rootCacheEntry, true, keySerializer, keyTypes, valueSerializer,
            getTrackMode());
        rootBucket.setTreeSize(0);

        super.logPageChanges(rootBucket, fileId, ROOT_INDEX, true);
        rootCacheEntry.markDirty();
      } finally {
        rootCacheEntry.releaseExclusiveLock();
        diskCache.release(rootCacheEntry);
      }

      super.endAtomicOperation(false);
    } catch (IOException e) {
      try {
        super.endAtomicOperation(true);
      } catch (IOException e1) {
        OLogManager.instance().error(this, "Error during sbtree data rollback", e1);
      }
      throw new OSBTreeException("Error creation of sbtree with name" + name, e);
    } finally {
      releaseExclusiveLock();
    }
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228658164/fstmerge_var2_199049873472369051

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/index/sbtree/local/OSBTree.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228658590/fstmerge_var1_4893747000147367850
@Override
  public void create(String indexName, OIndexDefinition indexDefinition, String clusterIndexName,
      OStreamSerializer valueSerializer, boolean isAutomatic) {
    OBinarySerializer keySerializer;

    if (indexDefinition != null) {
      if (indexDefinition instanceof ORuntimeKeyIndexDefinition) {
        keySerializer = ((ORuntimeKeyIndexDefinition) indexDefinition).getSerializer();
      } else {
        if (indexDefinition.getTypes().length > 1) {
          keySerializer = OCompositeKeySerializer.INSTANCE;
        } else {
          keySerializer = OBinarySerializerFactory.getInstance().getObjectSerializer(indexDefinition.getTypes()[0]);
        }
      }
    } else
      keySerializer = new OSimpleKeySerializer();

    final ODatabaseRecord database = getDatabase();
    final ORecordBytes identityRecord = new ORecordBytes();
    final OStorageLocalAbstract storageLocalAbstract = (OStorageLocalAbstract) database.getStorage().getUnderlying();

    database.save(identityRecord, clusterIndexName);
    identity = identityRecord.getIdentity();

    hashFunction.setValueSerializer(keySerializer);
    hashTable.create(indexName, keySerializer, (OBinarySerializer<V>) valueSerializer,
        indexDefinition != null ? indexDefinition.getTypes() : null, storageLocalAbstract, indexDefinition != null
            && !indexDefinition.isNullValuesIgnored());
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228658590/fstmerge_base_5175967972510202087
@Override
  public void create(String indexName, OIndexDefinition indexDefinition, String clusterIndexName,
      OStreamSerializer valueSerializer, boolean isAutomatic) {
    OBinarySerializer keySerializer;

    if (indexDefinition != null) {
      if (indexDefinition instanceof ORuntimeKeyIndexDefinition) {
        keySerializer = ((ORuntimeKeyIndexDefinition) indexDefinition).getSerializer();
      } else {
        if (indexDefinition.getTypes().length > 1) {
          keySerializer = OCompositeKeySerializer.INSTANCE;
        } else {
          keySerializer = OBinarySerializerFactory.getInstance().getObjectSerializer(indexDefinition.getTypes()[0]);
        }
      }
    } else
      keySerializer = new OSimpleKeySerializer();

    final ODatabaseRecord database = getDatabase();
    final ORecordBytes identityRecord = new ORecordBytes();
    final OStorageLocalAbstract storageLocalAbstract = (OStorageLocalAbstract) database.getStorage();

    database.save(identityRecord, clusterIndexName);
    identity = identityRecord.getIdentity();

    hashFunction.setValueSerializer(keySerializer);
    hashTable.create(indexName, keySerializer, (OBinarySerializer<V>) valueSerializer,
        indexDefinition != null ? indexDefinition.getTypes() : null, storageLocalAbstract, indexDefinition != null
            && !indexDefinition.isNullValuesIgnored());
  }
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228658590/fstmerge_var2_6155509906452413250

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/core/src/main/java/com/orientechnologies/orient/core/index/engine/OLocalHashTableIndexEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
@Parameters(value = "url")
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228665468/fstmerge_var1_5090008026518909555
  public ConcurrentSQLBatchUpdateSuperNodeTest(@Optional(value = "plocal:target/concurrentbatch") String iURL) {
    url = iURL;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228665468/fstmerge_base_6801267571698019078
  public ConcurrentSQLBatchUpdateSuperNodeTest(@Optional(value = "memory:test") String iURL) {
    url = iURL;
=======
  public ConcurrentSQLBatchUpdateSuperNodeTest(@Optional String url) {
    super(url);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228665468/fstmerge_var2_6267379205256381883
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/tests/src/test/java/com/orientechnologies/orient/test/database/auto/ConcurrentSQLBatchUpdateSuperNodeTest.java
Conflict type: SameSignatureCM
Conflict body: 
@Override
    public void init() {
      database = new ODatabaseDocumentTx(System.getProperty("url")).open("admin", "admin");
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228672735/fstmerge_var1_4479488675847015073
      // database.setSerializer(new ORecordSerializerBinary());

||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228672735/fstmerge_base_7591465130878396418
=======
      database.setSerializer(new ORecordSerializerBinary());

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228672735/fstmerge_var2_7421945660495258920
      record = database.newInstance();
      database.declareIntent(new OIntentMassiveInsert());
      database.begin(TXTYPE.NOTX);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/tests/src/test/java/com/orientechnologies/orient/test/database/speed/LocalCreateDocumentMultiThreadSpeedTest.java
Conflict type: SameSignatureCM
Conflict body: 
@Override
  public void init() {
    database = new ODatabaseDocumentTx(System.getProperty("url"));
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228672756/fstmerge_var1_1817192033482182125
    // database.setSerializer(new ORecordSerializerBinary());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228672756/fstmerge_base_4181191524871887620
=======
    database.setSerializer(new ORecordSerializerBinary());
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228672756/fstmerge_var2_8118688205435946732
    if (database.exists())
      // database.open("admin", "admin");
      // else
      database.drop();

    database.create();
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228672756/fstmerge_base_4181191524871887620
=======
    database.set(ODatabase.ATTRIBUTES.MINIMUMCLUSTERS, 8);
    database.getMetadata().getSchema().createClass("Account");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228672756/fstmerge_var2_8118688205435946732

    foundObjects = 0;// database.countClusterElements("Account");

    System.out.println("\nTotal objects in Animal cluster before the test: " + foundObjects);
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/tests/src/test/java/com/orientechnologies/orient/test/database/speed/LocalCreateDocumentMultiThreadSpeedTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  protected String getContext() {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228677630/fstmerge_var1_5979245083772353579
    if (currentDatabase != null && currentDatabaseName != null) {
      final StringBuilder buffer = new StringBuilder();
      buffer.append(" {db=");
      buffer.append(currentDatabaseName);
      if (currentDatabase.getTransaction().isActive()) {
        buffer.append(" tx=[");
        buffer.append(currentDatabase.getTransaction().getEntryCount());
        buffer.append(" entries]");
      }

      buffer.append("}");
      return buffer.toString();
    } else if (serverAdmin != null)
      return " {server=" + serverAdmin.getURL() + "}";
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228677630/fstmerge_base_6961673429329999848
    if (currentDatabase != null && currentDatabaseName != null)
      return " {" + currentDatabaseName + "}";
    else if (serverAdmin != null)
      return " {" + serverAdmin.getURL() + "}";
=======
    if (currentDatabase != null && currentDatabaseName != null) {
      final StringBuilder buffer = new StringBuilder(64);
      buffer.append(" {db=");
      buffer.append(currentDatabaseName);
      if (currentDatabase.getTransaction().isActive()) {
        buffer.append(" tx=[");
        buffer.append(currentDatabase.getTransaction().getEntryCount());
        buffer.append(" entries]");
      }

      buffer.append("}");
      return buffer.toString();
    } else if (serverAdmin != null)
      return " {server=" + serverAdmin.getURL() + "}";
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228677630/fstmerge_var2_1824417388605752613
    return "";
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/tools/src/main/java/com/orientechnologies/orient/console/OConsoleDatabaseApp.java
Conflict type: LineBasedMCFd
Conflict body: 
public int run() {
    interactiveMode = isInteractiveMode(args);
    onBefore();

    int result = 0;

    if (interactiveMode) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_var1_1088369508041246792
      // EXECUTE IN INTERACTIVE MODE
      // final BufferedReader reader = new BufferedReader(new InputStreamReader(in));

      String consoleInput = null;
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_base_1521140289294487749
      // EXECUTE IN INTERACTIVE MODE
      // final BufferedReader reader = new BufferedReader(new InputStreamReader(in));

      String consoleInput;
=======
      String consoleInput;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_var2_5572888787657587951

      while (true) {
        try {
          if (commandBuffer.length() == 0) {
            out.println();
            out.print(getPrompt());
          }

          consoleInput = reader.readLine();

          if (consoleInput == null || consoleInput.length() == 0)
            continue;

          if (!executeCommands(new ODFACommandStream(consoleInput), false))
            break;
        } catch (Exception e) {
          result = 1;
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_var1_1088369508041246792
          OLogManager.instance().error(this, "Error on reading console input: %s", e, consoleInput);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_base_1521140289294487749
=======
          OLogManager.instance().error(this, "Error on reading console input: %s", e);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228681462/fstmerge_var2_5572888787657587951
        }
      }
    } else {
      // EXECUTE IN BATCH MODE
      result = executeBatch(getCommandLine(args)) ? 0 : 1;
    }

    onAfter();

    return result;
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/commons/src/main/java/com/orientechnologies/common/console/OConsoleApplication.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public ODistributedResponse send2Nodes(final ODistributedRequest iRequest, final Collection<String> iClusterNames,
      final Collection<String> iNodes) {
    checkForServerOnline(iRequest);

    final String databaseName = iRequest.getDatabaseName();

    if (iNodes.isEmpty()) {
      ODistributedServerLog.error(this, getLocalNodeName(), null, DIRECTION.OUT,
          "No nodes configured for database '%s' request: %s", databaseName, iRequest);
      throw new ODistributedException("No nodes configured for partition '" + databaseName + "' request: " + iRequest);
    }

    final ODistributedConfiguration cfg = manager.getDatabaseConfiguration(databaseName);

    // TODO: REALLY STILL MATTERS THE NUMBER OF THE QUEUES?
    final IQueue<ODistributedRequest>[] reqQueues = getRequestQueues(databaseName, iNodes, iRequest.getTask());

    iRequest.setSenderNodeName(getLocalNodeName());

    int availableNodes;
    if (iRequest.getTask().isRequireNodeOnline()) {
      // CHECK THE ONLINE NODES
      availableNodes = 0;
      int i = 0;
      for (String node : iNodes) {
        if (reqQueues[i] != null && manager.isNodeAvailable(node, databaseName))
          availableNodes++;
        else {
          if (ODistributedServerLog.isDebugEnabled())
            ODistributedServerLog.debug(this, getLocalNodeName(), node, DIRECTION.OUT,
                "skip expected response from node '%s' for request %s because it's not online (queue=%s)", node, iRequest,
                reqQueues[i] != null);
        }
        ++i;
      }
    } else {
      // EXPECT ANSWER FROM ALL NODES WITH A QUEUE
      availableNodes = 0;
      for (IQueue<ODistributedRequest> q : reqQueues)
        if (q != null)
          availableNodes++;
    }

    final int quorum = calculateQuorum(iRequest, iClusterNames, cfg, availableNodes);

    final int queueSize = iNodes.size();
    int expectedSynchronousResponses = availableNodes;

    final boolean groupByResponse;
    if (iRequest.getTask().getResultStrategy() == OAbstractRemoteTask.RESULT_STRATEGY.UNION) {
      expectedSynchronousResponses = availableNodes;
      groupByResponse = false;
    } else {
      groupByResponse = true;
    }

    final boolean waitLocalNode = waitForLocalNode(cfg, iClusterNames, iNodes);

    // CREATE THE RESPONSE MANAGER
    final ODistributedResponseManager currentResponseMgr = new ODistributedResponseManager(manager, iRequest, iNodes,
        expectedSynchronousResponses, quorum, waitLocalNode,
        iRequest.getTask().getSynchronousTimeout(expectedSynchronousResponses), iRequest.getTask().getTotalTimeout(queueSize),
        groupByResponse);

    final long timeout = OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong();

    try {
      requestLock.lock();
      try {
        // LOCK = ASSURE MESSAGES IN THE QUEUE ARE INSERTED SEQUENTIALLY AT CLUSTER LEVEL
        // BROADCAST THE REQUEST TO ALL THE NODE QUEUES

        // TODO: CAN I MOVE THIS OUTSIDE?
        iRequest.setId(msgService.getMessageIdCounter().getAndIncrement());

        if (ODistributedServerLog.isDebugEnabled())
          ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, "sending request %s", iRequest);

        // TODO: CAN I MOVE THIS OUTSIDE?
        msgService.registerRequest(iRequest.getId(), currentResponseMgr);

        for (IQueue<ODistributedRequest> queue : reqQueues) {
          if (queue != null)
            queue.offer(iRequest, timeout, TimeUnit.MILLISECONDS);
        }

      } finally {
        requestLock.unlock();
      }

      if (ODistributedServerLog.isDebugEnabled())
        ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, "sent request %s", iRequest);

      Orient
          .instance()
          .getProfiler()
          .updateCounter("distributed.db." + databaseName + ".msgSent", "Number of replication messages sent from current node",
              +1, "distributed.db.*.msgSent");

      return waitForResponse(iRequest, currentResponseMgr);

    } catch (Throwable e) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682347/fstmerge_var1_7570518972675658157
      throw new ODistributedException("Error on sending distributed request (" + iRequest + ") against database '" + databaseName
          + (iClusterNames != null ? "." + iClusterNames : "") + "' to nodes " + iNodes, e);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682347/fstmerge_base_6749299992950707187
      throw new ODistributedException("Error on sending distributed request " + iRequest.getId() + " against database '"
          + databaseName + (iClusterNames != null ? "." + iClusterNames : "") + "' to nodes " + iNodes, e);
=======
      throw new ODistributedException("Error on executing distributed request (" + iRequest + ") against database '" + databaseName
          + (iClusterNames != null ? "." + iClusterNames : "") + "' to nodes " + iNodes, e);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682347/fstmerge_var2_7882723663488005808
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void checkLocalNodeInConfiguration() {
    final Lock lock = manager.getLock(databaseName);
    lock.lock();
    try {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var1_2728540455953558694
      ODocument dCfg = (ODocument) manager.getConfigurationMap().get(manager.CONFIG_DATABASE_PREFIX + databaseName);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_base_1082262034916784967
    final List<String> foundPartition = cfg.addNewNodeInServerList(manager.getLocalNodeName());
    if (foundPartition != null) {
      // SET THE NODE.DB AS OFFLINE
      manager.setDatabaseStatus(databaseName, ODistributedServerManager.DB_STATUS.OFFLINE);
=======
    boolean distribCfgDirty = false;

    final List<String> foundPartition = cfg.addNewNodeInServerList(getLocalNodeName());
    if (foundPartition != null) {
      // SET THE NODE.DB AS OFFLINE, READY TO BE SYNCHRONIZED
      manager.setDatabaseStatus(getLocalNodeName(), databaseName, ODistributedServerManager.DB_STATUS.OFFLINE);

      ODistributedServerLog.info(this, getLocalNodeName(), null, DIRECTION.NONE, "adding node '%s' in partition: db=%s %s",
          getLocalNodeName(), databaseName, foundPartition);

      distribCfgDirty = true;
    }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var2_3276114347992656037

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var1_2728540455953558694
      final ODistributedConfiguration cfg;
      if (dCfg == null)
        cfg = manager.getDatabaseConfiguration(databaseName);
      else
        cfg = new ODistributedConfiguration(dCfg);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_base_1082262034916784967
      ODistributedServerLog.info(this, manager.getLocalNodeName(), null, DIRECTION.NONE, "adding node '%s' in partition: db=%s %s",
          manager.getLocalNodeName(), databaseName, foundPartition);
=======
    // SELF ASSIGN CLUSTERS PREVIOUSLY ASSIGNED TO THIS LOCAL NODE (BY SUFFIX)
    final String suffix2Search = "_" + getLocalNodeName();
    for (String c : cfg.getClusterNames()) {
      if (c.endsWith(suffix2Search)) {
        // FOUND: ASSIGN TO LOCAL NODE
        final String currentMaster = cfg.getMasterServer(c);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var2_3276114347992656037

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var1_2728540455953558694
      final List<String> foundPartition = cfg.addNewNodeInServerList(manager.getLocalNodeName());
      if (foundPartition != null) {
        // SET THE NODE.DB AS OFFLINE
        manager.setDatabaseStatus(databaseName, ODistributedServerManager.DB_STATUS.OFFLINE);

        ODistributedServerLog.info(this, manager.getLocalNodeName(), null, DIRECTION.NONE,
            "adding node '%s' in partition: db=%s %s", manager.getLocalNodeName(), databaseName, foundPartition);

        manager.updateCachedDatabaseConfiguration(databaseName, cfg.serialize(), true, true);
      }

    } finally {
      lock.unlock();
    }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_base_1082262034916784967
      manager.updateCachedDatabaseConfiguration(databaseName, cfg.serialize(), true, true);
    }
=======
        if (!getLocalNodeName().equals(currentMaster)) {
          ODistributedServerLog.warn(this, getLocalNodeName(), null, DIRECTION.NONE,
              "changing mastership of cluster '%s' from node '%s' to '%s'", c, currentMaster, getLocalNodeName());
          cfg.setMasterServer(c, getLocalNodeName());
          distribCfgDirty = true;
        }
      }
    }

    if (distribCfgDirty)
      manager.updateCachedDatabaseConfiguration(databaseName, cfg.serialize(), true, true);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682402/fstmerge_var2_3276114347992656037
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void removeNodeInConfiguration(final String iNode, final boolean iForce) {
    final Lock lock = manager.getLock(databaseName);
    lock.lock();
    try {

      // GET DATABASE CFG
      final ODistributedConfiguration cfg = manager.getDatabaseConfiguration(databaseName);

      if (!cfg.isHotAlignment()) {
        final List<String> foundPartition = cfg.removeNodeInServerList(iNode, iForce);
        if (foundPartition != null) {
          ODistributedServerLog.info(this, getLocalNodeName(), null, ODistributedServerLog.DIRECTION.NONE,
              "removing node '%s' in partitions: db=%s %s", iNode, databaseName, foundPartition);

          msgService.removeQueue(OHazelcastDistributedMessageService.getRequestQueueName(iNode, databaseName));
          msgService.removeQueue(OHazelcastDistributedMessageService.getRequestQueueName(iNode, databaseName
              + OCreateRecordTask.SUFFIX_QUEUE_NAME));
        }

        // CHANGED: RE-DEPLOY IT
        manager.updateCachedDatabaseConfiguration(databaseName, cfg.serialize(), true, true);
      }

    } catch (Exception e) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682406/fstmerge_var1_8192247099208742145

      ODistributedServerLog.debug(this, manager.getLocalNodeName(), null, ODistributedServerLog.DIRECTION.NONE,
          "unable to remove node '%s' in distributed configuration, db=%s", e, iNode, databaseName);

    } finally {
      lock.unlock();
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682406/fstmerge_base_7167478993881936363
      ODistributedServerLog.debug(this, manager.getLocalNodeName(), null, ODistributedServerLog.DIRECTION.NONE,
          "unable to remove node '%s' in distributed configuration, db=%s", e, iNode, databaseName);
=======
      ODistributedServerLog.debug(this, getLocalNodeName(), null, ODistributedServerLog.DIRECTION.NONE,
          "unable to remove node or change mastership for '%s' in distributed configuration, db=%s", e, iNode, databaseName);
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682406/fstmerge_var2_2955712766311502792
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedDatabase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682469/fstmerge_var1_2927178142076098351
public void handleUnreachableNode(String nodeName) {
    final Set<String> dbs = getDatabases();
    if (dbs != null)
      for (String dbName : dbs)
        getDatabase(dbName).removeNodeInConfiguration(nodeName, false);

    // REMOVE THE SERVER'S RESPONSE QUEUE
    // removeQueue(OHazelcastDistributedMessageService.getResponseQueueName(nodeName));

    for (ODistributedResponseManager r : responsesByRequestIds.values())
      r.notifyWaiters();
  }
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682469/fstmerge_base_4256246305650370679
=======
public void handleUnreachableNode(final String nodeName) {
    final Set<String> dbs = getDatabases();
    if (dbs != null)
      for (String dbName : dbs)
        getDatabase(dbName).removeNodeInConfiguration(nodeName, false);

    // REMOVE THE SERVER'S RESPONSE QUEUE
    // removeQueue(OHazelcastDistributedMessageService.getResponseQueueName(nodeName));

    for (ODistributedResponseManager r : responsesByRequestIds.values())
      r.notifyWaiters();
  }
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682469/fstmerge_var2_7032845963305096438

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastDistributedMessageService.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  public DB_STATUS getDatabaseStatus(final String iNode, final String iDatabaseName) {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228682580/fstmerge_var1_2655975910410593295
    if (!activeNodes.containsKey(iNode))
      return DB_STATUS.OFFLINE;

    return (DB_STATUS) getConfigurationMap().get(OHazelcastPlugin.CONFIG_DBSTATUS_PREFIX + iNode + "." + iDatabaseName);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228682580/fstmerge_base_2687816774639954865
    return (DB_STATUS) getConfigurationMap().get(OHazelcastPlugin.CONFIG_DBSTATUS_PREFIX + iNode + "." + iDatabaseName);
=======
    if (!activeNodes.containsKey(iNode))
      return DB_STATUS.OFFLINE;

    final DB_STATUS status = (DB_STATUS) getConfigurationMap().get(
        OHazelcastPlugin.CONFIG_DBSTATUS_PREFIX + iNode + "." + iDatabaseName);
    return status != null ? status : DB_STATUS.OFFLINE;
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228682580/fstmerge_var2_6032500021145107806
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
  protected void executeTest() throws Exception {
    try {
      OrientGraphFactory localFactory = new OrientGraphFactory("plocal:target/server0/databases/" + getDatabaseName());
      OrientGraphNoTx graphNoTx = localFactory.getNoTx();

      try {
        final OrientVertexType clientType = graphNoTx.createVertexType("Client");
        for (int i = 1; i < serverInstance.size(); ++i) {
          final String serverName = serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();
          clientType.addCluster("client_" + serverName);
        }

        graphNoTx.createVertexType("Product");
        graphNoTx.createVertexType("Hobby");

        graphNoTx.createEdgeType("Knows");
        graphNoTx.createEdgeType("Buy");
        graphNoTx.createEdgeType("Loves");
      } finally {
        graphNoTx.shutdown();
      }

      final OrientVertex product;
      final OrientVertex fishing;

      OrientBaseGraph graph = localFactory.getTx();
      try {
        product = graph.addVertex("class:Product");

        fishing = graph.addVertex("class:Hobby");
        fishing.setProperty("name", "Fishing");
      } finally {
        graph.shutdown();
      }

      vertices = new OrientVertex[serverInstance.size()];
      for (int i = 0; i < vertices.length; ++i) {
        final String nodeName = serverInstance.get(i).getServerInstance().getDistributedManager().getLocalNodeName();

        OrientGraphFactory factory = new OrientGraphFactory("plocal:target/server" + i + "/databases/" + getDatabaseName());
        graph = factory.getNoTx();
        try {

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var1_5136730729687047178
        clients = new OrientVertex[serverInstance.size()];
        for (int i = 0; i < clients.length; ++i) {
          clients[i] = graph.addVertex("class:Client,cluster:client_" + i);
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
        vertices = new OrientVertex[serverInstance.size()];
        for (int i = 0; i < vertices.length; ++i) {
          vertices[i] = graph.addVertex("class:Client,cluster:client_" + i);
=======
          vertices[i] = graph.addVertex("class:Client");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369

          final int clId = clients[i].getIdentity().getClusterId();

          if (i == 0)
            Assert.assertEquals("Error on assigning cluster client", clId, graph.getRawGraph().getClusterIdByName("client"));
          else {
            final int clusterId = graph.getRawGraph().getClusterIdByName("client_" + nodeName);
            Assert.assertEquals("Error on assigning cluster client_" + nodeName, clId, clusterId);
          }

          clients[i].setProperty("name", "shard_" + i);
          clients[i].setProperty("amount", i * 10000);

          System.out.println("Create vertex, class: " + clients[i].getLabel() + ", cluster: " + clId + " -> "
              + clients[i].getRecord());

          if (i > 1)
            // CREATE A LIGHT-WEIGHT EDGE
            clients[i].addEdge("Knows", clients[i - 1]);

          // CREATE A REGULAR EDGE
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var1_5136730729687047178
          final Edge edge = clients[i].addEdge("Buy", product, new Object[] { "price", 1000 * i });
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
          final Edge edge = vertices[i].addEdge("Buy", product, new Object[] { "price", 1000 * i });
=======
          final Edge edge = vertices[i].addEdge("Buy", product, new Object[] { "price", 1000 * i });

        } finally {
          graph.shutdown();
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369
        }
      }

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var1_5136730729687047178
      graph = factory.getNoTx();
      try {
        for (int i = 0; i < clients.length; ++i)
          System.out.println("Created vertex " + i + ": " + clients[i].getRecord());
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
      graph = factory.getNoTx();
      try {
        for (int i = 0; i < vertices.length; ++i)
          System.out.println("Created vertex " + i + ": " + vertices[i].getRecord());
=======
      for (int i = 0; i < vertices.length; ++i)
        System.out.println("Created vertex " + i + ": " + vertices[i].getRecord());

      for (int i = 0; i < vertices.length; ++i) {
        OrientGraphFactory factory = new OrientGraphFactory("plocal:target/server" + i + "/databases/" + getDatabaseName());
        graph = factory.getNoTx();
        try {
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var1_5136730729687047178
        for (int i = 0; i < clients.length; ++i) {
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
        for (int i = 0; i < vertices.length; ++i) {
=======
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369
          // CREATE A REGULAR EDGE
          Iterable<OrientEdge> result = graph.command(
              new OCommandSQL("create edge Loves from " + clients[i].getIdentity() + " to " + fishing.getIdentity()
                  + " set real = true retry 10")).execute();

          Assert.assertTrue(result.iterator().hasNext());
          OrientEdge e = result.iterator().next();
          Assert.assertEquals(e.getProperty("real"), true);

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
=======
          final OrientVertex explain = graph.command(new OCommandSQL("explain select from " + e.getIdentity())).execute();
          System.out
              .println("explain select from " + e.getIdentity() + " -> " + ((ODocument) explain.getRecord()).field("servers"));

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369
          result = graph.command(new OCommandSQL("select from " + e.getIdentity())).execute();

          Assert.assertTrue(result.iterator().hasNext());
          OrientEdge e2 = result.iterator().next();
          Assert.assertEquals(e2.getProperty("real"), true);

        } finally {
          graph.shutdown();
        }
      }

      // FOR ALL THE DATABASES QUERY THE SINGLE CLUSTER TO TEST ROUTING
      for (int server = 0; server < clients.length; ++server) {
        OrientGraphFactory f = new OrientGraphFactory("plocal:target/server" + server + "/databases/" + getDatabaseName());
        OrientGraphNoTx g = f.getNoTx();

<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
=======
        System.out.println("Query from server " + server + "[]");

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369
        try {
          for (int cluster = 0; cluster < clients.length; ++cluster) {
            final String query = "select from cluster:client_" + cluster;
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_base_2812318166682700776
=======

            final OrientVertex explain = g.command(new OCommandSQL("explain " + query)).execute();
            System.out.println("explain " + query + " -> " + ((ODocument) explain.getRecord()).field("servers"));

>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414228683081/fstmerge_var2_2429658693067203369
            Iterable<OrientVertex> result = g.command(new OCommandSQL(query)).execute();
            Assert.assertTrue("Error on query against 'cluster_" + cluster + "' on server '" + server + "': " + query, result
                .iterator().hasNext());

            OrientVertex v = result.iterator().next();

            Assert.assertEquals("Returned clients name property is != shard_" + cluster + " on server " + server, "shard_"
                + cluster, v.getProperty("name"));

            final Iterable<Vertex> knows = v.getVertices(Direction.OUT, "Knows");

            final Iterable<Vertex> boughtV = v.getVertices(Direction.OUT, "Buy");
            Assert.assertTrue(boughtV.iterator().hasNext());
            Assert.assertEquals(boughtV.iterator().next(), product);

            final Iterable<Edge> boughtE = v.getEdges(Direction.OUT, "Buy");
            Assert.assertNotNull(boughtE.iterator().next().getProperty("price"));
          }
        } finally {
          graph.shutdown();
        }
      }

      // TEST DISTRIBUTED QUERY + AGGREGATION + SUB_QUERY AGAINST ALL 3 DATABASES TO TEST MAP/REDUCE
      for (int server = 0; server < clients.length; ++server) {
        OrientGraphFactory f = new OrientGraphFactory("plocal:target/server" + 0 + "/databases/" + getDatabaseName());
        OrientGraphNoTx g = f.getNoTx();
        try {
          // MISC QUERIES
          Iterable<OrientVertex> result = g.command(new OCommandSQL("select sum(amount) from ( select from Client )")).execute();

          int count = 0;
          for (OrientVertex v : result) {
            System.out.println("select sum(amount) from ( select from Client ) -> " + v.getRecord());
            count++;
          }

          Assert.assertEquals("Returned wrong clients count on server " + server, 1, count);

        } finally {
          g.shutdown();
        }
      }

      // TEST DISTRIBUTED QUERY AGAINST ALL 3 DATABASES TO TEST MAP/REDUCE
      for (int server = 0; server < clients.length; ++server) {
        OrientGraphFactory f = new OrientGraphFactory("plocal:target/server" + server + "/databases/" + getDatabaseName());
        OrientGraphNoTx g = f.getNoTx();
        try {

          Iterable<OrientVertex> result = g.command(new OCommandSQL("select from Client")).execute();
          int count = 0;
          for (OrientVertex v : result) {
            count++;

            final Iterable<Vertex> knows = v.getVertices(Direction.OUT, "Knows");

            final Iterable<Vertex> boughtV = v.getVertices(Direction.OUT, "Buy");
            Assert.assertTrue(boughtV.iterator().hasNext());
            Assert.assertEquals(boughtV.iterator().next(), product);

            final Iterable<Edge> boughtE = v.getEdges(Direction.OUT, "Buy");
            Assert.assertNotNull(boughtE.iterator().next().getProperty("price"));
          }

          Assert.assertEquals("Returned wrong clients count on server " + server, 3, count);
        } finally {
          g.shutdown();
        }
      }

      // TEST DISTRIBUTED QUERY AGAINST ALL 3 DATABASES TO TEST AGGREGATION
      for (int server = 0; server < clients.length; ++server) {
        OrientGraphFactory f = new OrientGraphFactory("plocal:target/server" + server + "/databases/" + getDatabaseName());
        OrientGraphNoTx g = f.getNoTx();
        try {

          Iterable<OrientVertex> result = g.command(new OCommandSQL("select max(amount), avg(amount), sum(amount) from Client"))
              .execute();

          int count = 0;
          for (OrientVertex v : result) {
            System.out.println("select max(amount), avg(amount), sum(amount) from Client -> " + v.getRecord());
            count++;
          }

          Assert.assertEquals("Returned wrong clients count on server " + server, 1, count);
        } finally {
          g.shutdown();
        }
      }
    } catch (Exception e) {
      e.printStackTrace();

      // WAIT FOR TERMINATION
      Thread.sleep(10000);
      throw e;
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2621a_30071/rev_2621a-30071/distributed/src/test/java/com/orientechnologies/orient/server/distributed/TestSharding.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_0f377_0d67c/rev_0f377-0d67c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_19e85_fe2b5/rev_19e85-fe2b5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_87591_edb9a/rev_87591-edb9a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_5f163_47fca/rev_5f163-47fca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_7d8c9_8fe1b/rev_7d8c9-8fe1b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_2f3aa_9398e/rev_2f3aa-9398e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8ad92_0b37d/rev_8ad92-0b37d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_8ad92_11baa/rev_8ad92-11baa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9b43d_50847/rev_9b43d-50847.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_9b43d_3aa1e/rev_9b43d-3aa1e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1fe7d_4d01e/rev_1fe7d-4d01e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_cb04a_7d156/rev_cb04a-7d156.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_506f7_28c2b/rev_506f7-28c2b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_1d298_db888/rev_1d298-db888.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_905f1_1d298/rev_905f1-1d298.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_b9647_9cd12/rev_b9647-9cd12.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_21d16_92c69/rev_21d16-92c69.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_33488_625b6/rev_33488-625b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fd4dd_11eb6/rev_fd4dd-11eb6.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void doTestSuite(final TestSuite testSuite) throws Exception {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414239178882/fstmerge_var1_162525080560786085
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory+"/graph"));
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414239178882/fstmerge_base_4161213585816479350
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory));
=======
    dropGraph("graph");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414239178882/fstmerge_var2_6491969025257135360
    for (Method method : testSuite.getClass().getDeclaredMethods()) {
      if (method.getName().startsWith("test")) {
        System.out.println("Testing " + method.getName() + "[]");
        method.invoke(testSuite);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414239178882/fstmerge_base_4161213585816479350
        dropGraph(directory + "/graph");
=======
        dropGraph("graph");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414239178882/fstmerge_var2_6491969025257135360
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_fd4dd_11eb6/rev_fd4dd-11eb6/graphdb/src/test/java/com/tinkerpop/blueprints/impls/orient/OrientGraphTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f1b9f_fd4dd/rev_f1b9f-fd4dd.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void doTestSuite(final TestSuite testSuite) throws Exception {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414239729283/fstmerge_var1_5773330255229110451
    dropGraph("graph");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414239729283/fstmerge_base_6639225790506007120
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory));
=======
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory+"/graph"));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414239729283/fstmerge_var2_3711279711838146150
    for (Method method : testSuite.getClass().getDeclaredMethods()) {
      if (method.getName().startsWith("test")) {
        System.out.println("Testing " + method.getName() + "[]");
        method.invoke(testSuite);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414239729283/fstmerge_base_6639225790506007120
        dropGraph(directory + "/graph");
=======
        dropGraph("graph");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414239729283/fstmerge_var2_3711279711838146150
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f1b9f_fd4dd/rev_f1b9f-fd4dd/graphdb/src/test/java/com/tinkerpop/blueprints/impls/orient/OrientGraphTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f1b9f_fd4dd/rev_f1b9f-fd4dd.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void doTestSuite(final TestSuite testSuite) throws Exception {
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414240284708/fstmerge_var1_5599448858539792618
    dropGraph("graph");
||||||| /home/ines/paola/featurehouse/fstmerge_tmp1414240284708/fstmerge_base_8374670516872818621
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory));
=======
    String directory = getWorkingDirectory();
    deleteDirectory(new File(directory+"/graph"));
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414240284708/fstmerge_var2_6334033881934692288
    for (Method method : testSuite.getClass().getDeclaredMethods()) {
      if (method.getName().startsWith("test")) {
        System.out.println("Testing " + method.getName() + "[]");
        method.invoke(testSuite);
<<<<<<< /home/ines/paola/featurehouse/fstmerge_tmp1414240284708/fstmerge_base_8374670516872818621
        dropGraph(directory + "/graph");
=======
        dropGraph("graph");
>>>>>>> /home/ines/paola/featurehouse/fstmerge_tmp1414240284708/fstmerge_var2_6334033881934692288
      }
    }
  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/orientdb/revisions/rev_f1b9f_fd4dd/rev_f1b9f-fd4dd/graphdb/src/test/java/com/tinkerpop/blueprints/impls/orient/OrientGraphTest.java

=========================================================