=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_25803_b49c0/rev_25803-b49c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_31a8d_91ca6/rev_31a8d-91ca6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c3a2b_f8c29/rev_c3a2b-f8c29.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_7580e_c09ac/rev_7580e-c09ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_75b88_bd48e/rev_75b88-bd48e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_02398_a409b/rev_02398-a409b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_99a87_1c221/rev_99a87-1c221.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_cb34f_5dcaa/rev_cb34f-5dcaa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_5b190_cde6e/rev_5b190-cde6e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_5a95d_06966/rev_5a95d-06966.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_00da8_c6dc6/rev_00da8-c6dc6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_fbc5b_61022/rev_fbc5b-61022.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6ea25_2ae47/rev_6ea25-2ae47.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_77a93_c347c/rev_77a93-c347c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8c439_ac45f/rev_8c439-ac45f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8c439_4f830/rev_8c439-4f830.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4f830_8c439/rev_4f830-8c439.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b6ee4_f84bf/rev_b6ee4-f84bf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e48e5_99abc/rev_e48e5-99abc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_19508_c07a2/rev_19508-c07a2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
	public void mouseEntered(MouseEvent e) {
		
		toolTipManager.registerComponent(this);

		if (!selected) {
			// Highlight this entry on the plot.
			originalPlotLineColor  = linePlot.getForeground();
			originalPlotLineStroke = linePlot.getStroke();
		}
		
		selected = true;
		// Highlight this legend entry
		baseDisplayNameLabel.setForeground(foregroundColor.brighter());
		updateLabelFont();
		
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_var1_4555050108045289486
		// Highlight this entry on the plot.
		originalPlotLineColor = linePlot.getForeground();
		originalPlotLineStroke = linePlot.getStroke();
		

		linePlot.setForeground(originalPlotLineColor.brighter().brighter());
		BasicStroke stroke = (BasicStroke) originalPlotLineStroke;
		if(stroke == null) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_base_6607217023362550676
		// Highlight this entry on the plot.
		originalPlotLineColor = linePlot.getForeground();
		originalPlotLineStroke = linePlot.getStroke();

		linePlot.setForeground(originalPlotLineColor.brighter().brighter());
		BasicStroke stroke = (BasicStroke) originalPlotLineStroke;
		if(stroke == null) {
=======
		linePlot.setForeground(originalPlotLineColor.brighter());
		
		if(originalPlotLineStroke == null) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_var2_5380538516593406658
			linePlot.setStroke(new BasicStroke(PlotConstants.SELECTED_LINE_THICKNESS));
		} else if (originalPlotLineStroke instanceof BasicStroke) {
			BasicStroke stroke = (BasicStroke) originalPlotLineStroke;
			linePlot.setStroke(new BasicStroke(stroke.getLineWidth() * PlotConstants.SELECTED_LINE_THICKNESS, stroke.getEndCap(), stroke
					.getLineJoin(), stroke.getMiterLimit(), stroke.getDashArray(), stroke.getDashPhase()));
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_var1_4555050108045289486
		}
		if (regressionLine != null) {
			originalRegressionLineStroke = regressionLine.getStroke();
			regressionLine.setForeground(originalPlotLineColor.brighter().brighter());
			stroke = (BasicStroke) regressionLine.getStroke();
			//TODO synch with plot thickness feature changes
			if(stroke == null) {
				regressionLine.setStroke(new BasicStroke(PlotConstants.SLOPE_LINE_WIDTH*2,
		                BasicStroke.CAP_BUTT,
		                BasicStroke.JOIN_MITER,
		                10.0f, PlotConstants.dash1, 0.0f));
			} else {
				regressionLine.setStroke(new BasicStroke(PlotConstants.SLOPE_LINE_WIDTH*2,
		                BasicStroke.CAP_BUTT,
		                BasicStroke.JOIN_MITER,
		                10.0f, PlotConstants.dash1, 0.0f));
			}
		}
				
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_base_6607217023362550676
		}
				
=======
		} //Otherwise, it's a stroke we can't change (ie EMPTY_STROKE)

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654689853/fstmerge_var2_5380538516593406658
		this.setToolTipText(currentToolTipTxt);
		
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/LegendEntry.java
Conflict type: LineBasedMCFd
Conflict body: 
public LegendEntryPopup(final PlotViewManifestation manifestation, final LegendEntry legendEntry) {
			super();
						
			String name = legendEntry.getComputedBaseDisplayName();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_var1_7178644294409286751
			if (name.isEmpty()) name = legendEntry.getFullBaseDisplayName();
			
			String subMenuText1 = String.format(BUNDLE.getString("SelectColor.label"), 
			                     name);
			String subMenuText2 = String.format(BUNDLE.getString("RegressionPointsLabel"), 
                    name);
			final JMenu subMenu1 = new JMenu(subMenuText1);
			final JMenuItem regressionLineCheckBox = new JCheckBoxMenuItem(BUNDLE.getString("RegressionLineLabel"),false);
			final JMenu regressionMenu = new JMenu(subMenuText2);
			
			
			SpinnerModel pointsModel = new SpinnerNumberModel(legendEntry.getNumberRegressionPoints(), 2, 100, 1);
			final JSpinner spinner = new JSpinner(pointsModel);
			spinner.setPreferredSize(new Dimension(50, 20));
			spinner.setBorder(new EmptyBorder(2,2,2,2));
			spinner.addChangeListener(new ChangeListener() {

				@Override
				public void stateChanged(ChangeEvent e) {
					legendEntry.setNumberRegressionPoints(Integer.parseInt(((JSpinner)e.getSource()).getValue().toString()));
					manifestation.setupRegressionLines();
				}
				
			});
			
			 final JFormattedTextField myTextField = ((NumberEditor) spinner
				        .getEditor()).getTextField();
			
			spinner.addKeyListener(new KeyListener() {

				@Override
				public void keyTyped(KeyEvent e) {
					if ( ! (e.getKeyChar() == KeyEvent.CHAR_UNDEFINED) && 
							(e.getKeyCode() == KeyEvent.VK_UNDEFINED) &&
							// Apparently, backspace has a key char (although it should not)
							(e.getKeyChar() == '0' ||
							 e.getKeyChar() == '1' ||
							 e.getKeyChar() == '2' ||
							 e.getKeyChar() == '3' ||
							 e.getKeyChar() == '4' ||
							 e.getKeyChar() == '5' ||
							 e.getKeyChar() == '6' ||
							 e.getKeyChar() == '7' ||
							 e.getKeyChar() == '8' ||
							 e.getKeyChar() == '9'
									) &&
							Integer.valueOf(myTextField.getValue() + String.valueOf(e.getKeyChar())).compareTo((Integer) 
									((SpinnerNumberModel) spinner.getModel()).getMinimum()) > 0 && 
							Integer.valueOf(myTextField.getValue() + String.valueOf(e.getKeyChar())).compareTo((Integer) 
									((SpinnerNumberModel) spinner.getModel()).getMaximum()) < 0 ) {
						myTextField.setText(myTextField.getValue() + String.valueOf(e.getKeyChar()));
						
					}
				}

				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_DELETE ) {
						((NumberEditor) spinner.getEditor()).getTextField().setText("");
					} 
					myTextField.grabFocus();
				}

				@Override
				public void keyReleased(KeyEvent e) {
				}
				
			});  
				 
			 myTextField.addFocusListener(new FocusListener()
				    {
				 @Override
				 public void focusGained(FocusEvent e) {
					 SwingUtilities.invokeLater(new Runnable() {
				            public void run() {
				            	myTextField.selectAll();
				            }
				     });
				 }

				@Override
				public void focusLost(java.awt.event.FocusEvent e) {
				}
			});
			 
			 final NumberEditor numberEditor = (NumberEditor) spinner.getEditor();
			 
			 numberEditor.addKeyListener(new KeyListener() {

				@Override
				public void keyTyped(KeyEvent e) {
				}

				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_LEFT && 
							numberEditor.getTextField().getCaretPosition() == 0) {
						regressionMenu.setSelected(true);
					} 
				}

				@Override
				public void keyReleased(KeyEvent e) {
				}
			});
			 
			 myTextField.addKeyListener(new KeyListener() {

				@Override
				public void keyTyped(KeyEvent e) {
				}

				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_LEFT && 
							numberEditor.getTextField().getCaretPosition() == 0) {
						regressionMenu.setSelected(true);
						regressionMenu.grabFocus();
						((JPopupMenu) spinner.getParent()).setSelected(regressionMenu);
					} 
				}

				@Override
				public void keyReleased(KeyEvent e) {
				}
				
			});
			 
			regressionMenu.addMenuKeyListener(new MenuKeyListener() {

				@Override
				public void menuKeyTyped(MenuKeyEvent e) {
				}

				@Override
				public void menuKeyPressed(MenuKeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_RIGHT ) {
						spinner.setVisible(true);
						spinner.requestFocus();
						((NumberEditor) spinner.getEditor()).grabFocus();
					} 
				}

				@Override
				public void menuKeyReleased(MenuKeyEvent e) {
				}
				
			});
			
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_base_3236429889443836680
			if (name.isEmpty()) name = legendEntry.getFullBaseDisplayName();
			
			String subMenuText = String.format(BUNDLE.getString("SelectColor.label"), 
			                     name);
			
			JMenu subMenu = new JMenu(subMenuText);
=======
			if (name.isEmpty()) name = legendEntry.getFullBaseDisplayName();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_var2_3325378827549659791
			
			if (!manifestation.isLocked()) {
				
				final LineSettings settings = legendEntry.getLineSettings();
				
				// Color submenu
				String subMenuText = String.format(BUNDLE.getString("SelectColor.label"), name);
				JMenu subMenu = new JMenu(subMenuText);
				Color currentColor = legendEntry.getForeground();
				for (int i = 0; i < PlotConstants.MAX_NUMBER_OF_DATA_ITEMS_ON_A_PLOT; i++) {
					JMenuItem item = new JRadioButtonMenuItem("", 
							new SolidColorIcon(PlotLineColorPalette.getColor(i)),
							(currentColor == PlotLineColorPalette.getColor(i))
							);
					final int colorIndex = i;
					item.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {				
							legendEntry.setForeground(PlotLineColorPalette.getColor(colorIndex));
							manifestation.persistPlotLineSettings();
						}					
					});
					subMenu1.add(item);
				}
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_var1_7178644294409286751
				
				add(subMenu1);
				addSeparator();
				
				regressionLineCheckBox.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						AbstractButton abstractButton = (AbstractButton) e.getSource();
						if (abstractButton.getModel().isSelected()) {
							legendEntry.setHasRegressionLine(true);
						} else {
							legendEntry.setHasRegressionLine(false);
						}
						manifestation.setupRegressionLines();
						
					}
					
				});
				if (legendEntry.hasRegressionLine()) {
					regressionLineCheckBox.setSelected(true);
				} else {
					regressionLineCheckBox.setSelected(false);
				}
				add(regressionLineCheckBox);
				regressionMenu.add(spinner);
				add(regressionMenu);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_base_3236429889443836680
				
				add(subMenu);
=======
				add(subMenu);
				
				// Thickness submenu
				subMenuText = String.format(BUNDLE.getString("SelectThickness.label"), name);
				subMenu = new JMenu(subMenuText);
				for (int i = 1; i <= PlotConstants.MAX_LINE_THICKNESS; i++) {
					JMenuItem item = new JRadioButtonMenuItem("" + i, 
							(settings.getThickness() == i));
					final int thickness = i;
					item.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {				
							settings.setThickness(thickness);
							legendEntry.setLineSettings(settings);
							manifestation.persistPlotLineSettings();
						}					
					});
					subMenu.add(item);

				}
				add(subMenu);
				
				// Marker submenu
				if (manifestation.getPlot() != null && 
					manifestation.getPlot().getPlotLineDraw().drawMarkers()) {
					subMenuText = String.format(BUNDLE.getString("SelectMarker.label"), name);
					subMenu = new JMenu(subMenuText);
					for (int i = 0; i < PlotConstants.MAX_NUMBER_OF_DATA_ITEMS_ON_A_PLOT; i++) {
						JMenuItem item = new JRadioButtonMenuItem("",
								new PlotMarkerIcon(PlotLineShapePalette.getShape(i), false),
								(settings.getMarker() == i && !settings.getUseCharacter()));
						item.setForeground(legendEntry.getForeground());
						final int marker = i;
						item.addActionListener(new ActionListener() {
							@Override
							public void actionPerformed(ActionEvent e) {				
								settings.setMarker(marker);
								settings.setUseCharacter(false);
								legendEntry.setLineSettings(settings);
								manifestation.persistPlotLineSettings();
							}					
						});
						subMenu.add(item);
					}
					JMenuItem other = new JRadioButtonMenuItem(BUNDLE.getString("SelectCharacter.label"), 
							settings.getUseCharacter());
					if (!settings.getCharacter().isEmpty()) {
						FontRenderContext frc = ((Graphics2D) manifestation.getGraphics()).getFontRenderContext();
						other.setIcon(new PlotMarkerIcon(
								PlotLineShapePalette.getShape(settings.getCharacter(), frc),
								PlotLineColorPalette.getColor(settings.getColorIndex()),
								false));
					}
					other.addActionListener( new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent arg0) {
							final CharacterDialog dialog = new CharacterDialog();
							dialog.setInitialString(settings.getCharacter());
							dialog.ok.addActionListener( new ActionListener() {
								@Override
								public void actionPerformed(ActionEvent arg0) {
									settings.setCharacter(dialog.field.getText().trim());
									settings.setUseCharacter(true);
									legendEntry.setLineSettings(settings);
									manifestation.persistPlotLineSettings();
								}							
							});
							dialog.setVisible(true);
						}					
					});
					subMenu.add(other);
					add(subMenu);
				}

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691402/fstmerge_var2_3325378827549659791
			}
			
		}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/view/LegendEntryPopupMenuFactory.java
Conflict type: LineBasedMCFd
Conflict body: 
private void generatePlot() {
		plotDataAssigner.informFeedProvidersHaveChanged();
		createPlotAndAddItToPanel();
		plotDataAssigner.assignFeedsToSubPlots();
		enforceBackgroundColor(plotFrameBackground);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691539/fstmerge_var1_6907940713009607247
		thePlot.addPopupMenus();
		thePlot.setRegressionPointAssignments(plotPersistanceHandler.loadRegressionSettingsFromPersistence());
		thePlot.setColorAssignments(plotPersistanceHandler.loadColorSettingsFromPersistence());

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691539/fstmerge_base_146444589268752654
		thePlot.addPopupMenus();
		thePlot.setColorAssignments(plotPersistanceHandler.loadColorSettingsFromPersistence());
=======
		thePlot.addPopupMenus();
		thePlot.setLineSettings(plotPersistanceHandler.loadLineSettingsFromPersistence());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654691539/fstmerge_var2_2243593482449748060
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/view/PlotViewManifestation.java
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeTest
	public void setupTest() {
		
		MockitoAnnotations.initMocks(this);
		Mockito.when(mockPopupManager.getPopup(Mockito.<LegendEntry> any())).thenReturn(mockPopup);
				
		/* View's isLocked() method is final - it can't be mocked & needs to reference the platform */
		/* So, provide a mock platform */
		Mockito.when(mockPlatform.getPolicyManager())
			.thenReturn(mockPolicyManager);
		Mockito.when(mockPolicyManager.execute(Mockito.anyString(), Mockito.<PolicyContext> any()))
			.thenReturn(new ExecutionResult(null, false, null));
		
		Mockito.when(mockLegendEntry.getComputedBaseDisplayName()).thenReturn("test");
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654692580/fstmerge_var1_8524895126511913811
		Mockito.when(mockLegendEntry.getFullBaseDisplayName()).thenReturn("test");
		Mockito.when(mockLegendEntry.getNumberRegressionPoints()).thenReturn(15);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654692580/fstmerge_base_7351508932146152044
		Mockito.when(mockLegendEntry.getFullBaseDisplayName()).thenReturn("test");
=======
		Mockito.when(mockLegendEntry.getFullBaseDisplayName()).thenReturn("test");
		Mockito.when(mockLegendEntry.getLineSettings()).thenReturn(new LineSettings());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654692580/fstmerge_var2_7227446485528165385
		
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLegendEntryPopup.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	public void testMigrateFixed() {
		Mockito.when(manifestation.getViewProperties()).thenReturn(new ExtendedProperties());
		
		PlotPersistanceHandler h = new PlotPersistanceHandler(manifestation);
		h.persistPlotSettings(AxisOrientationSetting.X_AXIS_AS_TIME, XAxisMaximumLocationSetting.MAXIMUM_AT_RIGHT,
				YAxisMaximumLocationSetting.MAXIMUM_AT_TOP, TimeAxisSubsequentBoundsSetting.SCRUNCH, NonTimeAxisSubsequentBoundsSetting.FIXED,
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654693581/fstmerge_var1_7470123561790757767
				NonTimeAxisSubsequentBoundsSetting.FIXED, 0.0, 1.0, new GregorianCalendar(), new GregorianCalendar(), 0.0, 0.0, 0.0, true, false);
		manifestation.getViewProperties().setProperty(PlotConstants.TIME_AXIS_SUBSEQUENT_SETTING, "FIXED");
		manifestation.getViewProperties().setProperty(PlotConstants.REGRESSION_LINE, "isp:123456\tfalse|20\t");
		PlotSettings settings = h.loadPlotSettingsFromPersistance();
		List<Map<String, String>> regSettings = h.loadRegressionSettingsFromPersistence();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654693581/fstmerge_base_1654149773297230936
				NonTimeAxisSubsequentBoundsSetting.FIXED, 0.0, 1.0, new GregorianCalendar(), new GregorianCalendar(), 0.0, 0.0, 0.0, true, false);
		manifestation.getViewProperties().setProperty(PlotConstants.TIME_AXIS_SUBSEQUENT_SETTING, "FIXED");
		PlotSettings settings = h.loadPlotSettingsFromPersistance();
=======
				NonTimeAxisSubsequentBoundsSetting.FIXED, 0.0, 1.0, new GregorianCalendar(), new GregorianCalendar(), 0.0, 0.0, 0.0, true, false,
				PlotConstants.DEFAULT_PLOT_LINE_DRAW,
				PlotLineConnectionType.STEP_X_THEN_Y);
		manifestation.getViewProperties().setProperty(PlotConstants.TIME_AXIS_SUBSEQUENT_SETTING, "FIXED");
		PlotSettings settings = h.loadPlotSettingsFromPersistance();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420654693581/fstmerge_var2_5601421368781557799
		Assert.assertEquals(settings.timeAxisSubsequent, TimeAxisSubsequentBoundsSetting.JUMP);
		Assert.assertTrue(settings.pinTimeAxis);
		Assert.assertEquals(regSettings.iterator().next().get("isp:123456"), "false|20");
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c07a2_3d41e/rev_c07a2-3d41e/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/view/TestPlotPersistanceHandler.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4b928_09ec0/rev_4b928-09ec0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_90ad4_441b9/rev_90ad4-441b9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_25355_1a77d/rev_25355-1a77d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void addData(String feed, SortedMap<Long, Double> points) {
		assert plot.plotView !=null : "Plot Object not initalized";
		assert isKnownDataSet(feed) : "Data set " + feed + " not defined.";

		if(points.isEmpty()) {
			return;
		}

		setupCompressionRatio();

		// prevent plotting of data if it is not compatible with scrunch settings.
		if(plot.timeAxisSubsequentSetting == TimeAxisSubsequentBoundsSetting.SCRUNCH) {
			boolean needsFixing = false;
			for(Long time : points.keySet()) {
				if(time <= plot.timeVariableAxisMinValue) {
					needsFixing = true;
					break;
				}
			}
			if(needsFixing) {
				SortedMap<Long, Double> points2 = new TreeMap<Long, Double>();
				for(Entry<Long, Double> point : points.entrySet()) {
					if(point.getKey() > plot.timeVariableAxisMinValue) {
						points2.put(point.getKey(), point.getValue());
					}
				}
				points = points2;
			}
		}

		// Don't plot points off the end if the time axis is pinned
		if (plot.plotAbstraction.getTimeAxis().isPinned()) {
			long max = plot.getCurrentTimeAxisMaxAsLong();
			boolean needsFixing = false;
			for(Long time : points.keySet()) {
				if(time > max) {
					needsFixing = true;
					break;
				}
			}
			if(needsFixing) {
				SortedMap<Long, Double> points2 = new TreeMap<Long, Double>();
				for(Entry<Long, Double> point : points.entrySet()) {
					if(point.getKey() <= max) {
						points2.put(point.getKey(), point.getValue());
					}
				}
				points = points2;
				dataSeries.get(feed).setUpdateRegressionLine(false);
			}
		}

		if(points.isEmpty()) {
			return;
		}

		CompressingXYDataset dataset = dataSeries.get(feed).getData();
		double min;
		double max;
		if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			min = dataset.getMinX();
			max = dataset.getMaxX();
		} else {
			min = dataset.getMinY();
			max = dataset.getMaxY();
		}
		double datasetMinTime = Math.min(min, max);
		double datasetMaxTime = Math.max(min, max);

		if(dataset.getPointCount() == 0 || points.firstKey() >= datasetMaxTime) {
			// TODO: Change this to use an aggregate add method
			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				for(Entry<Long, Double> point : points.entrySet()) {
					dataset.add(point.getKey(), point.getValue());

				}
			} else {
				for(Entry<Long, Double> point : points.entrySet()) {
					dataset.add(point.getValue(), point.getKey());
				}
			} 
			if (plot.getCurrentTimeAxisMaxAsLong() >= datasetMaxTime) {
				dataSeries.get(feed).setUpdateRegressionLine(true);
			}
		} else if(points.lastKey() <= datasetMinTime) {
			// TODO: Make this efficient
			double[] x = new double[points.size()];
			double[] y = new double[x.length];
			int i = 0;
			for(Entry<Long, Double> p : points.entrySet()) {
				x[i] = p.getKey();
				y[i] = p.getValue();
				i++;
			}
			if(plot.axisOrientation == AxisOrientationSetting.Y_AXIS_AS_TIME) {
				double[] tmp = x;
				x = y;
				y = tmp;
			}
			dataset.prepend(x, 0, y, 0, x.length);
		} else {
			// Data appearing in the middle of the dataset.
			// Assume that it's caused by the last second of data arriving twice,
			// once from the initial historical request and once from the once-per-second update.
			// It may also be values for predictive data we already loaded.
			// In either case, the overlapping data should be identical to what we already have, so ignore it.

			// Append the data that isn't redundant.
			SortedMap<Long, Double> before = points.subMap(0L, (long) datasetMinTime);
			SortedMap<Long, Double> after = points.subMap((long) datasetMaxTime, Long.MAX_VALUE);
			SortedMap<Long, Double> overlap = points.subMap((long) datasetMinTime, (long) datasetMaxTime);
			if(!overlap.isEmpty()) {
				if(overlap.lastKey() - overlap.firstKey() > 10000) {
					logger.warn("Cannot currently insert into the middle of a dataset: minX = " + datasetMinTime + ", maxX = " + datasetMaxTime
							+ ", firstKey = " + points.firstKey() + ", lastKey = " + points.lastKey());
				}
			}
			// TODO: Change this to use an aggregate add method
 			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				if(!before.isEmpty()) {
					double[] x = new double[before.size()];
					double[] y = new double[x.length];
					int i = 0;
					for(Entry<Long, Double> point : before.entrySet()) {
						x[i] = point.getKey();
						y[i] = point.getValue();
						i++;
					}
					dataset.prepend(x, 0, y, 0, x.length);
				}
				for(Entry<Long, Double> point : after.entrySet()) {
 				 					dataset.add(point.getKey(), point.getValue());
 				}
 			} else {
				if(!before.isEmpty()) {
					double[] x = new double[before.size()];
					double[] y = new double[x.length];
					int i = 0;
					for(Entry<Long, Double> point : before.entrySet()) {
						y[i] = point.getKey();
						x[i] = point.getValue();
						i++;
					}
					dataset.prepend(x, 0, y, 0, x.length);
				}

				for(Entry<Long, Double> point : after.entrySet()) {
 					dataset.add(point.getValue(), point.getKey());
 				}
 			}
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420655399022/fstmerge_var1_1792177775840917624
		}
		if (!plot.plotAbstraction.getTimeAxis().isPinned()) {
			dataSeries.get(feed).updateRegressionLine();
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420655399022/fstmerge_base_5930074420100495386
		}
		dataSeries.get(feed).updateRegressionLine();
=======
		}
//		if (!plot.plotAbstraction.getTimeAxis().isPinned()) {
			dataSeries.get(feed).updateRegressionLine();
//		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420655399022/fstmerge_var2_5473085986055642994
		for(Entry<Long, Double> point : points.entrySet()) {
			Long timestamp = point.getKey();
			Double value = point.getValue();
			boolean isValidForPlot = !Double.isNaN(value);
			if (isValidForPlot) {
				minMaxValueManager.updateMinMaxCache(timestamp, value);
			}
		}
		
		for(Entry<Long, Double> e : points.entrySet()) {
			plot.limitManager.informPointPlottedAtTime(e.getKey(), e.getValue());
		}
		
		plot.isInitialized = true;
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_25355_1a77d/rev_25355-1a77d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotDataManager.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_15f01_5a212/rev_15f01-5a212.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c4d4d_513a9/rev_c4d4d-513a9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_99c4d_bc13c/rev_99c4d-bc13c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_99c4d_4b541/rev_99c4d-4b541.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9cebc_d0545/rev_9cebc-d0545.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_032b5_75888/rev_032b5-75888.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_032b5_6f84d/rev_032b5-6f84d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_23c29_90eff/rev_23c29-90eff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b9ba6_661c0/rev_b9ba6-661c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8f714_ef2cd/rev_8f714-ef2cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c3a73_59414/rev_c3a73-59414.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_77d62_c150d/rev_77d62-c150d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_46272_c6459/rev_46272-c6459.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_790f2_ec2ba/rev_790f2-ec2ba.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private void setupApplyResetListeners() {
		timeSystemDropdown.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateMainButtons();
				updateStaticAreaWithTimeSystem();
            }
		});

		timeFormatDropdown.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateMainButtons();
				setStaticAreaTimeFormat( (String) timeFormatDropdown.getSelectedItem());
			}
		});

		
		// Add listener to radio buttons not on the axes
		ActionListener buttonListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateMainButtons();
			}
		};
		xAxisAsTimeRadioButton.addActionListener(buttonListener);
		yAxisAsTimeRadioButton.addActionListener(buttonListener);
		xMaxAtRight.addActionListener(buttonListener);
		xMaxAtLeft.addActionListener(buttonListener);
		yMaxAtTop.addActionListener(buttonListener);
		yMaxAtBottom.addActionListener(buttonListener);

		timeJumpMode.addActionListener(new TimeAxisModeListener(timeJumpPadding));
		timeScrunchMode.addActionListener(new TimeAxisModeListener(timeScrunchPadding));
		pinTimeAxis.addActionListener(buttonListener);

		nonTimeMinAutoAdjustMode.addActionListener(buttonListener);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_var1_5012647492996502320
		nonTimeMinFixedMode.addActionListener(buttonListener);
		nonTimeMinSemiFixedMode.addActionListener(buttonListener);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_base_97380528563540527
		nonTimeMinFixedMode.addActionListener(buttonListener);
=======
		nonTimeMinFixedMode.addActionListener(buttonListener);
		nonTimeMinSemiFixedMode.addActionListener(buttonListener);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_var2_850462464150387900
		nonTimeMaxAutoAdjustMode.addActionListener(buttonListener);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_var1_5012647492996502320
		nonTimeMaxFixedMode.addActionListener(buttonListener);
		nonTimeMaxSemiFixedMode.addActionListener(buttonListener);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_base_97380528563540527
		nonTimeMaxFixedMode.addActionListener(buttonListener);
=======
		nonTimeMaxFixedMode.addActionListener(buttonListener);
		nonTimeMaxSemiFixedMode.addActionListener(buttonListener);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420658805766/fstmerge_var2_850462464150387900

		// Add listeners to the Time axis buttons
		ActionListener timeAxisListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateTimeAxisControls();
			}
		};
		timeAxisMinCurrent.addActionListener(timeAxisListener);
		timeAxisMinAuto.addActionListener(timeAxisListener);
		timeAxisMaxCurrent.addActionListener(timeAxisListener);
		timeAxisMaxAuto.addActionListener(timeAxisListener);
		timeAxisMinManual.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				timeMinManualHasBeenSelected = true;
				updateTimeAxisControls();
			}
		});
		timeAxisMaxManual.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				timeMaxManualHasBeenSelected = true;
				updateTimeAxisControls();
			}
		});

		// Add listeners to the Non-Time axis buttons
		ActionListener nonTimeAxisListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateNonTimeAxisControls();
			}
		};
		nonTimeAxisMinCurrent.addActionListener(nonTimeAxisListener);
		nonTimeAxisMinAutoAdjust.addActionListener(nonTimeAxisListener);
		nonTimeAxisMaxCurrent.addActionListener(nonTimeAxisListener);
		nonTimeAxisMaxAutoAdjust.addActionListener(nonTimeAxisListener);
		nonTimeAxisMinManual.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (nonTimeAxisMinManual.isSelected()) {
					nonTimeAxisMinManualValue.requestFocusInWindow();
					nonTimeAxisMinManualValue.setSelectionStart(0);
					String content = nonTimeAxisMinManualValue.getText();
					
					
					if (content != null) {
						nonTimeAxisMinManualValue.setSelectionEnd(content.length());
					}
					updateNonTimeAxisControls();
				}
			}
		});
		nonTimeAxisMaxManual.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (nonTimeAxisMaxManual.isSelected()) {
					nonTimeAxisMaxManualValue.requestFocusInWindow();
					nonTimeAxisMaxManualValue.setSelectionStart(0);
					String content = nonTimeAxisMaxManualValue.getText();
										
					if (content != null) {
						nonTimeAxisMaxManualValue.setSelectionEnd(content.length());
					}
					updateNonTimeAxisControls();
				}
			}
		});

		// Add listeners to Non-Time axis text fields
		nonTimeSpanValue.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				if (e.isTemporary())
					return;
				updateNonTimeAxisControls();
			}
		});

		// Add listeners to Time axis text fields
		timeAxisMinManualValue.addFocusListener(new TimeFieldFocusListener(timeAxisMinManual) {
			@Override
			public void focusGained(FocusEvent e) {
				timeMinManualHasBeenSelected = true;
				super.focusGained(e);
			}			
		});
		timeAxisMaxManualValue.addFocusListener(new TimeFieldFocusListener(timeAxisMaxManual)  {
			@Override
			public void focusGained(FocusEvent e) {
				timeMaxManualHasBeenSelected = true;
				super.focusGained(e);
			}
		});
		timeSpanValue.addFocusListener(new TimeFieldFocusListener(null));

		// Plot Behavior section: Add listeners to Padding text fields
		timeJumpPadding.addFocusListener(new TimePaddingFocusListener() {
			@Override
			public void focusGained(FocusEvent e) {
				timeJumpMode.setSelected(true);
			}
		});
		timeScrunchPadding.addFocusListener(new TimePaddingFocusListener() {
			@Override
			public void focusGained(FocusEvent e) {
				timeScrunchMode.setSelected(true);
			}
		});

		FocusListener nontimePaddingListener = new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				if (e.isTemporary())
					return;
				updateNonTimeAxisControls();
			}
		};
		nonTimeMinPadding.addFocusListener(nontimePaddingListener);
		nonTimeMaxPadding.addFocusListener(nontimePaddingListener);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_790f2_ec2ba/rev_790f2-ec2ba/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/view/PlotSettingsControlPanel.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9a570_3bba2/rev_9a570-3bba2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ee36c_98ba0/rev_ee36c-98ba0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659316989/fstmerge_var1_859909907485361216
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659316989/fstmerge_base_2479026610472242402
public void setControlPanelState(AxisOrientationSetting timeAxisSetting,
			XAxisMaximumLocationSetting xAxisMaximumLocation,
			YAxisMaximumLocationSetting yAxisMaximumLocation,
			TimeAxisSubsequentBoundsSetting timeAxisSubsequentSetting,
			NonTimeAxisSubsequentBoundsSetting nonTimeAxisSubsequentMinSetting,
			NonTimeAxisSubsequentBoundsSetting nonTimeAxisSubsequentMaxSetting,
			double nonTimeMax, double nonTimeMin, long minTime,
		    long maxTime, 
			double timePadding,
			double nonTimePaddingMax,
			double nonTimePaddingMin, 
			boolean groupStackPlotsByOrdinalPosition, boolean timeAxisPinned,
			PlotLineDrawingFlags plotLineDraw,
			PlotLineConnectionType plotLineConnectionType) {
    	
    	if (plotViewManifestion.getPlot() == null) {
			throw new IllegalArgumentException("Plot Setting control Panel cannot be setup if the PltViewManifestation's plot is null");
		}
       	
    	pinTimeAxis.setSelected(timeAxisPinned);
    	
    	assert nonTimeMin < nonTimeMax : "Non Time min >= Non Time Max";
    	assert minTime < maxTime : "Time min >= Time Max " + minTime + " " + maxTime;
    	
	
    	// Setup time axis setting. 
    	if (timeAxisSetting ==  AxisOrientationSetting.X_AXIS_AS_TIME) {
    		xAxisAsTimeRadioButton.setSelected(true);
    		yAxisAsTimeRadioButton.setSelected(false);
    		xAxisAsTimeRadioButtonActionPerformed();
    	} else if (timeAxisSetting ==  AxisOrientationSetting.Y_AXIS_AS_TIME) {
    		xAxisAsTimeRadioButton.setSelected(false);
    		yAxisAsTimeRadioButton.setSelected(true);
    		yAxisAsTimeRadioButtonActionPerformed();
    	} else {
    		assert false :"Time must be specified as being on either the X or Y axis.";
    	}	
    	
    	// X Max setting
    	if (xAxisMaximumLocation == XAxisMaximumLocationSetting.MAXIMUM_AT_RIGHT) {
    		xMaxAtRight.setSelected(true);
    		xMaxAtLeft.setSelected(false);
    		xMaxAtRightActionPerformed();
        } else if (xAxisMaximumLocation == XAxisMaximumLocationSetting.MAXIMUM_AT_LEFT) {
        	xMaxAtRight.setSelected(false);
    		xMaxAtLeft.setSelected(true);
    		xMaxAtLeftActionPerformed();
    	} else {
    		assert false: "X max location must be set.";
	 	}
    	  
    	// Y Max setting
    	if (yAxisMaximumLocation == YAxisMaximumLocationSetting.MAXIMUM_AT_TOP) {
    		yMaxAtTop.setSelected(true);
    		yMaxAtBottom.setSelected(false);
    		yMaxAtTopActionPerformed();
    	} else if (yAxisMaximumLocation == YAxisMaximumLocationSetting.MAXIMUM_AT_BOTTOM) {
    		yMaxAtTop.setSelected(false);
    		yMaxAtBottom.setSelected(true);
    		yMaxAtBottomActionPerformed();
    	} else {
    		assert false: "Y max location must be set.";
    	}
    	
    	if (timeAxisSubsequentSetting == TimeAxisSubsequentBoundsSetting.JUMP) {
    		timeJumpMode.setSelected(true);
    		timeScrunchMode.setSelected(false);
    		timeJumpPadding.setText(timePaddingFormat.format(timePadding * 100)); 	

    		timeAxisMaxAuto.setSelected(false);
    		timeAxisMaxManual.setSelected(false);
    		timeAxisMaxCurrent.setSelected(true);
    		timeAxisMinAuto.setSelected(false);
    		timeAxisMinManual.setSelected(false);
    		timeAxisMinCurrent.setSelected(true);

    		workCalendar.setTime(plotViewManifestion.getPlot().getMaxTime().getTime());
    		timeAxisMaxManualValue.setTime(workCalendar);

    		workCalendar.setTime(plotViewManifestion.getPlot().getMinTime().getTime());
    		timeAxisMinManualValue.setTime(workCalendar);
    	    
    	} else if (timeAxisSubsequentSetting ==  TimeAxisSubsequentBoundsSetting.SCRUNCH) {
    		timeJumpMode.setSelected(false);
    		timeScrunchMode.setSelected(true);
    		timeScrunchPadding.setText(timePaddingFormat.format(timePadding * 100));
    	 		
    		timeAxisMaxAuto.setSelected(false);
    		timeAxisMaxManual.setSelected(false);
    		timeAxisMaxCurrent.setSelected(true);
    		timeAxisMinAuto.setSelected(false);
    		timeAxisMinManual.setSelected(false);
    		timeAxisMinCurrent.setSelected(true); 
    		
    		GregorianCalendar minCalendar = new GregorianCalendar();
    		minCalendar.setTimeZone(dateFormat.getTimeZone());
     		minCalendar.setTimeInMillis(minTime);
     		timeAxisMinManualValue.setTime(minCalendar);	
    		
    	} else {
           assert false : "No time subsequent mode selected"; 
    	}
    	// Set the Current Min and Max values
		timeAxisMinCurrentValue.setTime(plotViewManifestion.getPlot().getMinTime());
		timeAxisMaxCurrentValue.setTime(plotViewManifestion.getPlot().getMaxTime());

    	// Non Time Subsequent Settings
    	
    	// Min
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(true);
    		nonTimeMinFixedMode.setSelected(false);
    		nonTimeMinSemiFixedMode.setSelected(false);
    		nonTimeMinSemiFixedMode.setEnabled(false);
    	} else if (NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(false);
			nonTimeMinFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setSelected(false);
			nonTimeMinSemiFixedMode.setEnabled(true);
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(false);
			nonTimeMinFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setEnabled(true);
        } else {
    		assert false : "No non time min subsequent setting specified";
    	}
    		
    	// Max
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMaxSetting) {
			nonTimeMaxAutoAdjustMode.setSelected(true);
			nonTimeMaxFixedMode.setSelected(false);
			nonTimeMaxSemiFixedMode.setSelected(false);
			nonTimeMaxSemiFixedMode.setEnabled(false);
	    } else if (NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMaxSetting) {
	    	nonTimeMaxAutoAdjustMode.setSelected(false);
		    nonTimeMaxFixedMode.setSelected(true);
		    nonTimeMaxSemiFixedMode.setSelected(false);
		    nonTimeMaxSemiFixedMode.setEnabled(true);
	    }  else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMaxSetting) {
	    		nonTimeMaxAutoAdjustMode.setSelected(false);
				nonTimeMaxFixedMode.setSelected(true);
				nonTimeMaxSemiFixedMode.setSelected(true);
				nonTimeMaxSemiFixedMode.setEnabled(true);
	    } else {
		    assert false : "No non time max subsequent setting specified";
	    }
      
    	// Non time Axis Settings.
    	// Non-Time Min. Control Panel
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMinSetting) {
    		nonTimeAxisMinCurrent.setSelected(true);
    		nonTimeAxisMinManual.setSelected(false);
    		nonTimeAxisMinAutoAdjust.setSelected(false);
        	nonTimeMinPadding.setText(nonTimePaddingFormat.format(nonTimePaddingMin * 100));
    	
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMinSetting
    				|| NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMinSetting) {
					
			nonTimeAxisMinCurrent.setSelected(false);
			if (!nonTimeAxisMinManual.isSelected()) {
				nonTimeAxisMinManual.setSelected(true);
			}
    		nonTimeAxisMinManualValue.setText(nonTimePaddingFormat.format(nonTimeMin));
    		nonTimeAxisMinAutoAdjust.setSelected(false);
    	} 
    	
    	// Non-Time Max. Control Panel
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMaxSetting) {
    		nonTimeAxisMaxCurrent.setSelected(true);
    		nonTimeAxisMaxManual.setSelected(false);
    		nonTimeAxisMaxAutoAdjust.setSelected(false);
        	nonTimeMaxPadding.setText(nonTimePaddingFormat.format(nonTimePaddingMax * 100));
        	
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMaxSetting
	    				|| NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMaxSetting) {
			
			nonTimeAxisMaxCurrent.setSelected(false);
			if (!nonTimeAxisMaxManual.isSelected()) {
				nonTimeAxisMaxManual.setSelected(true);
			}
    		nonTimeAxisMaxManualValue.setText(nonTimePaddingFormat.format(nonTimeMax));
    		nonTimeAxisMaxAutoAdjust.setSelected(false);
    	} 
    	
    	// Draw
    	if (plotLineDraw.drawLine() && plotLineDraw.drawMarkers()) {
    		markersAndLines.setSelected(true);
    	} else if (plotLineDraw.drawLine()) {
    		linesOnly.setSelected(true);
    	} else if (plotLineDraw.drawMarkers()) {
    		markersOnly.setSelected(true);
    	} else {
    		logger.warn("Plot line drawing configuration is unset.");
    	}
    	
    	// Connection line type
    	if (plotLineConnectionType == PlotLineConnectionType.DIRECT) {
    		direct.setSelected(true);
    	} else if (plotLineConnectionType == PlotLineConnectionType.STEP_X_THEN_Y) {
    		step.setSelected(true);
    	}
    	
    	updateTimeAxisControls();
    	groupByCollection.setSelected(!groupStackPlotsByOrdinalPosition);
    }
=======
public void setControlPanelState(AxisOrientationSetting timeAxisSetting,
			XAxisMaximumLocationSetting xAxisMaximumLocation,
			YAxisMaximumLocationSetting yAxisMaximumLocation,
			TimeAxisSubsequentBoundsSetting timeAxisSubsequentSetting,
			NonTimeAxisSubsequentBoundsSetting nonTimeAxisSubsequentMinSetting,
			NonTimeAxisSubsequentBoundsSetting nonTimeAxisSubsequentMaxSetting,
			double nonTimeMax, double nonTimeMin, long minTime,
		    long maxTime, 
			double timePadding,
			double nonTimePaddingMax,
			double nonTimePaddingMin, 
			boolean groupStackPlotsByOrdinalPosition, boolean timeAxisPinned,
			PlotLineDrawingFlags plotLineDraw,
			PlotLineConnectionType plotLineConnectionType) {
    	
    	if (plotViewManifestion.getPlot() == null) {
			throw new IllegalArgumentException("Plot Setting control Panel cannot be setup if the PltViewManifestation's plot is null");
		}
       	
    	pinTimeAxis.setSelected(timeAxisPinned);
    	
    	assert nonTimeMin < nonTimeMax : "Non Time min >= Non Time Max";
    	assert minTime < maxTime : "Time min >= Time Max " + minTime + " " + maxTime;
    	
	
    	// Setup time axis setting. 
    	if (timeAxisSetting ==  AxisOrientationSetting.X_AXIS_AS_TIME) {
    		xAxisAsTimeRadioButton.setSelected(true);
    		yAxisAsTimeRadioButton.setSelected(false);
    		xAxisAsTimeRadioButtonActionPerformed();
    	} else if (timeAxisSetting ==  AxisOrientationSetting.Y_AXIS_AS_TIME) {
    		xAxisAsTimeRadioButton.setSelected(false);
    		yAxisAsTimeRadioButton.setSelected(true);
    		yAxisAsTimeRadioButtonActionPerformed();
    	} else {
    		assert false :"Time must be specified as being on either the X or Y axis.";
    	}	
    	
    	// X Max setting
    	if (xAxisMaximumLocation == XAxisMaximumLocationSetting.MAXIMUM_AT_RIGHT) {
    		xMaxAtRight.setSelected(true);
    		xMaxAtLeft.setSelected(false);
    		xMaxAtRightActionPerformed();
        } else if (xAxisMaximumLocation == XAxisMaximumLocationSetting.MAXIMUM_AT_LEFT) {
        	xMaxAtRight.setSelected(false);
    		xMaxAtLeft.setSelected(true);
    		xMaxAtLeftActionPerformed();
    	} else {
    		assert false: "X max location must be set.";
	 	}
    	  
    	// Y Max setting
    	if (yAxisMaximumLocation == YAxisMaximumLocationSetting.MAXIMUM_AT_TOP) {
    		yMaxAtTop.setSelected(true);
    		yMaxAtBottom.setSelected(false);
    		yMaxAtTopActionPerformed();
    	} else if (yAxisMaximumLocation == YAxisMaximumLocationSetting.MAXIMUM_AT_BOTTOM) {
    		yMaxAtTop.setSelected(false);
    		yMaxAtBottom.setSelected(true);
    		yMaxAtBottomActionPerformed();
    	} else {
    		assert false: "Y max location must be set.";
    	}
    	
    	if (timeAxisSubsequentSetting == TimeAxisSubsequentBoundsSetting.JUMP) {
    		timeJumpMode.setSelected(true);
    		timeScrunchMode.setSelected(false);	

    		timeAxisMaxAuto.setSelected(false);
    		timeAxisMaxManual.setSelected(false);
    		timeAxisMaxCurrent.setSelected(true);
    		timeAxisMinAuto.setSelected(false);
    		timeAxisMinManual.setSelected(false);
    		timeAxisMinCurrent.setSelected(true);

    		workCalendar.setTime(plotViewManifestion.getPlot().getMaxTime().getTime());
    		timeAxisMaxManualValue.setTime(workCalendar);

    		workCalendar.setTime(plotViewManifestion.getPlot().getMinTime().getTime());
    		timeAxisMinManualValue.setTime(workCalendar);
    	    
    	} else if (timeAxisSubsequentSetting ==  TimeAxisSubsequentBoundsSetting.SCRUNCH) {
    		timeJumpMode.setSelected(false);
    		timeScrunchMode.setSelected(true);
    	 		
    		timeAxisMaxAuto.setSelected(false);
    		timeAxisMaxManual.setSelected(false);
    		timeAxisMaxCurrent.setSelected(true);
    		timeAxisMinAuto.setSelected(false);
    		timeAxisMinManual.setSelected(false);
    		timeAxisMinCurrent.setSelected(true); 
    		
    		GregorianCalendar minCalendar = new GregorianCalendar();
    		minCalendar.setTimeZone(dateFormat.getTimeZone());
     		minCalendar.setTimeInMillis(minTime);
     		timeAxisMinManualValue.setTime(minCalendar);	
    		
    	} else {
           assert false : "No time subsequent mode selected"; 
    	}
    	timeScrunchPadding.setText(timePaddingFormat.format(timePadding * 100));
    	timeJumpPadding.setText(timePaddingFormat.format(timePadding * 100)); 
    	
    	// Set the Current Min and Max values
		timeAxisMinCurrentValue.setTime(plotViewManifestion.getPlot().getMinTime());
		timeAxisMaxCurrentValue.setTime(plotViewManifestion.getPlot().getMaxTime());

    	// Non Time Subsequent Settings
    	
    	// Min
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(true);
    		nonTimeMinFixedMode.setSelected(false);
    		nonTimeMinSemiFixedMode.setSelected(false);
    		nonTimeMinSemiFixedMode.setEnabled(false);
    	} else if (NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(false);
			nonTimeMinFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setSelected(false);
			nonTimeMinSemiFixedMode.setEnabled(true);
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMinSetting) {
    		nonTimeMinAutoAdjustMode.setSelected(false);
			nonTimeMinFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setSelected(true);
			nonTimeMinSemiFixedMode.setEnabled(true);
        } else {
    		assert false : "No non time min subsequent setting specified";
    	}
    		
    	// Max
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMaxSetting) {
			nonTimeMaxAutoAdjustMode.setSelected(true);
			nonTimeMaxFixedMode.setSelected(false);
			nonTimeMaxSemiFixedMode.setSelected(false);
			nonTimeMaxSemiFixedMode.setEnabled(false);
	    } else if (NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMaxSetting) {
	    	nonTimeMaxAutoAdjustMode.setSelected(false);
		    nonTimeMaxFixedMode.setSelected(true);
		    nonTimeMaxSemiFixedMode.setSelected(false);
		    nonTimeMaxSemiFixedMode.setEnabled(true);
	    }  else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMaxSetting) {
	    		nonTimeMaxAutoAdjustMode.setSelected(false);
				nonTimeMaxFixedMode.setSelected(true);
				nonTimeMaxSemiFixedMode.setSelected(true);
				nonTimeMaxSemiFixedMode.setEnabled(true);
	    } else {
		    assert false : "No non time max subsequent setting specified";
	    }
      
    	// Non time Axis Settings.
    	// Non-Time Min. Control Panel
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMinSetting) {
    		nonTimeAxisMinCurrent.setSelected(true);
    		nonTimeAxisMinManual.setSelected(false);
    		nonTimeAxisMinAutoAdjust.setSelected(false);
    	
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMinSetting
    				|| NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMinSetting) {
					
			nonTimeAxisMinCurrent.setSelected(false);
			if (!nonTimeAxisMinManual.isSelected()) {
				nonTimeAxisMinManual.setSelected(true);
			}	
    		nonTimeAxisMinAutoAdjust.setSelected(false);
    	} 
    	nonTimeMinPadding.setText(nonTimePaddingFormat.format(nonTimePaddingMin * 100));
    	nonTimeAxisMinManualValue.setText(nonTimePaddingFormat.format(nonTimeMin));
    	
    	// Non-Time Max. Control Panel
    	if (NonTimeAxisSubsequentBoundsSetting.AUTO == nonTimeAxisSubsequentMaxSetting) {
    		nonTimeAxisMaxCurrent.setSelected(true);
    		nonTimeAxisMaxManual.setSelected(false);
    		nonTimeAxisMaxAutoAdjust.setSelected(false);
        	
    	} else if (NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED == nonTimeAxisSubsequentMaxSetting
	    				|| NonTimeAxisSubsequentBoundsSetting.FIXED == nonTimeAxisSubsequentMaxSetting) {
			nonTimeAxisMaxCurrent.setSelected(false);
			if (!nonTimeAxisMaxManual.isSelected()) {
				nonTimeAxisMaxManual.setSelected(true);
			}
    		nonTimeAxisMaxAutoAdjust.setSelected(false);
    	} 
    	nonTimeMaxPadding.setText(nonTimePaddingFormat.format(nonTimePaddingMax * 100));
    	nonTimeAxisMaxManualValue.setText(nonTimePaddingFormat.format(nonTimeMax));
    	
    	// Draw
    	if (plotLineDraw.drawLine() && plotLineDraw.drawMarkers()) {
    		markersAndLines.setSelected(true);
    	} else if (plotLineDraw.drawLine()) {
    		linesOnly.setSelected(true);
    	} else if (plotLineDraw.drawMarkers()) {
    		markersOnly.setSelected(true);
    	} else {
    		logger.warn("Plot line drawing configuration is unset.");
    	}
    	
    	// Connection line type
    	if (plotLineConnectionType == PlotLineConnectionType.DIRECT) {
    		direct.setSelected(true);
    	} else if (plotLineConnectionType == PlotLineConnectionType.STEP_X_THEN_Y) {
    		step.setSelected(true);
    	}
    	
    	updateTimeAxisControls();
    	groupByCollection.setSelected(!groupStackPlotsByOrdinalPosition);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659316989/fstmerge_var2_7063301685292290743

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ee36c_98ba0/rev_ee36c-98ba0/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/view/PlotSettingsControlPanel.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659326042/fstmerge_var1_6597011338418133484
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659326042/fstmerge_base_49162940187790314
public MCTInspectionArea(final AbstractComponent ac, ViewInfo vi) {
        setLayout(new BorderLayout());
        initializeSelectionListener();

     	// The following adds the title and control areas,
     	// where the control area is initially hidden.
        controlPanel = new JPanel(new BorderLayout());
        titleArea = new MCTTitleArea(this, INSPECTOR_TITLE, null);
        controlPanel.add(titleArea, BorderLayout.NORTH);
        add(controlPanel, BorderLayout.NORTH);
        
        tabbedPane = new JTabbedPane(JTabbedPane.TOP,JTabbedPane.SCROLL_TAB_LAYOUT);
        add(tabbedPane, BorderLayout.CENTER);
        tabbedPane.getModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                Component comp = tabbedPane.getSelectedComponent();
                if (comp != null) {
                    ((View) comp).removePropertyChangeListener(VIEW_STALE_PROPERTY, objectStaleListener);
                }
                int selectedIndex = tabbedPane.getSelectedIndex();
                
                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    tabbedPane.setComponentAt(i, null);
                }
                
                if (comp == null) {
                    if (selectedIndex >= 0) {
                        AbstractComponent component = PlatformAccess.getPlatform().getPersistenceProvider().getComponent(currentComponent.getComponentId());
                        if (component.getCapability(ComponentInitializer.class) != null) {
                            component.getCapability(ComponentInitializer.class).setWorkUnitDelegate(currentComponent.getWorkUnitDelegate());
                        }
                        View manifestation = getMCTViewManifestation(component, currentViewRoles.get(selectedIndex));
                        addManifestation(manifestation,selectedIndex);
                    }
                }
                
                // hide all twisties that are not currently active
                for (int i =0; i < tabbedPane.getTabCount(); i++) {
                    Component c = tabbedPane.getTabComponentAt(i);
                    if (c instanceof JComponent) {
                        JComponent jc = JComponent.class.cast(c);
                        for (int ci=0; ci < jc.getComponentCount(); ci++) {
                            Component component = jc.getComponent(ci);
                            if (component instanceof TabTwistie) {
                                component.setVisible(i == selectedIndex);
                            }
                        }
                    }
                }
            }
            
        });

        setMinimumSize(new Dimension(0, 0));
    }
=======
public MCTInspectionArea(final AbstractComponent ac, ViewInfo vi) {
        setLayout(new BorderLayout());
        initializeSelectionListener();

     	// The following adds the title and control areas,
     	// where the control area is initially hidden.
        controlPanel = new JPanel(new BorderLayout());
        titleArea = new MCTTitleArea(this, INSPECTOR_TITLE, null);
        controlPanel.add(titleArea, BorderLayout.NORTH);
        add(controlPanel, BorderLayout.NORTH);
        
        tabbedPane = new JTabbedPane(JTabbedPane.TOP,JTabbedPane.SCROLL_TAB_LAYOUT);
        add(tabbedPane, BorderLayout.CENTER);
        tabbedPane.getModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                Component comp = tabbedPane.getSelectedComponent();
                if (comp != null) {
                    ((View) comp).removePropertyChangeListener(VIEW_STALE_PROPERTY, objectStaleListener);
                }
                int selectedIndex = tabbedPane.getSelectedIndex();
                
                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    tabbedPane.setComponentAt(i, null);
                }
                
                if (comp == null) {
                    if (selectedIndex >= 0) {
                        AbstractComponent component = PlatformAccess.getPlatform().getPersistenceProvider().getComponent(currentComponent.getComponentId());
                        if (component.getCapability(ComponentInitializer.class) != null) {
                            component.getCapability(ComponentInitializer.class).setWorkUnitDelegate(currentComponent.getWorkUnitDelegate());
                        }
                        View manifestation = getMCTViewManifestation(component, currentViewRoles.get(selectedIndex));
                        addManifestation(manifestation,selectedIndex);
                        manifestation.requestFocusInWindow();
                    }
                }
                
                // hide all twisties that are not currently active
                for (int i =0; i < tabbedPane.getTabCount(); i++) {
                    Component c = tabbedPane.getTabComponentAt(i);
                    if (c instanceof JComponent) {
                        JComponent jc = JComponent.class.cast(c);
                        for (int ci=0; ci < jc.getComponentCount(); ci++) {
                            Component component = jc.getComponent(ci);
                            if (component instanceof TabTwistie) {
                                component.setVisible(i == selectedIndex);
                            }
                        }
                    }
                }
            }
            
        });

        setMinimumSize(new Dimension(0, 0));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420659326042/fstmerge_var2_2826147244841615824

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ee36c_98ba0/rev_ee36c-98ba0/platform/src/main/java/gov/nasa/arc/mct/gui/housing/MCTInspectionArea.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_d67c5_ee36c/rev_d67c5-ee36c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_fbc9d_b39ee/rev_fbc9d-b39ee.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a1271_2185e/rev_a1271-2185e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e98e0_a1271/rev_e98e0-a1271.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_772d5_de965/rev_772d5-de965.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_37309_3a16c/rev_37309-3a16c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c3624_0c082/rev_c3624-0c082.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4776f_8b0e4/rev_4776f-8b0e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4776f_461ff/rev_4776f-461ff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_cff4c_1c153/rev_cff4c-1c153.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_24470_d304f/rev_24470-d304f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a5aad_b928c/rev_a5aad-b928c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f745c_388e6/rev_f745c-388e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_eca2c_216e9/rev_eca2c-216e9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e066f_2aa4e/rev_e066f-2aa4e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_2b395_9cc11/rev_2b395-9cc11.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6df45_46ac0/rev_6df45-46ac0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_73457_4f41b/rev_73457-4f41b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_1fa0e_ca108/rev_1fa0e-ca108.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final double MAX_SCALE_FACTOR = 0.85; ##FSTMerge## private static final double MAX_SCALE_FACTOR = 0.9; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_1fa0e_ca108/rev_1fa0e-ca108/platform/src/main/java/gov/nasa/arc/mct/gui/WindowManagerImpl.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6031b_1fa0e/rev_6031b-1fa0e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0d501_7f9b6/rev_0d501-7f9b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0d501_1fa0e/rev_0d501-1fa0e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_75228_bd226/rev_75228-bd226.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4c384_4988a/rev_4c384-4988a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e0e91_591dc/rev_e0e91-591dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_87ad9_d16b7/rev_87ad9-d16b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_d28cb_5216a/rev_d28cb-5216a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f7140_47365/rev_f7140-47365.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9bea6_f0783/rev_9bea6-f0783.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9893e_4743b/rev_9893e-4743b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_fae41_cb870/rev_fae41-cb870.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_39ec6_959aa/rev_39ec6-959aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_3d9f5_49bcf/rev_3d9f5-49bcf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ca4b5_8015e/rev_ca4b5-8015e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e1303_f5617/rev_e1303-f5617.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_af96e_e1303/rev_af96e-e1303.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_88761_dcfe0/rev_88761-dcfe0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487288/fstmerge_var1_5288526378120452208
@Override
	public double getInitialNonTimeMinSetting() {
		if (getNonTimeAxis().isInDefaultState()) {
		return nonTimeVaribleAxisMinValue;
		} else {
			return limitManager.getCachedNonTimeMinValue();
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487288/fstmerge_base_6471570620119697830
@Override
	public double getInitialNonTimeMinSetting() {
		return nonTimeVaribleAxisMinValue;
=======
@Override
	public double getInitialNonTimeMinSetting() {
		return super.getMinNonTime();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487288/fstmerge_var2_3724873976359675324
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotterPlot.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487293/fstmerge_var1_7649968540319029725
@Override
	public double getInitialNonTimeMaxSetting() {
		if (getNonTimeAxis().isInDefaultState()) {
			return nonTimeVaribleAxisMaxValue;
		} else {
			return limitManager.getCachedNonTimeMaxValue();
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487293/fstmerge_base_6121530752196187077
@Override
	public double getInitialNonTimeMaxSetting() {
		return nonTimeVaribleAxisMaxValue;
=======
@Override
	public double getInitialNonTimeMaxSetting() {
		// TODO Auto-generated method stub
		return super.getMaxNonTime();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487293/fstmerge_var2_496949728548547093
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotterPlot.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487555/fstmerge_var1_3873561308270767340
void resetX() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetTimeAxis();
		} else {
			resetNonTimeAxis();
		}
		if (!plot.limitManager.isUntranslated()) {
			plot.limitManager.setModeUntranslated(true);
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487555/fstmerge_base_5945347256402209084
void resetX() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetTimeAxis();
		} else {
			resetNonTimeAxis();
		}
=======
void resetX() {
		if (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetTimeAxis();
		} else {
			resetNonTimeAxis();
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487555/fstmerge_var2_3748865816695913333
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotCornerResetButtonManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487559/fstmerge_var1_7046462715366212525
void resetY() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487559/fstmerge_base_5284767124514351142
void resetY() {
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		}
=======
void resetY() {
		if (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			resetNonTimeAxis();
		} else {
			resetTimeAxis();
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487559/fstmerge_var2_3665788649343766872
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotCornerResetButtonManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487579/fstmerge_var1_3627111066806560181
public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getCurrentTimeAxisMaxAsLong() < now || plot.getCurrentTimeAxisMinAsLong() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487579/fstmerge_base_508116171729919343
public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getCurrentTimeAxisMaxAsLong() < now || plot.getCurrentTimeAxisMinAsLong() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());
=======
public void updateButtons() {
		Axis timeAxis = plot.plotAbstraction.getTimeAxis();
		Axis nonTimeAxis = plot.getNonTimeAxis();
		Axis xAxis;
		Axis yAxis;
		if(plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			xAxis = timeAxis;
			yAxis = nonTimeAxis;
		} else {
			xAxis = nonTimeAxis;
			yAxis = timeAxis;
		}

		List<AbstractPlottingPackage> plots = plot.plotAbstraction.getSubPlots();
		// Only show the top right reset button on the top plot.
		if(plots.get(0) == plot) {
			// This was changed to fix MCT-2613: [Plot] Top right corner button appears briefly in jump and scrunch modes, between the time that the plot line hits the end of the time axis and when the jump
			// The problem was that the jump occurs based on the maximum time plotted, which due to compression, is not the same as the current MCT time.
			// As an easy fix, the button is always hidden when the time axis is not pinned.
			// Assuming that data should never appear off the right of a jump plot, this works well enough.
			// If that assumption breaks, the code should be modified to check against the maximum plotted time instead of the current MCT time.
			long now = plot.plotAbstraction.getCurrentMCTTime();
			if(!timeAxis.isPinned()) {
				plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
			} else if(plot.getMaxTime() < now || plot.getMinTime() > now) {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(true);
			} else {
				plot.localControlsManager.setJumpToCurrentTimeButtonAlarm(false);
			}
		} else {
			plot.localControlsManager.setJumpToCurrentTimeButtonVisible(false);
		}
		// Only show the time axis reset button on the bottom plot.
		boolean enableX = true;
		boolean enableY = true;
		if(plots.get(plots.size() - 1) != plot) {
			if(plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
				enableX = false;
			} else {
				enableY = false;
			}
		}

		plot.localControlsManager.setXAxisCornerResetButtonVisible(enableX && !xAxis.isInDefaultState());
		plot.localControlsManager.setYAxisCornerResetButtonVisible(enableY && !yAxis.isInDefaultState());
		plot.localControlsManager.setXAndYAxisCornerResetButtonVisible(!xAxis.isInDefaultState() && !yAxis.isInDefaultState());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669487579/fstmerge_var2_6739727054089668321
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotCornerResetButtonManager.java
Conflict type: LineBasedMCFd
Conflict body: 
public void informPointPlottedAtTime(long atTime, double value) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var1_4896113766548405866
		boolean checkMax = plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED 
				|| plot.getNonTimeAxis().isPinned() 
				|| plot.plotAbstraction.getTimeAxisUserPin().isPinned()
				|| plot.plotAbstraction.getTimeAxis().isPinned()
				|| plot.plotAbstraction.getTimeAxis().isZoomed();
		if(checkMax && 
				(value >= plot.getCurrentNonTimeAxisMax()
				|| nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMaxPhysicalValue)) 
				&& atTime >= plot.getCurrentTimeAxisMinAsLong() && atTime <= plot.getCurrentTimeAxisMaxAsLong()) {
			if (nonTimeMaxAlarm != LimitAlarmState.ALARM_OPENED_BY_USER ) { 
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_base_8432576673270997383
		boolean checkMax = plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED;
		if(checkMax && (value >= plot.nonTimeVaribleAxisMaxValue  || 
				nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMaxPhysicalValue))) {
			if (nonTimeMaxAlarm != LimitAlarmState.ALARM_OPENED_BY_USER && plot.isNonTimeMaxFixed()) {
=======
		boolean checkMax = plot.getNonTimeAxisSubsequentMaxSetting() == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.getNonTimeAxisSubsequentMaxSetting() == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED;
		if(checkMax && (value >= plot.getMinNonTime()  || 
				nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMaxPhysicalValue))) {
			if (nonTimeMaxAlarm != LimitAlarmState.ALARM_OPENED_BY_USER && plot.isNonTimeMaxFixed()) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var2_8413628419672102848
				
				boolean wasOpen = nonTimeMaxAlarm == LimitAlarmState.ALARM_RAISED;
				nonTimeMaxAlarm = LimitAlarmState.ALARM_RAISED;	
				maxAlarmMostRecentTime = atTime;
				if(!wasOpen) {
					addMaxAlertButton();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var1_4896113766548405866
					if(plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED &&
							!plot.getNonTimeAxis().isPinned()) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_base_8432576673270997383
					if(plot.nonTimeAxisMaxSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED) {
=======
					if(plot.getNonTimeAxisSubsequentMaxSetting() == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var2_8413628419672102848
						processMaxAlertButtonPress();
					}
				}
			}
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var1_4896113766548405866
		}
		
		boolean checkMin = plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED 
				|| plot.getNonTimeAxis().isPinned() 
				|| plot.plotAbstraction.getTimeAxisUserPin().isPinned() 
				|| plot.plotAbstraction.getTimeAxis().isPinned()
				|| plot.plotAbstraction.getTimeAxis().isZoomed();
		if(checkMin && (value <= plot.getCurrentNonTimeAxisMin() ||
				nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMinPhysicalValue)) &&
				atTime >= plot.getCurrentTimeAxisMinAsLong() && atTime <= plot.getCurrentTimeAxisMaxAsLong()) {
			if (nonTimeMinAlarm != LimitAlarmState.ALARM_OPENED_BY_USER ) { 
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_base_8432576673270997383
		}
		boolean checkMin = plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED;
		if(checkMin && (value <= plot.nonTimeVaribleAxisMinValue ||
				nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMinPhysicalValue))) {
			if (nonTimeMinAlarm != LimitAlarmState.ALARM_OPENED_BY_USER && plot.isNonTimeMinFixed()) {
=======
		}
		boolean checkMin = plot.getNonTimeAxisSubsequentMinSetting() == NonTimeAxisSubsequentBoundsSetting.FIXED
				|| plot.getNonTimeAxisSubsequentMinSetting() == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED;
		if(checkMin && (value <= plot.getMinNonTime() ||
				nonTimeValueWithin1PixelOfLimit(value, plot.nonTimeAxisMinPhysicalValue))) {
			if (nonTimeMinAlarm != LimitAlarmState.ALARM_OPENED_BY_USER && plot.isNonTimeMinFixed()) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var2_8413628419672102848
					
				boolean wasOpen = nonTimeMinAlarm == LimitAlarmState.ALARM_RAISED;
				nonTimeMinAlarm = LimitAlarmState.ALARM_RAISED;	
				minAlarmMostRecentTime = atTime;
				if(!wasOpen) {
					addMinAlertButton();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var1_4896113766548405866
					if(plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED &&
							!plot.getNonTimeAxis().isPinned()) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_base_8432576673270997383
					if(plot.nonTimeAxisMinSubsequentSetting == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED) {
=======
					if(plot.getNonTimeAxisSubsequentMinSetting() == NonTimeAxisSubsequentBoundsSetting.SEMI_FIXED) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669488003/fstmerge_var2_8413628419672102848
						processMinAlertButtonPress();
					}
				}
			}
		}

		// Check upper alarm still valid
		
        // Only check if an alarm a max alarm is raised and limit indicators showing.
		
		if (checkMax && nonTimeMaxAlarm != LimitAlarmState.NO_ALARM) {
			if (plot.getMinTime() > maxAlarmMostRecentTime) {
				// alarm has scrolled off. 
				nonTimeMaxAlarm = LimitAlarmState.NO_ALARM;
				nonTimeMaxLimitButton.setVisible(false);			
			}
		}
			
		// Check lower alarm still valid
		// Only check if an alarm a max alarm is raised.
        if (checkMin && nonTimeMinAlarm != LimitAlarmState.NO_ALARM) {		
            if (plot.getMinTime() > minAlarmMostRecentTime) {
            	nonTimeMinAlarm = LimitAlarmState.NO_ALARM;
            	nonTimeMinLimitButton.setVisible(false); 	
			}
		}
        
        if (checkMin || checkMax) {
        	plot.newPointPlotted(atTime, value);
        }
        
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PlotLimitManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489779/fstmerge_var1_6479638981883861802
public void panAction(PanDirection panningAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;

			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();
			}		
		} else {
			
			double nonTimeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			
			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			}	
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		//Always request data refresh
		plot.clearAllDataFromPlot();
		plot.limitManager.setModeUntranslated(false);
		plot.plotAbstraction.requestPlotData(plot.getCurrentTimeAxisMin(), plot.getCurrentTimeAxisMax());

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489779/fstmerge_base_1482575103557589705
public void panAction(PanDirection panningAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		boolean timeChanged = false;
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;

			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();			
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			}		
		} else {
			
			double nonTimeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			
			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			}	
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		if(timeChanged) {
			plot.clearAllDataFromPlot();
			plot.plotAbstraction.requestPlotData(plot.getCurrentTimeAxisMin(), plot.getCurrentTimeAxisMax());
		}
=======
public void panAction(PanDirection panningAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		boolean timeChanged = false;
		if (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;

			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();			
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			}		
		} else {
			
			double nonTimeScalePanAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScalePanAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScalePanAmount = (timeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			nonTimeScalePanAmount= (nonTimeScalePanAmount/100) * PlotConstants.PANNING_TIME_AXIS_PERCENTAGE;
			
			if (panningAction == PanDirection.PAN_HIGHER_Y_AXIS) {
				yAxis.shift(timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_LOWER_Y_AXIS) {
				yAxis.shift(-timeScalePanAmount);
				pinTime();
				plot.notifyObserversTimeChange();	
				timeChanged = true;
			} else if (panningAction == PanDirection.PAN_LOWER_X_AXIS) {
				xAxis.shift(-nonTimeScalePanAmount);
				pinNonTime();
			} else if (panningAction == PanDirection.PAN_HIGHER_X_AXIS) {
				xAxis.shift(nonTimeScalePanAmount);
				pinNonTime();
			}	
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		if(timeChanged) {
			plot.clearAllDataFromPlot();
			plot.plotAbstraction.requestPlotData(plot.getCurrentTimeAxisMin(), plot.getCurrentTimeAxisMax());
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489779/fstmerge_var2_6646530865191121500
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PanAndZoomManager.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489801/fstmerge_var1_4214496571443802987
public void zoomAction(ZoomDirection zoomAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount= (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			}
		
		} else {
			double nonTimeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount = (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
					yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
					xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			}
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		//Always request data refresh
		plot.limitManager.setModeUntranslated(false);
		plot.plotDataManager.resizeAndReloadPlotBuffer();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489801/fstmerge_base_7192573787960876553
public void zoomAction(ZoomDirection zoomAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		boolean timeChanged = false;
		if (plot.axisOrientation == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount= (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			}
		
		} else {
			double nonTimeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount = (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();	
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
					yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();	
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
					xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			}
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		if(timeChanged) {
			plot.plotDataManager.resizeAndReloadPlotBuffer();
		}
=======
public void zoomAction(ZoomDirection zoomAction) {
		XYAxis xAxis = plot.plotView.getXAxis();
		XYAxis yAxis = plot.plotView.getYAxis();
		boolean timeChanged = false;
		if (plot.getAxisOrientationSetting() == AxisOrientationSetting.X_AXIS_AS_TIME) {
			double nonTimeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			double timeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount= (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - timeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			}
		
		} else {
			double nonTimeScaleZoomAmount = xAxis.getEnd() - xAxis.getStart();
			double timeScaleZoomAmount = yAxis.getEnd() - yAxis.getStart();
			
			timeScaleZoomAmount = (timeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			nonTimeScaleZoomAmount = (nonTimeScaleZoomAmount/100) * PlotConstants.ZOOMING_TIME_AXIS_PERCENTAGE;
			
			if (zoomAction == ZoomDirection.ZOOM_IN_HIGH_Y_AXIS) {
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_HIGH_Y_AXIS) {
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();	
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_Y_AXIS) {
					yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
					yAxis.setEnd(yAxis.getEnd() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				yAxis.setEnd(yAxis.getEnd() + timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() + timeScaleZoomAmount);
				  markTimeZoomed();
				 plot.notifyObserversTimeChange();	
				 timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LOW_Y_AXIS) {
				yAxis.setStart(yAxis.getStart() - timeScaleZoomAmount);
				  markTimeZoomed();
				  plot.notifyObserversTimeChange();	
				  timeChanged = true;
			} else if (zoomAction == ZoomDirection.ZOOM_IN_LEFT_X_AXIS) {
				xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_LEFT_X_AXIS) {
					xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_CENTER_X_AXIS) {
					xAxis.setStart(xAxis.getStart() + nonTimeScaleZoomAmount);
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_CENTER_X_AXIS) {
				xAxis.setStart(xAxis.getStart() - nonTimeScaleZoomAmount);
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_IN_RIGHT_X_AXIS) {
					xAxis.setEnd(xAxis.getEnd() - nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			} else if (zoomAction == ZoomDirection.ZOOM_OUT_RIGHT_X_AXIS) {
				xAxis.setEnd(xAxis.getEnd() + nonTimeScaleZoomAmount);
				  markNonTimeZoomed();
			}
		}
		plot.plotAbstraction.updateResetButtons();
		plot.refreshDisplay();
		if(timeChanged) {
			plot.plotDataManager.resizeAndReloadPlotBuffer();
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669489801/fstmerge_var2_7971829965378426950
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/bridge/PanAndZoomManager.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test 
	void testAlarmTransitionSquenceMaxFixedMode() {
		// Create a simple in fix non time max and min modes with defined min/max bounds.
		GregorianCalendar now = new GregorianCalendar();
		PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
		.build();
		testPlot.setManifestation(mockPlotViewManifestation);
		PlotterPlot plot = new PlotterPlot();
		plot.createChart( 
			            new Font("Arial", Font.PLAIN, 1), 
			            1, 
			            Color.white, 
			            Color.white, 
			            0, 
			            Color.white, 
			            Color.white, 
			            Color.white, 
			            "dd", 
			            Color.black, 
			            Color.white, 
			            1, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492575/fstmerge_var1_5814082491518122200
			            0.5, 
			            0.5,
			            0.5,
			            0.0, 
			            10.0, 
			            now.getTimeInMillis(), 
			            now.getTimeInMillis() + (5L * 60L * 1000L),
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492575/fstmerge_base_4317428222165927223
			            0.5, 
			            0.5,
			            0.5,
			            0.0, 
			            10.0, 
			            0, 
			            10,
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492575/fstmerge_var2_1284262476593332499
			            false,
			            true,
			            true,
			            testPlot,
			            plotLabelingAlgorithm); 
	   
	   Assert.assertFalse(plot.isCompressionEnabled());
	   
	   plot.addDataSet("DataSet1", Color.red);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   
	   now.add(Calendar.MINUTE, 1);
	
	   // Add in limit value
	   plot.addData("DataSet1", now.getTimeInMillis(), 5.0);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   now.add(Calendar.MINUTE, 1);
	   // trigger max alarm. 
	   plot.addData("DataSet1", now.getTimeInMillis(), 10.0);
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_RAISED);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);   
	   
	   now.add(Calendar.MINUTE, 1);
	   // trigger max alarm by pixel proximity
	   Point2D limitPointPhysical = new Point2D.Double(0,10.0);
	   plot.plotView.toPhysical(limitPointPhysical, limitPointPhysical);
	   Point2D valuePointLogical = new Point2D.Double(0,limitPointPhysical.getY()-0.5);
	   plot.plotView.toLogical(valuePointLogical, valuePointLogical);
	   plot.addData("DataSet1",now.getTimeInMillis(), valuePointLogical.getY());
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_RAISED);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);  
	   
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	void testAlarmTransitionSquenceMinFixedMode() {
		GregorianCalendar now = new GregorianCalendar();
		PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
		.build();
		testPlot.setManifestation(mockPlotViewManifestation);
		PlotterPlot plot = new PlotterPlot();
	   plot.createChart(
			            new Font("Arial", Font.PLAIN, 1), 
			            1, 
			            Color.white, 
			            Color.white, 
			            0, 
			            Color.white, 
			            Color.white, 
			            Color.white, 
			            "dd", 
			            Color.black, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492580/fstmerge_var1_1308798801777881208
			            Color.white, 
			            1, 
			            0.5, 
			            0.5,
			            0.5,
			            0, 
			            10, 
			            now.getTimeInMillis(), 
			            now.getTimeInMillis() + (5L * 60L * 1000L),
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492580/fstmerge_base_2034930911741070676
			            Color.white, 
			            1, 
			            0.5, 
			            0.5,
			            0.5,
			            0, 
			            10, 
			            0, 
			            10,
=======
			            Color.white, 	
			            1,
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492580/fstmerge_var2_3320887538820459657
			            false,
			            true,
			            true,
			            testPlot,
			            plotLabelingAlgorithm);
	   
	   Assert.assertFalse(plot.isCompressionEnabled());
	   
	   plot.addDataSet("DataSet1", Color.red);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   now.add(Calendar.MINUTE, 1);
	   // add inlimit value
	   plot.addData("DataSet1", now.getTimeInMillis(), 5);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   // trigger min alarm. 
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), -1);
	   
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_RAISED);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
       plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);  
	   
	   // trigger min alarm by pixel proximity
	   Point2D limitPointPhysical = new Point2D.Double(0,0.0);
	   plot.plotView.toPhysical(limitPointPhysical, limitPointPhysical);
	   Point2D valuePointLogical = new Point2D.Double(0,limitPointPhysical.getY()+0.5);
	   plot.plotView.toLogical(valuePointLogical, valuePointLogical);
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), valuePointLogical.getY());
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_RAISED);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   
       plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test 
	void testAlarmTransitionSquenceMaxSemiFixedMode() {
		// Create a simple in fix non time max and min modes with defined min/max bounds.
		GregorianCalendar now = new GregorianCalendar();
		PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
		.build();	
		testPlot.setManifestation(mockPlotViewManifestation);
		PlotterPlot plot = new PlotterPlot();
	   plot.createChart(new Font("Arial", Font.PLAIN, 1), 
			            1, 
			            Color.white, 
			            Color.white, 
			            0, 
			            Color.white, 
			            Color.white, 
			            Color.white, 
			            "dd", 
			            Color.black, 
			            Color.white, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_var1_3104787976257127441
			            1, 
			            0.5,
			            0.5,
			            0.5,
			            0, 
			            10, 
			            now.getTimeInMillis(), 
			            now.getTimeInMillis() + (5L * 60L * 1000L),
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_base_9094644258506229121
			            1, 
			            0.5,
			            0.5,
			            0.5,
			            0, 
			            10, 
			            0, 
			            10,
=======
			            1, 			            
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_var2_4707003670927680587
			            false,
			            true,
			            true,
			            testPlot,
			            plotLabelingAlgorithm);
	  
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_var1_3104787976257127441
	   Assert.assertFalse(plot.isCompresionEnabled());
	   now.add(Calendar.MINUTE, 1);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_base_9094644258506229121
	   Assert.assertFalse(plot.isCompresionEnabled());
	   
=======
	   Assert.assertFalse(plot.isCompressionEnabled());
	   
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492586/fstmerge_var2_4707003670927680587
	   plot.addDataSet("DataSet1", Color.red);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	  
	   // Add in limit value
	   plot.addData("DataSet1", now.getTimeInMillis(), 9);
	 
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   // trigger max alarm. 
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), 11);
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
       plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);   
	   
	   // trigger max alarm by pixel proximity
	   Point2D limitPointPhysical = new Point2D.Double(0,10.0);
	   plot.plotView.toPhysical(limitPointPhysical, limitPointPhysical);
	   Point2D valuePointLogical = new Point2D.Double(0,limitPointPhysical.getY()-0.5);
	   plot.plotView.toLogical(valuePointLogical, valuePointLogical);
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), valuePointLogical.getY());
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
       plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMaxAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	void testAlarmTransitionSquenceMinSemiFixedMode() {
		GregorianCalendar now = new GregorianCalendar();
		PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
		.build();
		testPlot.setManifestation(mockPlotViewManifestation);
		PlotterPlot plot = new PlotterPlot();
	   plot.createChart(new Font("Arial", Font.PLAIN, 1), 
			            1, 
			            Color.white, 
			            Color.white, 
			            0, 
			            Color.white, 
			            Color.white, 
			            Color.white, 
			            "dd", 
			            Color.black, 
			            Color.white, 
			            1, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492592/fstmerge_var1_3293384197650511027
			            0.5, 
			            0.5,
			            0.5,
			            0, 
			            10, 
			            now.getTimeInMillis(), 
			            now.getTimeInMillis() + (5L * 60L * 1000L),
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492592/fstmerge_base_5305699646516245714
			            0.5, 
			            0.5,
			            0.5,
			            0, 
			            10, 
			            0, 
			            10,
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492592/fstmerge_var2_4633703407102673934
			            false, 
			            true,
			            true,
			            testPlot, 
			            plotLabelingAlgorithm);
	   
	   Assert.assertFalse(plot.isCompressionEnabled());
	   
	   plot.addDataSet("DataSet1", Color.red);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   // add inlimit value
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), 5);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   // trigger min alarm. 
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), -1);
	      
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
       plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM); 
	   
	   // trigger min alarm by pixel proximity
	   Point2D limitPointPhysical = new Point2D.Double(0,0.0);
	   plot.plotView.toPhysical(limitPointPhysical, limitPointPhysical);
	   Point2D valuePointLogical = new Point2D.Double(0,limitPointPhysical.getY()+0.5);
	   plot.plotView.toLogical(valuePointLogical, valuePointLogical);
	   now.add(Calendar.MINUTE, 1);
	   plot.addData("DataSet1", now.getTimeInMillis(), valuePointLogical.getY());
	   
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	   
       plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
	   
	   plot.limitManager.processMinAlertButtonPress();
	   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
	   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	void testAlarmsOnAllFixedPlotSettings() {
		long currentTime = 0L;
		for(AxisOrientationSetting axisO : AxisOrientationSetting.values()) {
			for (XAxisMaximumLocationSetting xAxisMax: XAxisMaximumLocationSetting.values()) {
				for (YAxisMaximumLocationSetting  yAxisMax: YAxisMaximumLocationSetting.values()) {
					PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
					.build();	
					testPlot.setManifestation(mockPlotViewManifestation);
					PlotterPlot plot = new PlotterPlot();
					   plot.createChart(new Font("Arial", Font.PLAIN, 1), 
							            1, 
							            Color.white, 
							            Color.white, 
							            0, 
							            Color.white, 
							            Color.white, 
							            Color.white, 
							            "dd", 
							            Color.black, 
							            Color.white, 
							            1, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492601/fstmerge_var1_4241432896690553126
							            0.5, 
							            0.5,
							            0.5,
							            0, 
							            10, 
							            currentTime, 
							            10L,
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492601/fstmerge_base_6353697001722970896
							            0.5, 
							            0.5,
							            0.5,
							            0, 
							            10, 
							            0, 
							            10,
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492601/fstmerge_var2_6286787392063106646
							            false,
							            true,
							            true,
							            testPlot,
							            plotLabelingAlgorithm);
					  
					   Assert.assertFalse(plot.isCompressionEnabled());
					   
					   plot.addDataSet("DataSet1", Color.red);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   //Add inlimt value
					   plot.addData("DataSet1", currentTime + 1L, 5);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   // trigger min alarm. 
					   plot.addData("DataSet1", currentTime + 2L, -1);
					   
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_RAISED);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   plot.limitManager.processMinAlertButtonPress();
					   
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
				       plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);   
					   
					   // trigger max alarm. 
					   plot.addData("DataSet1", currentTime + 3L, 12);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_RAISED);   
			    }
			}
		}	
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	void testAlarmsOnAllPlotSemiFixedSettings() {
    	long currentTime = 0L;
		for(AxisOrientationSetting axisO : AxisOrientationSetting.values()) {
			for (XAxisMaximumLocationSetting xAxisMax: XAxisMaximumLocationSetting.values()) {
				for (YAxisMaximumLocationSetting  yAxisMax: YAxisMaximumLocationSetting.values()) {
					PlotView testPlot = new PlotView.Builder(PlotterPlot.class)
					.build();
					testPlot.setManifestation(mockPlotViewManifestation);
					PlotterPlot plot = new PlotterPlot();
					   plot.createChart(new Font("Arial", Font.PLAIN, 1), 
							            1, 
							            Color.white, 
							            Color.white, 
							            0, 
							            Color.white, 
							            Color.white, 
							            Color.white, 
							            "dd", 
							            Color.black, 
							            Color.white, 
							            1, 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492606/fstmerge_var1_2589142326605881306
							            0.5,
							            0.5,
							            0.5,
							            0, 
							            10, 
							            currentTime, 
							            10,
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492606/fstmerge_base_7033603282465743521
							            0.5,
							            0.5,
							            0.5,
							            0, 
							            10, 
							            0, 
							            10,
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492606/fstmerge_var2_8152702783075485732
							            false,
							            true,
							            true,
							            testPlot,
							            plotLabelingAlgorithm);
					   
					   Assert.assertFalse(plot.isCompressionEnabled());
						
					   plot.addDataSet("DataSet1", Color.red);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   //Add inlimt value
					   plot.addData("DataSet1", currentTime + 0L, 5);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   // trigger min alarm. 
					   plot.addData("DataSet1", currentTime + 1L, -1);
					      
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
				       plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);
					   
					   plot.limitManager.processMinAlertButtonPress();
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.NO_ALARM);   
					   
					   // trigger max alarm. 
					   plot.addData("DataSet1", currentTime + 2L, 12);
					   Assert.assertEquals(plot.getNonTimeMinAlarmState(), LimitAlarmState.ALARM_CLOSED_BY_USER);
					   Assert.assertEquals(plot.getNonTimeMaxAlarmState(), LimitAlarmState.ALARM_OPENED_BY_USER);   
			    }
			}
		}	
		
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestLimitArrowIndicators.java
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeMethod
	public void setup() {
		MockitoAnnotations.initMocks(this);
		PinSupport pins = new PinSupport();
		
		Mockito.when(plotAbstraction.getCurrentMCTTime()).thenReturn(new GregorianCalendar().getTimeInMillis());
		Mockito.when(plotAbstraction.getTimeAxis()).thenReturn(new Axis());
		Mockito.when(plotAbstraction.getTimeAxisUserPin()).thenReturn(pins.createPin());

		PlotSettings settings = new PlotSettings();
		settings.setAxisOrientationSetting(AxisOrientationSetting.X_AXIS_AS_TIME);
		settings.setMaxNonTime(100);
		settings.setMinNonTime(0);
		
		PlotAbstraction testPlotTimeX = new PlotView.Builder(PlotterPlot.class).
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_var1_8148998016777687709
			                        axisOrientation(AxisOrientationSetting.X_AXIS_AS_TIME).
		                            nonTimeVaribleAxisMaxValue(100).
		                            nonTimeVaribleAxisMinValue(0).
		                            timeVariableAxisMinValue(now).
		                            timeVariableAxisMaxValue(now + 300000L).
		                            nonTimeAxisMinSubsequentSetting(PlotConstants.NonTimeAxisSubsequentBoundsSetting.FIXED).
		                            nonTimeAxisMaxSubsequentSetting(PlotConstants.NonTimeAxisSubsequentBoundsSetting.FIXED).
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_base_7302799058597054782
			                        axisOrientation(AxisOrientationSetting.X_AXIS_AS_TIME).
		                            nonTimeVaribleAxisMaxValue(100).
		                            nonTimeVaribleAxisMinValue(0).
=======
			                        plotSettings(settings).
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_var2_7071960158373560740
		                            build();
	    plotTimeOnX = (PlotterPlot) testPlotTimeX.returnPlottingPackage();
	    plotTimeOnX.plotAbstraction = plotAbstraction;
	    panAndZoomManagerTimeOnX = plotTimeOnX.panAndZoomManager;

		PlotSettings settings2 = new PlotSettings();
		settings.setAxisOrientationSetting(AxisOrientationSetting.Y_AXIS_AS_TIME);
		settings.setMaxNonTime(100);
		settings.setMinNonTime(0);
	    
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_var1_8148998016777687709
	    PlotAbstraction testPlotTimeY = new PlotView.Builder(PlotterPlot.class).
        axisOrientation(AxisOrientationSetting.Y_AXIS_AS_TIME).
        nonTimeVaribleAxisMaxValue(100).
        nonTimeVaribleAxisMinValue(0).
        timeVariableAxisMinValue(now).
        timeVariableAxisMaxValue(now + 300000L).
        nonTimeAxisMinSubsequentSetting(PlotConstants.NonTimeAxisSubsequentBoundsSetting.FIXED).
        nonTimeAxisMaxSubsequentSetting(PlotConstants.NonTimeAxisSubsequentBoundsSetting.FIXED).
        build();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_base_7302799058597054782
	    PlotAbstraction testPlotTimeY = new PlotView.Builder(PlotterPlot.class).
        axisOrientation(AxisOrientationSetting.Y_AXIS_AS_TIME).
        nonTimeVaribleAxisMaxValue(100).
        nonTimeVaribleAxisMinValue(0).
        build();
=======
		PlotAbstraction testPlotTimeY = new PlotView.Builder(PlotterPlot.class).
							        plotSettings(settings2).
							        build();
                
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420669492632/fstmerge_var2_7071960158373560740
        plotTimeOnY = (PlotterPlot) testPlotTimeY.returnPlottingPackage();
        plotTimeOnY.plotAbstraction = plotAbstraction;
        panAndZoomManagerTimeOnY = plotTimeOnY.panAndZoomManager;  
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_42cbc_49b5d/rev_42cbc-49b5d/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestPanAndZoomManager.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_98e77_ed19f/rev_98e77-ed19f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c84eb_72f6d/rev_c84eb-72f6d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_94d62_85952/rev_94d62-85952.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private Object getValueForComponent(AbstractComponent component) {
		Object value = values.get(getKey(component));
		//System.out.println("getValueForComponent ||||||||||||||||||||||||| " + values.size()); //debug
		if (value == null) {
			DisplayedValue displayedValue = new DisplayedValue();
			if (component.getCapability(Placeholder.class) != null) {
			    displayedValue.setValue(component.getCapability(Placeholder.class).getPlaceholderValue());
			} else {
				displayedValue.setValue(component.getDisplayName());
			}
			return displayedValue;
		} else {
			return value;
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_94d62_85952/rev_94d62-85952/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_06955_e17ef/rev_06955-e17ef.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void setValue(String id, Object value) {
		values.put(id, value);
		List<Integer> locations = componentLocations.get(id);
		if (locations != null) {
			for (Integer row : locations) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709031/fstmerge_var1_1871630220061882595
				fireTableCellUpdated(row, settings.getIndexForColumn(ColumnType.VALUE)); 
				fireTableCellUpdated(row, settings.getIndexForColumn(ColumnType.RAW)); 
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709031/fstmerge_base_5605934501342409239
				fireTableCellUpdated(row, ColumnType.VALUE.ordinal()); 
				fireTableCellUpdated(row, ColumnType.RAW.ordinal()); 
=======
				fireTableCellUpdated(row, ColumnType.VALUE.ordinal()); 
				fireTableCellUpdated(row, ColumnType.RAW.ordinal()); 
				fireTableCellUpdated(row, ColumnType.ERT.ordinal()); 
				fireTableCellUpdated(row, ColumnType.SCET.ordinal()); 
				fireTableCellUpdated(row, ColumnType.SCLK.ordinal()); 
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709031/fstmerge_var2_6605802320977764295
			}
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_06955_e17ef/rev_06955-e17ef/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java
Conflict type: LineBasedMCFd
Conflict body: 
private Object getValueForComponent(AbstractComponent component) {
		Object value = values.get(getKey(component));
		//System.out.println("getValueForComponent ||||||||||||||||||||||||| " + values.size()); //debug
		if (value == null) {
			DisplayedValue displayedValue = new DisplayedValue();
			if (component.getCapability(Placeholder.class) != null) {
			    displayedValue.setValue(component.getCapability(Placeholder.class).getPlaceholderValue());
			} else {
				displayedValue.setValue(component.getDisplayName());
			}
			return displayedValue;
		} else {
			return value;
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_06955_e17ef/rev_06955-e17ef/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709376/fstmerge_var1_6385174021294969980
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709376/fstmerge_base_3970182570451686510
public MultiColTable(AbstractComponent component, ViewSettings settings) {
		super(new GridLayout(1,0));
		model = new MultiColTableModel(component, this, settings);
		table = new JTable(model);
		table.setAutoCreateRowSorter(true);
		table.setPreferredScrollableViewportSize(new Dimension(400,750)); //+++ TODO
		table.setFillsViewportHeight(true);
		DynamicValueCellRender dynamicValueCellRender = new DynamicValueCellRender();
		table.getColumnModel().getColumn(ColumnType.VALUE.ordinal()).setCellRenderer(dynamicValueCellRender);
		table.getColumnModel().getColumn(ColumnType.RAW.ordinal()).setCellRenderer(dynamicValueCellRender);
		//attempt to hide column header borders:
		for(int colIndex=0; colIndex<model.getColumnCount(); colIndex++) {
			setColumnHeaderBorderState(colIndex, new BorderState("NONE"));	
			setColumnHeaderBorderColor(colIndex, Color.black);
		}
		scroll = new JScrollPane(table);
		add(scroll);
	}
=======
public MultiColTable(AbstractComponent component, ViewSettings settings) {
		super(new GridLayout(1,0));
		model = new MultiColTableModel(component, this, settings);
		table = new JTable(model);
		table.setAutoCreateRowSorter(true);
		table.setPreferredScrollableViewportSize(new Dimension(400,750)); //+++ TODO
		table.setFillsViewportHeight(true);
		DynamicValueCellRender dynamicValueCellRender = new DynamicValueCellRender();
		table.getColumnModel().getColumn(ColumnType.VALUE.ordinal()).setCellRenderer(dynamicValueCellRender);
		table.getColumnModel().getColumn(ColumnType.RAW.ordinal()).setCellRenderer(dynamicValueCellRender);
		TimeCellRender timeCellRender = new TimeCellRender();
		table.getColumnModel().getColumn(ColumnType.ERT.ordinal()).setCellRenderer(timeCellRender);
		table.getColumnModel().getColumn(ColumnType.SCLK.ordinal()).setCellRenderer(timeCellRender);
		table.getColumnModel().getColumn(ColumnType.SCET.ordinal()).setCellRenderer(timeCellRender);
		//attempt to hide column header borders:
		for(int colIndex=0; colIndex<model.getColumnCount(); colIndex++) {
			setColumnHeaderBorderState(colIndex, new BorderState("NONE"));	
			setColumnHeaderBorderColor(colIndex, Color.black);
		}
		scroll = new JScrollPane(table);
		add(scroll);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420670709376/fstmerge_var2_4006227281274308934

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_06955_e17ef/rev_06955-e17ef/multiColumnTables/src/main/java/org/acme/example/view/MultiColTable.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4beb6_455cd/rev_4beb6-455cd.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private Object getValueForComponent(AbstractComponent component) {
		Object value = values.get(getKey(component));
		//System.out.println("getValueForComponent ||||||||||||||||||||||||| " + values.size()); //debug
		if (value == null) {
			DisplayedValue displayedValue = new DisplayedValue();
			if (component.getCapability(Placeholder.class) != null) {
			    displayedValue.setValue(component.getCapability(Placeholder.class).getPlaceholderValue());
			} else {
				displayedValue.setValue(component.getDisplayName());
			}
			return displayedValue;
		} else {
			return value;
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4beb6_455cd/rev_4beb6-455cd/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_eb9ac_1cdba/rev_eb9ac-1cdba.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private Object getValueForComponent(AbstractComponent component) {
		Object value = values.get(getKey(component));
		//System.out.println("getValueForComponent ||||||||||||||||||||||||| " + values.size()); //debug
		if (value == null) {
			DisplayedValue displayedValue = new DisplayedValue();
			if (component.getCapability(Placeholder.class) != null) {
			    displayedValue.setValue(component.getCapability(Placeholder.class).getPlaceholderValue());
			} else {
				displayedValue.setValue(component.getDisplayName());
			}
			return displayedValue;
		} else {
			return value;
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_eb9ac_1cdba/rev_eb9ac-1cdba/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_606bc_ef5d7/rev_606bc-ef5d7.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private Object getValueForComponent(AbstractComponent component) {
		Object value = values.get(getKey(component));
		//System.out.println("getValueForComponent ||||||||||||||||||||||||| " + values.size()); //debug
		if (value == null) {
			DisplayedValue displayedValue = new DisplayedValue();
			if (component.getCapability(Placeholder.class) != null) {
			    displayedValue.setValue(component.getCapability(Placeholder.class).getPlaceholderValue());
			} else {
				displayedValue.setValue(component.getDisplayName());
			}
			return displayedValue;
		} else {
			return value;
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_606bc_ef5d7/rev_606bc-ef5d7/multiColumnTables/src/main/java/org/acme/example/view/MultiColTableModel.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8ac87_b13d0/rev_8ac87-b13d0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public MultiColView(AbstractComponent ac, ViewInfo vi) {
		super(ac,vi);
		JPanel viewPanel = new JPanel(new BorderLayout());

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672034545/fstmerge_var1_3527909749087993383
		settings = new ViewSettings();
		
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672034545/fstmerge_base_5807896935009952634
		JPanel view = new JPanel(); //rename 'panel'?
		view.setLayout(new BoxLayout(view, BoxLayout.Y_AXIS));

		// Add the content for this view manifestation.
=======
		JPanel view = new JPanel();
		view.setLayout(new BoxLayout(view, BoxLayout.Y_AXIS));

		// Add the content for this view manifestation.
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672034545/fstmerge_var2_8951515434267210938
		AbstractComponent component = getManifestedComponent();
		List<AbstractComponent> childrenList = component.getComponents();
		//If no children, we display the selectedComponent. 
		if(childrenList.size()==0) {
			childrenList = new ArrayList<AbstractComponent>();
			childrenList.add(component);
		}
		//We ignore any components without feed providers
		List<AbstractComponent> tempList = new ArrayList<AbstractComponent>();
		for(AbstractComponent child : childrenList) {
			if(child.getCapability(FeedProvider.class)!=null) {
				tempList.add(child);
				component.addViewManifestation(this);
			}
		}
		childrenList = tempList;
		model = new MultiColTableModel(childrenList, settings);
		
		jTable = new JTable(model);
		jTable.setAutoCreateRowSorter(true);
		jTable.setShowGrid(false);
		jTable.setFillsViewportHeight(true);
		jTable.setBorder(BorderFactory.createEmptyBorder());
		viewPanel.setBorder(BorderFactory.createEmptyBorder());
		
		//We set up the cell and header renderers for each column.
		MultiColColumnRenderer colHeaderRender = new MultiColColumnRenderer();
		DynamicValueCellRender dynamicValueCellRender = new DynamicValueCellRender();
		TimeCellRender timeCellRender = new TimeCellRender();
		MultiColCellRenderer cellRender = new MultiColCellRenderer();
		TableColumnModel colModel = jTable.getColumnModel();
		ArrayList<ColumnType> colList = settings.getColumnTypes();
		for(ColumnType colType : colList) {
			colModel.getColumn(settings.getIndexForColumn(colType)).setHeaderRenderer(colHeaderRender);
			if(colType==ColumnType.VALUE || colType==ColumnType.RAW) {
				colModel.getColumn(settings.getIndexForColumn(colType)).setCellRenderer(dynamicValueCellRender);
			} else if(colType==ColumnType.ERT || colType==ColumnType.SCLK || colType==ColumnType.SCET) {
				colModel.getColumn(settings.getIndexForColumn(colType)).setCellRenderer(timeCellRender);
			} else {
				colModel.getColumn(settings.getIndexForColumn(colType)).setCellRenderer(cellRender);
			}
		}
		
		viewPanel.add(jTable.getTableHeader(), BorderLayout.PAGE_START);
		viewPanel.add(jTable, BorderLayout.CENTER);
		
		setColorsToDefaults();
		jTable.getColumnModel().setColumnMargin(1);
		
		add(viewPanel, BorderLayout.NORTH);
		updateFeedProviders();
		
		tableSettingsControlPanel = new TableSettingsControlPanel(settings, jTable, this);
		
		// Apply column show/hide states from view properties
		Set<Object> hiddenColIds = getViewProperties().getProperty(HIDDEN_COLUMNS_PROP);
		if (hiddenColIds != null && !hiddenColIds.isEmpty()) {
			List<String> hiddenColIdList = new ArrayList<String>();
			for (Object id : hiddenColIds) {
				tableSettingsControlPanel.removeTableColumn(ColumnType.valueOf((String) id));
				hiddenColIdList.add((String) id);
			}
			tableSettingsControlPanel.updateColumnVisibilityStates(hiddenColIdList);
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8ac87_b13d0/rev_8ac87-b13d0/multiColumnTables/src/main/java/org/acme/example/view/MultiColView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672035369/fstmerge_var1_8029594225343652470
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672035369/fstmerge_base_7773600954121648751
public void add(Component component) {
		container.add(component, constraints);
		reset();
		++constraints.gridx;
	}
=======
public void add(Component... components) {
		JPanel panel = new JPanel();
		ConstraintBuilder subBuilder = new ConstraintBuilder(panel);
		subBuilder.constraints.anchor = constraints.anchor;
		
		for (Component component : components) {
			subBuilder.add(component);
		}
		
		add(panel);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672035369/fstmerge_var2_7548554256771006763

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8ac87_b13d0/rev_8ac87-b13d0/multiColumnTables/src/main/java/org/acme/example/view/ConstraintBuilder.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_deb01_acc4b/rev_deb01-acc4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0007c_5426e/rev_0007c-5426e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_71d71_79dde/rev_71d71-79dde.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672953361/fstmerge_var1_7699264835476624008
public void add(Component component) {
		container.add(component, constraints);
		reset();
		++constraints.gridx;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672953361/fstmerge_base_4137457979176736093
public void add(Component... components) {
		JPanel panel = new JPanel();
		ConstraintBuilder subBuilder = new ConstraintBuilder(panel);
		subBuilder.constraints.anchor = constraints.anchor;
		
		for (Component component : components) {
			subBuilder.add(component);
		}
		
		add(panel);
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420672953361/fstmerge_var2_6530463370314312311

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_71d71_79dde/rev_71d71-79dde/copiedMultiColumnTables/src/main/java/gov/nasa/arc/mct/table/gui/ConstraintBuilder.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8ed8b_05891/rev_8ed8b-05891.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_74697_6b1a8/rev_74697-6b1a8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_22b7c_0cda6/rev_22b7c-0cda6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_edbf4_ef969/rev_edbf4-ef969.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_22b7c_03610/rev_22b7c-03610.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e7221_37721/rev_e7221-37721.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_79deb_e6938/rev_79deb-e6938.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
	public void updateFromFeed(Map<String, List<Map<String, String>>> data) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420674942271/fstmerge_var1_2976270152199695026
		plotDataFedUpdateHandler.updateFromFeed(data, false);
		for (Runnable r : feedCallbacks) {
			SwingUtilities.invokeLater(r);
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420674942271/fstmerge_base_6493144944988055541
		plotDataFedUpdateHandler.updateFromFeed(data, false);
=======
		plotDataFeedUpdateHandler.updateFromFeed(data, false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420674942271/fstmerge_var2_5043637606303675429
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_79deb_e6938/rev_79deb-e6938/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/view/PlotViewManifestation.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_7f637_48388/rev_7f637-48388.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_13ac4_7f637/rev_13ac4-7f637.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ad5f7_34452/rev_ad5f7-34452.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_fbec2_ad5f7/rev_fbec2-ad5f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9d801_1de9c/rev_9d801-1de9c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_229db_1fa14/rev_229db-1fa14.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_83875_c51c5/rev_83875-c51c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_05d0b_aa8ba/rev_05d0b-aa8ba.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f4913_0cc1c/rev_f4913-0cc1c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8e58a_10743/rev_8e58a-10743.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_2c65f_506da/rev_2c65f-506da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a5b9b_9fc18/rev_a5b9b-9fc18.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_040fc_97328/rev_040fc-97328.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e7fa2_2130e/rev_e7fa2-2130e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0a125_edd01/rev_0a125-edd01.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c56b3_51df5/rev_c56b3-51df5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4467f_7a06b/rev_4467f-7a06b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_de3f8_4467f/rev_de3f8-4467f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_3d624_e719c/rev_3d624-e719c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9587a_c2fd6/rev_9587a-c2fd6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a5905_33421/rev_a5905-33421.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0ae31_9fc05/rev_0ae31-9fc05.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_8da2b_60c7d/rev_8da2b-60c7d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_01a78_adc8d/rev_01a78-adc8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_85a65_adc8d/rev_85a65-adc8d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_451f3_301fa/rev_451f3-301fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_970cc_6bca8/rev_970cc-6bca8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_57318_fbad9/rev_57318-fbad9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_dd02c_0f6e5/rev_dd02c-0f6e5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6c49b_9a53a/rev_6c49b-9a53a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_953f0_1468b/rev_953f0-1468b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c5de3_ac1cc/rev_c5de3-ac1cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_3e291_7fcf7/rev_3e291-7fcf7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_863eb_d348b/rev_863eb-d348b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_80be2_b7925/rev_80be2-b7925.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_cdeed_a5310/rev_cdeed-a5310.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f7bd2_c86f7/rev_f7bd2-c86f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a9fcf_23421/rev_a9fcf-23421.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_030f4_d7c49/rev_030f4-d7c49.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b353c_b7fb1/rev_b353c-b7fb1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f36a4_b353c/rev_f36a4-b353c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c57b4_509da/rev_c57b4-509da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6be27_037d9/rev_6be27-037d9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a48c7_6be27/rev_a48c7-6be27.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9d426_e013e/rev_9d426-e013e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f5f54_31ee3/rev_f5f54-31ee3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b57f7_8b346/rev_b57f7-8b346.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ae67c_fbd81/rev_ae67c-fbd81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e9d24_0103b/rev_e9d24-0103b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public LimitLineComponentProvider() {

		componentTypeInfo = new ComponentTypeInfo(
				bundle.getString("display_name"), 
				bundle.getString("description"), 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420689345120/fstmerge_var1_5274893036821683146
				LimitLineComponent.class, 
				new LimitLineCreateWizardUI()
				);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420689345120/fstmerge_base_4598369105677315600
				LimitLineComponent.class, 
				new LimitLineCreateWizardUI(),
				new ImageIcon(LimitLineComponent.class.getResource("/icons/limit.png")));
=======
				LimitLineComponent.class);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420689345120/fstmerge_var2_4757774619721675592
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_e9d24_0103b/rev_e9d24-0103b/limits/src/main/java/gov/nasa/arc/mct/limits/LimitLineComponentProvider.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_56be5_e9d24/rev_56be5-e9d24.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_21169_5ed7b/rev_21169-5ed7b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_fd523_0f6cd/rev_fd523-0f6cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_64de9_7aeb8/rev_64de9-7aeb8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_87330_d0bc5/rev_87330-d0bc5.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	public void testPlotMatchSettings(){		
		
		PlotConfiguration plotSettings = new PlotSettings();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690838847/fstmerge_var1_6428460527694460887
		// Create a second set of settings with defaults...
		PlotConfiguration otherPlotSettings = new PlotSettings();
		// ...but explicitly make sure min/max times match 
		// (these are defined relative to "now", resulting in intermittent test failures otherwise)
		otherPlotSettings.setMinTime(plotSettings.getMinTime());
		otherPlotSettings.setMaxTime(plotSettings.getMaxTime());
		PlotView basePlot = new PlotView.Builder(PlotterPlot.class).plotSettings(otherPlotSettings).build();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690838847/fstmerge_base_5021986594157429050
		PlotView basePlot = new PlotView.Builder(PlotterPlot.class).plotSettings(new PlotSettings()).build();
=======
		PlotSettings      other        = new PlotSettings();
		// Copy time values to avoid intermittent failure
		other.setMinTime(plotSettings.getMinTime());
		other.setMaxTime(plotSettings.getMaxTime());
		PlotView basePlot = new PlotView.Builder(PlotterPlot.class).plotSettings(other).build();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690838847/fstmerge_var2_6340627571819606140
		
		Assert.assertTrue(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setAxisOrientationSetting(AxisOrientationSetting.Y_AXIS_AS_TIME);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setAxisOrientationSetting(AxisOrientationSetting.X_AXIS_AS_TIME);
		plotSettings.setXAxisMaximumLocation(XAxisMaximumLocationSetting.MAXIMUM_AT_LEFT);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setXAxisMaximumLocation(XAxisMaximumLocationSetting.MAXIMUM_AT_RIGHT);
		plotSettings.setTimeAxisSubsequentSetting(TimeAxisSubsequentBoundsSetting.SCRUNCH);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setTimeAxisSubsequentSetting(TimeAxisSubsequentBoundsSetting.JUMP);
		plotSettings.setNonTimeAxisSubsequentMinSetting(NonTimeAxisSubsequentBoundsSetting.FIXED);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setNonTimeAxisSubsequentMinSetting(PlotConstants.DEFAULT_NON_TIME_AXIS_MIN_SUBSEQUENT_SETTING);
		plotSettings.setNonTimeAxisSubsequentMaxSetting(NonTimeAxisSubsequentBoundsSetting.FIXED);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setNonTimeAxisSubsequentMaxSetting(PlotConstants.DEFAULT_NON_TIME_AXIS_MIN_SUBSEQUENT_SETTING);
		plotSettings.setMaxTime(basePlot.getMaxTime()+10);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setMaxTime(basePlot.getMaxTime());
		plotSettings.setMinTime(basePlot.getMinTime() + 10);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setMinTime(basePlot.getMinTime());
		plotSettings.setMaxNonTime(PlotConstants.DEFAULT_NON_TIME_AXIS_MAX_VALUE + 1);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setMaxNonTime(PlotConstants.DEFAULT_NON_TIME_AXIS_MAX_VALUE);
		plotSettings.setMinNonTime(PlotConstants.DEFAULT_NON_TIME_AXIS_MIN_VALUE + 1);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setMinNonTime(PlotConstants.DEFAULT_NON_TIME_AXIS_MIN_VALUE);
		plotSettings.setTimePadding(PlotConstants.DEFAULT_TIME_AXIS_PADDING + 1);   
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setTimePadding(PlotConstants.DEFAULT_TIME_AXIS_PADDING);  
		plotSettings.setNonTimeMaxPadding(PlotConstants.DEFAULT_NON_TIME_AXIS_PADDING_MAX + 1);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setNonTimeMaxPadding(PlotConstants.DEFAULT_NON_TIME_AXIS_PADDING_MAX);
		plotSettings.setNonTimeMinPadding(PlotConstants.DEFAULT_NON_TIME_AXIS_PADDING_MIN+ 1);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));
		
		plotSettings.setNonTimeMinPadding(PlotConstants.DEFAULT_NON_TIME_AXIS_PADDING_MIN);
		plotSettings.setYAxisMaximumLocation(YAxisMaximumLocationSetting.MAXIMUM_AT_BOTTOM);
		Assert.assertFalse(basePlot.plotMatchesSetting(plotSettings));

		plotSettings.setYAxisMaximumLocation(PlotConstants.DEFAULT_Y_AXIS_MAX_LOCATION_SETTING);
		Assert.assertTrue(basePlot.plotMatchesSetting(plotSettings));
	
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_87330_d0bc5/rev_87330-d0bc5/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/bridge/TestPlotView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690839538/fstmerge_var1_8663570007112059397
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690839538/fstmerge_base_6519328841179732571
@Test
	public void testIgnoresPredictiveTimeService() {
        MockitoAnnotations.initMocks(this);
		
        Mockito.when(feed1Component.getCapability(FeedProvider.class)).thenReturn(feed1);
        Mockito.when(feed2Component.getCapability(FeedProvider.class)).thenReturn(feed2);
        Mockito.when(feed3Component.getCapability(FeedProvider.class)).thenReturn(feed3);
        Mockito.when(feed1Component.isLeaf()).thenReturn(true);
        Mockito.when(feed2Component.isLeaf()).thenReturn(true);
        Mockito.when(feed3Component.isLeaf()).thenReturn(true);
        
        Mockito.when(feed1.getTimeService()).thenReturn(this.makeStaticTimeService(1));
        Mockito.when(feed2.getTimeService()).thenReturn(this.makeStaticTimeService(2));
        Mockito.when(feed3.getTimeService()).thenReturn(this.makeStaticTimeService(3));
        Mockito.when(feed1.getSubscriptionId()).thenReturn("feed1");
        Mockito.when(feed2.getSubscriptionId()).thenReturn("feed2");
        Mockito.when(feed3.getSubscriptionId()).thenReturn("feed3");
                
        TestersComponent component = new TestersComponent("x") {
			@Override
			public synchronized List<AbstractComponent> getComponents() {	
				return Arrays.asList(feed1Component, feed2Component, feed3Component);
			}
		};
		
		PlotViewManifestation plot;
		
        Mockito.when(feed1.isPrediction()).thenReturn(false);
        Mockito.when(feed2.isPrediction()).thenReturn(false);
        Mockito.when(feed3.isPrediction()).thenReturn(false);
		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
		Assert.assertEquals(plot.getCurrentMCTTime(), 1); // First non-predictive;
		
        Mockito.when(feed1.isPrediction()).thenReturn(true);
        Mockito.when(feed2.isPrediction()).thenReturn(false);
        Mockito.when(feed3.isPrediction()).thenReturn(false);
		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
		Assert.assertEquals(plot.getCurrentMCTTime(), 2); // First non-predictive;
		
		Mockito.when(feed1.isPrediction()).thenReturn(true);
        Mockito.when(feed2.isPrediction()).thenReturn(true);
        Mockito.when(feed3.isPrediction()).thenReturn(true);
		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
		Assert.assertEquals(plot.getCurrentMCTTime(), 1); // First non-predictive;
		
	}
=======
@Test
	public void testIgnoresPredictiveTimeService() {
        MockitoAnnotations.initMocks(this);
        SwingUtilities.invokeLater(new Runnable() { 
        	public void run() {
        		Mockito.when(feed1Component.getCapability(FeedProvider.class)).thenReturn(feed1);
        		Mockito.when(feed2Component.getCapability(FeedProvider.class)).thenReturn(feed2);
        		Mockito.when(feed3Component.getCapability(FeedProvider.class)).thenReturn(feed3);
        		Mockito.when(feed1Component.isLeaf()).thenReturn(true);
        		Mockito.when(feed2Component.isLeaf()).thenReturn(true);
        		Mockito.when(feed3Component.isLeaf()).thenReturn(true);

        		Mockito.when(feed1.getTimeService()).thenReturn(makeStaticTimeService(1));
        		Mockito.when(feed2.getTimeService()).thenReturn(makeStaticTimeService(2));
        		Mockito.when(feed3.getTimeService()).thenReturn(makeStaticTimeService(3));
        		Mockito.when(feed1.getSubscriptionId()).thenReturn("feed1");
        		Mockito.when(feed2.getSubscriptionId()).thenReturn("feed2");
        		Mockito.when(feed3.getSubscriptionId()).thenReturn("feed3");

        		TestersComponent component = new TestersComponent("x") {
        			@Override
        			public synchronized List<AbstractComponent> getComponents() {	
        				return Arrays.asList(feed1Component, feed2Component, feed3Component);
        			}
        		};

        		PlotViewManifestation plot;

        		Mockito.when(feed1.isPrediction()).thenReturn(false);
        		Mockito.when(feed2.isPrediction()).thenReturn(false);
        		Mockito.when(feed3.isPrediction()).thenReturn(false);
        		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
        		Assert.assertEquals(plot.getCurrentMCTTime(), 1); // First non-predictive;

        		Mockito.when(feed1.isPrediction()).thenReturn(true);
        		Mockito.when(feed2.isPrediction()).thenReturn(false);
        		Mockito.when(feed3.isPrediction()).thenReturn(false);
        		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
        		Assert.assertEquals(plot.getCurrentMCTTime(), 2); // First non-predictive;

        		Mockito.when(feed1.isPrediction()).thenReturn(true);
        		Mockito.when(feed2.isPrediction()).thenReturn(true);
        		Mockito.when(feed3.isPrediction()).thenReturn(true);
        		plot = new PlotViewManifestation(component, new ViewInfo(PlotViewManifestation.class,"",ViewType.OBJECT));
        		Assert.assertEquals(plot.getCurrentMCTTime(), 1); // First non-predictive;
        	}
        });
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420690839538/fstmerge_var2_1453443716558631650

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_87330_d0bc5/rev_87330-d0bc5/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/view/TestPlotViewRole.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_21c52_87330/rev_21c52-87330.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0e810_38ebd/rev_0e810-38ebd.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public ScatterPlot(PlotConfiguration delegate) {
		super(delegate);
		if (delegate instanceof PlotAbstraction) {
			setPlotAbstraction((PlotAbstraction) delegate);
		}
		timeAxis.setStart(delegate.getMinTime());
		timeAxis.setEnd(delegate.getMaxTime());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420691441312/fstmerge_var1_8491662507262900662
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420691441312/fstmerge_base_6290996962602221504

=======
		initialNonTimeMin = delegate.getMinNonTime();
		initialNonTimeMax = delegate.getMaxNonTime();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420691441312/fstmerge_var2_3599120730630929130
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_0e810_38ebd/rev_0e810-38ebd/fastPlotViews/src/main/java/gov/nasa/arc/mct/fastplot/scatter/ScatterPlot.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b6276_0e810/rev_b6276-0e810.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b2dc1_9c0bc/rev_b2dc1-9c0bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_27acf_e2473/rev_27acf-e2473.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_51b20_6b39d/rev_51b20-6b39d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_63044_1502b/rev_63044-1502b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_53017_9f807/rev_53017-9f807.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_dd0ce_11a79/rev_dd0ce-11a79.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_28545_dd0ce/rev_28545-dd0ce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c425b_2b9d1/rev_c425b-2b9d1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_247fd_f572c/rev_247fd-f572c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_5f45b_5256f/rev_5f45b-5256f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6ba26_894ca/rev_6ba26-894ca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_bb92c_3cf73/rev_bb92c-3cf73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_500b5_2cd37/rev_500b5-2cd37.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_159e5_0b30a/rev_159e5-0b30a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_27ebd_8e45e/rev_27ebd-8e45e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_38d2e_8b652/rev_38d2e-8b652.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_215d3_26352/rev_215d3-26352.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_af581_a5347/rev_af581-a5347.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_6724f_5a290/rev_6724f-5a290.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a83e6_a3a7d/rev_a83e6-a3a7d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_11c3a_a7d24/rev_11c3a-a7d24.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_11c3a_a7d24/rev_11c3a-a7d24.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_5767f_25e02/rev_5767f-25e02.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_132ed_b32cc/rev_132ed-b32cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_523a7_b2062/rev_523a7-b2062.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_a4903_08054/rev_a4903-08054.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_2b1e0_ea1c8/rev_2b1e0-ea1c8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_579f2_03d7b/rev_579f2-03d7b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_aba04_579f2/rev_aba04-579f2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ff06b_2cf4d/rev_ff06b-2cf4d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_d2839_6e816/rev_d2839-6e816.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_f34fe_55974/rev_f34fe-55974.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_68eae_d0a18/rev_68eae-d0a18.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b690d_ce9a6/rev_b690d-ce9a6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_2ebdb_de3a3/rev_2ebdb-de3a3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_b037d_667dc/rev_b037d-667dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_94100_52b64/rev_94100-52b64.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_9572d_b3f31/rev_9572d-b3f31.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_5fd81_e978f/rev_5fd81-e978f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_832bb_95d77/rev_832bb-95d77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_ead88_ddb35/rev_ead88-ddb35.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_05f1a_8258a/rev_05f1a-8258a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_4e269_050e7/rev_4e269-050e7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_c305d_4e387/rev_c305d-4e387.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_aa8df_d0c04/rev_aa8df-d0c04.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/mct/revisions/rev_69c4b_287a4/rev_69c4b-287a4.revisions

=========================================================