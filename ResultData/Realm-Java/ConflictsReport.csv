==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76bd8_94605/rev_76bd8-94605.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882729919/fstmerge_var1_4576007484493431342
public static void main(String[] args) {

		@Table
		class phoneTable {
			String type;
			String number;
		}

		@Table
		class personTable {
			String firstName;
			String lastName;
			int salary;
			phoneTable phones;
		}

		PersonTable persons = new PersonTable();

		Person john = persons.add("John", "Doe", 23000);
		john.phones.add("home", "123456");
		john.phones.add("mobile", "333444");

		persons.insert(0, "Nikolche", "Mihajlovski", 28000);

		// 2 ways to get the value
		String name1 = persons.at(0).firstName.get();
		String name2 = persons.at(0).getFirstName();

		// 2 ways to set the value
		persons.at(1).lastName.set("NewName");
		persons.at(1).setLastName("NewName");

		persons.remove(0);

		Person johnDoe = persons.firstName.is("John").findUnique();

		List<Person> allRich = persons.salary.greaterThan(100000).findAll();

		// using explicit OR
		Person johnny = persons.firstName.is("Johnny").or().salary.is(10000).findFirst();

		// using implicit AND
		Person johnnyB = persons.firstName.is("Johnny").lastName.startsWith("B").findUnique();

		persons.firstName.is("John").findLast().salary.set(30000);

		List<Person> nikolches = persons.firstName.is("Nikolche").findAll();

		// projection and aggregation of the salary
		int salarySum = persons.salary.sum();

		// lazy iteration through the table - now simpler
		for (Person person : persons) {
			person.salary.set(50000);
		}

		// using lazy list of results - as moving a cursor through a view
		PersonView view = persons.salary.greaterThan(123).findAll();
		for (Person person : view) {
			System.out.println(person);
		}
		int maxSalary = view.salary.max();

		// Various combinations:

		// option 1: direct query and data retrieval
		int sum1 = persons.firstName.is("X").or().salary.is(5).salary.sum();

		// options 2:
		int sum2 = persons.firstName.is("X").or().salary.is(5).findAll().salary.sum();

		persons.firstName.is("Y").salary.is(6).lastName.set("Z");
		persons.salary.greaterThan(1234).remove();

		for (String phone : persons.phones.type.is("mobile").findAll().phone.all()) {
			System.out.println(phone);
		}

		// from 2nd to 4th row
		view = persons.range(2, 4);
		
		// TODO: discuss the trade-offs (new classes, longer queries or incorrect options?) between such options:
		persons.firstName.is("d").salary.sum(); // no problem without OR
		
		// persons.firstName.is("X").or().salary.sum();
		
		// this isn't possible anymore, due to special sub-query return type of "or()"
		// persons.firstName.is("X").or().salary.set(1234);

		persons.firstName.is("X").or().salary.is(23).salary.sum(); // correct, shorter (query-based)
		persons.firstName.is("X").or().salary.is(23).findAll().salary.sum(); // correct, longer (view-based)
		
		
		Person p1 = persons.at(4).next(); // 5nd row
		Person p2 = persons.last().previous(); // 2nd-last row
		Person p3 = persons.first().after(3); // 4th row
		Person p4 = persons.last().before(2); // 3rd-last row

		
//		get the post params from the request
//		for each column in person:
//			if the column name is in the params:
//				set the column value form the param 
			
			
		// TODO: cursor navigation in views:
		PersonView allJohns = persons.firstName.is("John").findAll();
		// Person firstJohn = allJohns.first();
		// Person thirdJohn = allJohns.at(2).next();

		// TODO: discuss with Brian: row numbers after deletion and insertion (IDs vs. row numbers)
		// maybe we will need (long ID or String ID) in the model 

		// TODO: discuss with Brian: 
		// tables and view can be very similar and have common operations:
		// - both can be lists (currently extend that behaviour from AbstractRowset)
		// both can allow cursor navigation: at(), first(), last()...
		// both allow aggregation: x.salary.sum()

		// TODO: sort, limit - future
		
		// TODO: in future introduce and implement Entity and Column interfaces as public API 
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882729919/fstmerge_base_7027117966330720406
public static void main(String[] args) {

		@Table
		class phoneTable {
			String type;
			String number;
		}

		@Table
		class personTable {
			String firstName;
			String lastName;
			int salary;
			phoneTable phones;
		}

		PersonTable persons = new PersonTable();

		Person john = persons.add("John", "Doe", 23000);
		john.phones.add("home", "123456");
		john.phones.add("mobile", "333444");

		persons.insert(0, "Nikolche", "Mihajlovski", 28000);

		// 2 ways to get the value
		String name1 = persons.at(0).firstName.get();
		String name2 = persons.at(0).getFirstName();

		// 2 ways to set the value
		persons.at(1).lastName.set("NewName");
		persons.at(1).setLastName("NewName");

		persons.remove(0);

		Person johnDoe = persons.firstName.is("John").findUnique();

		List<Person> allRich = persons.salary.greaterThan(100000).findAll();

		// using explicit OR
		Person johnny = persons.firstName.is("Johnny").or().salary.is(10000).findFirst();

		// using implicit AND
		Person johnnyB = persons.firstName.is("Johnny").lastName.startsWith("B").findUnique();

		persons.firstName.is("John").findLast().salary.set(30000);

		List<Person> nikolches = persons.firstName.is("Nikolche").findAll();

		// projection and aggregation of the salary
		int salarySum = persons.salary.sum();

		// lazy iteration through the table - now simpler
		for (Person person : persons) {
			person.salary.set(50000);
		}

		// using lazy list of results - as moving a cursor through a view
		PersonView view = persons.salary.greaterThan(123).findAll();
		for (Person person : view) {
			System.out.println(person);
		}
		int maxSalary = view.salary.max();

		// Various combinations:

		// option 1: direct query and data retrieval
		int sum1 = persons.firstName.is("X").or().salary.is(5).salary.sum();

		// options 2:
		int sum2 = persons.firstName.is("X").or().salary.is(5).findAll().salary.sum();

		persons.firstName.is("Y").salary.is(6).lastName.set("Z");
		persons.salary.greaterThan(1234).remove();

		for (String phone : persons.phones.type.is("mobile").findAll().phone.all()) {
			System.out.println(phone);
		}

		// from 2nd to 4th row
		view = persons.range(2, 4);
		
		// TODO: discuss the trade-offs (new class, longer queries or incorrect options?) between such options:
		persons.firstName.is("d").salary.sum(); // no problem without OR
		persons.firstName.is("X").or().salary.set(1234); // problem - incorrect options
		persons.firstName.is("X").or().salary.is(23).salary.sum(); // correct, shorter (query-based)
		persons.firstName.is("X").or().salary.is(23).findAll().salary.sum(); // correct, longer (view-based)
		
		
		Person p1 = persons.at(4).next(); // 5nd row
		Person p2 = persons.last().previous(); // 2nd-last row
		Person p3 = persons.first().after(3); // 4th row
		Person p4 = persons.last().before(2); // 3rd-last row

		// TODO: cursor navigation in views:
		PersonView allJohns = persons.firstName.is("John").findAll();
		// Person firstJohn = allJohns.first();
		// Person thirdJohn = allJohns.at(2).next();

		// TODO: discuss with Brian: row numbers after deletion and insertion (IDs vs. row numbers)
		// maybe we will need (long ID or String ID) in the model 

		// TODO: discuss with Brian: tables and view can be very similar and have common operations:
		// - both can be lists (currently extend that behaviour from AbstractRowset)
		// both can allow cursor navigation: at(), first(), last()...
		// both allow aggregation: x.salary.sum()

		// TODO: add empty row?
		// TODO: sort, limit
		
		// TODO: in future introduce and implement Entity and Column interfaces as public API 
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882729919/fstmerge_var2_6842146045900705581

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76bd8_94605/rev_76bd8-94605/src/com/tigthdb/example/Example.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882730236/fstmerge_var1_1513877071665979078
public PersonSubQuery or() {
		return null;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882730236/fstmerge_base_7532763145494665119
public Person or() {
		return null;
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882730236/fstmerge_var2_8457214677662780671

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76bd8_94605/rev_76bd8-94605/src/com/tigthdb/example/generated/PersonQuery.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf25c_f6166/rev_bf25c-f6166.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882735233/fstmerge_var1_2063940449418217705
		int rowArg = 250000;
		if (args.length > 0) {
		    try {
		        rowArg = Integer.parseInt(args[0]);
		    } catch (NumberFormatException e) {
		        System.err.println("Argument" + " must be an integer");
		        System.exit(1);
		    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882735233/fstmerge_base_4292183126713390529
		EmployeeTable employees = new EmployeeTable();

		/****************************** BASIC OPERATIONS *****************************/

		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
		Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true);
		Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234.56);

		TightDB.print("Employees", employees);

		TightDB.print("Johny", johny);

		System.out.println("first record: " + john);
		System.out.println("second record: " + nikolche);
		System.out.println("some column: " + john.firstName);

		/****************************** GETTERS AND SETTERS *****************************/

		// 2 ways to get the value
		System.out.println("name1: " + john.firstName.get());
		System.out.println("name2: " + employees.at(0).getFirstName());

		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");

		Employee niko = employees.firstName.startsWith("Nik").findUnique();
		System.out.println("Unique Niko: " + niko);

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		// using explicit OR
		TightDB.print("Search example", employees.firstName.is("Johnny").or().lastName.is("Mihajlovski").findFirst());

		// using implicit AND
		TightDB.print("Search example 2", employees.firstName.is("Johnny").lastName.startsWith("B").findLast());

		employees.firstName.is("John").findLast().salary.set(30000);

		/****************************** ITERATION OF ALL RECORDS *****************************/

		// lazy iteration over the table
		for (Employee employee : employees) {
			System.out.println("iterating: " + employee);
		}

		john.phones.get().add("mobile", "123456");
		john.phones.get().add("home", "567890");

		nikolche.phones.get().add("home", "13579");

		System.out.println("John phones count: " + john.phones.get().size());

		TightDB.print("Employees", employees);

		/****************************** AGGREGATION *****************************/

		// aggregation of the salary
		System.out.println("max salary: " + employees.salary.max());
		System.out.println("min salary: " + employees.salary.min());
		System.out.println("salary sum: " + employees.salary.sum());

		/****************************** COMPLEX QUERY *****************************/

		TightDB.print("Query 1", employees.firstName.startsWith("Nik").lastName.contains("vski").or().firstName.is("John").findAll());

		TightDB.print("Query 2a", employees.firstName.startsWith("Nik").startGroup().lastName.contains("vski").or().firstName.is("John").endGroup()
				.findAll());

		TightDB.print("Query 2b",
				employees.query().startGroup().lastName.contains("vski").or().firstName.is("John").endGroup().firstName.startsWith("Nik").findAll());

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

		employees.salary.setAll(100000);

		TightDB.print(employees);

		/****************************** COLUMN RETRIEVAL *****************************/

		System.out.print("- Columns:");
		for (AbstractColumn<?, ?, ?> column : john.columns()) {
			System.out.print(column.getName() + " ");
		}
		System.out.println();

		/****************************** NESTED TABLES *****************************/

		john.getPhones().add("mobile", "111");
		john.getPhones().add("home", "222");

		johny.getPhones().add("mobile", "333");

		nikolche.getPhones().add("mobile", "444");
		nikolche.getPhones().add("work", "555");

		TightDB.print(employees);

		for (PhoneTable phoneTable : employees.phones.getAll()) {
			TightDB.print(phoneTable);
		}

		/****************************** DATA REMOVAL *****************************/

		employees.remove(0);

		TightDB.print(employees);

		employees.clear();

		TightDB.print(employees);

		/****************************** NOT IMPLEMENTED YET *****************************/

		try {
			// from 2nd to 4th row
			EmployeeView view = employees.range(2, 4);

			// cursor navigation
			Employee p1 = employees.at(4).next(); // 5nd row
			Employee p2 = employees.last().previous(); // 2nd-last row
			Employee p3 = employees.first().after(3); // 4th row
			Employee p4 = employees.last().before(2); // 3rd-last row
		} catch (Exception e) {
=======
		EmployeeTable employees = new EmployeeTable();

		/****************************** BASIC OPERATIONS *****************************/

		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
		Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true);
		Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234.56);

		TightDB.print("Employees", employees);

		TightDB.print("Johny", johny);

		System.out.println("first record: " + john);
		System.out.println("second record: " + nikolche);
		System.out.println("some column: " + john.firstName);

		/****************************** GETTERS AND SETTERS *****************************/

		// 2 ways to get the value
		System.out.println("name1: " + john.firstName.get());
		System.out.println("name2: " + john.getFirstName());

		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");

		Employee niko = employees.firstName.startsWith("Nik").findUnique();
		System.out.println("Unique Niko: " + niko);

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		// using explicit OR
		TightDB.print("Search example", employees.firstName.is("Johnny").or().lastName.is("Mihajlovski").findFirst());

		// using implicit AND
		TightDB.print("Search example 2", employees.firstName.is("Johnny").lastName.startsWith("B").findLast());

		employees.firstName.is("John").findLast().salary.set(30000);

		/****************************** ITERATION OF ALL RECORDS *****************************/

		// lazy iteration over the table
		for (Employee employee : employees) {
			System.out.println("iterating: " + employee);
		}

		/****************************** AGGREGATION *****************************/

		// aggregation of the salary
		System.out.println("max salary: " + employees.salary.max());
		System.out.println("min salary: " + employees.salary.min());
		System.out.println("salary sum: " + employees.salary.sum());

		/****************************** COMPLEX QUERY *****************************/

		TightDB.print("Query 1", employees.firstName.startsWith("Nik").lastName.contains("vski").or().firstName.is("John").findAll());

		TightDB.print("Query 2a", employees.firstName.startsWith("Nik").startGroup().lastName.contains("vski").or().firstName.is("John").endGroup()
				.findAll());

		TightDB.print("Query 2b",
				employees.query().startGroup().lastName.contains("vski").or().firstName.is("John").endGroup().firstName.startsWith("Nik").findAll());

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

		employees.salary.setAll(100000);
		employees.firstName.contains("o").findAll().firstName.setAll("Bill");

		TightDB.print(employees);

		/****************************** COLUMN RETRIEVAL *****************************/

		System.out.print("- Columns:");
		for (AbstractColumn<?, ?, ?> column : john.columns()) {
			System.out.print(column.getName() + "=" + column.getReadableValue());
		}
		System.out.println();

		/****************************** SUBTABLES *****************************/

		PhoneTable subtable = john.phones.get();
		subtable.add("mobile", "111");
		
		john.getPhones().add("mobile", "111");
		john.getPhones().add("home", "222");

		johny.getPhones().add("mobile", "333");

		nikolche.getPhones().add("mobile", "444");
		nikolche.getPhones().add("work", "555");

		for (PhoneTable phoneTable : employees.phones.getAll()) {
			TightDB.print(phoneTable);
		}

		/****************************** DATA REMOVAL *****************************/

		employees.remove(0);

		TightDB.print(employees);

		employees.clear();

		TightDB.print(employees);

		/****************************** NOT IMPLEMENTED YET *****************************/

		try {
			// from 2nd to 4th row
			EmployeeView view = employees.range(2, 4);

			// cursor navigation
			Employee p1 = employees.at(4).next(); // 5nd row
			Employee p2 = employees.last().previous(); // 2nd-last row
			Employee p3 = employees.first().after(3); // 4th row
			Employee p4 = employees.last().before(2); // 3rd-last row
		} catch (Exception e) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882735233/fstmerge_var2_1056757265396264311
		}
		
		Performance.TestTightdb(250000);
		Performance.TestJavaArray(rowArg);
		
		//showExample();
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf25c_f6166/rev_bf25c-f6166/src/main/java/com/tightdb/example/Example.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6936d_adffb/rev_6936d-adffb.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_var1_8794588783135712395
		int rowArg = 250000;
		if (args.length > 0) {
		    try {
		        rowArg = Integer.parseInt(args[0]);
		    } catch (NumberFormatException e) {
		        System.err.println("Argument" + " must be an integer");
		        System.exit(1);
		    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_base_4101570278651350328
		EmployeeTable employees = new EmployeeTable();

		/****************************** BASIC OPERATIONS *****************************/

		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
		Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true);
		Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234.56);

		TightDB.print("Employees", employees);

		TightDB.print("Johny", johny);

		System.out.println("first record: " + john);
		System.out.println("second record: " + nikolche);
		System.out.println("some column: " + john.firstName);

		/****************************** GETTERS AND SETTERS *****************************/

		// 2 ways to get the value
		System.out.println("name1: " + john.firstName.get());
		System.out.println("name2: " + john.getFirstName());

		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");

		Employee niko = employees.firstName.startsWith("Nik").findUnique();
		System.out.println("Unique Niko: " + niko);

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		// using explicit OR
		TightDB.print("Search example", employees.firstName.is("Johnny").or().lastName.is("Mihajlovski").findFirst());

		// using implicit AND
		TightDB.print("Search example 2", employees.firstName.is("Johnny").lastName.startsWith("B").findLast());

		employees.firstName.is("John").findLast().salary.set(30000);

		/****************************** ITERATION OF ALL RECORDS *****************************/

		// lazy iteration over the table
		for (Employee employee : employees) {
			System.out.println("iterating: " + employee);
=======
		EmployeeTable employees = new EmployeeTable();

		/****************************** BASIC OPERATIONS *****************************/

		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
		Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true);
		Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234.56);

		TightDB.print("Employees", employees);

		TightDB.print("Johny", johny);

		System.out.println("first record: " + john);
		System.out.println("second record: " + nikolche);
		System.out.println("some column: " + john.firstName);

		/****************************** GETTERS AND SETTERS *****************************/

		// 2 ways to get the value
		System.out.println("name1: " + john.firstName.get());
		System.out.println("name2: " + john.getFirstName());

		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		// using explicit OR
		TightDB.print("Search example", employees.firstName.is("Johnny").or().lastName.is("Mihajlovski").findFirst());

		// using implicit AND
		TightDB.print("Search example 2", employees.firstName.is("Johnny").lastName.startsWith("B").findLast());

		employees.firstName.is("John").findLast().salary.set(30000);

		/****************************** ITERATION OF ALL RECORDS *****************************/

		// lazy iteration over the table
		for (Employee employee : employees) {
			System.out.println("iterating: " + employee);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_var2_2886544649791322775
		}
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_var1_8794588783135712395
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_base_4101570278651350328

		/****************************** AGGREGATION *****************************/

		// aggregation of the salary
		System.out.println("max salary: " + employees.salary.max());
		System.out.println("min salary: " + employees.salary.min());
		System.out.println("salary sum: " + employees.salary.sum());

		/****************************** COMPLEX QUERY *****************************/

		TightDB.print("Query 1", employees.firstName.startsWith("Nik").lastName.contains("vski").or().firstName.is("John").findAll());

		TightDB.print("Query 2a", employees.firstName.startsWith("Nik").startGroup().lastName.contains("vski").or().firstName.is("John").endGroup()
				.findAll());

		TightDB.print("Query 2b",
				employees.query().startGroup().lastName.contains("vski").or().firstName.is("John").endGroup().firstName.startsWith("Nik").findAll());

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

		employees.salary.setAll(100000);
		employees.firstName.contains("o").findAll().firstName.setAll("Bill");

		TightDB.print(employees);

		/****************************** COLUMN RETRIEVAL *****************************/

		System.out.print("- Columns:");
		for (AbstractColumn<?, ?, ?> column : john.columns()) {
			System.out.print(column.getName() + "=" + column.getReadableValue());
		}
		System.out.println();

		/****************************** SUBTABLES *****************************/

		PhoneTable subtable = john.phones.get();
		subtable.add("mobile", "111");
=======

		/****************************** AGGREGATION *****************************/

		// aggregation of the salary
		System.out.println("max salary: " + employees.salary.max());
		System.out.println("min salary: " + employees.salary.min());
		System.out.println("salary sum: " + employees.salary.sum());

		/****************************** COMPLEX QUERY *****************************/

		TightDB.print("Query 1", employees.firstName.startsWith("Nik").lastName.contains("vski").or().firstName.is("John").findAll());

		TightDB.print("Query 2a", employees.firstName.startsWith("Nik").group().lastName.contains("vski").or().firstName.is("John").endGroup()
				.findAll());

		TightDB.print("Query 2b",
				employees.query().group().lastName.contains("vski").or().firstName.is("John").endGroup().firstName.startsWith("Nik").findAll());

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

		employees.salary.setAll(100000);
		employees.firstName.contains("o").findAll().firstName.setAll("Bill");

		TightDB.print(employees);

		/****************************** COLUMN RETRIEVAL *****************************/

		System.out.print("- Columns:");
		for (AbstractColumn<?, ?, ?> column : john.columns()) {
			System.out.print(column.getName() + "=" + column.getReadableValue());
		}
		System.out.println();

		/****************************** SUBTABLES *****************************/

		PhoneTable subtable = john.phones.get();
		subtable.add("mobile", "111");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882741371/fstmerge_var2_2886544649791322775
		
		Performance.TestTightdb(250000);
		Performance.TestJavaArray(rowArg);
		
		//showExample();
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6936d_adffb/rev_6936d-adffb/src/main/java/com/tightdb/example/Example.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747529/fstmerge_var1_1941792810844313720
public void insertBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data) {
		nativeInsertBinary(nativePtr, columnIndex, rowIndex, data);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747529/fstmerge_base_6699760319331800931
=======
public void insertBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data){
		nativeInsertBinary(nativePtr, columnIndex, rowIndex, data);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747529/fstmerge_var2_4892164665810526056

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747531/fstmerge_var1_8417575481003592340
public void insertBinaryByteArray(long columnIndex, long rowIndex, byte[] data) {
		nativeInsertBinary(nativePtr, columnIndex, rowIndex, data);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747531/fstmerge_base_9036767601481794141
=======
public void insertBinaryByteArray(long columnIndex, long rowIndex, byte[] data){
		nativeInsertBinary(nativePtr, columnIndex, rowIndex, data);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747531/fstmerge_var2_3873303299659630650

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747584/fstmerge_var1_6493443742079034648
public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex) {
		return nativeGetBinary(nativePtr, columnIndex, rowIndex);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747584/fstmerge_base_6946466166419618899
=======
public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex){
		return nativeGetBinary(nativePtr, columnIndex, rowIndex);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747584/fstmerge_var2_6296434120045665652

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747601/fstmerge_var1_1463649668418084501
public byte[] getBinaryByteArray(long columnIndex, long rowIndex) {
		return nativeGetByteArray(nativePtr, columnIndex, rowIndex);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747601/fstmerge_base_1494669059006553490
=======
public byte[] getBinaryByteArray(long columnIndex, long rowIndex){
		return nativeGetByteArray(nativePtr, columnIndex, rowIndex);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747601/fstmerge_var2_6998828296287856209

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747646/fstmerge_var1_4680287756138769886
public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data) {
		if (data == null)
			throw new NullPointerException("Null array");
		nativeSetBinary(nativePtr, columnIndex, rowIndex, data);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747646/fstmerge_base_2173841103854270226
=======
public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data){
		if(data == null)
			throw new NullPointerException("Null array");
		nativeSetBinary(nativePtr, columnIndex, rowIndex, data);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747646/fstmerge_var2_4887223935897565806

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747649/fstmerge_var1_298303583521435530
public void setBinaryByteArray(long columnIndex, long rowIndex, byte[] data) {
		if (data == null)
			throw new NullPointerException("Null Array");
		nativeSetByteArray(nativePtr, columnIndex, rowIndex, data);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747649/fstmerge_base_6539338996176596073
=======
public void setBinaryByteArray(long columnIndex, long rowIndex, byte[] data){
		if(data == null)
			throw new NullPointerException("Null Array");
		nativeSetByteArray(nativePtr, columnIndex, rowIndex, data);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882747649/fstmerge_var2_1754899304016099277

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59435_fba4b/rev_59435-fba4b/src/main/java/com/tightdb/TableBase.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c9210_9a551/rev_c9210-9a551.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7d88e_a5296/rev_7d88e-a5296.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7b266_d1315/rev_7b266-d1315.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf4b8_c6a8f/rev_bf4b8-c6a8f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9236a_4cbc5/rev_9236a-4cbc5.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_var1_1757184780242046738
		Group group = new Group();
		EmployeeTable employees = new EmployeeTable(group);

		employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_base_5161842143219883001

		EmployeeTable employees = new EmployeeTable();
		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
=======
		
		EmployeeTable employees = new EmployeeTable();
		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_var2_1689288589077033975

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_var1_1757184780242046738
		employees.at(0).phones.get();

		try {
			group.writeToFile("employees.tdb");
		} catch (IOException e) {
			throw new RuntimeException("Couldn't save the data!", e);
		}

		employees.clear();

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_base_5161842143219883001
		// This works:
		PhoneTable tbl = john.phones.get();
		PhoneTable tbl2 = john.phones.get();
		PhoneTable tbl3 = john.phones.get();
		
		
		// and this works:
		john.phones.get();
		john.phones.get();
				
		john.phones.get();
		john.phones.get();

		// Enable below to compare Tightdb performance against a Java ArrayList
		Performance.TestTightdb(250000);
		
//		System.out.println(a);
//		System.out.println(b);
=======
		// This works:
		PhoneTable tbl = john.phones.get();
		tbl.add("test", "123");
		TightDB.print(tbl);
		
		PhoneTable tbl2 = john.phones.get();
		TightDB.print(tbl2);
		
		//john.phones.get().add("home", "222");
		//john.getPhones().add("home2", "333");
				
				
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882800174/fstmerge_var2_1689288589077033975
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9236a_4cbc5/rev_9236a-4cbc5/src/main/java/com/tightdb/example/FailureExample.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_81dc8_800bd/rev_81dc8-800bd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8d29f_2f2fd/rev_8d29f-2f2fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_32b1c_6ec02/rev_32b1c-6ec02.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a12ae_cc01b/rev_a12ae-cc01b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882837147/fstmerge_var1_1881906640628214731
		showLongExample();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882837147/fstmerge_base_4584091230443847836
		showLongExample();

		// Enable below to compare Tightdb performance against a Java ArrayList
		// Performance.TestTightdb(250000);
		// Performance.TestJavaArray(250000);
=======
		//showLongExample();

		// Enable below to compare Tightdb performance against a Java ArrayList
		Performance.TestTightdb(250000);
		// Performance.TestJavaArray(250000);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882837147/fstmerge_var2_5699336361342963158
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a12ae_cc01b/rev_a12ae-cc01b/src/main/java/com/tightdb/example/Example.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3069e_ccc0a/rev_3069e-ccc0a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b33f4_643bc/rev_b33f4-643bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3c850_12536/rev_3c850-12536.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9e23f_6e56d/rev_9e23f-6e56d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a4802_e4cbe/rev_a4802-e4cbe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3e829_84959/rev_3e829-84959.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8fa53_0dfce/rev_8fa53-0dfce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d1f7b_22e75/rev_d1f7b-22e75.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_034ac_16987/rev_034ac-16987.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2109b_0b086/rev_2109b-0b086.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7a04b_2d24c/rev_7a04b-2d24c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e591f_7df81/rev_e591f-7df81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3d1a2_11b1d/rev_3d1a2-11b1d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
	protected void specifyStructure(TableSpec spec) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882972735/fstmerge_var1_324202863801398854
        addLongColumn(spec, "first");
        addStringColumn(spec, "second");
        addLongColumn(spec, "third");
        addLongColumn(spec, "fourth");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882972735/fstmerge_base_963531901648939992
        registerLongColumn(spec, "first");
        registerStringColumn(spec, "second");
        registerLongColumn(spec, "third");
        registerLongColumn(spec, "fourth");
=======
        addLongColumn(spec, "indexInt");
        addStringColumn(spec, "second");
        addLongColumn(spec, "byteInt");
        addLongColumn(spec, "smallInt");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882972735/fstmerge_var2_6974400203323853554
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3d1a2_11b1d/rev_3d1a2-11b1d/src/main/java/com/tightdb/generated/TestTable.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_92168_e13ac/rev_92168-e13ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d12db_2926c/rev_d12db-2926c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
		showLongExample();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992598/fstmerge_var1_5216376725517028294
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992598/fstmerge_base_4610303216091758551

		// Enable below to compare Tightdb performance against a Java ArrayList
		// Performance.TestTightdb(250000);
		// Performance.TestJavaArray(250000);
=======

		// Enable below to compare Tightdb performance against a Java ArrayList
		 Performance.TestTightdb(250000);
		 Performance.TestJavaArray(250000);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992598/fstmerge_var2_3193935625903199658
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d12db_2926c/rev_d12db-2926c/src/main/java/com/tightdb/example/Example.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void showLongExample() {
		Group group = new Group();
		EmployeeTable employees = new EmployeeTable(group);

		/****************************** BASIC OPERATIONS *****************************/

		Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");
		Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true);
		Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234);
		
		TightDB.print("Employees", employees);
		TightDB.print("Johny", johny);

		System.out.println("first record: " + john);
		System.out.println("second record: " + nikolche);
		System.out.println("some column: " + john.firstName);

		/****************************** GETTERS AND SETTERS *****************************/

		// 2 ways to get the value
		System.out.println("name1: " + john.firstName.get());
		System.out.println("name2: " + john.getFirstName());

		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");

		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		Employee is17 = employees.salary.equal(17).findFirst();
		TightDB.print("**************** Salary 17?: ", is17);
		if (is17 == null)
			System.out.println("No - (Correct.))");

		Employee is30000 = employees.salary.equal(30000).findFirst();
		TightDB.print("**************** With Salary 30000?: ", is30000);

		// using explicit OR
		TightDB.print("Search example", employees.firstName.equal("Johnny")
				.or().lastName.equal("Mihajlovski").findFirst());

		// using implicit AND
		TightDB.print("Search example 2", employees.firstName.eq("Johnny").lastName.startsWith("B").findLast());

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992603/fstmerge_var1_333263284411906544
		employees.firstName.eq("John").findLast().salary.set(30000);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992603/fstmerge_base_8339559448102908983
		employees.firstName.is("John").findLast().salary.set(30000);
=======
		TightDB.print("Employees", employees);

		employees.firstName.is("John").findLast().salary.set(30000);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992603/fstmerge_var2_7335781067605379722

		
		/****************************** ITERATION OF ALL RECORDS *****************************/

		// lazy iteration over the table
		for (Employee employee : employees) {
			System.out.println("iterating: " + employee);
		}

		/****************************** AGGREGATION *****************************/

		// aggregation of the salary
		System.out.println("max salary: " + employees.salary.maximum());
		System.out.println("min salary: " + employees.salary.minimum());
		System.out.println("salary sum: " + employees.salary.sum());

		/****************************** COMPLEX QUERY *****************************/

		TightDB.print("Query 1", 
				employees
				.firstName.startsWith("Nik")
				.lastName.contains("vski")
				.or().firstName.eq("John")
				.findAll());

		TightDB.print("Query 2a", 
				employees.firstName.startsWith("Nik")
				.group()
					.lastName.contains("vski")
					.or()
					.firstName.eq("John")
				.endGroup()
				.findAll());
		
		TightDB.print("Query 2b", 
				employees.where()
				.group()
					.lastName.contains("vski")
					.or()
					.firstName.eq("John")
				.endGroup()
				.firstName.startsWith("Nik")
				.findAll());

		// lazy iteration over query
		EmployeeQuery employeesOnN = employees.firstName.startsWith("J");
		Employee employee;
		while ((employee = employeesOnN.findNext()) != null) {
			TightDB.print("Employee starting with J: ", employee);
		}
		/****************************** MANIPULATION OF ALL RECORDS *****************************/

		System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

		employees.salary.setAll(100000);
		employees.firstName.contains("o").findAll().firstName.setAll("Bill");

		TightDB.print(employees);

		/****************************** COLUMN RETRIEVAL *****************************/

		System.out.print("- Columns: ");
		for (AbstractColumn<?, ?, ?, ?> column : john.columns()) {
			System.out.print(column.getName() + "=" + column.getReadableValue() + " ");
		}
		System.out.println();

		/****************************** SUBTABLES *****************************/

		PhoneTable subtable = john.phones.get();
		subtable.add("mobile", "111");

		john.getPhones().add("mobile", "111");
		john.getPhones().add("home", "222");

		johny.getPhones().add("mobile", "333");

		nikolche.getPhones().add("mobile", "444");
		nikolche.getPhones().add("work", "555");

		for (PhoneTable phoneTable : employees.phones.getAll()) {
			TightDB.print(phoneTable);
		}

		// convenience methods on the column:

		for (Phone phone : nikolche.phones) {
			TightDB.print("- phone", phone);
		}

		TightDB.print("- first phone", nikolche.phones.first());

		/*************************** CURSOR NAVIGATION ***************************/

		Employee p1 = employees.at(0).next(); 		// 2nd row
		Employee p2 = employees.last().previous(); 	// 2nd-last row
		Employee p3 = employees.first().after(2); 	// 3rd row
		employees.last().before(2); 				// 3rd-last row

		/***************************** SAVE TO FILE ******************************/

		try {
			group.writeToFile("employees.tdb");
		} catch (IOException e) {
			throw new RuntimeException("Couldn't save the data!", e);
		}

		/****************************** DATA REMOVAL *****************************/

		employees.remove(0);

		TightDB.print(employees);

		employees.clear();
		
		employees.firstName.eq("ff").findAll().salary.minimum();
		
		TightDB.print(employees);

		/**************************** LOAD FROM FILE *****************************/

		Group group2 = new Group("employees.tdb");
		EmployeeTable employees2 = new EmployeeTable(group2);
		TightDB.print(employees2);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d12db_2926c/rev_d12db-2926c/src/main/java/com/tightdb/example/Example.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992621/fstmerge_var1_8892127813969500889
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992621/fstmerge_base_4318722552214190352
public static void main(String[] args) {
		Group group = new Group();
		EmployeeTable employees = new EmployeeTable(group);

		employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");

		employees.at(0).phones.get();

		try {
			group.writeToFile("employees.tdb");
		} catch (IOException e) {
			throw new RuntimeException("Couldn't save the data!", e);
		}

		employees.clear();

	}
=======
public static void main(String[] args) {
		Group group = new Group();
		EmployeeTable employees = new EmployeeTable(group);
		
		employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra");

		employees.at(0).phones.get();

		try {
			group.writeToFile("employees.tdb");
		} catch (IOException e) {
			throw new RuntimeException("Couldn't save the data!", e);
		}
				
		employees.clear();

	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415882992621/fstmerge_var2_6751668852076451857

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d12db_2926c/rev_d12db-2926c/src/main/java/com/tightdb/example/FailureExample.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_73ab1_d2ba5/rev_73ab1-d2ba5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f64a8_4dffd/rev_f64a8-4dffd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7359f_0787f/rev_7359f-0787f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883023585/fstmerge_var1_1093513332008951029
private void defineTableStructure() {
		if (table != null && table.getTableSpec().getColumnCount() <= 0) {
			final TableSpec spec = new TableSpec();
			specifyStructure(spec);
			table.updateFromSpec(spec);
		}
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883023585/fstmerge_base_4792454000835088916
private void defineTableStructure() {
		if (table != null) {
			final TableSpec spec = new TableSpec();
			specifyStructure(spec);
			table.updateFromSpec(spec);
		}
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883023585/fstmerge_var2_8389850150555067228

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7359f_0787f/rev_7359f-0787f/src/main/java/com/tightdb/lib/AbstractTable.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_10ff4_b18bb/rev_10ff4-b18bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bcc99_63b45/rev_bcc99-63b45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cf120_60d81/rev_cf120-60d81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e8163_64837/rev_e8163-64837.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6dddd_f8ade/rev_6dddd-f8ade.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_88ed4_c58c7/rev_88ed4-c58c7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f2595_25cb7/rev_f2595-25cb7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02d72_36a57/rev_02d72-36a57.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_98134_c7c86/rev_98134-c7c86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c378f_18a15/rev_c378f-18a15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1511a_07bcc/rev_1511a-07bcc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9a09f_c4c85/rev_9a09f-c4c85.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_160b6_6c5dc/rev_160b6-6c5dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_af2bd_ddbb5/rev_af2bd-ddbb5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9b78b_5c980/rev_9b78b-5c980.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_de294_67114/rev_de294-67114.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_df625_c4d25/rev_df625-c4d25.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_44101_acfd7/rev_44101-acfd7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ac428_30b10/rev_ac428-30b10.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5f802_585db/rev_5f802-585db.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b27f5_9c064/rev_b27f5-9c064.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_31965_0aa28/rev_31965-0aa28.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_afec6_7ef53/rev_afec6-7ef53.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e322_8cac9/rev_2e322-8cac9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9f025_9b96f/rev_9f025-9b96f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f4b15_a45a9/rev_f4b15-a45a9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_329e7_109d3/rev_329e7-109d3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_aeff5_c7ddc/rev_aeff5-c7ddc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f53a0_bdc0e/rev_f53a0-bdc0e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ad2c9_c760f/rev_ad2c9-c760f.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414435/fstmerge_var1_2231834412177659731
@Test(enabled = false)
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414435/fstmerge_base_2714736526685103359
@Test
=======
@Test(enabled=false)
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414435/fstmerge_var2_7942651714784828344
	public void shouldAggregateColumnValue() {
		assertEquals(EmployeesFixture.EMPLOYEES[0].salary,
				employeesView.salary.minimum());
		
		assertEquals(EmployeesFixture.EMPLOYEES[1].salary,
				employeesView.salary.maximum());
		
		long sum = EmployeesFixture.EMPLOYEES[0].salary
				+ EmployeesFixture.EMPLOYEES[1].salary
				+ EmployeesFixture.EMPLOYEES[2].salary;
		assertEquals(sum, employeesView.salary.sum());
		
		assertEquals(sum / 3.0, employees.salary.average(), 0.00001);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ad2c9_c760f/rev_ad2c9-c760f/src/test/java/com/tightdb/lib/ViewColumnsTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414817/fstmerge_var1_4290145308131495782
@Test(enabled = false)
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414817/fstmerge_base_3834692309341680340
@Test
=======
@Test(enabled=false)
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883414817/fstmerge_var2_8426507490539397128
	public void shouldAggregateColumnValue() {
		assertEquals(EmployeesFixture.EMPLOYEES[0].salary,
				employees.salary.minimum());
		
		assertEquals(EmployeesFixture.EMPLOYEES[1].salary,
				employees.salary.maximum());
		
		long sum = EmployeesFixture.EMPLOYEES[0].salary
				+ EmployeesFixture.EMPLOYEES[1].salary
				+ EmployeesFixture.EMPLOYEES[2].salary;
		assertEquals(sum, employees.salary.sum());
		
		assertEquals(sum / 3.0, employees.salary.average(), 0.00001);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ad2c9_c760f/rev_ad2c9-c760f/src/test/java/com/tightdb/lib/TableColumnsTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76d7a_f1861/rev_76d7a-f1861.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_49ab8_dfaee/rev_49ab8-dfaee.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5205c_0f16a/rev_5205c-0f16a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b17ad_9f4a4/rev_b17ad-9f4a4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9f4a4_b17ad/rev_9f4a4-b17ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_51d9e_50e06/rev_51d9e-50e06.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_12b9b_6b1c6/rev_12b9b-6b1c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d728e_49a37/rev_d728e-49a37.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ad677_e8fa7/rev_ad677-e8fa7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_19bb8_79c0f/rev_19bb8-79c0f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4d3f0_221d1/rev_4d3f0-221d1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final String BINARIES_PATH = "lib" + PATH_SEP + "../lib"
			+ PATH_SEP + "tightdb-example/lib"; ##FSTMerge## private static final String BINARIES_PATH = "lib" + PATH_SEP
			+ "tightdb-example/lib"; ##FSTMerge## private static final String BINARIES_PATH = "lib" + PATH_SEP
			+ "examples/lib";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4d3f0_221d1/rev_4d3f0-221d1/src/main/java/com/tightdb/lib/TightDB.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fad0f_74b15/rev_fad0f-74b15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0fced_974ee/rev_0fced-974ee.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cc604_ca247/rev_cc604-ca247.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d4c41_a31fb/rev_d4c41-a31fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d4c41_f1d5e/rev_d4c41-f1d5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0a4fd_e6b82/rev_0a4fd-e6b82.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883635951/fstmerge_var1_8474325794570000579
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883635951/fstmerge_base_7175402243394486901
private void processAnnotatedElements(Set<? extends Element> elements)
			throws IOException {
		logger.info("Processing " + elements.size() + " elements...");

		URI uri = filer.getResource(StandardLocation.SOURCE_OUTPUT, "", "foo")
				.toUri();
		if (uri.toString().equals("foo")) {
			throw new RuntimeException(
					"The path of the Java source and generated files must be configured as source output! (see -s option of javac)");
		}

		List<File> sourcesPath = new LinkedList<File>();

		// FIXME: Workaround for OS X 
		try {
			if (uri.getScheme() == null) uri = new URI("file", uri.getSchemeSpecificPart(), uri.getFragment());
		}
		catch (URISyntaxException e) {
			logger.error("Failed to add 'file:' schema to schema-less URI '"+uri+"'");
		}

		File file = new File(uri);
		File outputFolder = file.getParentFile();
		File generatedSourcesPath = outputFolder;

		String[] sourceFolders = getSourceFolders();
		while (generatedSourcesPath != null) {
			for (String sourceFolder : sourceFolders) {
				File potentialPath = new File(generatedSourcesPath, sourceFolder);
				if (potentialPath.exists()) {
					sourcesPath.add(potentialPath);
					logger.info("Configured source folder: " + potentialPath);
				}
			}
			generatedSourcesPath = generatedSourcesPath.getParentFile();
		}

		// add the sources output folder as the last option to search sources
		sourcesPath.add(outputFolder);
		logger.info("Configured destination folder: " + outputFolder);

		prepareTables(elements);

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				setupModelInfo(model);
			}
		}

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				processModel(sourcesPath, model);
			}
		}
	}
=======
private void processAnnotatedElements(Set<? extends Element> elements)
			throws IOException {
		logger.info("Processing " + elements.size() + " elements...");

		URI uri = filer.getResource(StandardLocation.SOURCE_OUTPUT, "", "foo")
				.toUri();
		if (uri.toString().equals("foo")) {
			throw new RuntimeException(
					"The path of the Java source and generated files must be configured as source output! (see -s option of javac)");
		}

		List<File> sourcesPath = new LinkedList<File>();

		// FIXME: Workaround for OS X - resolve relative URIs against current working directory
		uri = new File(".").getAbsoluteFile().toURI().resolve(uri);

		File file = new File(uri);
		File outputFolder = file.getParentFile();
		File generatedSourcesPath = outputFolder;

		String[] sourceFolders = getSourceFolders();
		while (generatedSourcesPath != null) {
			for (String sourceFolder : sourceFolders) {
				File potentialPath = new File(generatedSourcesPath, sourceFolder);
				if (potentialPath.exists()) {
					sourcesPath.add(potentialPath);
					logger.info("Configured source folder: " + potentialPath);
				}
			}
			generatedSourcesPath = generatedSourcesPath.getParentFile();
		}

		// add the sources output folder as the last option to search sources
		sourcesPath.add(outputFolder);
		logger.info("Configured destination folder: " + outputFolder);

		prepareTables(elements);

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				setupModelInfo(model);
			}
		}

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				processModel(sourcesPath, model);
			}
		}
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883635951/fstmerge_var2_5237079490808884401

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0a4fd_e6b82/rev_0a4fd-e6b82/src/main/java/com/tightdb/generator/CodeGenProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c8471_40c9a/rev_c8471-40c9a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f7a7a_4f215/rev_f7a7a-4f215.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cd410_32230/rev_cd410-32230.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private static final String BINARIES_PATH = "lib" + PATH_SEP + "../lib"; ##FSTMerge## private static final String BINARIES_PATH = "lib:tightdb-example/lib"; ##FSTMerge## private static final String BINARIES_PATH = "lib" + PATH_SEP
			+ "tightdb-example/lib";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cd410_32230/rev_cd410-32230/src/main/java/com/tightdb/lib/TightDB.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void addNativeLibraryPath(String path) {
		try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883675536/fstmerge_var1_5747361382947624264
			String libraryPath = System.getProperty(JAVA_LIBRARY_PATH) + PATH_SEP + path + PATH_SEP;
			System.setProperty(JAVA_LIBRARY_PATH, libraryPath);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883675536/fstmerge_base_5176843404738701205
			//System.out.println("JAVA_LIBRARY_PATH=" + System.getProperty(JAVA_LIBRARY_PATH));
			System.setProperty(JAVA_LIBRARY_PATH, System.getProperty(JAVA_LIBRARY_PATH) + System.getProperty("path.separator") + path + System.getProperty("path.separator"));
=======
			//System.out.println("JAVA_LIBRARY_PATH=" + System.getProperty(JAVA_LIBRARY_PATH));
			String libraryPath = System.getProperty(JAVA_LIBRARY_PATH) + PATH_SEP + path + PATH_SEP;
			System.setProperty(JAVA_LIBRARY_PATH, libraryPath);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883675536/fstmerge_var2_8400541324329969354
		} catch (Exception e) {
			throw new RuntimeException("Cannot set the library path!", e);
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cd410_32230/rev_cd410-32230/src/main/java/com/tightdb/lib/TightDB.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb460_3b38e/rev_cb460-3b38e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8fd92_e195c/rev_8fd92-e195c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_440fd_17747/rev_440fd-17747.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_11e95_15346/rev_11e95-15346.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fbe70_aac00/rev_fbe70-aac00.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d9773_3e835/rev_d9773-3e835.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cecc2_884d6/rev_cecc2-884d6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb35f_a98a4/rev_cb35f-a98a4.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	public void mustWriteCommit() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_var1_7810099550983382229
		writeOneTransaction();
		
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_base_6128410426455832075
		// Write to DB
		{	
	        WriteTransaction t = db.beginWrite();
	        EmployeeTable employees = new EmployeeTable(t);
	        employees.add("John", "Doe", 10000, true);
			assertEquals(1, employees.size());
	        t.commit();
			// assertEquals(1, employees.size()); must set exception as employees is invalid now.
		}
		// Read from DB
=======
		// Write to DB
		{
			WriteTransaction t = db.beginWrite();
			EmployeeTable employees = new EmployeeTable(t);
			employees.add("John", "Doe", 10000, true);
			assertEquals(1, employees.size());
			t.commit();
			// assertEquals(1, employees.size()); must set exception as
			// employees is invalid now.
		}
		// Read from DB
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_var2_998741734682179455
		checkRead(1);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_var1_7810099550983382229
		
		clear();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_base_6128410426455832075
    	
=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780461/fstmerge_var2_998741734682179455
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb35f_a98a4/rev_cb35f-a98a4/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780466/fstmerge_var1_6700497395377219101
@Test(enabled=true)
	public void mustFailOnWriteInReadTransactions() {
		writeOneTransaction();

 		ReadTransaction t = db.beginRead(); 
 		long cnt = t.getTableCount();
 		for (int i=0; i< cnt; ++i)
 			System.out.println(i  + ":" + t.getTableName(i));
 		TableBase table = t.getTable("com.tightdb.EmployeeTable");

 		ByteBuffer buf = ByteBuffer.allocate(1);
		try { table.insertBoolean(0, 0, false); assert(false);} catch (IllegalStateException e) {}		
		try { table.addEmptyRow(); assert(false);} catch (IllegalStateException e) {}
		try { table.addEmptyRows(1); assert(false);} catch (IllegalStateException e) {}
		try { table.addLong(0,0);	assert(false);} catch (IllegalStateException e) {}
		try { table.clear();	assert(false);} catch (IllegalStateException e) {}
		try { table.clearSubTable(0,0);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertBinary(0,0,new byte[0]);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertBinary(0,0,buf);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertBoolean(0,0,true);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertDate(0,0,new Date(0));	assert(false);} catch (IllegalStateException e) {}
		try { table.insertDone();	assert(false);} catch (IllegalStateException e) {}
		try { table.insertLong(0,0,0);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertMixed(0,0,null);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertString(0,0,"");	assert(false);} catch (IllegalStateException e) {}
		try { table.insertSubTable(0,0);	assert(false);} catch (IllegalStateException e) {}
		try { table.optimize();	assert(false);} catch (IllegalStateException e) {}
		try { table.remove(0);	assert(false);} catch (IllegalStateException e) {}
		try { table.removeLast();	assert(false);} catch (IllegalStateException e) {}
		try { table.setBinaryByteArray(0,0,new byte[0]);	assert(false);} catch (IllegalStateException e) {}
		try { table.setBinaryByteBuffer(0,0,buf);	assert(false);} catch (IllegalStateException e) {}
		try { table.setBoolean(0,0,false);	assert(false);} catch (IllegalStateException e) {}
		try { table.setDate(0,0,new Date(0));	assert(false);} catch (IllegalStateException e) {}
		try { table.setIndex(0);	assert(false);} catch (IllegalStateException e) {}
		try { table.setLong(0,0,0);	assert(false);} catch (IllegalStateException e) {}
		try { table.setMixed(0,0,null);	assert(false);} catch (IllegalStateException e) {}
		try { table.setString(0,0,"");	assert(false);} catch (IllegalStateException e) {}
		try { table.updateFromSpec(null);	assert(false);} catch (IllegalStateException e) {}
//		try { table.();	assert(false);} catch (IllegalStateException e) {}
		
		t.endRead();
		clear();
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780466/fstmerge_base_3370928458102308913
=======
@Test
	public void mustFailOnWriteInReadTransactions() {
		ReadTransaction t = db.beginRead();
		TableBase table = t.getTable("Tbl");

		// all the methods that will be tested are specified here:
		Object[][] cases = {
				{ "insertLong", 0, 0, 123 },
				{ "insertBoolean", 0, 0, true },
				// etc.
		};

		Method[] methods = table.getClass().getMethods();
		for (Method method : methods) {
			String name = method.getName();
			for (Object[] c : cases) {
				if (c[0].equals(name)) {
					// we have a match, call the method
					Object[] args = Arrays.copyOfRange(c, 1, c.length);
					
					try {
						method.invoke(table, args);
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}

		t.endRead();
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780466/fstmerge_var2_3619279648130117045

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb35f_a98a4/rev_cb35f-a98a4/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	public void mustWriteCommit2() {
		try {
			// Write to DB
			WriteTransaction wt = db.beginWrite();
			try {
				EmployeeTable employees = new EmployeeTable(wt);
				employees.clear();
				employees.add("John", "Doe", 10000, true);
				assertEquals(1, employees.size());
				wt.commit();
				// assertEquals(1, employees.size()); must set exception as
				// employees is invalid now.
			} catch (Throwable e) {
				wt.rollback();
				throw new RuntimeException(e);
			}

			// Read from DB
			ReadTransaction rt = db.beginRead();
			try {
				EmployeeTable employees = new EmployeeTable(rt);
				assertEquals(1, employees.size());
				rt.endRead();
			} catch (Throwable e) {
				rt.endRead();
				throw new RuntimeException(e);
			}

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780471/fstmerge_var1_8536203041252157231
	    }
	    finally {
			clear();
	    }	    
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780471/fstmerge_base_616115294139607221
	    }
	    finally {
	        db.close();
	    }	    
=======
		} finally {
			db.close();
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883780471/fstmerge_var2_6298420849624239998
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb35f_a98a4/rev_cb35f-a98a4/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_763d4_4c6d8/rev_763d4-4c6d8.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	public void mustFailOnWriteInReadTransactions() {
		writeOneTransaction(1);

 		ReadTransaction t = db.beginRead(); 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883794654/fstmerge_var1_4951517675602063905
 		long cnt = t.getTableCount();
 		for (int i=0; i< cnt; ++i)
 			System.out.println(i  + ":" + t.getTableName(i));
 		TableBase table = t.getTable("EmployeeTable");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883794654/fstmerge_base_1962928786575910888
 		long cnt = t.getTableCount();
 		for (int i=0; i< cnt; ++i)
 			System.out.println(i  + ":" + t.getTableName(i));
 		TableBase table = t.getTable("com.tightdb.EmployeeTable");
=======
 		TableBase table = t.getTable("EmployeeTable");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883794654/fstmerge_var2_7156906608666352171

 		ByteBuffer buf = ByteBuffer.allocate(1);
		try { table.insertBoolean(0, 0, false); 	assert(false);} catch (IllegalStateException e) {}		
		try { table.addEmptyRow(); 					assert(false);} catch (IllegalStateException e) {}
		try { table.addEmptyRows(1); 				assert(false);} catch (IllegalStateException e) {}
		try { table.addLong(0,0);					assert(false);} catch (IllegalStateException e) {}
		try { table.clear();						assert(false);} catch (IllegalStateException e) {}
		try { table.clearSubTable(0,0);				assert(false);} catch (IllegalStateException e) {}
		try { table.insertBinary(0,0,new byte[0]);	assert(false);} catch (IllegalStateException e) {}
		try { table.insertBinary(0,0,buf);			assert(false);} catch (IllegalStateException e) {}
		try { table.insertBoolean(0,0,true);		assert(false);} catch (IllegalStateException e) {}
		try { table.insertDate(0,0,new Date(0));	assert(false);} catch (IllegalStateException e) {}
		try { table.insertDone();					assert(false);} catch (IllegalStateException e) {}
		try { table.insertLong(0,0,0);				assert(false);} catch (IllegalStateException e) {}
		try { table.insertMixed(0,0,null);			assert(false);} catch (IllegalStateException e) {}
		try { table.insertString(0,0,"");			assert(false);} catch (IllegalStateException e) {}
		try { table.insertSubTable(0,0);			assert(false);} catch (IllegalStateException e) {}
		try { table.optimize();						assert(false);} catch (IllegalStateException e) {}
		try { table.remove(0);						assert(false);} catch (IllegalStateException e) {}
		try { table.removeLast();					assert(false);} catch (IllegalStateException e) {}
		try { table.setBinaryByteArray(0,0,null);	assert(false);} catch (IllegalStateException e) {}
		try { table.setBinaryByteBuffer(0,0,null);	assert(false);} catch (IllegalStateException e) {}
		try { table.setBoolean(0,0,false);			assert(false);} catch (IllegalStateException e) {}
		try { table.setDate(0,0,new Date(0));		assert(false);} catch (IllegalStateException e) {}
		try { table.setIndex(0);					assert(false);} catch (IllegalStateException e) {}
		try { table.setLong(0,0,0);					assert(false);} catch (IllegalStateException e) {}
		try { table.setMixed(0,0,null);				assert(false);} catch (IllegalStateException e) {}
		try { table.setString(0,0,"");				assert(false);} catch (IllegalStateException e) {}
		try { table.updateFromSpec(null);			assert(false);} catch (IllegalStateException e) {}
		
		TableQuery q = table.where();
		try { q.remove();		assert(false);} catch (IllegalStateException e) {}
		try { q.remove(0,0);	assert(false);} catch (IllegalStateException e) {}

		TableViewBase v = q.findAll();
		try { v.addLong(0, 0);						assert(false);} catch (IllegalStateException e) {}
		try { v.clear();							assert(false);} catch (IllegalStateException e) {}
		try { v.clearSubTable(0, 0);				assert(false);} catch (IllegalStateException e) {}
		try { v.remove(0);							assert(false);} catch (IllegalStateException e) {}
		try { v.removeLast();						assert(false);} catch (IllegalStateException e) {}
		try { v.setBinaryByteArray(0, 0, null);		assert(false);} catch (IllegalStateException e) {}
		try { v.setBinaryByteBuffer(0, 0, null);	assert(false);} catch (IllegalStateException e) {}
		try { v.setBoolean(0, 0, false);			assert(false);} catch (IllegalStateException e) {}
		try { v.setDate(0, 0, new Date());			assert(false);} catch (IllegalStateException e) {}
		try { v.setLong(0, 0, 0);					assert(false);} catch (IllegalStateException e) {}
		try { v.setString(0,0,"");					assert(false);} catch (IllegalStateException e) {}
		try { v.setMixed(0, 0, null);				assert(false);} catch (IllegalStateException e) {}
//		try { v.;	assert(false);} catch (IllegalStateException e) {}

		t.endRead();
		clear();
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_763d4_4c6d8/rev_763d4-4c6d8/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test(enabled = true)
	public void shouldCreateTablesInGroup() {
		Group group = new Group();

		TestEmployeeTable employees = new TestEmployeeTable(group);
		employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
				new Date(), "extra");
		employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
				new Date(), true);
		employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
				5 }, new Date(), 1234);

		byte[] data = group.writeToMem();
		// data is currently disposed after group.close() !
		
		// check table info retrieval
		assertEquals(1, group.getTableCount());
		assertEquals(TestEmployeeTable.class.getCanonicalName(),
				group.getTableName(0));
		assertTrue(group.hasTable(TestEmployeeTable.class.getCanonicalName()));
		assertFalse(group.hasTable("xxxxxx"));

		// check table retrieval
		assertEquals(employees.size(),
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883795298/fstmerge_var1_5565752481126412620
				group.getTable(TestEmployeeTable.class.getSimpleName()).size());

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883795298/fstmerge_base_6501180791248984008
				group.getTable(TestEmployeeTable.class.getCanonicalName()).size());

=======
				group.getTable(TestEmployeeTable.class.getCanonicalName()).size());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883795298/fstmerge_var2_4224031252434187621
		employees.clear();

		// Make new group based on same data.
		Group group2 = new Group(data);
		TestEmployeeTable employees2 = new TestEmployeeTable(group2);
		assertEquals(3, employees2.size());
		assertEquals(NAME0, employees2.at(0).getFirstName());
		assertEquals(NAME1, employees2.at(1).getFirstName());
		assertEquals(NAME2, employees2.at(2).getFirstName());
		employees2.clear();
		group2.close();

		// Make new empty group
		Group group3 = new Group();
		TestEmployeeTable employees3 = new TestEmployeeTable(group3);
		assertEquals(0, employees3.size());
		employees3.clear();
		group3.close();

		group.close();
		System.out.println("Done");
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_763d4_4c6d8/rev_763d4-4c6d8/tightdb-java-test/src/test/java/com/tightdb/lib/GroupTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2c70a_e4a9e/rev_2c70a-e4a9e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_58f20_a338f/rev_58f20-a338f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 13; ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 14;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_58f20_a338f/rev_58f20-a338f/tightdb-java-core/src/main/java/com/tightdb/util.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_38bc0_8cd50/rev_38bc0-8cd50.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_61b8a_47796/rev_61b8a-47796.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a3227_0d49a/rev_a3227-0d49a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_236b7_811f7/rev_236b7-811f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0cbb9_24a31/rev_0cbb9-24a31.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bfaf6_386ae/rev_bfaf6-386ae.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905944/fstmerge_var1_3522435831451093824
private ColumnType(int nativeValue)
    {
        this.nativeValue = nativeValue;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905944/fstmerge_base_7523919308547581722
private ColumnType(int index){
		this.index = index;
	}
=======
private ColumnType(int index) {
		this.index = index;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905944/fstmerge_var2_6164498433173019335

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bfaf6_386ae/rev_bfaf6-386ae/tightdb-java-core/src/main/java/com/tightdb/ColumnType.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905948/fstmerge_var1_1980406887307166424
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905948/fstmerge_base_5516354958662862939
public static ColumnType getColumnTypeForIndex(int index){
		ColumnType[] columnTypes = values();
		for(int i=0; i<columnTypes.length; i++){
			if(columnTypes[i].index == index)
				return columnTypes[i];
		}
		return null;
	}
=======
public static ColumnType getColumnTypeForIndex(int index) {
		ColumnType[] columnTypes = values();
		for (int i=0; i<columnTypes.length; i++) {
			if (columnTypes[i].index == index)
				return columnTypes[i];
		}
		return null;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415883905948/fstmerge_var2_5927510881864371140

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bfaf6_386ae/rev_bfaf6-386ae/tightdb-java-core/src/main/java/com/tightdb/ColumnType.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2b98_33108/rev_e2b98-33108.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2d578_c0c1c/rev_2d578-c0c1c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c743d_8db4b/rev_c743d-8db4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_84c12_35192/rev_84c12-35192.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bedd3_a516b/rev_bedd3-a516b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bedd3_6892d/rev_bedd3-6892d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_00579_f680e/rev_00579-f680e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_990bc_f1f2b/rev_990bc-f1f2b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0e3df_58e4b/rev_0e3df-58e4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_12d08_307e4/rev_12d08-307e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c757c_e59e4/rev_c757c-e59e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e59e4_8a714/rev_e59e4-8a714.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_477bd_7b000/rev_477bd-7b000.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e39db_7cc31/rev_e39db-7cc31.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c3269_e3c13/rev_c3269-e3c13.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_20bac_3bba4/rev_20bac-3bba4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b2b83_40ffc/rev_b2b83-40ffc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c82a9_52d26/rev_c82a9-52d26.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2571a_7eb8a/rev_2571a-7eb8a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c320e_46797/rev_c320e-46797.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cf686_2571a/rev_cf686-2571a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1ede8_2571a/rev_1ede8-2571a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6c6aa_03ea9/rev_6c6aa-03ea9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ba7f2_6c6aa/rev_ba7f2-6c6aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf744_517f2/rev_bf744-517f2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_74bcf_bf744/rev_74bcf-bf744.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_887fd_89665/rev_887fd-89665.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_123c6_f1e30/rev_123c6-f1e30.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
	public void set(Subtable value) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884340489/fstmerge_var1_1336971175336778466
		if (value != null) {
			// FIXME: maybe implement this is future? (or replace it with set( Object[][] ) method?
			throw new UnsupportedOperationException();
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884340489/fstmerge_base_1378993835934248322
		throw new UnsupportedOperationException(); // FIXME: maybe implement
													// this is future?
=======
		throw new UnsupportedOperationException("Set() for Subtables is not implemented yet"); 
		// FIXME: maybe implement this is future?
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884340489/fstmerge_var2_4348952709603740449
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_123c6_f1e30/rev_123c6-f1e30/tightdb-java-core/src/main/java/com/tightdb/typed/TableCursorColumn.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b1954_ba9d2/rev_b1954-ba9d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b1954_05333/rev_b1954-05333.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c320e_b1954/rev_c320e-b1954.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ce1b4_71a96/rev_ce1b4-71a96.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dae2e_13fdc/rev_dae2e-13fdc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fbeaa_dae2e/rev_fbeaa-dae2e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a7551_10c7f/rev_a7551-10c7f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_08666_a08dc/rev_08666-a08dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d01b5_08666/rev_d01b5-08666.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ed0b4_51706/rev_ed0b4-51706.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cd35b_81436/rev_cd35b-81436.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4ce72_0cf15/rev_4ce72-0cf15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a1e16_f22c3/rev_a1e16-f22c3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_21630_6594a/rev_21630-6594a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a4178_5dc36/rev_a4178-5dc36.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9602d_e65b7/rev_9602d-e65b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_951c4_0ec71/rev_951c4-0ec71.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_56876_ca761/rev_56876-ca761.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6c76e_17c65/rev_6c76e-17c65.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3dc8c_6c76e/rev_3dc8c-6c76e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@SuppressWarnings("unused")
    public static void showLongExample() {
        Group group = new Group();
        EmployeeTable employees = new EmployeeTable(group);

        /****************************** BASIC OPERATIONS *****************************/

        Employee john = employees.add("John", "Doe", 10000, true, new byte[] { 1, 2, 3 }, new Date(), "extra", null);
        Employee johny = employees.add("Johny", "Goe", 20000, true, new byte[] { 1, 2, 3 }, new Date(), true, null);
        Employee nikolche = employees.insert(1, "Nikolche", "Mihajlovski", 30000, false, new byte[] { 4, 5 }, new Date(), 1234, null);

        TightDB.print("Employees", employees);
        TightDB.print("Johny", johny);

        System.out.println("first record: " + john);
        System.out.println("second record: " + nikolche);
        System.out.println("some column: " + john.firstName);

        /****************************** GETTERS AND SETTERS *****************************/

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_var1_4174052373046670198
		// 2 ways to set the value
		employees.get(2).lastName.set("NewName");
		employees.get(2).setLastName("NewName");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_base_6279285021864771183
		// 2 ways to set the value
		employees.at(2).lastName.set("NewName");
		employees.at(2).setLastName("NewName");
=======
        // 2 ways to get the value
        System.out.println("name1: " + john.firstName.get());
        System.out.println("name2: " + john.getFirstName());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_var2_6468342988042281564

        // 2 ways to set the value
        employees.at(2).lastName.set("NewName");
        employees.at(2).setLastName("NewName");

        /****************************** MANIPULATION OF ALL RECORDS *****************************/

        Employee is17 = employees.salary.equal(17).findFirst();
        TightDB.print("**************** Salary 17?: ", is17);
        if (is17 == null)
            System.out.println("No - (Correct.))");

        Employee is30000 = employees.salary.equal(30000).findFirst();
        TightDB.print("**************** With Salary 30000?: ", is30000);

        // using explicit OR
        TightDB.print("Search example", employees.firstName.equal("Johnny")
                .or().lastName.equal("Mihajlovski").findFirst());

        // using implicit AND
        TightDB.print("Search example 2", employees.firstName.eq("Johnny").lastName.startsWith("B").findLast());

        employees.firstName.eq("John").findLast().salary.set(30000);

        /****************************** ITERATION OF ALL RECORDS *****************************/

        // lazy iteration over the table
        for (Employee employee : employees) {
            System.out.println("iterating: " + employee);
        }

        /****************************** AGGREGATION *****************************/

        // aggregation of the salary
        System.out.println("max salary: " + employees.salary.maximum());
        System.out.println("min salary: " + employees.salary.minimum());
        System.out.println("salary sum: " + employees.salary.sum());

        /****************************** COMPLEX QUERY *****************************/

        TightDB.print("Query 1",
                employees
                .firstName.startsWith("Nik")
                .lastName.contains("vski")
                .or().firstName.eq("John")
                .findAll());

        TightDB.print("Query 2a",
                employees.firstName.startsWith("Nik")
                .group()
                    .lastName.contains("vski")
                    .or()
                    .firstName.eq("John")
                .endGroup()
                .findAll());

        TightDB.print("Query 2b",
                employees.where()
                .group()
                    .lastName.contains("vski")
                    .or()
                    .firstName.eq("John")
                .endGroup()
                .firstName.startsWith("Nik")
                .findAll());

        // lazy iteration over query
        EmployeeQuery employeesOnN = employees.firstName.startsWith("J");
        Employee employee;
        while ((employee = employeesOnN.findNext()) != null) {
            TightDB.print("Employee starting with J: ", employee);
        }
        /****************************** MANIPULATION OF ALL RECORDS *****************************/

        System.out.println("- First names: " + Arrays.toString(employees.firstName.getAll()));

        employees.salary.setAll(100000);
        employees.firstName.contains("o").findAll().firstName.setAll("Bill");

        TightDB.print(employees);

        /****************************** COLUMN RETRIEVAL *****************************/

        System.out.print("- Columns: ");
        for (AbstractColumn<?, ?, ?, ?> column : john.columns()) {
            System.out.print(column.getName() + "=" + column.getReadableValue() + " ");
        }
        System.out.println();

        /****************************** SUBTABLES *****************************/

        PhoneTable subtable = john.phones.get();
        subtable.add("mobile", "111");

        john.getPhones().add("mobile", "111");
        john.getPhones().add("home", "222");

        johny.getPhones().add("mobile", "333");

        nikolche.getPhones().add("mobile", "444");
        nikolche.getPhones().add("work", "555");

        for (PhoneTable phoneTable : employees.phones.getAll()) {
            TightDB.print(phoneTable);
        }

        // convenience methods on the column:

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_var1_4174052373046670198
		Employee p1 = employees.get(0).next(); 		// 2nd row
		Employee p2 = employees.last().previous(); 	// 2nd-last row
		Employee p3 = employees.first().after(2); 	// 3rd row
		employees.last().before(2); 				// 3rd-last row
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_base_6279285021864771183
		Employee p1 = employees.at(0).next(); 		// 2nd row
		Employee p2 = employees.last().previous(); 	// 2nd-last row
		Employee p3 = employees.first().after(2); 	// 3rd row
		employees.last().before(2); 				// 3rd-last row
=======
        for (Phone phone : nikolche.phones) {
            TightDB.print("- phone", phone);
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705806/fstmerge_var2_6468342988042281564

        TightDB.print("- first phone", nikolche.phones.first());

        /*************************** CURSOR NAVIGATION ***************************/

        Employee p1 = employees.at(0).next();       // 2nd row
        Employee p2 = employees.last().previous();  // 2nd-last row
        Employee p3 = employees.first().after(2);   // 3rd row
        employees.last().before(2);                 // 3rd-last row

        /***************************** SAVE TO FILE ******************************/

        try {
            group.writeToFile("employees.tightdb");
        } catch (IOException e) {
            throw new RuntimeException("Couldn't save the data!", e);
        }

        /****************************** DATA REMOVAL *****************************/

        employees.remove(0);

        TightDB.print(employees);

        employees.clear();

        employees.firstName.eq("ff").findAll().salary.minimum();

        TightDB.print(employees);

        /**************************** LOAD FROM FILE *****************************/

        Group group2 = new Group("employees.tightdb");
        EmployeeTable employees2 = new EmployeeTable(group2);
        TightDB.print(employees2);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/examples/intro-example/src/com/tightdb/examples/showcase/Showcase.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
        System.out.println("\nThis is just a basic sanity check to see if TightDB was compiled correctly.");
        System.out.println("It is by no means a comprehensive or even realistic benchmark.");
        System.out.println("It just does some basic operations and compares with Javas ArrayList and HashMap.");

        System.out.println("\n\nPerformance tests with " + ROW_COUNT + " rows. Test is repeated "
                + ROUNDS + " times.");

        // We need some random names that we know are present for lookups
        Random rand = new Random();
        String[] randomNames = new String[100];
        for (int i = 0; i < 100; i++) {
            randomNames[i] = "s" + rand.nextInt(ROW_COUNT+1);
        }
        // We also need to define a name and age to search for later
        final String LAST_NAME = "s" + (ROW_COUNT - 1);
        final int    LAST_AGE  = 60;

        Timer timer = new Timer();


        /****************************************************************
         * Test TightDB
         ****************************************************************/
        System.out.println("TightDB: ");

        // Create a simple table and fill it with somewhat random values
        rand.setSeed(0);
        PersonTable table = new PersonTable();
        for (int row = 0; row < ROW_COUNT; row++) {
            // we want name to be unique so we just make it from the number
            String  name  = "s" + row;
            boolean hired = (row % 2 == 0);
            int     age   = rand.nextInt(50);
            if (row == ROW_COUNT-1)
                age = 60;
            String  day;
            if (row % 2 == 0)
                day = "Monday";
            else
                day = "Tuesday";

            table.add(name, hired, age, day);

            if (row == 100)
                table.optimize();
        }

        // Start with a search for the last name in the last row
        // (has to do linear scan of all rows)
        long tightdbLastPos = 0;
        timer.Start();
        for (int n = 0; n < ROUNDS; ++n) {
            tightdbLastPos += table.age.findFirst(LAST_AGE).getPosition();
        }
        long tightdbFindTime = timer.GetTimeInMs();
        System.out.printf("  find (last integer):    %10d msec\n", tightdbFindTime);


        // Do some simple aggregates, we will start with a sum
        // (we add them up and print the sum so it does not just get optimized away)
        timer.Start();
        long tightdbSumAge = 0;
        for (int n = 0; n < ROUNDS; ++n) {
            tightdbSumAge += table.age.sum();
        }
        long tightdbSumTime = timer.GetTimeInMs();
        System.out.printf("  sum (all integers):     %10d msec\n", tightdbSumTime);


        // Then lets do a count
        timer.Start();
        long tightdbCountMondays = 0;
        for (int n = 0; n < ROUNDS; ++n) {
            tightdbCountMondays += table.day.count("Monday");
        }
        long tightdbCountTime = timer.GetTimeInMs();
        System.out.printf("  count (string):         %10d msec\n", tightdbCountTime);


        // Add an index and lets try some lookups
        table.setIndex(0);      // syntax will soon be "table.name.setIndex();"
        timer.Start();
        long tightdbLookups = 0;
        int randLength = randomNames.length;
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705817/fstmerge_var1_949952198646243066
        for (int n = 0; n < ROUNDS; ++n) {     
            long rowIndex = table.lookup( randomNames[ rand.nextInt(randLength) ] ); 
            tightdbLookups += table.get(rowIndex).getAge();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705817/fstmerge_base_6600275077308971756
        for (int n = 0; n < ROUNDS; ++n) {     
            long rowIndex = table.lookup( randomNames[ rand.nextInt(randLength) ] ); 
            tightdbLookups += table.at(rowIndex).getAge();
=======
        for (int n = 0; n < ROUNDS; ++n) {
            long rowIndex = table.lookup( randomNames[ rand.nextInt(randLength) ] );
            tightdbLookups += table.at(rowIndex).getAge();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705817/fstmerge_var2_7516582617018925002
        }
        long tightdbLookupTime = timer.GetTimeInMs();
        System.out.printf("  lookup (random string): %10d msec\n", tightdbLookupTime);


        /****************************************************************
         * Test Java data structures (ArrayList, HashMap)
         ****************************************************************/

        System.out.println("Java: ");

        // Create a simple table and fill it with somewhat random values
        // Create Map with same data
        HashMap<String, JavaPerson> javaMapTable = new HashMap<String, JavaPerson>();
        ArrayList<JavaPerson> javaTable = new ArrayList<JavaPerson>();
        rand.setSeed(0);
        for (int row = 0; row < ROW_COUNT; row++) {
            // we want name to be unique so we just make it from the number
            String  name  = "s" + row;
            boolean hired = (row % 2 == 0);
            int     age   = rand.nextInt(50);
            if (row == ROW_COUNT-1)
                age = LAST_AGE;
            String  day;
            if (row % 2 == 0)
                day = "Monday";
            else
                day = "Tuesday";

            JavaPerson person = new JavaPerson(name, hired, age, day);
            javaTable.add(person);
            javaMapTable.put(name, person);
        }

        // Start with a search for the last name in the last row
        // (has to do linear scan of all rows)
        timer.Start();
        long javaLastPos = 0;
        for (int n = 0; n < ROUNDS; n++) {
            // Find position of LAST_NAME
            for (int index = 0; index < ROW_COUNT; index++) {
                //if (javaTable.get(index).name.equals(LAST_NAME)) {
                if (javaTable.get(index).age == LAST_AGE) {
                    javaLastPos += index;
                    break;
                }
            }
        }
        long javaFindTime = timer.GetTimeInMs();
        System.out.printf("  find (last integer):    %10d msec\n", javaFindTime);


        // Do a sum with a basic loop
        timer.Start();
        long javaSumAge = 0;
        for (int n = 0; n < ROUNDS; n++) {
            // Find position of LAST_NAME
            for (int index = 0; index < ROW_COUNT; index++) {
                javaSumAge += javaTable.get(index).age;
            }
        }
        long javaSumTime = timer.GetTimeInMs();
        System.out.printf("  sum (all integers):     %10d msec\n", javaSumTime);


        // Do a count
        timer.Start();
        long javaCountMondays = 0;
        for (int n = 0; n < ROUNDS; n++) {
            // Find position of LAST_NAME
            for (int index = 0; index < ROW_COUNT; index++) {
                if (javaTable.get(index).day == "Monday")
                    javaCountMondays += 1;
            }
        }
        long javaCountTime = timer.GetTimeInMs();
        System.out.printf("  count (string):         %10d msec\n", javaCountTime);


        timer.Start();
        long javaLookups = 0;
        for (int n = 0; n < ROUNDS; n++) {
            javaLookups += javaMapTable.get( randomNames[ rand.nextInt(randLength) ] ).age;
        }
        long javaLookupTime = timer.GetTimeInMs();
        System.out.printf("  lookup (random string): %10d msec\n", javaLookupTime);



        /****************************************************************
         * Compare
         ****************************************************************/
        if (tightdbLastPos != javaLastPos ||
            tightdbSumAge != javaSumAge ||
            tightdbCountMondays != javaCountMondays ||
            tightdbLookups != javaLookups) {

            System.out.println("\nInvalid results!!!");
        }

        // Print comparable speeds
        if (tightdbFindTime > 0)
            System.out.printf("\nfind:   tightdb is %d times faster than ArrayList\n", javaFindTime / tightdbFindTime);
        if (tightdbSumTime > 0)
            System.out.printf("sum:    tightdb is %d times faster than ArrayList\n", javaSumTime / tightdbSumTime);
        if (tightdbCountTime > 0)
            System.out.printf("count:  tightdb is %d times faster than ArrayList\n", javaCountTime / tightdbCountTime);
        if (tightdbLookupTime > 0)
            System.out.printf("lookup: tightdb is %d times faster than HashMap\n", javaLookupTime / tightdbLookupTime);
        System.out.println("\nDONE.");
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/examples/intro-example/src/com/tightdb/examples/quickbenchmark/QuickBenchmark.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
    PeopleTable peopleTable = new PeopleTable();
    //@@EndExample@@

    /****************************** BASIC OPERATIONS *************************/

    // @@Example: insert_rows @@
    peopleTable.add("John", 20, true);
    peopleTable.add("Mary", 21, false);
    peopleTable.add("Lars", 32, true);
    peopleTable.add("Phil", 43, false);
    peopleTable.add("Anni", 54, true);
    // @@EndExample@@

    // @@Example: insert_at_index @@
    peopleTable.insert(2, "Frank", 34, true);
    // @@EndExample@@

    // @@Example: number_of_rows @@
    if (!peopleTable.isEmpty()) {
        long s = peopleTable.size(); // s => 6
    }
    // @@EndExample@@

    System.out.println("Size = " + peopleTable.size() + "\n");

    /****************************** GETTERS AND SETTERS **********************/

    // @@Example: accessing_rows @@
    // 2 ways to get the value
    String name = peopleTable.get(2).getName(); // name => "Mary"
    // or
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var1_1526930085005742742
    String name2 = peopleTable.get(2).name.get();
    
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_base_2007271134032235249
    String name2 = peopleTable.at(2).name.get();
    
=======
    String name2 = peopleTable.at(2).name.get();

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var2_3086848373705011773
    // 2 ways to set the value
    peopleTable.get(2).name.set("NewName");
    // or
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var1_1526930085005742742
    peopleTable.get(2).setName("NewName"); 
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_base_2007271134032235249
    peopleTable.at(2).setName("NewName"); 
=======
    peopleTable.at(2).setName("NewName");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var2_3086848373705011773
    // @@EndExample@@
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var1_1526930085005742742
    
    System.out.println("get(2).getName -> " + name + " or " + name2);
    System.out.println("get(2).setName('NewName') -> " + peopleTable.get(2).getName());
    
    // @@Example: last_row @@   
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_base_2007271134032235249
    
    System.out.println("at(2).getName -> " + name + " or " + name2);
    System.out.println("at(2).setName('NewName') -> " + peopleTable.at(2).getName());
    
    // @@Example: last_row @@   
=======

    System.out.println("at(2).getName -> " + name + " or " + name2);
    System.out.println("at(2).setName('NewName') -> " + peopleTable.at(2).getName());

    // @@Example: last_row @@
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884705832/fstmerge_var2_3086848373705011773
    String lastRowName = peopleTable.last().getName();  // retrieve name for last row
    // @@EndExample@@

    // @@Example: updating_entire_row @@
    peopleTable.at(4).set("Eric", 50, true);
    // @@EndExample@@

    /****************************** DATA REMOVAL *****************************/
    // @@Example: deleting_row @@
    peopleTable.remove(2);
    // @@EndExample@@

    System.out.println("\nRemoved row 2. Down to " + peopleTable.size() + " rows.\n");

    /****************************** ITERATION OF ALL RECORDS *****************/

    // lazy iteration over the table

    // @@Example: iteration @@
    for (PeopleRow person : peopleTable) {
        System.out.println(person.getName() + " is " + person.getAge() + " years old.");
    }
    // @@EndExample@@

    /****************************** SIMPLE QUERY *****************************/

    System.out.println("\nFound: ");
    // @@Example: simple_seach @@
    PeopleRow p = peopleTable.name.equal("John").findFirst();
    System.out.println( p );
    // prints: "Employee {name=John, age=20, hired=true}"
    // @@EndExample@@

    /****************************** COMPLEX QUERY ****************************/

    // @@Example: advanced_search @@
    // Define the query
    PeopleQuery query = peopleTable
                           .age.between(20, 35)    // Implicit AND with below
                           .name.contains("a")     // Implicit AND with below
                           .group()                // "("
                               .hired.equal(true)
                               .or()               // or
                               .name.endsWith("y")
                           .endGroup();            // ")"
    // Count matches
    PeopleView match = query.findAll();
    System.out.println(match.size() + " employee(s) match query.");

    // Take the average age of the matches
    System.out.println(match.age.sum() + " years is the sum of ages.");

    // Perform query and use the result
    for (PeopleRow person : match) {
        // ... do something with matching 'person'
    }
    // @@EndExample
    System.out.println("");

    /****************************** SERIALIZE ********************************/

    System.out.println("Serialize to file:");
    // @@Example: serialisation @@
    // Create Table in Group
    Group group = new Group();
    PeopleTable person1 = new PeopleTable(group);

    person1.add("John", 20, true);
    person1.add("Mary", 21, false);

    // Write to disk
    try {
        group.writeToFile("people.tightdb");
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Load a group from disk (and print contents)
    Group fromDisk = new Group("people.tightdb");
    PeopleTable people2 = new PeopleTable(fromDisk);

    for (PeopleRow person : people2) {
        System.out.println(person.getName() + " is " + person.getAge() + " years old");
    }

    // Write same group to memory buffer
    byte[] buffer = group.writeToMem();

    // Load a group from memory (and print contents)
    Group fromMem = new Group(buffer);
    PeopleTable people3 = new PeopleTable(fromMem);

    for (PeopleRow person : people3) {
        System.out.println(person.getName() + " is " + person.getAge() + " years old");
    }
    // @@EndExample@@

    /****************************** TRANSACTIONS ********************************/

    System.out.println("\nTransactions:");
    // @@Example: transaction @@

    // Open a shared group
    SharedGroup db = new SharedGroup("people.tightdb");

    // Write transaction:
    WriteTransaction wrtTrans = db.beginWrite();    // Start transaction
    try {
        PeopleTable person = new PeopleTable(wrtTrans);
        // Add row to table
        person.add("Bill", 53, true);
        wrtTrans.commit();                          // End transaction
    } catch (Throwable e) {
        wrtTrans.rollback();                        // or Rollback
    }

    // Read transaction:
    ReadTransaction rdTrans = db.beginRead();       // Start transaction
    PeopleTable people = new PeopleTable(rdTrans);
    for (PeopleRow person2 : people) {
        System.out.println(person2.getName() + " is " +
                           person2.getAge() + " years old");
    }
    rdTrans.endRead();                              // End transaction

    // @@EndExample@@


    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/examples/intro-example/src/com/tightdb/examples/tutorial/tutorial.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706135/fstmerge_var1_7733467944411276274
public static void main(String[] args) {

		/* EXAMPLE: get */

		Person p = people.age.equals(19).findAll().get(1);
		
		/* EXAMPLE: clear */

		people.age.equals(19).findAll().clear();
		
		/* EXAMPLE: first */

		Person firstPerson = people.age.equals(19).findAll().first();
		
		/* EXAMPLE: isEmpty */

		boolean empty = people.age.equals(19).findAll().isEmpty();
		
		/* EXAMPLE: iterator */

		for (Person p : people.age.equals(19).findAll()) System.out.println(p);
		
		/* EXAMPLE: last */

		Person lastPerson = people.age.equals(19).findAll().last();
		
		/* EXAMPLE: size */

		long size = people.age.equals(19).findAll().size();
		
		/* EXAMPLE: END! */
		
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706135/fstmerge_base_174028463356764009
public static void main(String[] args) {

		/* EXAMPLE: at */

		Person p = people.age.equals(19).findAll().at(1);
		
		/* EXAMPLE: clear */

		people.age.equals(19).findAll().clear();
		
		/* EXAMPLE: first */

		Person firstPerson = people.age.equals(19).findAll().first();
		
		/* EXAMPLE: isEmpty */

		boolean empty = people.age.equals(19).findAll().isEmpty();
		
		/* EXAMPLE: iterator */

		for (Person p : people.age.equals(19).findAll()) System.out.println(p);
		
		/* EXAMPLE: last */

		Person lastPerson = people.age.equals(19).findAll().last();
		
		/* EXAMPLE: size */

		long size = people.age.equals(19).findAll().size();
		
		/* EXAMPLE: END! */
		
	}
=======
public static void main(String[] args) {

        /* EXAMPLE: at */

        Person p = people.age.equals(19).findAll().at(1);

        /* EXAMPLE: clear */

        people.age.equals(19).findAll().clear();

        /* EXAMPLE: first */

        Person firstPerson = people.age.equals(19).findAll().first();

        /* EXAMPLE: isEmpty */

        boolean empty = people.age.equals(19).findAll().isEmpty();

        /* EXAMPLE: iterator */

        for (Person p : people.age.equals(19).findAll()) System.out.println(p);

        /* EXAMPLE: last */

        Person lastPerson = people.age.equals(19).findAll().last();

        /* EXAMPLE: size */

        long size = people.age.equals(19).findAll().size();

        /* EXAMPLE: END! */

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706135/fstmerge_var2_6147860508682395346

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-doc/src/main/resources/ViewExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706140/fstmerge_var1_4682335502050264115
public static void main(String[] args) {

		/* EXAMPLE: after */

		Person third = people.get(0).after(2);
		
		/* EXAMPLE: before */

		Person second = people.get(4).before(3);
		
		/* EXAMPLE: columns */

		for (AbstractColumn<?, ?, ?, ?> column : john.columns()) {
			System.out.println(column.getName() + "=" + column.getReadableValue());
		}
		
		/* EXAMPLE: next */

		Person fifth = people.get(3).next();
		
		/* EXAMPLE: previous */

		Person secondLast = people.last().previous();
		
		/* EXAMPLE: getFoo */

		String name = people.first().getName();
		int age = people.last().getAge();
		
		/* EXAMPLE: setFoo */

		people.last().setName("John");
		people.first().setAge(30);
		
		/* EXAMPLE: END! */
		
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706140/fstmerge_base_4807920759681428872
public static void main(String[] args) {

		/* EXAMPLE: after */

		Person third = people.at(0).after(2);
		
		/* EXAMPLE: before */

		Person second = people.at(4).before(3);
		
		/* EXAMPLE: columns */

		for (AbstractColumn<?, ?, ?, ?> column : john.columns()) {
			System.out.println(column.getName() + "=" + column.getReadableValue());
		}
		
		/* EXAMPLE: next */

		Person fifth = people.at(3).next();
		
		/* EXAMPLE: previous */

		Person secondLast = people.last().previous();
		
		/* EXAMPLE: getFoo */

		String name = people.first().getName();
		int age = people.last().getAge();
		
		/* EXAMPLE: setFoo */

		people.last().setName("John");
		people.first().setAge(30);
		
		/* EXAMPLE: END! */
		
	}
=======
public static void main(String[] args) {

        /* EXAMPLE: after */

        Person third = people.at(0).after(2);

        /* EXAMPLE: before */

        Person second = people.at(4).before(3);

        /* EXAMPLE: columns */

        for (AbstractColumn<?, ?, ?, ?> column : john.columns()) {
            System.out.println(column.getName() + "=" + column.getReadableValue());
        }

        /* EXAMPLE: next */

        Person fifth = people.at(3).next();

        /* EXAMPLE: previous */

        Person secondLast = people.last().previous();

        /* EXAMPLE: getFoo */

        String name = people.first().getName();
        int age = people.last().getAge();

        /* EXAMPLE: setFoo */

        people.last().setName("John");
        people.first().setAge(30);

        /* EXAMPLE: END! */

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706140/fstmerge_var2_478414003044302893

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-doc/src/main/resources/RowExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706144/fstmerge_var1_8632605340324276249
public static void main(String[] args) {

		/* EXAMPLE: constructor-1 */

		PersonTable people = new PersonTable();
		
		/* EXAMPLE: constructor-2 */

		Group group = new Group();								
		PersonTable people = new PersonTable(group);
		
		/* EXAMPLE: add */

		people.add("Mary", 21, false);
		people.add("Lars", 24, true);
		
		/* EXAMPLE: get */

		Person p = people.get(42);
		
		/* EXAMPLE: clear */

		people.clear();
		
		/* EXAMPLE: first */

		Person firstPerson = people.first();
		
		/* EXAMPLE: getName */

		String tableName = people.getName();
		
		/* EXAMPLE: insert */

		people.insert(0, "Mary", 21, false);
		people.insert(0, "Lars", 21, true);
		
		/* EXAMPLE: isEmpty */

		boolean empty = people.isEmpty();
		
		/* EXAMPLE: iterator */

		for (Person p : people) System.out.println(p);
		
		/* EXAMPLE: last */

		Person lastPerson = people.last();

		/* EXAMPLE: optimize */
		
		people.optimize();
		
		/* EXAMPLE: remove */

		people.remove(0);
		
		/* EXAMPLE: size */

		long size = people.size();
		
		/* EXAMPLE: where */

		people.where().age.is(22).findAll();
		
		/* EXAMPLE: END! */
		
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706144/fstmerge_base_3097311373078071628
public static void main(String[] args) {

		/* EXAMPLE: constructor-1 */

		PersonTable people = new PersonTable();
		
		/* EXAMPLE: constructor-2 */

		Group group = new Group();								
		PersonTable people = new PersonTable(group);
		
		/* EXAMPLE: add */

		people.add("Mary", 21, false);
		people.add("Lars", 24, true);
		
		/* EXAMPLE: at */

		Person p = people.at(42);
		
		/* EXAMPLE: clear */

		people.clear();
		
		/* EXAMPLE: first */

		Person firstPerson = people.first();
		
		/* EXAMPLE: getName */

		String tableName = people.getName();
		
		/* EXAMPLE: insert */

		people.insert(0, "Mary", 21, false);
		people.insert(0, "Lars", 21, true);
		
		/* EXAMPLE: isEmpty */

		boolean empty = people.isEmpty();
		
		/* EXAMPLE: iterator */

		for (Person p : people) System.out.println(p);
		
		/* EXAMPLE: last */

		Person lastPerson = people.last();

		/* EXAMPLE: optimize */
		
		people.optimize();
		
		/* EXAMPLE: remove */

		people.remove(0);
		
		/* EXAMPLE: size */

		long size = people.size();
		
		/* EXAMPLE: where */

		people.where().age.is(22).findAll();
		
		/* EXAMPLE: END! */
		
	}
=======
public static void main(String[] args) {

        /* EXAMPLE: constructor-1 */

        PersonTable people = new PersonTable();

        /* EXAMPLE: constructor-2 */

        Group group = new Group();
        PersonTable people = new PersonTable(group);

        /* EXAMPLE: add */

        people.add("Mary", 21, false);
        people.add("Lars", 24, true);

        /* EXAMPLE: at */

        Person p = people.at(42);

        /* EXAMPLE: clear */

        people.clear();

        /* EXAMPLE: first */

        Person firstPerson = people.first();

        /* EXAMPLE: getName */

        String tableName = people.getName();

        /* EXAMPLE: insert */

        people.insert(0, "Mary", 21, false);
        people.insert(0, "Lars", 21, true);

        /* EXAMPLE: isEmpty */

        boolean empty = people.isEmpty();

        /* EXAMPLE: iterator */

        for (Person p : people) System.out.println(p);

        /* EXAMPLE: last */

        Person lastPerson = people.last();

        /* EXAMPLE: optimize */

        people.optimize();

        /* EXAMPLE: remove */

        people.remove(0);

        /* EXAMPLE: size */

        long size = people.size();

        /* EXAMPLE: where */

        people.where().age.is(22).findAll();

        /* EXAMPLE: END! */

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706144/fstmerge_var2_6581901245387326069

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-doc/src/main/resources/TableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706229/fstmerge_var1_8263293540450041354
public void describe() {
		constructor("Allocates and instantiates a TightDB table. <br/> Note: Only tables which are part of a Group can be serialized to memory or disk");
		constructor("Allocates and instantiates a TightDB table, as part of the specified group", "Group", "group");
		
		method("Row", 		"add", "Insert a new row at the end of the table", "RowDataTypes...", "rowData...");
		method("Row", 		"at", "[Deprecated] Get a specific row as an object (rowIndex starts at 0)", "long", "rowIndex");
		method("void", 		"clear", "Delete all rows in the table");
		method("Row", 		"first", "Get the first row as an object");
		method("Row", 		"get", "Get a specific row as an object (rowIndex starts at 0)", "long", "rowIndex");
		method("long", 		"getColumnCount", "Get number of columns in the table");
		method("String", 	"getColumnName", "Get the name of the column");
		method("ColumnType","getColumnType", "Get the type of the column");
		method("long",      "getColumnIndex", "Get the 0-based index of a column with the specified name", "String", "columnName");
		method("String",	"getName", "Get the table name for tables named in a Group");
		//TODO: hasIndex
		method("Row", 		"insert", "Insert a new row at the index in the table", "long", "rowIndex", "RowDataTypes...", "rowData...");
		method("boolean",	"isEmpty", "Check if a table has no rows");
		method("Iterator", 	"iterator", "Get an iterator for the table rows");
		method("Row", 		"last", "Get the last row as an object");
		// method("View", "range", "");
		method("void", 		"optimize", "Optimize the database size. (Currently pack strings)");
		method("void", 		"remove", "Remove a specific row from the table", "long", "rowIndex");
		method("void", 		"removeLast", "Remove the last row from the table");
		//TODO: setIndex
		method("long", 		"size", "Get the number of rows in the table");
		
		method("String", 	"toJson", "Retrieve JSON representaion of the data");
		method("Query", 	"where", "Create a query for the table");

		// EmployeeTable t = new EmployeeTable();
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706229/fstmerge_base_240612583856506845
public void describe() {
		constructor("Allocates and instantiates a TightDB table. <br/> Note: Only tables which are part of a Group can be serialized to memory or disk");
		constructor("Allocates and instantiates a TightDB table, as part of the specified group", "Group", "group");
		
		method("Row", 		"add", "Insert a new row at the end of the table", "RowDataTypes...", "rowData...");
		method("Row", 		"at", "Get a specific row as an object (rowIndex starts at 0)", "long", "rowIndex");
		method("void", 		"clear", "Delete all rows in the table");
		method("Row", 		"first", "Get the first row as an object");
		method("long", 		"getColumnCount", "Get number of columns in the table");
		method("String", 	"getColumnName", "Get the name of the column");
		method("ColumnType","getColumnType", "Get the type of the column");
		method("long",      "getColumnIndex", "Get the 0-based index of a column with the specified name", "String", "columnName");
		method("String",	"getName", "Get the table name for tables named in a Group");
		//TODO: hasIndex
		method("Row", 		"insert", "Insert a new row at the index in the table", "long", "rowIndex", "RowDataTypes...", "rowData...");
		method("boolean",	"isEmpty", "Check if a table has no rows");
		method("Iterator", 	"iterator", "Get an iterator for the table rows");
		method("Row", 		"last", "Get the last row as an object");
		// method("View", "range", "");
		method("void", 		"optimize", "Optimize the database size. (Currently pack strings)");
		method("void", 		"remove", "Remove a specific row from the table", "long", "rowIndex");
		method("void", 		"removeLast", "Remove the last row from the table");
		//TODO: setIndex
		method("long", 		"size", "Get the number of rows in the table");
		
		method("String", 	"toJson", "Retrieve JSON representaion of the data");
		method("Query", 	"where", "Create a query for the table");

		// EmployeeTable t = new EmployeeTable();
	}
=======
public void describe() {
        constructor("Allocates and instantiates a TightDB table. <br/> Note: Only tables which are part of a Group can be serialized to memory or disk");
        constructor("Allocates and instantiates a TightDB table, as part of the specified group", "Group", "group");

        method("Row",       "add", "Insert a new row at the end of the table", "RowDataTypes...", "rowData...");
        method("Row",       "at", "Get a specific row as an object (rowIndex starts at 0)", "long", "rowIndex");
        method("void",      "clear", "Delete all rows in the table");
        method("Row",       "first", "Get the first row as an object");
        method("long",      "getColumnCount", "Get number of columns in the table");
        method("String",    "getColumnName", "Get the name of the column");
        method("ColumnType","getColumnType", "Get the type of the column");
        method("long",      "getColumnIndex", "Get the 0-based index of a column with the specified name", "String", "columnName");
        method("String",    "getName", "Get the table name for tables named in a Group");
        //TODO: hasIndex
        method("Row",       "insert", "Insert a new row at the index in the table", "long", "rowIndex", "RowDataTypes...", "rowData...");
        method("boolean",   "isEmpty", "Check if a table has no rows");
        method("Iterator",  "iterator", "Get an iterator for the table rows");
        method("Row",       "last", "Get the last row as an object");
        // method("View", "range", "");
        method("void",      "optimize", "Optimize the database size. (Currently pack strings)");
        method("void",      "remove", "Remove a specific row from the table", "long", "rowIndex");
        method("void",      "removeLast", "Remove the last row from the table");
        //TODO: setIndex
        method("long",      "size", "Get the number of rows in the table");

        method("String",    "toJson", "Retrieve JSON representaion of the data");
        method("Query",     "where", "Create a query for the table");

        // EmployeeTable t = new EmployeeTable();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706229/fstmerge_var2_37983015055065230

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-doc/src/main/java/com/tightdb/doc/TableDesc.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706276/fstmerge_var1_4810689724749827247
public void describe() {
		method("Row",       "at", "[Deprecated] Get a specific row", "long", "rowIndex");
		method("void",      "clear", "Delete all rows in the view");
		method("Row",       "first", "Get the first row");
		method("Row",       "get", "Get a specific row", "long", "rowIndex");
		method("boolean",   "isEmpty", "Check if the view has no rows");
		method("Iterator",  "iterator", "Get an iterator for the view rows");
		method("Row",       "last", "Get the last row");
		// method("View",   "range", "");
		method("void", 		"remove", "Remove a specific row from the view", "long", "rowIndex");
		method("void", 		"removeLast", "Remove the last row from the view");
		method("long",      "size", "Get the number of rows in the view");
		method("String", 	"toJson", "Retrieve JSON representaion of the data");

		// EmployeeView v = null;

	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706276/fstmerge_base_1151424955675311042
public void describe() {
		method("Row",       "at", "Get a specific row", "long", "rowIndex");
		method("void",      "clear", "Delete all rows in the view");
		method("Row",       "first", "Get the first row");
		method("boolean",   "isEmpty", "Check if the view has no rows");
		method("Iterator",  "iterator", "Get an iterator for the view rows");
		method("Row",       "last", "Get the last row");
		// method("View",   "range", "");
		method("void", 		"remove", "Remove a specific row from the view", "long", "rowIndex");
		method("void", 		"removeLast", "Remove the last row from the view");
		method("long",      "size", "Get the number of rows in the view");
		method("String", 	"toJson", "Retrieve JSON representaion of the data");

		// EmployeeView v = null;

	}
=======
public void describe() {
        method("Row",       "at", "Get a specific row", "long", "rowIndex");
        method("void",      "clear", "Delete all rows in the view");
        method("Row",       "first", "Get the first row");
        method("boolean",   "isEmpty", "Check if the view has no rows");
        method("Iterator",  "iterator", "Get an iterator for the view rows");
        method("Row",       "last", "Get the last row");
        // method("View",   "range", "");
        method("void",      "remove", "Remove a specific row from the view", "long", "rowIndex");
        method("void",      "removeLast", "Remove the last row from the view");
        method("long",      "size", "Get the number of rows in the view");
        method("String",    "toJson", "Retrieve JSON representaion of the data");

        // EmployeeView v = null;

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706276/fstmerge_var2_8212675981038714480

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-doc/src/main/java/com/tightdb/doc/ViewDesc.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706645/fstmerge_var1_1891461684990710277
@Test
	public void shouldAddValueToWholeColumn() {
		employeesView.salary.addLong(123);
		for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
			assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123,
					employeesView.get(i).getSalary());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706645/fstmerge_base_1707225486743700633
@Test
	public void shouldAddValueToWholeColumn() {
		employeesView.salary.addLong(123);
		for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
			assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123,
					employeesView.at(i).getSalary());
	}
=======
@Test
    public void shouldAddValueToWholeColumn() {
        employeesView.salary.addLong(123);
        for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
            assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123,
                    employeesView.at(i).getSalary());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706645/fstmerge_var2_4566746065235748960

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/ViewColumnsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706658/fstmerge_var1_3540156542164554390
@Test
	public void shouldRetrieveRowsByIndex() {
		assertEquals(NAME0, getEmployees().get(0).getFirstName());
		assertEquals(NAME1, getEmployees().get(1).getFirstName());
		assertEquals(NAME2, getEmployees().get(2).getFirstName());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706658/fstmerge_base_2365101796184492937
@Test
	public void shouldRetrieveRowsByIndex() {
		assertEquals(NAME0, getEmployees().at(0).getFirstName());
		assertEquals(NAME1, getEmployees().at(1).getFirstName());
		assertEquals(NAME2, getEmployees().at(2).getFirstName());
	}
=======
@Test
    public void shouldRetrieveRowsByIndex() {
        assertEquals(NAME0, getEmployees().at(0).getFirstName());
        assertEquals(NAME1, getEmployees().at(1).getFirstName());
        assertEquals(NAME2, getEmployees().at(2).getFirstName());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706658/fstmerge_var2_3405734246443596291

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706663/fstmerge_var1_6164762554206861291
@Test
	public void shouldHaveTwoWaysToReadCellValues() {
		assertEquals(NAME0, getEmployees().get(0).getFirstName());
		assertEquals(NAME0, getEmployees().get(0).firstName.get());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706663/fstmerge_base_2048788046833143402
@Test
	public void shouldHaveTwoWaysToReadCellValues() {
		assertEquals(NAME0, getEmployees().at(0).getFirstName());
		assertEquals(NAME0, getEmployees().at(0).firstName.get());
	}
=======
@Test
    public void shouldHaveTwoWaysToReadCellValues() {
        assertEquals(NAME0, getEmployees().at(0).getFirstName());
        assertEquals(NAME0, getEmployees().at(0).firstName.get());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706663/fstmerge_var2_4064553906645499119

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706668/fstmerge_var1_987778710624330417
@Test
	public void shouldHaveTwoWaysToWriteCellValues() {
		getEmployees().get(0).setFirstName("FOO");
		assertEquals("FOO", getEmployees().get(0).getFirstName());

		getEmployees().get(0).firstName.set("BAR");
		assertEquals("BAR", getEmployees().get(0).getFirstName());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706668/fstmerge_base_2709897423496402239
@Test
	public void shouldHaveTwoWaysToWriteCellValues() {
		getEmployees().at(0).setFirstName("FOO");
		assertEquals("FOO", getEmployees().at(0).getFirstName());

		getEmployees().at(0).firstName.set("BAR");
		assertEquals("BAR", getEmployees().at(0).getFirstName());
	}
=======
@Test
    public void shouldHaveTwoWaysToWriteCellValues() {
        getEmployees().at(0).setFirstName("FOO");
        assertEquals("FOO", getEmployees().at(0).getFirstName());

        getEmployees().at(0).firstName.set("BAR");
        assertEquals("BAR", getEmployees().at(0).getFirstName());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706668/fstmerge_var2_4685468551828976670

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706672/fstmerge_var1_1996275598314295702
@Test
	public void shouldAllowMixedValues() throws IllegalAccessException {
		assertEquals("extra", getEmployees().get(0).getExtra().getValue());
		assertEquals("extra", getEmployees().get(0).getExtra().getStringValue());

		assertEquals(1234L, getEmployees().get(1).getExtra().getValue());
		assertEquals(1234L, getEmployees().get(1).getExtra().getLongValue());

		assertEquals(true, getEmployees().get(2).getExtra().getValue());
		assertEquals(true, getEmployees().get(2).getExtra().getBooleanValue());

		getEmployees().get(1).setExtra(Mixed.mixedValue("new_value"));
		assertEquals("new_value", getEmployees().get(1).getExtra().getValue());
		assertEquals("new_value", getEmployees().get(1).getExtra()
				.getStringValue());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706672/fstmerge_base_2231198417471864324
@Test
	public void shouldAllowMixedValues() throws IllegalAccessException {
		assertEquals("extra", getEmployees().at(0).getExtra().getValue());
		assertEquals("extra", getEmployees().at(0).getExtra().getStringValue());

		assertEquals(1234L, getEmployees().at(1).getExtra().getValue());
		assertEquals(1234L, getEmployees().at(1).getExtra().getLongValue());

		assertEquals(true, getEmployees().at(2).getExtra().getValue());
		assertEquals(true, getEmployees().at(2).getExtra().getBooleanValue());

		getEmployees().at(1).setExtra(Mixed.mixedValue("new_value"));
		assertEquals("new_value", getEmployees().at(1).getExtra().getValue());
		assertEquals("new_value", getEmployees().at(1).getExtra()
				.getStringValue());
	}
=======
@Test
    public void shouldAllowMixedValues() throws IllegalAccessException {
        assertEquals("extra", getEmployees().at(0).getExtra().getValue());
        assertEquals("extra", getEmployees().at(0).getExtra().getStringValue());

        assertEquals(1234L, getEmployees().at(1).getExtra().getValue());
        assertEquals(1234L, getEmployees().at(1).getExtra().getLongValue());

        assertEquals(true, getEmployees().at(2).getExtra().getValue());
        assertEquals(true, getEmployees().at(2).getExtra().getBooleanValue());

        getEmployees().at(1).setExtra(Mixed.mixedValue("new_value"));
        assertEquals("new_value", getEmployees().at(1).getExtra().getValue());
        assertEquals("new_value", getEmployees().at(1).getExtra()
                .getStringValue());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706672/fstmerge_var2_5832455827971649266

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706677/fstmerge_var1_8157893230591992094
@Test
	public void shouldRemoveFirstRow() throws IllegalAccessException {
		// Remove first row
		getEmployees().remove(0);
		assertEquals(NAME1, getEmployees().get(0).getFirstName());
		assertEquals(NAME2, getEmployees().get(1).getFirstName());
		assertEquals(NAME3, getEmployees().get(2).getFirstName());
		assertEquals(3, getEmployees().size());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706677/fstmerge_base_6196708032652594875
@Test
	public void shouldRemoveFirstRow() throws IllegalAccessException {
		// Remove first row
		getEmployees().remove(0);
		assertEquals(NAME1, getEmployees().at(0).getFirstName());
		assertEquals(NAME2, getEmployees().at(1).getFirstName());
		assertEquals(NAME3, getEmployees().at(2).getFirstName());
		assertEquals(3, getEmployees().size());
	}
=======
@Test
    public void shouldRemoveFirstRow() throws IllegalAccessException {
        // Remove first row
        getEmployees().remove(0);
        assertEquals(NAME1, getEmployees().at(0).getFirstName());
        assertEquals(NAME2, getEmployees().at(1).getFirstName());
        assertEquals(NAME3, getEmployees().at(2).getFirstName());
        assertEquals(3, getEmployees().size());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706677/fstmerge_var2_667092113027650581

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706681/fstmerge_var1_5480764549329510872
@Test
	public void shouldRemoveMiddleRow() throws IllegalAccessException {
		// Remove middle row
		getEmployees().remove(1);
		assertEquals(NAME0, getEmployees().get(0).getFirstName());
		assertEquals(NAME2, getEmployees().get(1).getFirstName());
		assertEquals(NAME3, getEmployees().get(2).getFirstName());
		assertEquals(3, getEmployees().size());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706681/fstmerge_base_4054791864010214229
@Test
	public void shouldRemoveMiddleRow() throws IllegalAccessException {
		// Remove middle row
		getEmployees().remove(1);
		assertEquals(NAME0, getEmployees().at(0).getFirstName());
		assertEquals(NAME2, getEmployees().at(1).getFirstName());
		assertEquals(NAME3, getEmployees().at(2).getFirstName());
		assertEquals(3, getEmployees().size());
	}
=======
@Test
    public void shouldRemoveMiddleRow() throws IllegalAccessException {
        // Remove middle row
        getEmployees().remove(1);
        assertEquals(NAME0, getEmployees().at(0).getFirstName());
        assertEquals(NAME2, getEmployees().at(1).getFirstName());
        assertEquals(NAME3, getEmployees().at(2).getFirstName());
        assertEquals(3, getEmployees().size());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706681/fstmerge_var2_6643555814416215613

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706686/fstmerge_var1_5268589956652256146
@Test
	public void shouldRemoveLastRow() throws IllegalAccessException {
		// Remove last row
		getEmployees().remove(3);
		assertEquals(3, getEmployees().size());
		assertEquals(NAME0, getEmployees().get(0).getFirstName());
		assertEquals(NAME1, getEmployees().get(1).getFirstName());
		assertEquals(NAME2, getEmployees().get(2).getFirstName());
		
		// Remove last row
		getEmployees().removeLast();
		assertEquals(2, getEmployees().size());
		assertEquals(NAME0, getEmployees().get(0).getFirstName());
		assertEquals(NAME1, getEmployees().get(1).getFirstName());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706686/fstmerge_base_4218356499933986277
@Test
	public void shouldRemoveLastRow() throws IllegalAccessException {
		// Remove last row
		getEmployees().remove(3);
		assertEquals(3, getEmployees().size());
		assertEquals(NAME0, getEmployees().at(0).getFirstName());
		assertEquals(NAME1, getEmployees().at(1).getFirstName());
		assertEquals(NAME2, getEmployees().at(2).getFirstName());
		
		// Remove last row
		getEmployees().removeLast();
		assertEquals(2, getEmployees().size());
		assertEquals(NAME0, getEmployees().at(0).getFirstName());
		assertEquals(NAME1, getEmployees().at(1).getFirstName());
	}
=======
@Test
    public void shouldRemoveLastRow() throws IllegalAccessException {
        // Remove last row
        getEmployees().remove(3);
        assertEquals(3, getEmployees().size());
        assertEquals(NAME0, getEmployees().at(0).getFirstName());
        assertEquals(NAME1, getEmployees().at(1).getFirstName());
        assertEquals(NAME2, getEmployees().at(2).getFirstName());

        // Remove last row
        getEmployees().removeLast();
        assertEquals(2, getEmployees().size());
        assertEquals(NAME0, getEmployees().at(0).getFirstName());
        assertEquals(NAME1, getEmployees().at(1).getFirstName());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706686/fstmerge_var2_7089749152373242975

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706709/fstmerge_var1_2112843358846548730
@Test
	public void shouldRetrieveRowsByIndex() {
		assertEquals(NAME0, employees.get(0).getFirstName());
		assertEquals(NAME1, employees.get(1).getFirstName());
		assertEquals(NAME2, employees.get(2).getFirstName());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706709/fstmerge_base_8931123613669170554
@Test
	public void shouldRetrieveRowsByIndex() {
		assertEquals(NAME0, employees.at(0).getFirstName());
		assertEquals(NAME1, employees.at(1).getFirstName());
		assertEquals(NAME2, employees.at(2).getFirstName());
	}
=======
@Test
    public void shouldRetrieveRowsByIndex() {
        assertEquals(NAME0, employees.at(0).getFirstName());
        assertEquals(NAME1, employees.at(1).getFirstName());
        assertEquals(NAME2, employees.at(2).getFirstName());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706709/fstmerge_var2_8739386919819210583

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706715/fstmerge_var1_3707502487632876256
@Test
	public void shouldHaveTwoWaysToReadCellValues() {
		assertEquals(NAME0, employees.get(0).getFirstName());
		assertEquals(NAME0, employees.get(0).firstName.get());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706715/fstmerge_base_1594637774110205767
@Test
	public void shouldHaveTwoWaysToReadCellValues() {
		assertEquals(NAME0, employees.at(0).getFirstName());
		assertEquals(NAME0, employees.at(0).firstName.get());
	}
=======
@Test
    public void shouldHaveTwoWaysToReadCellValues() {
        assertEquals(NAME0, employees.at(0).getFirstName());
        assertEquals(NAME0, employees.at(0).firstName.get());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706715/fstmerge_var2_9005026444954861842

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706720/fstmerge_var1_7182313900019302222
@Test
	public void shouldHaveTwoWaysToWriteCellValues() {
		employees.get(0).setFirstName("FOO");
		assertEquals("FOO", employees.get(0).getFirstName());

		employees.get(0).firstName.set("BAR");
		assertEquals("BAR", employees.get(0).getFirstName());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706720/fstmerge_base_8457115030334304976
@Test
	public void shouldHaveTwoWaysToWriteCellValues() {
		employees.at(0).setFirstName("FOO");
		assertEquals("FOO", employees.at(0).getFirstName());

		employees.at(0).firstName.set("BAR");
		assertEquals("BAR", employees.at(0).getFirstName());
	}
=======
@Test
    public void shouldHaveTwoWaysToWriteCellValues() {
        employees.at(0).setFirstName("FOO");
        assertEquals("FOO", employees.at(0).getFirstName());

        employees.at(0).firstName.set("BAR");
        assertEquals("BAR", employees.at(0).getFirstName());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706720/fstmerge_var2_3944258871409413758

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706724/fstmerge_var1_3813594339433055623
@Test
	public void shouldSetEntireRow() {
		Date date = new Date(1234567890);
		byte[] bytes = new byte[] { 1, 3, 5 };
		ByteBuffer buf = ByteBuffer.allocateDirect(3);
		buf.put(bytes);
		ByteBuffer buf2 = ByteBuffer.allocateDirect(3);
		buf2.put(bytes);

		employees.get(0).set(NAME2, "Bond", 10000, true, buf, date, new Mixed(true), null);

		assertEquals(NAME2, employees.get(0).getFirstName());
		assertEquals("Bond", employees.get(0).getLastName());
		assertEquals(10000, employees.get(0).getSalary());
		assertEquals(true, employees.get(0).getDriver());
		assertEquals(buf2.rewind(), employees.get(0).getPhoto().rewind());
		assertEquals(date.getTime() / 1000, employees.get(0).getBirthdate().getTime() / 1000);
		assertEquals(new Mixed(true), employees.get(0).getExtra());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706724/fstmerge_base_44954378953777480
@Test
	public void shouldSetEntireRow() {
		Date date = new Date(1234567890);
		byte[] bytes = new byte[] { 1, 3, 5 };
		ByteBuffer buf = ByteBuffer.allocateDirect(3);
		buf.put(bytes);
		ByteBuffer buf2 = ByteBuffer.allocateDirect(3);
		buf2.put(bytes);

		employees.at(0).set(NAME2, "Bond", 10000, true, buf, date, new Mixed(true), null);

		assertEquals(NAME2, employees.at(0).getFirstName());
		assertEquals("Bond", employees.at(0).getLastName());
		assertEquals(10000, employees.at(0).getSalary());
		assertEquals(true, employees.at(0).getDriver());
		assertEquals(buf2.rewind(), employees.at(0).getPhoto().rewind());
		assertEquals(date.getTime() / 1000, employees.at(0).getBirthdate().getTime() / 1000);
		assertEquals(new Mixed(true), employees.at(0).getExtra());
	}
=======
@Test
    public void shouldSetEntireRow() {
        Date date = new Date(1234567890);
        byte[] bytes = new byte[] { 1, 3, 5 };
        ByteBuffer buf = ByteBuffer.allocateDirect(3);
        buf.put(bytes);
        ByteBuffer buf2 = ByteBuffer.allocateDirect(3);
        buf2.put(bytes);

        employees.at(0).set(NAME2, "Bond", 10000, true, buf, date, new Mixed(true), null);

        assertEquals(NAME2, employees.at(0).getFirstName());
        assertEquals("Bond", employees.at(0).getLastName());
        assertEquals(10000, employees.at(0).getSalary());
        assertEquals(true, employees.at(0).getDriver());
        assertEquals(buf2.rewind(), employees.at(0).getPhoto().rewind());
        assertEquals(date.getTime() / 1000, employees.at(0).getBirthdate().getTime() / 1000);
        assertEquals(new Mixed(true), employees.at(0).getExtra());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706724/fstmerge_var2_202727876820351146

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706729/fstmerge_var1_6154106893852926769
@Test
	public void shouldAllowMixedValues() throws IllegalAccessException {
		assertEquals("extra", employees.get(0).getExtra().getValue());
		assertEquals("extra", employees.get(0).getExtra().getStringValue());

		assertEquals(1234L, employees.get(1).getExtra().getValue());
		assertEquals(1234L, employees.get(1).getExtra().getLongValue());

		assertEquals(true, employees.get(2).getExtra().getValue());
		assertEquals(true, employees.get(2).getExtra().getBooleanValue());

		employees.get(1).setExtra(Mixed.mixedValue("new_value"));
		assertEquals("new_value", employees.get(1).getExtra().getValue());
		assertEquals("new_value", employees.get(1).getExtra().getStringValue());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706729/fstmerge_base_7405221174350446801
@Test
	public void shouldAllowMixedValues() throws IllegalAccessException {
		assertEquals("extra", employees.at(0).getExtra().getValue());
		assertEquals("extra", employees.at(0).getExtra().getStringValue());

		assertEquals(1234L, employees.at(1).getExtra().getValue());
		assertEquals(1234L, employees.at(1).getExtra().getLongValue());

		assertEquals(true, employees.at(2).getExtra().getValue());
		assertEquals(true, employees.at(2).getExtra().getBooleanValue());

		employees.at(1).setExtra(Mixed.mixedValue("new_value"));
		assertEquals("new_value", employees.at(1).getExtra().getValue());
		assertEquals("new_value", employees.at(1).getExtra().getStringValue());
	}
=======
@Test
    public void shouldAllowMixedValues() throws IllegalAccessException {
        assertEquals("extra", employees.at(0).getExtra().getValue());
        assertEquals("extra", employees.at(0).getExtra().getStringValue());

        assertEquals(1234L, employees.at(1).getExtra().getValue());
        assertEquals(1234L, employees.at(1).getExtra().getLongValue());

        assertEquals(true, employees.at(2).getExtra().getValue());
        assertEquals(true, employees.at(2).getExtra().getBooleanValue());

        employees.at(1).setExtra(Mixed.mixedValue("new_value"));
        assertEquals("new_value", employees.at(1).getExtra().getValue());
        assertEquals("new_value", employees.at(1).getExtra().getStringValue());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706729/fstmerge_var2_3889874955023786117

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706743/fstmerge_var1_8944286431901236714
@Test
	public void shouldProvideConvenienceMethods() {
		TestEmployeeRow employee = employees.last();

		// 2 predefined records in the "phones" sub-table should exist
		assertEquals(2, employee.phones.size());
		assertFalse(employee.phones.isEmpty());

		// make sure the 2 predefined records in the "phones" sub-table match
		checkCursorValues(EmployeesFixture.PHONES[2][0],
				employee.phones.first());
		checkCursorValues(EmployeesFixture.PHONES[2][0], employee.phones.get(0));
		checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.last());
		checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.get(1));

		// check the iteration through the predefined records
		Iterator<TestPhoneRow> it = employee.phones.iterator();
		checkIterator(it, EmployeesFixture.PHONES[2]);

		// clear the phones sub-table
		employee.phones.clear();

		// check there are no more records in the "phones" sub-table
		assertEquals(0, employee.phones.size());
		assertTrue(employee.phones.isEmpty());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706743/fstmerge_base_3657578703930158406
@Test
	public void shouldProvideConvenienceMethods() {
		TestEmployeeRow employee = employees.last();

		// 2 predefined records in the "phones" sub-table should exist
		assertEquals(2, employee.phones.size());
		assertFalse(employee.phones.isEmpty());

		// make sure the 2 predefined records in the "phones" sub-table match
		checkCursorValues(EmployeesFixture.PHONES[2][0],
				employee.phones.first());
		checkCursorValues(EmployeesFixture.PHONES[2][0], employee.phones.at(0));
		checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.last());
		checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.at(1));

		// check the iteration through the predefined records
		Iterator<TestPhoneRow> it = employee.phones.iterator();
		checkIterator(it, EmployeesFixture.PHONES[2]);

		// clear the phones sub-table
		employee.phones.clear();

		// check there are no more records in the "phones" sub-table
		assertEquals(0, employee.phones.size());
		assertTrue(employee.phones.isEmpty());
	}
=======
@Test
    public void shouldProvideConvenienceMethods() {
        TestEmployeeRow employee = employees.last();

        // 2 predefined records in the "phones" sub-table should exist
        assertEquals(2, employee.phones.size());
        assertFalse(employee.phones.isEmpty());

        // make sure the 2 predefined records in the "phones" sub-table match
        checkCursorValues(EmployeesFixture.PHONES[2][0],
                employee.phones.first());
        checkCursorValues(EmployeesFixture.PHONES[2][0], employee.phones.at(0));
        checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.last());
        checkCursorValues(EmployeesFixture.PHONES[2][1], employee.phones.at(1));

        // check the iteration through the predefined records
        Iterator<TestPhoneRow> it = employee.phones.iterator();
        checkIterator(it, EmployeesFixture.PHONES[2]);

        // clear the phones sub-table
        employee.phones.clear();

        // check there are no more records in the "phones" sub-table
        assertEquals(0, employee.phones.size());
        assertTrue(employee.phones.isEmpty());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706743/fstmerge_var2_5089072274343147550

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableCursorColumnTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706915/fstmerge_var1_5674129847751145173
@Test
	public void shouldSaveSubtableChanges() {
		TestEmployeeRow employee = employees.get(0);

		// check the basic operations
		TestPhoneTable phones1 = employee.getPhones();
		assertEquals(1, phones1.size());

		phones1.add("mobile", "111");
		assertEquals(2, phones1.size());

		TestPhoneTable phones2 = employee.getPhones();
		assertEquals(2, phones2.size());

		phones2.add("mobile", "222");
		assertEquals(3, phones2.size());

		phones2.insert(1, "home", "333");
		assertEquals(4, phones2.size());

		TestPhoneTable phones3 = employee.getPhones();
		assertEquals(2, phones3.type.eq("mobile").count());
		assertEquals(2, phones3.type.eq("home").count());

		assertEquals(1, phones3.number.eq("111").count());
		assertEquals(1, phones3.number.eq("123").count());
		assertEquals(0, phones3.number.eq("xxx").count());

		// check the search operations
		TestPhoneQuery phoneQuery = phones3.where().number.eq("111").number
				.neq("wrong").type.eq("mobile").type.neq("wrong");
		assertEquals(1, phoneQuery.count());

		TestPhoneView all = phoneQuery.findAll();
		assertEquals(1, all.size());
		checkPhone(all.get(0), "mobile", "111");

		checkPhone(phoneQuery.findFirst(), "mobile", "111");
		checkPhone(phoneQuery.findLast(), "mobile", "111");
		checkPhone(phoneQuery.findNext(), "mobile", "111");
		assertEquals(null, phoneQuery.findNext());

		// make sure the other sub-tables and independent and were not changed
		assertEquals(EmployeesFixture.PHONES[1].length, employees.get(1)
				.getPhones().size());
		assertEquals(EmployeesFixture.PHONES[2].length, employees.get(2)
				.getPhones().size());

		// check the clear operation on the query
		phoneQuery.clear();
		assertEquals(3, phones1.size());

		// check the clear operation
		phones3.clear();
		assertEquals(0, phones1.size());
		assertEquals(0, phones2.size());
		assertEquals(0, phones3.size());

		employees.clear();
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706915/fstmerge_base_6197877780166641780
@Test
	public void shouldSaveSubtableChanges() {
		TestEmployeeRow employee = employees.at(0);

		// check the basic operations
		TestPhoneTable phones1 = employee.getPhones();
		assertEquals(1, phones1.size());

		phones1.add("mobile", "111");
		assertEquals(2, phones1.size());

		TestPhoneTable phones2 = employee.getPhones();
		assertEquals(2, phones2.size());

		phones2.add("mobile", "222");
		assertEquals(3, phones2.size());

		phones2.insert(1, "home", "333");
		assertEquals(4, phones2.size());

		TestPhoneTable phones3 = employee.getPhones();
		assertEquals(2, phones3.type.eq("mobile").count());
		assertEquals(2, phones3.type.eq("home").count());

		assertEquals(1, phones3.number.eq("111").count());
		assertEquals(1, phones3.number.eq("123").count());
		assertEquals(0, phones3.number.eq("xxx").count());

		// check the search operations
		TestPhoneQuery phoneQuery = phones3.where().number.eq("111").number
				.neq("wrong").type.eq("mobile").type.neq("wrong");
		assertEquals(1, phoneQuery.count());

		TestPhoneView all = phoneQuery.findAll();
		assertEquals(1, all.size());
		checkPhone(all.at(0), "mobile", "111");

		checkPhone(phoneQuery.findFirst(), "mobile", "111");
		checkPhone(phoneQuery.findLast(), "mobile", "111");
		checkPhone(phoneQuery.findNext(), "mobile", "111");
		assertEquals(null, phoneQuery.findNext());

		// make sure the other sub-tables and independent and were not changed
		assertEquals(EmployeesFixture.PHONES[1].length, employees.at(1)
				.getPhones().size());
		assertEquals(EmployeesFixture.PHONES[2].length, employees.at(2)
				.getPhones().size());

		// check the clear operation on the query
		phoneQuery.clear();
		assertEquals(3, phones1.size());

		// check the clear operation
		phones3.clear();
		assertEquals(0, phones1.size());
		assertEquals(0, phones2.size());
		assertEquals(0, phones3.size());

		employees.clear();
	}
=======
@Test
    public void shouldSaveSubtableChanges() {
        TestEmployeeRow employee = employees.at(0);

        // check the basic operations
        TestPhoneTable phones1 = employee.getPhones();
        assertEquals(1, phones1.size());

        phones1.add("mobile", "111");
        assertEquals(2, phones1.size());

        TestPhoneTable phones2 = employee.getPhones();
        assertEquals(2, phones2.size());

        phones2.add("mobile", "222");
        assertEquals(3, phones2.size());

        phones2.insert(1, "home", "333");
        assertEquals(4, phones2.size());

        TestPhoneTable phones3 = employee.getPhones();
        assertEquals(2, phones3.type.eq("mobile").count());
        assertEquals(2, phones3.type.eq("home").count());

        assertEquals(1, phones3.number.eq("111").count());
        assertEquals(1, phones3.number.eq("123").count());
        assertEquals(0, phones3.number.eq("xxx").count());

        // check the search operations
        TestPhoneQuery phoneQuery = phones3.where().number.eq("111").number
                .neq("wrong").type.eq("mobile").type.neq("wrong");
        assertEquals(1, phoneQuery.count());

        TestPhoneView all = phoneQuery.findAll();
        assertEquals(1, all.size());
        checkPhone(all.at(0), "mobile", "111");

        checkPhone(phoneQuery.findFirst(), "mobile", "111");
        checkPhone(phoneQuery.findLast(), "mobile", "111");
        checkPhone(phoneQuery.findNext(), "mobile", "111");
        assertEquals(null, phoneQuery.findNext());

        // make sure the other sub-tables and independent and were not changed
        assertEquals(EmployeesFixture.PHONES[1].length, employees.at(1)
                .getPhones().size());
        assertEquals(EmployeesFixture.PHONES[2].length, employees.at(2)
                .getPhones().size());

        // check the clear operation on the query
        phoneQuery.clear();
        assertEquals(3, phones1.size());

        // check the clear operation
        phones3.clear();
        assertEquals(0, phones1.size());
        assertEquals(0, phones2.size());
        assertEquals(0, phones3.size());

        employees.clear();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706915/fstmerge_var2_3148209568135363412

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/SubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706925/fstmerge_var1_7972717731920547686
@Test
	public void shouldInvalidateWhenParentTableIsCleared() {
		TestEmployeeRow employee = employees.get(0);
		TestPhoneTable phones = employee.getPhones();
		assertTrue(phones.isValid());

		employees.clear();
		assertFalse(phones.isValid());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706925/fstmerge_base_2967437712433909219
@Test
	public void shouldInvalidateWhenParentTableIsCleared() {
		TestEmployeeRow employee = employees.at(0);
		TestPhoneTable phones = employee.getPhones();
		assertTrue(phones.isValid());

		employees.clear();
		assertFalse(phones.isValid());
	}
=======
@Test
    public void shouldInvalidateWhenParentTableIsCleared() {
        TestEmployeeRow employee = employees.at(0);
        TestPhoneTable phones = employee.getPhones();
        assertTrue(phones.isValid());

        employees.clear();
        assertFalse(phones.isValid());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706925/fstmerge_var2_2081683231246060946

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/SubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706931/fstmerge_var1_1966719585277969617
@Test
	public void shouldInvalidateOnRemovedRecordParentTable() {
		TestEmployeeRow employee = employees.get(0);
		TestPhoneTable phones = employee.getPhones();
		assertTrue(phones.isValid());

		employees.remove(2);
		assertFalse(phones.isValid());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706931/fstmerge_base_6996683363842663260
@Test
	public void shouldInvalidateOnRemovedRecordParentTable() {
		TestEmployeeRow employee = employees.at(0);
		TestPhoneTable phones = employee.getPhones();
		assertTrue(phones.isValid());

		employees.remove(2);
		assertFalse(phones.isValid());
	}
=======
@Test
    public void shouldInvalidateOnRemovedRecordParentTable() {
        TestEmployeeRow employee = employees.at(0);
        TestPhoneTable phones = employee.getPhones();
        assertTrue(phones.isValid());

        employees.remove(2);
        assertFalse(phones.isValid());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706931/fstmerge_var2_5163198181294538363

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/SubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706943/fstmerge_var1_2291687621548672449
private void setAndTestValue(long val) {
		employees.get(1).setSalary(val);
		assertEquals(val, employees.get(1).getSalary());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706943/fstmerge_base_7830480752781560089
private void setAndTestValue(long val) {
		employees.at(1).setSalary(val);
		assertEquals(val, employees.at(1).getSalary());
	}
=======
private void setAndTestValue(long val) {
        employees.at(1).setSalary(val);
        assertEquals(val, employees.at(1).getSalary());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706943/fstmerge_var2_6266025124421140175

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706952/fstmerge_var1_2449431566468318309
@Test
	public void shouldConstructSubtableInline() {
		TestPhoneTable phones = employees.last().getPhones();
		assertEquals(2, phones.size());
		
		assertEquals("home", phones.get(0).type.get());
		assertEquals("123-123", phones.get(0).number.get());
		
		assertEquals("mobile", phones.get(1).getType());
		assertEquals("456-456", phones.get(1).getNumber());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706952/fstmerge_base_8820008307698480430
@Test
	public void shouldConstructSubtableInline() {
		TestPhoneTable phones = employees.last().getPhones();
		assertEquals(2, phones.size());
		
		assertEquals("home", phones.at(0).type.get());
		assertEquals("123-123", phones.at(0).number.get());
		
		assertEquals("mobile", phones.at(1).getType());
		assertEquals("456-456", phones.at(1).getNumber());
	}
=======
@Test
    public void shouldConstructSubtableInline() {
        TestPhoneTable phones = employees.last().getPhones();
        assertEquals(2, phones.size());

        assertEquals("home", phones.at(0).type.get());
        assertEquals("123-123", phones.at(0).number.get());

        assertEquals("mobile", phones.at(1).getType());
        assertEquals("456-456", phones.at(1).getNumber());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706952/fstmerge_var2_5313646169469249234

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706958/fstmerge_var1_5436738303742760068
@Test(enabled=true)
	public void shouldDeleteAllButLast() {		
		employees.moveLastOver(2);
		employees.moveLastOver(1);
		employees.moveLastOver(0);
		assertEquals("Bond", employees.get(0).getLastName());
		TestPhoneTable phones2 = employees.last().getPhones();
		assertEquals(2, phones2.size());
		assertEquals(1, employees.size());

		try {
			employees.moveLastOver(0);
			// should not allow the last to be removed
			assert(false);
		} catch (Exception e) {
		}
		
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706958/fstmerge_base_191346604155803138
@Test(enabled=true)
	public void shouldDeleteAllButLast() {		
		employees.moveLastOver(2);
		employees.moveLastOver(1);
		employees.moveLastOver(0);
		assertEquals("Bond", employees.at(0).getLastName());
		TestPhoneTable phones2 = employees.last().getPhones();
		assertEquals(2, phones2.size());
		assertEquals(1, employees.size());

		try {
			employees.moveLastOver(0);
			// should not allow the last to be removed
			assert(false);
		} catch (Exception e) {
		}
		
	}
=======
@Test(enabled=true)
    public void shouldDeleteAllButLast() {
        employees.moveLastOver(2);
        employees.moveLastOver(1);
        employees.moveLastOver(0);
        assertEquals("Bond", employees.at(0).getLastName());
        TestPhoneTable phones2 = employees.last().getPhones();
        assertEquals(2, phones2.size());
        assertEquals(1, employees.size());

        try {
            employees.moveLastOver(0);
            // should not allow the last to be removed
            assert(false);
        } catch (Exception e) {
        }

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706958/fstmerge_var2_1994265766941515085

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableDataOperationsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706962/fstmerge_var1_4128189828029410121
@Test
	public void shouldStoreSubtableInMixedTypeColumn() {
		TestEmployeeRow employee = employees.get(0);
		TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

		phones.add("mobile", "123");
		assertEquals(1, phones.size());

		TestPhoneTable phones2 = employee.extra.getSubtable(TestPhoneTable.class);
		assertEquals(1, phones2.size());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706962/fstmerge_base_8182312324524813504
@Test
	public void shouldStoreSubtableInMixedTypeColumn() {
		TestEmployeeRow employee = employees.at(0);
		TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

		phones.add("mobile", "123");
		assertEquals(1, phones.size());

		TestPhoneTable phones2 = employee.extra.getSubtable(TestPhoneTable.class);
		assertEquals(1, phones2.size());
	}
=======
@Test
    public void shouldStoreSubtableInMixedTypeColumn() {
        TestEmployeeRow employee = employees.at(0);
        TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

        phones.add("mobile", "123");
        assertEquals(1, phones.size());

        TestPhoneTable phones2 = employee.extra.getSubtable(TestPhoneTable.class);
        assertEquals(1, phones2.size());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706962/fstmerge_var2_8190477401192659474

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/MixedSubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706967/fstmerge_var1_4307559922575095618
@Test(expectedExceptions = IllegalArgumentException.class)
	public void shouldFailOnOnWrongSubtableRetrievalFromMixedTypeColumn() {
		TestEmployeeRow employee = employees.get(0);
		TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

		phones.add("mobile", "123");
		assertEquals(1, phones.size());

		// should fail - since we try to get the wrong subtable class
		employee.extra.getSubtable(TestEmployeeTable.class);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706967/fstmerge_base_4301393270053173010
@Test(expectedExceptions = IllegalArgumentException.class)
	public void shouldFailOnOnWrongSubtableRetrievalFromMixedTypeColumn() {
		TestEmployeeRow employee = employees.at(0);
		TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

		phones.add("mobile", "123");
		assertEquals(1, phones.size());

		// should fail - since we try to get the wrong subtable class
		employee.extra.getSubtable(TestEmployeeTable.class);
	}
=======
@Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldFailOnOnWrongSubtableRetrievalFromMixedTypeColumn() {
        TestEmployeeRow employee = employees.at(0);
        TestPhoneTable phones = employee.extra.createSubtable(TestPhoneTable.class);

        phones.add("mobile", "123");
        assertEquals(1, phones.size());

        // should fail - since we try to get the wrong subtable class
        employee.extra.getSubtable(TestEmployeeTable.class);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706967/fstmerge_var2_3506160537339638399

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/MixedSubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706972/fstmerge_var1_6131076960401984592
@Test(expectedExceptions = IllegalArgumentException.class)
	public void shouldFailOnOnSubtableRetrtievalFromIncorrectType() {
		TestEmployeeRow employee = employees.get(0);
		employee.extra.set(123);

		// should fail
		employee.extra.getSubtable(TestPhoneTable.class);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706972/fstmerge_base_2564772853184887650
@Test(expectedExceptions = IllegalArgumentException.class)
	public void shouldFailOnOnSubtableRetrtievalFromIncorrectType() {
		TestEmployeeRow employee = employees.at(0);
		employee.extra.set(123);

		// should fail
		employee.extra.getSubtable(TestPhoneTable.class);
	}
=======
@Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldFailOnOnSubtableRetrtievalFromIncorrectType() {
        TestEmployeeRow employee = employees.at(0);
        employee.extra.set(123);

        // should fail
        employee.extra.getSubtable(TestPhoneTable.class);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706972/fstmerge_var2_3967522694842391825

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/MixedSubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706977/fstmerge_var1_5582353378324267374
@Test
	public void shouldGetCorrectColumnValues() throws IllegalAccessException {
		TestEmployeeRow employee0 = employees.first();
		checkCursor(EmployeesFixture.EMPLOYEES[0], employee0);

		TestEmployeeRow employee1 = employees.get(1);
		checkCursor(EmployeesFixture.EMPLOYEES[1], employee1);

		TestEmployeeRow employee2 = employee1.next();
		checkCursor(EmployeesFixture.EMPLOYEES[2], employee2);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706977/fstmerge_base_8742452761692399238
@Test
	public void shouldGetCorrectColumnValues() throws IllegalAccessException {
		TestEmployeeRow employee0 = employees.first();
		checkCursor(EmployeesFixture.EMPLOYEES[0], employee0);

		TestEmployeeRow employee1 = employees.at(1);
		checkCursor(EmployeesFixture.EMPLOYEES[1], employee1);

		TestEmployeeRow employee2 = employee1.next();
		checkCursor(EmployeesFixture.EMPLOYEES[2], employee2);
	}
=======
@Test
    public void shouldGetCorrectColumnValues() throws IllegalAccessException {
        TestEmployeeRow employee0 = employees.first();
        checkCursor(EmployeesFixture.EMPLOYEES[0], employee0);

        TestEmployeeRow employee1 = employees.at(1);
        checkCursor(EmployeesFixture.EMPLOYEES[1], employee1);

        TestEmployeeRow employee2 = employee1.next();
        checkCursor(EmployeesFixture.EMPLOYEES[2], employee2);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884706977/fstmerge_var2_483455240453380211

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/CursorColumnsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707063/fstmerge_var1_3837618313039813027
@Test(enabled = true)
	public void shouldCreateTablesInGroup() {
		//util.setDebugLevel(2);
		Group group = new Group();

		TestEmployeeTable employees = new TestEmployeeTable(group);
		employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
				new Date(), "extra", null);
		employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
				new Date(), true, null);
		employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
				5 }, new Date(), 1234, null);

		byte[] data = group.writeToMem();
		
		// check table info retrieval
		assertEquals(1, group.size());
		assertEquals(TestEmployeeTable.class.getSimpleName(),
				group.getTableName(0));
		assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
		assertFalse(group.hasTable("xxxxxx"));

		// check table retrieval
		assertEquals(employees.size(),
				group.getTable(TestEmployeeTable.class.getSimpleName()).size());
		employees.clear();
		group.close();

		// Make new group based on same data.
		Group group2 = new Group(data);
		TestEmployeeTable employees2 = new TestEmployeeTable(group2);
		assertEquals(3, employees2.size());
		assertEquals(NAME0, employees2.get(0).getFirstName());
		assertEquals(NAME1, employees2.get(1).getFirstName());
		assertEquals(NAME2, employees2.get(2).getFirstName());
		employees2.clear();
		group2.close();

		// Make new empty group
		Group group3 = new Group();
		TestEmployeeTable employees3 = new TestEmployeeTable(group3);
		assertEquals(0, employees3.size());
		employees3.clear();
		group3.close();

	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707063/fstmerge_base_7739942256572537762
@Test(enabled = true)
	public void shouldCreateTablesInGroup() {
		//util.setDebugLevel(2);
		Group group = new Group();

		TestEmployeeTable employees = new TestEmployeeTable(group);
		employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
				new Date(), "extra", null);
		employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
				new Date(), true, null);
		employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
				5 }, new Date(), 1234, null);

		byte[] data = group.writeToMem();
		
		// check table info retrieval
		assertEquals(1, group.size());
		assertEquals(TestEmployeeTable.class.getSimpleName(),
				group.getTableName(0));
		assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
		assertFalse(group.hasTable("xxxxxx"));

		// check table retrieval
		assertEquals(employees.size(),
				group.getTable(TestEmployeeTable.class.getSimpleName()).size());
		employees.clear();
		group.close();

		// Make new group based on same data.
		Group group2 = new Group(data);
		TestEmployeeTable employees2 = new TestEmployeeTable(group2);
		assertEquals(3, employees2.size());
		assertEquals(NAME0, employees2.at(0).getFirstName());
		assertEquals(NAME1, employees2.at(1).getFirstName());
		assertEquals(NAME2, employees2.at(2).getFirstName());
		employees2.clear();
		group2.close();

		// Make new empty group
		Group group3 = new Group();
		TestEmployeeTable employees3 = new TestEmployeeTable(group3);
		assertEquals(0, employees3.size());
		employees3.clear();
		group3.close();

	}
=======
@Test(enabled = true)
    public void shouldCreateTablesInGroup() {
        //util.setDebugLevel(2);
        Group group = new Group();

        TestEmployeeTable employees = new TestEmployeeTable(group);
        employees.add(NAME0, "Doe", 10000, true, new byte[] { 1, 2, 3 },
                new Date(), "extra", null);
        employees.add(NAME2, "B. Good", 20000, true, new byte[] { 1, 2, 3 },
                new Date(), true, null);
        employees.insert(1, NAME1, "Mihajlovski", 30000, false, new byte[] { 4,
                5 }, new Date(), 1234, null);

        byte[] data = group.writeToMem();

        // check table info retrieval
        assertEquals(1, group.size());
        assertEquals(TestEmployeeTable.class.getSimpleName(),
                group.getTableName(0));
        assertTrue(group.hasTable(TestEmployeeTable.class.getSimpleName()));
        assertFalse(group.hasTable("xxxxxx"));

        // check table retrieval
        assertEquals(employees.size(),
                group.getTable(TestEmployeeTable.class.getSimpleName()).size());
        employees.clear();
        group.close();

        // Make new group based on same data.
        Group group2 = new Group(data);
        TestEmployeeTable employees2 = new TestEmployeeTable(group2);
        assertEquals(3, employees2.size());
        assertEquals(NAME0, employees2.at(0).getFirstName());
        assertEquals(NAME1, employees2.at(1).getFirstName());
        assertEquals(NAME2, employees2.at(2).getFirstName());
        employees2.clear();
        group2.close();

        // Make new empty group
        Group group3 = new Group();
        TestEmployeeTable employees3 = new TestEmployeeTable(group3);
        assertEquals(0, employees3.size());
        employees3.clear();
        group3.close();

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707063/fstmerge_var2_629371736182791050

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707104/fstmerge_var1_993611440686025870
@Test
	public void shouldAddValueToWholeColumn() {
		employees.salary.addLong(123);
		for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
			assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123, employees
					.get(i).getSalary());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707104/fstmerge_base_3026085488399725311
@Test
	public void shouldAddValueToWholeColumn() {
		employees.salary.addLong(123);
		for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
			assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123, employees
					.at(i).getSalary());
	}
=======
@Test
    public void shouldAddValueToWholeColumn() {
        employees.salary.addLong(123);
        for (int i = 0; i < EmployeesFixture.EMPLOYEES.length; ++i)
            assertEquals(EmployeesFixture.EMPLOYEES[i].salary + 123, employees
                    .at(i).getSalary());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707104/fstmerge_var2_4192011212650176073

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableColumnsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707108/fstmerge_var1_8721372347684849761
@Test
	public void shouldGetAllColumnValues() {
		assertArrayEquals(EmployeesFixture.getAll(0),
				employees.firstName.getAll());
		assertArrayEquals(EmployeesFixture.getAll(1),
				employees.lastName.getAll());
		assertArrayEquals(EmployeesFixture.getAll(2), employees.salary.getAll());
		assertArrayEquals(EmployeesFixture.getAll(3), employees.driver.getAll());
		assertArrayEquals(EmployeesFixture.getAll(4), employees.photo.getAll());
		assertDateArrayEquals(EmployeesFixture.getAll(5), employees.birthdate.getAll());
		assertArrayEquals(EmployeesFixture.getAll(6), employees.extra.getAll());

		TestPhoneTable[] phoneTables = employees.phones.getAll();
		assertEquals(EmployeesFixture.PHONES.length, phoneTables.length);

		for (int i = 0; i < phoneTables.length; i++) {
			PhoneData[] phones = EmployeesFixture.PHONES[i];
			assertEquals(phones.length, phoneTables[i].size());
			for (int j = 0; j < phones.length; j++) {
				assertEquals(phones[j].type, phoneTables[i].get(j).type.get());
				assertEquals(phones[j].number,
						phoneTables[i].get(j).number.get());
			}
		}
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707108/fstmerge_base_930010869454171378
@Test
	public void shouldGetAllColumnValues() {
		assertArrayEquals(EmployeesFixture.getAll(0),
				employees.firstName.getAll());
		assertArrayEquals(EmployeesFixture.getAll(1),
				employees.lastName.getAll());
		assertArrayEquals(EmployeesFixture.getAll(2), employees.salary.getAll());
		assertArrayEquals(EmployeesFixture.getAll(3), employees.driver.getAll());
		assertArrayEquals(EmployeesFixture.getAll(4), employees.photo.getAll());
		assertDateArrayEquals(EmployeesFixture.getAll(5), employees.birthdate.getAll());
		assertArrayEquals(EmployeesFixture.getAll(6), employees.extra.getAll());

		TestPhoneTable[] phoneTables = employees.phones.getAll();
		assertEquals(EmployeesFixture.PHONES.length, phoneTables.length);

		for (int i = 0; i < phoneTables.length; i++) {
			PhoneData[] phones = EmployeesFixture.PHONES[i];
			assertEquals(phones.length, phoneTables[i].size());
			for (int j = 0; j < phones.length; j++) {
				assertEquals(phones[j].type, phoneTables[i].at(j).type.get());
				assertEquals(phones[j].number,
						phoneTables[i].at(j).number.get());
			}
		}
	}
=======
@Test
    public void shouldGetAllColumnValues() {
        assertArrayEquals(EmployeesFixture.getAll(0),
                employees.firstName.getAll());
        assertArrayEquals(EmployeesFixture.getAll(1),
                employees.lastName.getAll());
        assertArrayEquals(EmployeesFixture.getAll(2), employees.salary.getAll());
        assertArrayEquals(EmployeesFixture.getAll(3), employees.driver.getAll());
        assertArrayEquals(EmployeesFixture.getAll(4), employees.photo.getAll());
        assertDateArrayEquals(EmployeesFixture.getAll(5), employees.birthdate.getAll());
        assertArrayEquals(EmployeesFixture.getAll(6), employees.extra.getAll());

        TestPhoneTable[] phoneTables = employees.phones.getAll();
        assertEquals(EmployeesFixture.PHONES.length, phoneTables.length);

        for (int i = 0; i < phoneTables.length; i++) {
            PhoneData[] phones = EmployeesFixture.PHONES[i];
            assertEquals(phones.length, phoneTables[i].size());
            for (int j = 0; j < phones.length; j++) {
                assertEquals(phones[j].type, phoneTables[i].at(j).type.get());
                assertEquals(phones[j].number,
                        phoneTables[i].at(j).number.get());
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707108/fstmerge_var2_5347418767911396372

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/TableColumnsTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707154/fstmerge_var1_9118145542841429835
@Test
	public void shouldNavigateToNextRecord() {
		TestEmployeeRow e = getTableOrView().get(0).next();

		assertEquals(1, e.getPosition());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707154/fstmerge_base_6230932916664584870
@Test
	public void shouldNavigateToNextRecord() {
		TestEmployeeRow e = getTableOrView().at(0).next();

		assertEquals(1, e.getPosition());
	}
=======
@Test
    public void shouldNavigateToNextRecord() {
        TestEmployeeRow e = getTableOrView().at(0).next();

        assertEquals(1, e.getPosition());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707154/fstmerge_var2_343728965685576192

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractNavigationTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707158/fstmerge_var1_1158499216302822603
@Test
	public void shouldNavigateToPreviousRecord() {
		TestEmployeeRow e = getTableOrView().get(1).previous();

		assertEquals(0, e.getPosition());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707158/fstmerge_base_5501009292311737165
@Test
	public void shouldNavigateToPreviousRecord() {
		TestEmployeeRow e = getTableOrView().at(1).previous();

		assertEquals(0, e.getPosition());
	}
=======
@Test
    public void shouldNavigateToPreviousRecord() {
        TestEmployeeRow e = getTableOrView().at(1).previous();

        assertEquals(0, e.getPosition());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707158/fstmerge_var2_2737444570320413548

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractNavigationTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707163/fstmerge_var1_2746150015447237555
@Test
	public void shouldNavigateAfterSpecifiedRecords() {
		TestEmployeeRow e = getTableOrView().get(0).after(2);

		assertEquals(2, e.getPosition());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707163/fstmerge_base_2715840404290503678
@Test
	public void shouldNavigateAfterSpecifiedRecords() {
		TestEmployeeRow e = getTableOrView().at(0).after(2);

		assertEquals(2, e.getPosition());
	}
=======
@Test
    public void shouldNavigateAfterSpecifiedRecords() {
        TestEmployeeRow e = getTableOrView().at(0).after(2);

        assertEquals(2, e.getPosition());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707163/fstmerge_var2_3277763836534279155

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractNavigationTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707167/fstmerge_var1_3401575792152526214
@Test
	public void shouldNavigateBeforeSpecifiedRecords() {
		TestEmployeeRow e = getTableOrView().get(2).before(2);

		assertEquals(0, e.getPosition());
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707167/fstmerge_base_963332110407090719
@Test
	public void shouldNavigateBeforeSpecifiedRecords() {
		TestEmployeeRow e = getTableOrView().at(2).before(2);

		assertEquals(0, e.getPosition());
	}
=======
@Test
    public void shouldNavigateBeforeSpecifiedRecords() {
        TestEmployeeRow e = getTableOrView().at(2).before(2);

        assertEquals(0, e.getPosition());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707167/fstmerge_var2_3902466092687957927

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractNavigationTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707172/fstmerge_var1_814582402627002951
@Test
	public void shouldReturnNullOnInvalidPosition() {
		assertNull(getTableOrView().get(0).previous());
		assertNull(getTableOrView().last().next());
		assertNull(getTableOrView().get(1).before(2));
		assertNull(getTableOrView().get(2).after(1000));
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707172/fstmerge_base_2591101301916730025
@Test
	public void shouldReturnNullOnInvalidPosition() {
		assertNull(getTableOrView().at(0).previous());
		assertNull(getTableOrView().last().next());
		assertNull(getTableOrView().at(1).before(2));
		assertNull(getTableOrView().at(2).after(1000));
	}
=======
@Test
    public void shouldReturnNullOnInvalidPosition() {
        assertNull(getTableOrView().at(0).previous());
        assertNull(getTableOrView().last().next());
        assertNull(getTableOrView().at(1).before(2));
        assertNull(getTableOrView().at(2).after(1000));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884707172/fstmerge_var2_7050744046766556876

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-test/src/test/java/com/tightdb/typed/AbstractNavigationTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884708319/fstmerge_var1_5228569403484793830
WriteTransaction(SharedGroup db, long nativePtr) {
		super(nativePtr, false); // Group is mutable
		this.db = db;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884708319/fstmerge_base_5093898692893998962
WriteTransaction(SharedGroup db, long nativePtr)
    {
        super(nativePtr, false);	// Group is mutable
        this.db = db;
    }
=======
WriteTransaction(SharedGroup db, long nativePtr)
    {
        super(nativePtr, false);    // Group is mutable
        this.db = db;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884708319/fstmerge_var2_8998898774005365737

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-core/src/main/java/com/tightdb/WriteTransaction.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710469/fstmerge_var1_2319054992955769563
public T next() {
		if (hasNext() == false) {
			throw new NoSuchElementException();
		}
		return tableOrView.get(index++);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710469/fstmerge_base_5605259942996145308
public T next() {
		if (hasNext() == false) {
			throw new NoSuchElementException();
		}
		return tableOrView.at(index++);
	}
=======
public T next() {
        if (hasNext() == false) {
            throw new NoSuchElementException();
        }
        return tableOrView.at(index++);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710469/fstmerge_var2_6552239580005017246

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-core/src/main/java/com/tightdb/typed/TableOrViewIterator.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710764/fstmerge_var1_6803816476024297829
public static void print(String caption, AbstractTableOrView<? extends AbstractCursor<?>, ?, ?> tableOrView) {
		String format = "%-15s| ";
		System.out.println(String.format("================== %s ====================", caption));
		if (!tableOrView.isEmpty()) {
			for (AbstractColumn<?, ?, ?, ?> column : tableOrView.get(0).columns()) {
				System.out.print(String.format(format, column.getName()));
			}
			System.out.println();

			for (int i = 0; i < tableOrView.size(); i++) {
				AbstractCursor<?> p = tableOrView.get(i);
				for (AbstractColumn<?, ?, ?, ?> column : p.columns()) {
					System.out.print(String.format(format, column.getReadableValue()));
				}
				System.out.println();
			}
			System.out.println();
		} else {
			System.out.println(" - No records to show!");
		}
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710764/fstmerge_base_3344809412228098168
public static void print(String caption, AbstractTableOrView<? extends AbstractCursor<?>, ?, ?> tableOrView) {
		String format = "%-15s| ";
		System.out.println(String.format("================== %s ====================", caption));
		if (!tableOrView.isEmpty()) {
			for (AbstractColumn<?, ?, ?, ?> column : tableOrView.at(0).columns()) {
				System.out.print(String.format(format, column.getName()));
			}
			System.out.println();

			for (int i = 0; i < tableOrView.size(); i++) {
				AbstractCursor<?> p = tableOrView.at(i);
				for (AbstractColumn<?, ?, ?, ?> column : p.columns()) {
					System.out.print(String.format(format, column.getReadableValue()));
				}
				System.out.println();
			}
			System.out.println();
		} else {
			System.out.println(" - No records to show!");
		}
	}
=======
public static void print(String caption, AbstractTableOrView<? extends AbstractCursor<?>, ?, ?> tableOrView) {
        String format = "%-15s| ";
        System.out.println(String.format("================== %s ====================", caption));
        if (!tableOrView.isEmpty()) {
            for (AbstractColumn<?, ?, ?, ?> column : tableOrView.at(0).columns()) {
                System.out.print(String.format(format, column.getName()));
            }
            System.out.println();

            for (int i = 0; i < tableOrView.size(); i++) {
                AbstractCursor<?> p = tableOrView.at(i);
                for (AbstractColumn<?, ?, ?, ?> column : p.columns()) {
                    System.out.print(String.format(format, column.getReadableValue()));
                }
                System.out.println();
            }
            System.out.println();
        } else {
            System.out.println(" - No records to show!");
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710764/fstmerge_var2_4842688189870973641

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-core/src/main/java/com/tightdb/typed/TightDB.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710842/fstmerge_var1_2298029894994705393
@Deprecated
	public Cursor at(long position) {
		return cursor(position);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710842/fstmerge_base_2857816430386107211
public Cursor at(long position) {
		return cursor(position);
	}
=======
public Cursor at(long position) {
        return cursor(position);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884710842/fstmerge_var2_485795461081062971

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTableOrView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884711507/fstmerge_var1_8675537764567031940
@Deprecated
	public Subcursor at(long position) {
		return subcursor(position);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884711507/fstmerge_base_2473450985756454166
public Subcursor at(long position) {
		return subcursor(position);
	}
=======
public Subcursor at(long position) {
        return subcursor(position);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415884711507/fstmerge_var2_1272798648597653241

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_777f4_4cd64/rev_777f4-4cd64/tightdb-java-core/src/main/java/com/tightdb/typed/TableCursorColumn.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f0652_057e7/rev_f0652-057e7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8e9d8_dd0b2/rev_8e9d8-dd0b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_437b1_3a114/rev_437b1-3a114.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_97b48_e65b9/rev_97b48-e65b9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db41b_020f7/rev_db41b-020f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f5d18_b51ad/rev_f5d18-b51ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3e9b0_05358/rev_3e9b0-05358.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4738a_048c0/rev_4738a-048c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_47814_c8ca2/rev_47814-c8ca2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7d4fb_0417a/rev_7d4fb-0417a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_47814_3c6dc/rev_47814-3c6dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c2b1d_9bf3b/rev_c2b1d-9bf3b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2f96_c2b1d/rev_e2f96-c2b1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e1064_ccf68/rev_e1064-ccf68.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3e348_d8208/rev_3e348-d8208.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d8208_3e348/rev_d8208-3e348.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e83ca_42b50/rev_e83ca-42b50.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_649d9_708c2/rev_649d9-708c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e1064_e2f96/rev_e1064-e2f96.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885095654/fstmerge_var1_4123712396033229231
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.ColumnTypeString, "Name");
	    t.addColumn(ColumnType.ColumnTypeBool,   "Study");
	    t.addColumn(ColumnType.ColumnTypeInt,    "Age");
	    t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
	    t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
	    t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
	    t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
	    t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885095654/fstmerge_base_8782858212992430989
=======
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.STRING, "Name");
	    t.addColumn(ColumnType.BOOLEAN,   "Study");
	    t.addColumn(ColumnType.LONG,    "Age");
	    t.addColumn(ColumnType.DATE,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.STRING, "Unsupported0");
	    t.addColumn(ColumnType.FLOAT,  "Unsupported1");
	    t.addColumn(ColumnType.DOUBLE, "Unsupported2");
	    t.addColumn(ColumnType.MIXED,  "Unsupported3");
	    t.addColumn(ColumnType.TABLE,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885095654/fstmerge_var2_4688006989363996867

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096300/fstmerge_var1_8687773635522947554
@Test
    public void shouldCommitToDisk() throws IOException {
    	new File(FILENAME).delete();

    	// Write a DB to file
    	Group group = new Group(FILENAME, OpenMode.READ_WRITE);
    	group.commit();
  	
      	Table tbl = group.getTable("test");
    	tbl.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl.add(1);
    	group.commit();
    	assertEquals(tbl.getLong(0, 0), 1);
    	
    	// Update, commit and close file.
    	tbl.set(0, 27);
    	group.commit();
    	group.close();
    	
    	// Open file again and verify content
    	Group readGrp = new Group(FILENAME);
    	Table tbl2 = readGrp.getTable("test");
    	assertEquals(tbl2.getLong(0, 0), 27);
    	readGrp.close();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096300/fstmerge_base_2889816713056152434
=======
@Test
    public void shouldCommitToDisk() throws IOException {
    	new File(FILENAME).delete();

    	// Write a DB to file
    	Group group = new Group(FILENAME, OpenMode.READ_WRITE);
    	group.commit();
  	
      	Table tbl = group.getTable("test");
    	tbl.addColumn(ColumnType.LONG, "number");
    	tbl.add(1);
    	group.commit();
    	assertEquals(tbl.getLong(0, 0), 1);
    	
    	// Update, commit and close file.
    	tbl.set(0, 27);
    	group.commit();
    	group.close();
    	
    	// Open file again and verify content
    	Group readGrp = new Group(FILENAME);
    	Table tbl2 = readGrp.getTable("test");
    	assertEquals(tbl2.getLong(0, 0), 27);
    	readGrp.close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096300/fstmerge_var2_7600992318129344542

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096328/fstmerge_var1_2422882333230573010
@Test
    public void shouldCompareGroups() {
    	Group group1 = new Group();
      	Table tbl = group1.getTable("test");
    	tbl.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl.add(1);

    	Group group2 = new Group();
      	Table tbl2 = group2.getTable("test");
    	tbl2.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl2.add(1);
    	
    	assertEquals(true, group1.equals(group2));
    	
    	tbl2.add(2);
    	assertEquals(false, group1.equals(group2));    	
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096328/fstmerge_base_4308278169128039673
=======
@Test
    public void shouldCompareGroups() {
    	Group group1 = new Group();
      	Table tbl = group1.getTable("test");
    	tbl.addColumn(ColumnType.LONG, "number");
    	tbl.add(1);

    	Group group2 = new Group();
      	Table tbl2 = group2.getTable("test");
    	tbl2.addColumn(ColumnType.LONG, "number");
    	tbl2.add(1);
    	
    	assertEquals(true, group1.equals(group2));
    	
    	tbl2.add(2);
    	assertEquals(false, group1.equals(group2));    	
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096328/fstmerge_var2_240080428887513484

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096522/fstmerge_var1_4851128404731576666
@Test
    public void shouldExportJSONContainingSomeValues() {

        Date date = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);

        Table t = new Table();

        t.addColumn(ColumnType.ColumnTypeDate, "date");
        t.addColumn(ColumnType.ColumnTypeString, "name");

        t.add(date, "name1");   

        //JSON must contain the current year
        assertTrue(t.toJson().contains(""+year));

        //JSON should not contain the next yeaer
        assertFalse(t.toJson().contains(""+year+1));

        Date date2 = new Date();
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        //Month is zero-indexed
        int month2 = cal2.get(Calendar.MONTH)+1;

        t.add(date2, "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");

        assertTrue(t.toJson().contains("name"));
        
        System.out.println("Month: " + month2);
        System.out.println(t.toJson());
        

        assertTrue(t.toJson().contains(""+month2));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096522/fstmerge_base_2455806503881420500
=======
@Test
    public void shouldExportJSONContainingSomeValues() {

        Date date = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);

        Table t = new Table();

        t.addColumn(ColumnType.DATE, "date");
        t.addColumn(ColumnType.STRING, "name");

        t.add(date, "name1");   

        //JSON must contain the current year
        assertTrue(t.toJson().contains(""+year));

        //JSON should not contain the next yeaer
        assertFalse(t.toJson().contains(""+year+1));

        Date date2 = new Date();
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        //Month is zero-indexed
        int month2 = cal2.get(Calendar.MONTH)+1;

        t.add(date2, "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");

        assertTrue(t.toJson().contains("name"));
        
        System.out.println("Month: " + month2);
        System.out.println(t.toJson());
        

        assertTrue(t.toJson().contains(""+month2));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096522/fstmerge_var2_4851420820773483817

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/experiment/DateToJSONTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096527/fstmerge_var1_5133816514678152307
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.ColumnTypeDate, "Date");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Integer");
        
        t.add(new Date(), "I'm a String", 33);
        
        v = t.where().findAll();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096527/fstmerge_base_89821227098649522
=======
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.DATE, "Date");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.LONG , "Long");
        
        t.add(new Date(), "I'm a String", 33);
        
        v = t.where().findAll();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096527/fstmerge_var2_3097152096045578478

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096570/fstmerge_var1_1395267067018201844
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.ColumnTypeDate, "Date");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Integer");
        
        t.add(new Date(), "I'm a String", 33);
        t.add(new Date(), "Second String", 458);
        
        q = t.where();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096570/fstmerge_base_30451208483181747
=======
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.DATE, "Date");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.LONG, "Long");
        
        t.add(new Date(), "I'm a String", 33);
        t.add(new Date(), "Second String", 458);
        
        q = t.where();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096570/fstmerge_var2_29504415057898808

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeQueryTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096596/fstmerge_var1_3892223087187875712
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.ColumnTypeString, "Name");
        table.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        table.addColumn(ColumnType.ColumnTypeInt, "Age");
        table.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Name");
        fromGroup.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        fromGroup.addColumn(ColumnType.ColumnTypeInt, "Age");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.ColumnTypeString, "Name");
            tab.addColumn(ColumnType.ColumnTypeDouble, "GPA");
            tab.addColumn(ColumnType.ColumnTypeInt, "Age");
            tab.addColumn(ColumnType.ColumnTypeString, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096596/fstmerge_base_280975283104442056
=======
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "Name");
        table.addColumn(ColumnType.DOUBLE, "GPA");
        table.addColumn(ColumnType.LONG, "Age");
        table.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.STRING, "Name");
        fromGroup.addColumn(ColumnType.DOUBLE, "GPA");
        fromGroup.addColumn(ColumnType.LONG, "Age");
        fromGroup.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.STRING, "Name");
            tab.addColumn(ColumnType.DOUBLE, "GPA");
            tab.addColumn(ColumnType.LONG, "Age");
            tab.addColumn(ColumnType.STRING, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096596/fstmerge_var2_5119948705958646528

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096600/fstmerge_var1_8986430045712112975
void init() {
        table = new Table();
        table.addColumn(ColumnType.ColumnTypeInt, "number");
        table.addColumn(ColumnType.ColumnTypeString, "name");

        long i = 0;
        table.add(0, "A");
        table.add(1, "B");
        table.add(2, "C");
        table.add(3, "B");
        table.add(4, "D");
        table.add(5, "D");
        table.add(6, "D");
        assertEquals(7, table.size());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096600/fstmerge_base_4155684468664736812
void init() {
        table = new Table();
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeInt, "number");
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        table.updateFromSpec(tableSpec);

        long i = 0;
        table.add(0, "A");
        table.add(1, "B");
        table.add(2, "C");
        table.add(3, "B");
        table.add(4, "D");
        table.add(5, "D");
        table.add(6, "D");
        assertEquals(7, table.size());
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885096600/fstmerge_var2_3940435034254307014

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02ff4_f8936/rev_02ff4-f8936/tightdb-java-test/src/test/java/com/tightdb/JNIDistinctTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ad146_02ff4/rev_ad146-02ff4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_532c0_95c8b/rev_532c0-95c8b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_532c0_70692/rev_532c0-70692.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fb506_532c0/rev_fb506-532c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3ffa7_cfc80/rev_3ffa7-cfc80.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6b699_4c70b/rev_6b699-4c70b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6b699_e1a8b/rev_6b699-e1a8b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fdc4e_0548f/rev_fdc4e-0548f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1e97_fca63/rev_c1e97-fca63.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_70692_fca63/rev_70692-fca63.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2494d_6af6f/rev_2494d-6af6f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e8318_fdc4e/rev_e8318-fdc4e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a17d6_0c016/rev_a17d6-0c016.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3edb0_7d6b8/rev_3edb0-7d6b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
        // System.out.println("--Memusage: " + util.getNativeMemUsage());

        Table base = new Table();
        System.out.println("created table");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885403270/fstmerge_var1_2666577246531710276
        base.addColumn(ColumnType.ColumnTypeString, "name");
        base.addColumn(ColumnType.ColumnTypeInt, "salary");
        base.addColumn(ColumnType.ColumnTypeMixed, "Whatever");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885403270/fstmerge_base_8643418324352406199
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        tableSpec.addColumn(ColumnType.ColumnTypeInt, "salary");
        tableSpec.addColumn(ColumnType.ColumnTypeMixed, "Whatever");
        base.updateFromSpec(tableSpec);
=======
        base.addColumn(ColumnType.STRING, "name");
        base.addColumn(ColumnType.LONG, "salary");
        base.addColumn(ColumnType.MIXED, "Whatever");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885403270/fstmerge_var2_1131320044080891635
        System.out.println("specified structure");

        base.add("John", 24000, new Mixed(1));
        System.out.println("inserted data");

        System.out.println(base.getColumnName(0));
        System.out.println(base.getColumnName(1));

        System.out.println(base.size());
        System.out.println(base.getString(0, 0));
        System.out.println(base.getLong(1, 0));

        TableView results = base.findAllLong(1, 24000);
        System.out.println("Results size: " + results.size());

        long rowIndex = base.findFirstString(0, "John");
        System.out.println("First result index: " + rowIndex);

        //System.out.println("--Memusage: " + util.getNativeMemUsage());

        base.remove(0);
        base.clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-example/src/main/java/com/tightdb/example/DynamicTableBaseEx.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404226/fstmerge_var1_6360861210618346694
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.ColumnTypeString, "Name");
	    t.addColumn(ColumnType.ColumnTypeBool,   "Study");
	    t.addColumn(ColumnType.ColumnTypeInt,    "Age");
	    t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
	    t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
	    t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
	    t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
	    t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404226/fstmerge_base_6291897302193986168
=======
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.STRING, "Name");
	    t.addColumn(ColumnType.BOOLEAN,   "Study");
	    t.addColumn(ColumnType.LONG,    "Age");
	    t.addColumn(ColumnType.DATE,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.STRING, "Unsupported0");
	    t.addColumn(ColumnType.FLOAT,  "Unsupported1");
	    t.addColumn(ColumnType.DOUBLE, "Unsupported2");
	    t.addColumn(ColumnType.MIXED,  "Unsupported3");
	    t.addColumn(ColumnType.TABLE,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404226/fstmerge_var2_5363917246689433166

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test()
    public void ShouldInsertAddAndSetRows() {
        Table table = new Table();
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.BOOLEAN, "bool");
        tableSpec.addColumn(ColumnType.LONG, "number");
        tableSpec.addColumn(ColumnType.STRING, "string");
        tableSpec.addColumn(ColumnType.BINARY, "Bin");
        tableSpec.addColumn(ColumnType.DATE, "date");
        tableSpec.addColumn(ColumnType.MIXED, "mix");
        TableSpec subspec = tableSpec.addSubtableColumn("sub");
        subspec.addColumn(ColumnType.LONG, "sub-num");
        subspec.addColumn(ColumnType.STRING, "sub-str");
        table.updateFromSpec(tableSpec);

        ByteBuffer buf = ByteBuffer.allocateDirect(23);
        Mixed mixedSubTable = new Mixed(ColumnType.TABLE);
        Date date = new Date();
        long mixed = 123;

        // Check subtable
        Object[][] subTblData = new Object[][] {{234, "row0"},
                                                {345, "row1"},
                                                {456, "row2"} };
        Object[] rowData0 = new Object[] {false, (short)2, "hi", buf, date, mixed, subTblData};
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404261/fstmerge_base_2138060767673063888
        table.add(rowData0);
=======
        long index = table.add(rowData0);
        assertEquals(0, index);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404261/fstmerge_var2_1078095211081166901
        verifyRow(table, 0, rowData0);

        Object[] rowData1 = new Object[] {false, 7, "hi1", new byte[] {0,2,3}, date, "mix1", null};
        Object[] rowData2 = new Object[] {true, 12345567789L, "hello", new byte[] {0}, date, buf, null};
        Object[] rowData3 = new Object[] {false, (byte)17, "hi3", buf, date, mixedSubTable, null};
// TODO: support insert of mixed subtable

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404261/fstmerge_var1_5070595660873675580
        table.insert(1, rowData1);
        index = table.add(rowData2);
        assertEquals(2, index);
        table.insert(0, rowData3);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404261/fstmerge_base_2138060767673063888
        table.insert(1, rowData1);
        table.add(rowData2);
        table.insert(0, rowData3);
=======
        table.addAt(1, rowData1);
        index = table.add(rowData2);
        assertEquals(2, index);
        table.addAt(0, rowData3);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404261/fstmerge_var2_1078095211081166901

        verifyRow(table, 0, rowData3);
        verifyRow(table, 1, rowData0);
        verifyRow(table, 2, rowData1);
        verifyRow(table, 3, rowData2);

        // Same test - but a one-liner...
        table.add(new Object[] {false, (short)2, "hi", buf, date, mixed, new Object[][] {{234, "row0"},
                                                                                         {345, "row1"},
                                                                                         {456, "row2"} }});
        verifyRow(table, 4, rowData0);

        // Test set()
        Date date2 = new Date(123);
        Object[] newRowData = new Object[] {true, 321, "new", new byte[] {5}, date2, "hey",
                                            new Object[][] {{432, "new"}} };
        table.set(2, newRowData);
        verifyRow(table, 0, rowData3);
        verifyRow(table, 1, rowData0);
        verifyRow(table, 2, newRowData);
        verifyRow(table, 3, rowData2);

    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404268/fstmerge_var1_623567345998034758
@Test(expectedExceptions=IllegalArgumentException.class, dataProvider = "columnTypesProvider")
    public void testGenericAddOnTable(Object colTypeObject, Object o) {
        Table t  = new Table();
        
        //If the objects matches it will not fail, therefore we throw an exception as it should not be tested
        if (o.getClass().equals(colTypeObject.getClass())){
            throw new IllegalArgumentException();
        }
        //Add column, set name to the simplename of the class
        t.addColumn(TestHelper.getColumnType(colTypeObject), colTypeObject.getClass().getSimpleName());
        
        //Add object
        t.add(o);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404268/fstmerge_base_3526283237889273763
=======
@Test(expectedExceptions=IllegalArgumentException.class, dataProvider = "columnTypesProvider")
    public void testGenericAddOnTable(Object colTypeObject, Object o) {
        Table t  = new Table();

        //If the objects matches it will not fail, therefore we throw an exception as it should not be tested
        if (o.getClass().equals(colTypeObject.getClass())){
            throw new IllegalArgumentException();
        }
        //Add column, set name to the simplename of the class
        t.addColumn(TestHelper.getColumnType(colTypeObject), colTypeObject.getClass().getSimpleName());

        //Add object
        t.add(o);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404268/fstmerge_var2_7665335233608218374

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java
Conflict type: LineBasedMCFd
Conflict body: 
void init() {
        table = new Table();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404369/fstmerge_var1_2363764509746535087
        table.addColumn(ColumnType.ColumnTypeInt, "number");
        table.addColumn(ColumnType.ColumnTypeString, "name");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404369/fstmerge_base_6968980064503210596
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeInt, "number");
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        table.updateFromSpec(tableSpec);
=======
        table.addColumn(ColumnType.LONG, "number");
        table.addColumn(ColumnType.STRING, "name");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404369/fstmerge_var2_389755849878781325

        long i = 0;
        table.add(0, "A");
        table.add(1, "B");
        table.add(2, "C");
        table.add(3, "B");
        table.add(4, "D");
        table.add(5, "D");
        table.add(6, "D");
        assertEquals(7, table.size());
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/JNIDistinctTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404983/fstmerge_var1_2520499415596820154
public static ColumnType getColumnType(Object o){
        
        if (o instanceof Boolean)
            return ColumnType.ColumnTypeBool;
        if (o instanceof String)
            return ColumnType.ColumnTypeString;
        if (o instanceof Long)
            return ColumnType.ColumnTypeInt;
        if (o instanceof Float)
            return ColumnType.ColumnTypeFloat;
        if (o instanceof Double)
            return ColumnType.ColumnTypeDouble;
        if (o instanceof Date)
            return ColumnType.ColumnTypeDate;
        if (o instanceof byte[])
            return ColumnType.ColumnTypeBinary;
        
        return ColumnType.ColumnTypeMixed;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404983/fstmerge_base_2415974472291851724
=======
public static ColumnType getColumnType(Object o){
        
        if (o instanceof Boolean)
            return ColumnType.BOOLEAN;
        if (o instanceof String)
            return ColumnType.STRING;
        if (o instanceof Long)
            return ColumnType.LONG;
        if (o instanceof Float)
            return ColumnType.FLOAT;
        if (o instanceof Double)
            return ColumnType.DOUBLE;
        if (o instanceof Date)
            return ColumnType.DATE;
        if (o instanceof byte[])
            return ColumnType.BINARY;
        
        return ColumnType.MIXED;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885404983/fstmerge_var2_4937350255765195061

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/test/TestHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405084/fstmerge_var1_7237541731256144570
@Test
    public void shouldExportJSONContainingSomeValues() {

        Date date = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);

        Table t = new Table();

        t.addColumn(ColumnType.ColumnTypeDate, "date");
        t.addColumn(ColumnType.ColumnTypeString, "name");

        t.add(date, "name1");   

        //JSON must contain the current year
        assertTrue(t.toJson().contains(""+year));

        //JSON should not contain the next yeaer
        assertFalse(t.toJson().contains(""+year+1));

        Date date2 = new Date();
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        //Month is zero-indexed
        int month2 = cal2.get(Calendar.MONTH)+1;

        t.add(date2, "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");

        assertTrue(t.toJson().contains("name"));
        
        System.out.println("Month: " + month2);
        System.out.println(t.toJson());
        

        assertTrue(t.toJson().contains(""+month2));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405084/fstmerge_base_1866743539436831803
=======
@Test
    public void shouldExportJSONContainingSomeValues() {

        Date date = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);

        Table t = new Table();

        t.addColumn(ColumnType.DATE, "date");
        t.addColumn(ColumnType.STRING, "name");

        t.add(date, "name1");   

        //JSON must contain the current year
        assertTrue(t.toJson().contains(""+year));

        //JSON should not contain the next yeaer
        assertFalse(t.toJson().contains(""+year+1));

        Date date2 = new Date();
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);
        //Month is zero-indexed
        int month2 = cal2.get(Calendar.MONTH)+1;

        t.add(date2, "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");
        t.add(new Date(), "name");

        assertTrue(t.toJson().contains("name"));
        
        System.out.println("Month: " + month2);
        System.out.println(t.toJson());
        

        assertTrue(t.toJson().contains(""+month2));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405084/fstmerge_var2_1879692488349581351

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/DateToJSONTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405089/fstmerge_var1_5414036823663486855
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.ColumnTypeDate, "Date");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Integer");
        
        t.add(new Date(), "I'm a String", 33);
        
        v = t.where().findAll();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405089/fstmerge_base_8812677683282284852
=======
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.DATE, "Date");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.LONG , "Long");
        
        t.add(new Date(), "I'm a String", 33);
        
        v = t.where().findAll();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405089/fstmerge_var2_6037206053212058630

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405098/fstmerge_var1_4021283836835121929
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getLongOnDateColumn() {
        v.getLong(0, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405098/fstmerge_base_8998390948382301034
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getLongOnDateColumn() {
      v.getLong(0, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405098/fstmerge_var2_4239804374353560997

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405103/fstmerge_var1_4261292742312537321
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnDateColumn() {
        v.getMixed(0, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405103/fstmerge_base_4390882271340416413
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnDateColumn() {
      v.getMixed(0, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405103/fstmerge_var2_5782229640044266184

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405112/fstmerge_var1_3963160408389883094
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getLongOnStringColumn() {
        v.getLong(1, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405112/fstmerge_base_5170009313515519371
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getLongOnStringColumn() {
      v.getLong(1, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405112/fstmerge_var2_5033023708778864298

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405116/fstmerge_var1_8782635158729191978
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnStringColumn() {
        v.getMixed(1, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405116/fstmerge_base_7869949516720105174
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnStringColumn() {
      v.getMixed(1, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405116/fstmerge_var2_1628228276445003639

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405125/fstmerge_var1_3471916187241364199
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnIntegerColumn() {
        v.getMixed(2, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405125/fstmerge_base_4611145695995781957
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void getMixedOnIntegerColumn() {
      v.getMixed(2, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405125/fstmerge_var2_7441288994782159958

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeViewTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405129/fstmerge_var1_4558492260968568912
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.ColumnTypeDate, "Date");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Integer");
        
        t.add(new Date(), "I'm a String", 33);
        t.add(new Date(), "Second String", 458);
        
        q = t.where();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405129/fstmerge_base_2118777848011144866
=======
@BeforeMethod
    public void init() {
        t  = new Table();
        t.addColumn(ColumnType.DATE, "Date");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.LONG, "Long");
        
        t.add(new Date(), "I'm a String", 33);
        t.add(new Date(), "Second String", 458);
        
        q = t.where();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405129/fstmerge_var2_3518381210418786933

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeQueryTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405139/fstmerge_var1_7017420592406351012
@Test(expectedExceptions=IllegalArgumentException.class)
    public void filterStringOnDateColumn() {
        q.equal(0, "I'm a String").findAll();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405139/fstmerge_base_7922485584716859381
=======
@Test(expectedExceptions=IllegalArgumentException.class)
    public void filterStringOnDateColumn() {
        q.equal(1, "I'm a String").findAll();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405139/fstmerge_var2_1685383858814788472

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/ColumnTypeQueryTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405152/fstmerge_var1_806668547782556618
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.ColumnTypeString, "Name");
        table.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        table.addColumn(ColumnType.ColumnTypeInt, "Age");
        table.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Name");
        fromGroup.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        fromGroup.addColumn(ColumnType.ColumnTypeInt, "Age");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.ColumnTypeString, "Name");
            tab.addColumn(ColumnType.ColumnTypeDouble, "GPA");
            tab.addColumn(ColumnType.ColumnTypeInt, "Age");
            tab.addColumn(ColumnType.ColumnTypeString, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405152/fstmerge_base_8400118200083771033
=======
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "Name");
        table.addColumn(ColumnType.DOUBLE, "GPA");
        table.addColumn(ColumnType.LONG, "Age");
        table.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.STRING, "Name");
        fromGroup.addColumn(ColumnType.DOUBLE, "GPA");
        fromGroup.addColumn(ColumnType.LONG, "Age");
        fromGroup.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.STRING, "Name");
            tab.addColumn(ColumnType.DOUBLE, "GPA");
            tab.addColumn(ColumnType.LONG, "Age");
            tab.addColumn(ColumnType.STRING, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405152/fstmerge_var2_5208562923096692434

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405336/fstmerge_var1_7639863470427019599
public long add(Object... values) {
        long rowIndex = size();
    	insert(rowIndex, values);
    	return rowIndex;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405336/fstmerge_base_6588023998487058377
public void add(Object... values) {
        insert(size(), values);
=======
public long add(Object... values) {
        long rowIndex = size();
    	addAt(rowIndex, values);
    	return rowIndex;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885405336/fstmerge_var2_1308402987446725613
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
public TableSpec addSubtableColumn(String name) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885406340/fstmerge_var1_3800154015168884170
    	if (name.length() > 63) {
    		throw new IllegalArgumentException("Column names are currently limited to max 63 characters.");
    	}
        ColumnInfo columnInfo = new ColumnInfo(ColumnType.ColumnTypeTable, name);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885406340/fstmerge_base_6061455999675894215
        ColumnInfo columnInfo = new ColumnInfo(ColumnType.ColumnTypeTable, name);
=======
    	if (name.length() > 63) {
    		throw new IllegalArgumentException("Column names are currently limited to max 63 characters.");
    	}
        ColumnInfo columnInfo = new ColumnInfo(ColumnType.TABLE, name);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885406340/fstmerge_var2_7574976979815395498
        columnInfos.add(columnInfo);
        return columnInfo.tableSpec;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-core/src/main/java/com/tightdb/TableSpec.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void loadLibrary() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_base_916506092004052870
        // FIXME: How is this thread-safe?
        if (libraryIsLoaded) return;
=======
        if (libraryIsLoaded.get())
        	// only load library once
        	return;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var2_4434900558312587545

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_base_916506092004052870
        // FIXME: How exactly does this help? Why is it done?
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var2_4434900558312587545
        initTightDB();

        String jnilib;
        if (osIsWindows()) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_base_916506092004052870
            loadLibraryWindows();
=======
            jnilib = loadLibraryWindows();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var2_4434900558312587545
        }
        else {
            String debug = System.getenv("TIGHTDB_JAVA_DEBUG");
            if (debug == null || debug.isEmpty()) {
                jnilib = "tightdb-jni";
            }
            else {
                jnilib = "tightdb-jni-dbg";
            }
            System.loadLibrary(jnilib);
        }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_base_916506092004052870
        libraryIsLoaded = true;
=======
        libraryIsLoaded.set(true);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var2_4434900558312587545

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var1_6333830855571957809
        if (!Util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library " + jnilib);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_base_916506092004052870
        if (!util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library.");
=======
        if (!util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library " + jnilib);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885408706/fstmerge_var2_4434900558312587545
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-core/src/main/java/com/tightdb/typed/TightDB.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 18; ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 19;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4342d_773f1/rev_4342d-773f1/tightdb-java-core/src/main/java/com/tightdb/internal/util.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e0cc0_859dc/rev_e0cc0-859dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3f337_e0cc0/rev_3f337-e0cc0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa.revisions
Conflict type: LineBasedMCFd
Conflict body: 
protected void writeOneTransaction(long rows)
    {
        WriteTransaction trans = db.beginWrite();
        Table tbl = trans.getTable("EmployeeTable");
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466474/fstmerge_var1_6577638115883060960
        tbl.addColumn(ColumnType.ColumnTypeString, "name");
        tbl.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466474/fstmerge_base_1689601455980601887
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        tableSpec.addColumn(ColumnType.ColumnTypeInt, "number");
        tbl.updateFromSpec(tableSpec);
=======
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.STRING, "name");
        tableSpec.addColumn(ColumnType.LONG, "number");
        tbl.updateFromSpec(tableSpec);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466474/fstmerge_var2_626929467156159184

        for (long row=0; row < rows; row++)
            tbl.add("Hi", 1);
        assertEquals(rows, tbl.size());
        trans.commit();

        // must throw exception as table is invalid now.
        try {
            assertEquals(1, tbl.size());
            assert(false);
        } catch (IllegalStateException e) {
        }

    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void mustWriteAndReadEmpty() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466484/fstmerge_var1_4356616525374290198
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466484/fstmerge_base_4095867198552295720
        if (TightDB.osIsWindows())
            return;

=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466484/fstmerge_var2_8856870863944219417
        writeOneTransaction(0);
        checkRead(0);
        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void mustWriteCommit() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466489/fstmerge_var1_7674613109109789859
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466489/fstmerge_base_7616376157622886977
        if (TightDB.osIsWindows())
            return;

=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466489/fstmerge_var2_2354461109286739185
        writeOneTransaction(10);
        checkRead(10);
        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void mustRollback() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466493/fstmerge_var1_539532651649370123
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466493/fstmerge_base_8591595934263367695
        if (TightDB.osIsWindows())
            return;

=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466493/fstmerge_var2_7229206454273610378
        writeOneTransaction(1);

        WriteTransaction trans = db.beginWrite();
        Table tbl = trans.getTable("EmployeeTable");

        tbl.add("Hello", 1);
        assertEquals(2, tbl.size());
        trans.rollback();

        checkRead(1); // Only 1 row now.

        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void mustFailOnWriteInReadTransactions() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466498/fstmerge_var1_30725300211736699
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466498/fstmerge_base_8511683104938128925
        if (TightDB.osIsWindows())
            return;

=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885466498/fstmerge_var2_7331599835012905452
        writeOneTransaction(1);

        ReadTransaction t = db.beginRead();
        Table table = t.getTable("EmployeeTable");

        try { table.addAt(0, 0, false);             assert(false);} catch (IllegalStateException e) {}
        try { table.add(0, false);                  assert(false);} catch (IllegalStateException e) {}
        try { table.addEmptyRow();                  assert(false);} catch (IllegalStateException e) {}
        try { table.addEmptyRows(1);                assert(false);} catch (IllegalStateException e) {}
        try { table.adjustColumnValues(0,0);        assert(false);} catch (IllegalStateException e) {}
        try { table.clear();                        assert(false);} catch (IllegalStateException e) {}
        try { table.clearSubTable(0,0);             assert(false);} catch (IllegalStateException e) {}
        try { table.optimize();                     assert(false);} catch (IllegalStateException e) {}
        try { table.remove(0);                      assert(false);} catch (IllegalStateException e) {}
        try { table.removeLast();                   assert(false);} catch (IllegalStateException e) {}
        try { table.setBinaryByteArray(0,0,null);   assert(false);} catch (IllegalStateException e) {}
        try { table.setBinaryByteBuffer(0,0,null);  assert(false);} catch (IllegalStateException e) {}
        try { table.setBoolean(0,0,false);          assert(false);} catch (IllegalStateException e) {}
        try { table.setDate(0,0,new Date(0));       assert(false);} catch (IllegalStateException e) {}
        try { table.setIndex(0);                    assert(false);} catch (IllegalStateException e) {}
        try { table.setLong(0,0,0);                 assert(false);} catch (IllegalStateException e) {}
        try { table.setMixed(0,0,null);             assert(false);} catch (IllegalStateException e) {}
        try { table.setString(0,0,"");              assert(false);} catch (IllegalStateException e) {}
        try { table.updateFromSpec(null);           assert(false);} catch (IllegalStateException e) {}

        TableQuery q = table.where();
        try { q.remove();                           assert(false);} catch (IllegalStateException e) {}
        try { q.remove(0,0);                        assert(false);} catch (IllegalStateException e) {}

        TableView v = q.findAll();
        try { v.adjustColumnValues(0, 0);           assert(false);} catch (IllegalStateException e) {}
        try { v.clear();                            assert(false);} catch (IllegalStateException e) {}
        try { v.clearSubTable(0, 0);                assert(false);} catch (IllegalStateException e) {}
        try { v.remove(0);                          assert(false);} catch (IllegalStateException e) {}
        try { v.removeLast();                       assert(false);} catch (IllegalStateException e) {}
        try { v.setBinaryByteArray(0, 0, null);     assert(false);} catch (IllegalStateException e) {}
        try { v.setBinaryByteBuffer(0, 0, null);    assert(false);} catch (IllegalStateException e) {}
        try { v.setBoolean(0, 0, false);            assert(false);} catch (IllegalStateException e) {}
        try { v.setDate(0, 0, new Date());          assert(false);} catch (IllegalStateException e) {}
        try { v.setLong(0, 0, 0);                   assert(false);} catch (IllegalStateException e) {}
        try { v.setString(0,0,"");                  assert(false);} catch (IllegalStateException e) {}
        try { v.setMixed(0, 0, null);               assert(false);} catch (IllegalStateException e) {}

        t.endRead();
        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_99bfa/rev_26352-99bfa/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3fc3f_22a95/rev_3fc3f-22a95.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_26352_40596/rev_26352-40596.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cda32_26352/rev_cda32-26352.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c9682_8e3f5/rev_c9682-8e3f5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c9682_4f185/rev_c9682-4f185.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885573784/fstmerge_var1_3898189086961268064
protected native boolean nativeEquals(long nativeGroupPtr, long nativeGroupToComparePtr);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885573784/fstmerge_base_6318572271723922468
=======
protected native boolean nativeEquals(long nativeGroupPtr, long compareToGroupPtr);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885573784/fstmerge_var2_7507283845807262017

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c9682_4f185/rev_c9682-4f185/tightdb-java-core/src/main/java/com/tightdb/Group.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3a6d7_c9682/rev_3a6d7-c9682.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a63c8_59daa/rev_a63c8-59daa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a63c8_cd676/rev_a63c8-cd676.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885635508/fstmerge_var1_5905885356578316670
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885635508/fstmerge_base_1588030637793133836
public static Table getInvalidTable() {
        Group g = new Group();
    	Table t = g.getTable("testTable");
    	t.addColumn(ColumnType.ColumnTypeString, "test");
    	g.close();
    	
    	return t;
    }
=======
public static Table getInvalidTable() {
        Group g = new Group();
    	Table t = g.getTable("testTable");
    	t.addColumn(ColumnType.STRING, "test");
    	g.close();
    	
    	return t;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885635508/fstmerge_var2_1792610845593651441

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a63c8_cd676/rev_a63c8-cd676/tightdb-java-test/src/test/java/com/tightdb/experiment/Experiment.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_96d41_ca220/rev_96d41-ca220.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_70692_47814/rev_70692-47814.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5d27c_c449a/rev_5d27c-c449a.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void loadLibrary() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_base_9114262193988734141
        // FIXME: How is this thread-safe?
        if (libraryIsLoaded) return;
=======
        if (libraryIsLoaded.get())
        	// only load library once
        	return;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var2_3572772915000522871

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_base_9114262193988734141
        // FIXME: How exactly does this help? Why is it done?
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var2_3572772915000522871
        initTightDB();

        String jnilib;
        if (osIsWindows()) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_base_9114262193988734141
            loadLibraryWindows();
=======
            jnilib = loadLibraryWindows();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var2_3572772915000522871
        }
        else {
            String debug = System.getenv("TIGHTDB_JAVA_DEBUG");
            if (debug == null || debug.isEmpty()) {
                jnilib = "tightdb-jni";
            }
            else {
                jnilib = "tightdb-jni-dbg";
            }
            System.loadLibrary(jnilib);
        }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_base_9114262193988734141
        libraryIsLoaded = true;
=======
        libraryIsLoaded.set(true);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var2_3572772915000522871

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var1_5606618958381414156
        if (!Util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library " + jnilib);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_base_9114262193988734141
        if (!util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library.");
=======
        if (!util.versionCompatible()) {
            throw new RuntimeException("Version mismatch between tightdb.jar and native JNI library " + jnilib);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885702118/fstmerge_var2_3572772915000522871
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5d27c_c449a/rev_5d27c-c449a/tightdb-java-core/src/main/java/com/tightdb/typed/TightDB.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_812b0_5238a/rev_812b0-5238a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ef18_a13e6/rev_7ef18-a13e6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9af4b_7ef18/rev_9af4b-7ef18.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2cfa0_e07a0/rev_2cfa0-e07a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_35762_2cfa0/rev_35762-2cfa0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToString() {

        Group group = new Group();

        Table table = group.getTable("testTable");
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table.add(true);
        Table table2 = group.getTable("another-table");
        table2.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table2.add(true);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805877/fstmerge_var1_2511367389676887339
        assertEquals("     tables        rows  \n" +
                     "   0 testTable     1     \n" +  
                     "   1 another-table 1     \n", group.toString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805877/fstmerge_base_385937648256470824
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeDouble, "double");     // 3
        table.addColumn(ColumnType.ColumnTypeFloat, "float");       // 4
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 5
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 6
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 7
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 8

        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("     tables     rows  \n" +
                     "   0 testTable  1     \n", group.toString());
=======
        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8

        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("     tables     rows  \n" +
                     "   0 testTable  1     \n", group.toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805877/fstmerge_var2_6207390155182342148
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_35762_2cfa0/rev_35762-2cfa0/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToJson() {

        Group group = new Group();

        Table table = group.getTable("testTable");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805882/fstmerge_var1_1640722208069329433
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 3
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 4
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 5
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 6
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805882/fstmerge_base_1619538549025998609
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeDouble, "double");     // 3
        table.addColumn(ColumnType.ColumnTypeFloat, "float");       // 4
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 5
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 6
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 7
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 8
=======
        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885805882/fstmerge_var2_1119797350460027759

        table.add(new byte[] {0,2,3}, true, new Date(0), 123, new Mixed(123), "TestString", null);

        assertEquals("{\"testTable\":[{\"binary\":\"000203\",\"boolean\":true,\"date\":\"1970-01-01 00:00:00\",\"long\":123,\"mixed\":123,\"string\":\"TestString\",\"table\":[]}]}", group.toJson());    	
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_35762_2cfa0/rev_35762-2cfa0/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e70ee_35762/rev_e70ee-35762.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4e952_e97a5/rev_4e952-e97a5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5238a_e07a0/rev_5238a-e07a0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToString() {

        Group group = new Group();

        Table table = group.getTable("testTable");
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table.add(true);
        Table table2 = group.getTable("another-table");
        table2.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table2.add(true);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872448/fstmerge_var1_11678568874655453
        assertEquals("     tables        rows  \n" +
                     "   0 testTable     1     \n" +  
                     "   1 another-table 1     \n", group.toString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872448/fstmerge_base_7727466797805442308
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeDouble, "double");     // 3
        table.addColumn(ColumnType.ColumnTypeFloat, "float");       // 4
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 5
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 6
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 7
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 8

        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("     tables     rows  \n" +
                     "   0 testTable  1     \n", group.toString());
=======
        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8

        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("     tables     rows  \n" +
                     "   0 testTable  1     \n", group.toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872448/fstmerge_var2_3367991291511759252
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5238a_e07a0/rev_5238a-e07a0/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToJson() {

        Group group = new Group();

        Table table = group.getTable("testTable");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872454/fstmerge_var1_6135251780518859165
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 3
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 4
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 5
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 6
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872454/fstmerge_base_2767909581129201451
        table.addColumn(ColumnType.ColumnTypeBinary, "binary");     // 0
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");      // 1
        table.addColumn(ColumnType.ColumnTypeDate, "date");         // 2
        table.addColumn(ColumnType.ColumnTypeDouble, "double");     // 3
        table.addColumn(ColumnType.ColumnTypeFloat, "float");       // 4
        table.addColumn(ColumnType.ColumnTypeInt, "long");          // 5
        table.addColumn(ColumnType.ColumnTypeMixed, "mixed");       // 6
        table.addColumn(ColumnType.ColumnTypeString, "string");     // 7
        table.addColumn(ColumnType.ColumnTypeTable, "table");       // 8
=======
        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885872454/fstmerge_var2_4945424997423119792

        table.add(new byte[] {0,2,3}, true, new Date(0), 123, new Mixed(123), "TestString", null);

        assertEquals("{\"testTable\":[{\"binary\":\"000203\",\"boolean\":true,\"date\":\"1970-01-01 00:00:00\",\"long\":123,\"mixed\":123,\"string\":\"TestString\",\"table\":[]}]}", group.toJson());    	
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5238a_e07a0/rev_5238a-e07a0/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c8bbf_21e1e/rev_c8bbf-21e1e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6a83_104c0/rev_a6a83-104c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c8bbf_07066/rev_c8bbf-07066.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_815e8_7ea75/rev_815e8-7ea75.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToString() {

        Group group = new Group();

        Table table = group.getTable("testTable");
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964703/fstmerge_var1_3742314547464084752
        table.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table.add(true);
        Table table2 = group.getTable("another-table");
        table2.addColumn(ColumnType.ColumnTypeBool, "boolean");
        table2.add(true);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964703/fstmerge_base_5046711721627294395
=======
        table.addColumn(ColumnType.BOOLEAN, "boolean");
        table.add(true);
        Table table2 = group.getTable("another-table");
        table2.addColumn(ColumnType.BOOLEAN, "boolean");
        table2.add(true);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964703/fstmerge_var2_689382332447600295

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964703/fstmerge_base_5046711721627294395
        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8

        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("     tables     rows  \n" +
                     "   0 testTable  1     \n", group.toString());
=======
        assertEquals("     tables        rows  \n" +
                     "   0 testTable     1     \n" +  
                     "   1 another-table 1     \n", group.toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964703/fstmerge_var2_689382332447600295
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_815e8_7ea75/rev_815e8-7ea75/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void groupToJson() {

        Group group = new Group();

        Table table = group.getTable("testTable");

        table.addColumn(ColumnType.BINARY, "binary");     // 0
        table.addColumn(ColumnType.BOOLEAN, "boolean");   // 1
        table.addColumn(ColumnType.DATE, "date");         // 2
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_var1_1920671697776264323
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_base_6230634106154799020
        table.addColumn(ColumnType.DOUBLE, "double");     // 3
        table.addColumn(ColumnType.FLOAT, "float");       // 4
        table.addColumn(ColumnType.INTEGER, "long");      // 5
        table.addColumn(ColumnType.MIXED, "mixed");       // 6
        table.addColumn(ColumnType.STRING, "string");     // 7
        table.addColumn(ColumnType.TABLE, "table");       // 8
=======
        table.addColumn(ColumnType.INTEGER, "long");      // 3
        table.addColumn(ColumnType.MIXED, "mixed");       // 4
        table.addColumn(ColumnType.STRING, "string");     // 5
        table.addColumn(ColumnType.TABLE, "table");       // 6
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_var2_579916557262896269

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_base_6230634106154799020
        table.add(new byte[] {0,2,3}, true, new Date(0), 123D, 123F, 123, new Mixed(123), "TestString", null);

        assertEquals("{\"testTable\":[{\"binary\":\"000203\",\"boolean\":true,\"date\":\"1970-01-01 00:00:00\",\"double\":1.2300000000000000e+02,\"float\":1.2300000e+02,\"long\":123,\"mixed\":123,\"string\":\"TestString\",\"table\":[]}]}", group.toJson());
=======
        table.add(new byte[] {0,2,3}, true, new Date(0), 123, new Mixed(123), "TestString", null);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_var2_579916557262896269

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_base_6230634106154799020
=======
        assertEquals("{\"testTable\":[{\"binary\":\"000203\",\"boolean\":true,\"date\":\"1970-01-01 00:00:00\",\"long\":123,\"mixed\":123,\"string\":\"TestString\",\"table\":[]}]}", group.toJson());    	
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415885964708/fstmerge_var2_579916557262896269
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_815e8_7ea75/rev_815e8-7ea75/tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e0100_815e8/rev_e0100-815e8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_20a01_1f351/rev_20a01-1f351.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_58e9b_20a01/rev_58e9b-20a01.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b586d_ed2fe/rev_b586d-ed2fe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_140df_a6a83/rev_140df-a6a83.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public long usedNativeMemory() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101588/fstmerge_var1_8905496731423621854
        return Util.getUsedMemory();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101588/fstmerge_base_6948215047226710870
        return util.getNativeMemUsage();
=======
        return Util.getNativeMemUsage();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101588/fstmerge_var2_9208964156657521746
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/examples/intro-example/src/com/tightdb/examples/performance/Tightdb.java
Conflict type: LineBasedMCFd
Conflict body: 
public static TestResult TestPerformance(IPerformance test, int rows)
    {
        TestResult  result = new TestResult();
        Timer       timer = new Timer();
        int         testNo = 0;

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101838/fstmerge_var1_4660854555433176671
        if (pause) Util.waitForEnter();
        long memBefore = Util.getUsedMemory(); memBefore = Util.getUsedMemory();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101838/fstmerge_base_8551884552636738428
        if (pause) util.waitForEnter();
        long memBefore = Util.getUsedMemory(); memBefore = Util.getUsedMemory();
=======
        if (pause) Util.waitForEnter();
        long memBefore = ExampleHelper.getUsedMemory(); memBefore = ExampleHelper.getUsedMemory();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101838/fstmerge_var2_2861483860967816184

        // Build the test database
        test.buildTable(rows);

        result.javaDBMemUsed = Math.max(ExampleHelper.getUsedMemory() - memBefore, 1);
        result.nativeDBMemUsed = test.usedNativeMemory();

        // Search small integer column
        {
            // Do a search over entire column (value not found)
            test.begin_findSmallInt(SMALL_TEST_VAL + 1);
            timer.Start();
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findSmallInt(SMALL_TEST_VAL + 1)) {
                    System.out.println("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findSmallInt();
            System.out.printf("*");
        }

        // Search byte-size integer column
        {
            test.begin_findByteInt(BYTE_TEST_VAL + 1);
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findByteInt(BYTE_TEST_VAL + 1)) {
                    System.out.printf("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findByteInt();
            System.out.printf("*");
        }

        // Search long-size integer column
        {
            test.begin_findLongInt(LONG_TEST_VAL + 1);
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findLongInt(LONG_TEST_VAL + 1)) {
                    System.out.printf("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findLongInt();
            System.out.printf("*");
        }

        // Search string column
        {
            test.begin_findString("abcde");
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findString("abcde")) {
                      System.out.printf("error - found value.");
                      break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findString();
            System.out.printf("*");
        }
/*
        // Add index, and search
        {
            timer.Start();

            boolean indexSupported = test.addIndex();

            if (indexSupported) {
                result.testTime[testNo++] = timer.GetTimeInMs();
                System.out.printf("*");
                //System.out.printf("Memory usage2: %lld bytes\n", (long long)GetMemUsage());

                // Search with index
                test.begin_findIntWithIndex();
                timer.Start();
                for (int i = 0; i < REPEAT_SEARCH; ++i) {
                    int n = Util.getRandNumber();
                    if (test.findIntWithIndex(n) != n) {
                        System.out.printf("error - didn't find value.");
                        break;
                    }
                }
                result.testTime[testNo++] = timer.GetTimeInMs();
                test.end_findIntWithIndex();
                System.out.printf("*");
            }
        }
*/
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101838/fstmerge_base_8551884552636738428
        if (pause) util.waitForEnter();
=======
        if (pause) Util.waitForEnter();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101838/fstmerge_var2_2861483860967816184
        test.closeTable();

        return result;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/examples/intro-example/src/com/tightdb/examples/performance/Performance.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101864/fstmerge_var1_8497172531349944129
public static void waitForEnter() {
        System.out.println("Press Enter to continue...");
        Scanner sc = new Scanner(System.in);
           while(!sc.nextLine().equals(""));
        sc.close();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101864/fstmerge_base_7524714160062309382
public void waitForEnter() {
        System.out.println("Press Enter to continue...");
        Scanner sc = new Scanner(System.in);
           while(!sc.nextLine().equals(""));
        sc.close();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886101864/fstmerge_var2_4660487101035978188

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/examples/intro-example/src/com/tightdb/examples/performance/Util.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test()
    public void mustAllowDoubleCommitAndRollback() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886102500/fstmerge_var1_4477258259578364952
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    tbl.addColumn(ColumnType.ColumnTypeString, "name");
		    tbl.addColumn(ColumnType.ColumnTypeInt, "number");
	
		    // allow commit before any changes
		    assertEquals(0, tbl.size());
	        tbl.add("Hello", 1);
		    trans.commit();
    	}
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    // allow double rollback
	        tbl.add("Hello", 2);
	        assertEquals(2, tbl.size());
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
    	}
    	{
    		ReadTransaction trans = db.beginRead();
    		Table tbl = trans.getTable("EmployeeTable");
	        assertEquals(1, tbl.size());
	        trans.endRead();
    	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886102500/fstmerge_base_4035519060177234222
	    WriteTransaction trans = db.beginWrite();
	    Table tbl = trans.getTable("EmployeeTable");
	    tbl.addColumn(ColumnType.ColumnTypeString, "name");
	    tbl.addColumn(ColumnType.ColumnTypeInt, "number");
=======
	    WriteTransaction trans = db.beginWrite();
	    Table tbl = trans.getTable("EmployeeTable");
	    tbl.addColumn(ColumnType.STRING, "name");
	    tbl.addColumn(ColumnType.INTEGER, "number");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886102500/fstmerge_var2_7690336646466943013

    	clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103213/fstmerge_var1_2006914111448731375
@Test(expectedExceptions = IllegalStateException.class)
    public void shouldFailWhenModifyingTablesOnClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.ColumnTypeInt, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        //Try to add data to table in group
        tbl.add(2);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103213/fstmerge_base_742572515756051869
=======
@Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldFailWhenModifyingTablesOnClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.INTEGER, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        //Try to add data to table in group
        tbl.add(2);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103213/fstmerge_var2_8635573682946138635

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103217/fstmerge_var1_299713887836719585
@Test(expectedExceptions = IllegalStateException.class)
    public void shouldFailWhenAddingTablesToClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.ColumnTypeInt, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        //Try to add data to table in group
        Table newTable = group.getTable("test2");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103217/fstmerge_base_5979202280640977351
=======
@Test(expectedExceptions = IllegalStateException.class)
    public void shouldFailWhenAddingTablesToClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.INTEGER, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        //Try to add data to table in group
        Table newTable = group.getTable("test2");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103217/fstmerge_var2_1476175098280721209

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103222/fstmerge_var1_8198487240161027452
@Test(expectedExceptions = IllegalStateException.class)
    public void shouldFailWhenGettingValuesFromTablesInClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.ColumnTypeInt, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        tbl.getLong(0, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103222/fstmerge_base_5260575778033104843
=======
@Test(expectedExceptions = IllegalStateException.class)
    public void shouldFailWhenGettingValuesFromTablesInClosedGroup() {
        Group group = new Group();
        Table tbl = group.getTable("test");
        tbl.addColumn(ColumnType.INTEGER, "number");
        tbl.add(1);
        
        //Close the group
        group.close();
        
        tbl.getLong(0, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103222/fstmerge_var2_4513289672305761696

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103315/fstmerge_var1_4775329504458958227
public static Table getTableWithAllColumnTypes(){
        
        Table t = new Table();
        
        t.addColumn(ColumnType.ColumnTypeBinary, "binary");
        t.addColumn(ColumnType.ColumnTypeBool, "boolean");
        t.addColumn(ColumnType.ColumnTypeDate, "date");
        t.addColumn(ColumnType.ColumnTypeDouble, "double");
        t.addColumn(ColumnType.ColumnTypeFloat, "float");
        t.addColumn(ColumnType.ColumnTypeInt, "long");
        t.addColumn(ColumnType.ColumnTypeMixed, "mixed");
        t.addColumn(ColumnType.ColumnTypeString, "string");
        t.addColumn(ColumnType.ColumnTypeTable, "table");
        
        return t;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103315/fstmerge_base_3966107507555354239
=======
public static Table getTableWithAllColumnTypes(){
        
        Table t = new Table();
        
        t.addColumn(ColumnType.BINARY, "binary");
        t.addColumn(ColumnType.BOOLEAN, "boolean");
        t.addColumn(ColumnType.DATE, "date");
        t.addColumn(ColumnType.DOUBLE, "double");
        t.addColumn(ColumnType.FLOAT, "float");
        t.addColumn(ColumnType.INTEGER, "long");
        t.addColumn(ColumnType.MIXED, "mixed");
        t.addColumn(ColumnType.STRING, "string");
        t.addColumn(ColumnType.TABLE, "table");
        
        return t;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103315/fstmerge_var2_4313688420222746651

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/test/TestHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103464/fstmerge_var1_7752107057217037069
public static void main(String[] args) {
        
        PeopleTable pt = new PeopleTable();
        
        Long typedTimer = System.currentTimeMillis();
        System.out.println("Performance testing TYPED interface on " + ROWS + " rows");

        for (long r=0;r<ROWS;r++){
           /* if (r % 1000000 == 0 && r > 0){
                System.out.println(r + " split time: " +  (System.currentTimeMillis() - typedTimer));
            }*/
            pt.add("name"+r, r, true, "name"+r, r, true, "name"+r, r, true, "name"+r, r, true);
        }
        
        Long totalTimeTyped = System.currentTimeMillis() - typedTimer;
        System.out.println("Time for TYPED interface: " + totalTimeTyped);
        
        Table t = new Table();
        
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Long");
        t.addColumn(ColumnType.ColumnTypeBool, "Boolean");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Long");
        t.addColumn(ColumnType.ColumnTypeBool, "Boolean");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Long");
        t.addColumn(ColumnType.ColumnTypeBool, "Boolean");
        t.addColumn(ColumnType.ColumnTypeString, "String");
        t.addColumn(ColumnType.ColumnTypeInt, "Long");
        t.addColumn(ColumnType.ColumnTypeBool, "Boolean");
        
        Long dynTimer = System.currentTimeMillis();
        System.out.println("Performance testing DYNAMIC interface on " + ROWS + " rows");

        for (long r=0;r<ROWS;r++){
            /*if (r % 1000000 == 0 && r > 0){
                System.out.println(r + " split time: " +  (System.currentTimeMillis() - dynTimer));
            }*/
            t.add("name"+r, r, true, "name"+r, r, true, "name"+r, r, true, "name"+r, r, true);
        }
        
        Long totalTimeDyn = System.currentTimeMillis() - dynTimer;
        
        System.out.println("Summery for performance tests on " + ROWS + " rows:");
        System.out.println("TYPED: " + totalTimeTyped);
        System.out.println("DYNAMIC: " + totalTimeDyn);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103464/fstmerge_base_3305871692314167120
=======
public static void main(String[] args) {
        
        PeopleTable pt = new PeopleTable();
        
        Long typedTimer = System.currentTimeMillis();
        System.out.println("Performance testing TYPED interface on " + ROWS + " rows");

        for (long r=0;r<ROWS;r++){
           /* if (r % 1000000 == 0 && r > 0){
                System.out.println(r + " split time: " +  (System.currentTimeMillis() - typedTimer));
            }*/
            pt.add("name"+r, r, true, "name"+r, r, true, "name"+r, r, true, "name"+r, r, true);
        }
        
        Long totalTimeTyped = System.currentTimeMillis() - typedTimer;
        System.out.println("Time for TYPED interface: " + totalTimeTyped);
        
        Table t = new Table();
        
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.INTEGER, "Long");
        t.addColumn(ColumnType.BOOLEAN, "Boolean");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.INTEGER, "Long");
        t.addColumn(ColumnType.BOOLEAN, "Boolean");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.INTEGER, "Long");
        t.addColumn(ColumnType.BOOLEAN, "Boolean");
        t.addColumn(ColumnType.STRING, "String");
        t.addColumn(ColumnType.INTEGER, "Long");
        t.addColumn(ColumnType.BOOLEAN, "Boolean");
        
        Long dynTimer = System.currentTimeMillis();
        System.out.println("Performance testing DYNAMIC interface on " + ROWS + " rows");

        for (long r=0;r<ROWS;r++){
            /*if (r % 1000000 == 0 && r > 0){
                System.out.println(r + " split time: " +  (System.currentTimeMillis() - dynTimer));
            }*/
            t.add("name"+r, r, true, "name"+r, r, true, "name"+r, r, true, "name"+r, r, true);
        }
        
        Long totalTimeDyn = System.currentTimeMillis() - dynTimer;
        
        System.out.println("Summery for performance tests on " + ROWS + " rows:");
        System.out.println("TYPED: " + totalTimeTyped);
        System.out.println("DYNAMIC: " + totalTimeDyn);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886103464/fstmerge_var2_5342862335615287831

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_913b8_fee69/rev_913b8-fee69/tightdb-java-test/src/test/java/com/tightdb/experiment/InsertVsAddPerformance.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9db64_913b8/rev_9db64-913b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3fea2_5bbcb/rev_3fea2-5bbcb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d3363_3fea2/rev_d3363-3fea2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b2ae0_eb839/rev_b2ae0-eb839.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca3e8_eb7d0/rev_ca3e8-eb7d0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca3e8_66d3b/rev_ca3e8-66d3b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_178d3_ca3e8/rev_178d3-ca3e8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_488e1_eb3e0/rev_488e1-eb3e0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_488e1_4fd9b/rev_488e1-4fd9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8f50c_488e1/rev_8f50c-488e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_60112_cc8a2/rev_60112-cc8a2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_60112_c0e6b/rev_60112-c0e6b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_85119_60112/rev_85119-60112.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8106a_70963/rev_8106a-70963.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8106a_1961c/rev_8106a-1961c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a21e0_8106a/rev_a21e0-8106a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0e5ff_8890b/rev_0e5ff-8890b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57a24_0e5ff/rev_57a24-0e5ff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7fe71_0a74b/rev_7fe71-0a74b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_28d32_3f6f6/rev_28d32-3f6f6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_45e4a_913b8/rev_45e4a-913b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1d4bb_d1642/rev_1d4bb-d1642.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_45561_90d77/rev_45561-90d77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_90d77_3984c/rev_90d77-3984c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886628476/fstmerge_var1_8672366627920030270
@Test
    public void shouldSortViewDate() {
        //Get a view containing all rows in table since you can only sort views currently.
        TableView view = t.where().findAll();

        //Sort without specifying the order, should default to ascending.
        view.sort(3);
        assertEquals(date3, view.getDate(3, 0));
        assertEquals(date2, view.getDate(3, 1));
        assertEquals(date4, view.getDate(3, 2));
        assertEquals(date1, view.getDate(3, 3));
        assertEquals("cc", view.getString(0, 3));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886628476/fstmerge_base_5440178987649813315
public void shouldSortViewDate() {    
	    //Get a view containing all rows in table since you can only sort views currently.
	    TableView view = t.where().findAll();
	
	    //Sort without specifying the order, should default to ascending.
	    view.sort(3);
	    assertEquals(date3, view.getDate(3, 0));
	    assertEquals(date2, view.getDate(3, 1));
	    assertEquals(date4, view.getDate(3, 2));
	    assertEquals(date1, view.getDate(3, 3));
	    assertEquals("cc", view.getString(0, 3));
	}
=======
@Test
	public void shouldSortViewDate() {    
	    //Get a view containing all rows in table since you can only sort views currently.
	    TableView view = t.where().findAll();
	
	    //Sort without specifying the order, should default to ascending.
	    view.sort(3);
	    assertEquals(date3, view.getDate(3, 0));
	    assertEquals(date2, view.getDate(3, 1));
	    assertEquals(date4, view.getDate(3, 2));
	    assertEquals(date1, view.getDate(3, 3));
	    assertEquals("cc", view.getString(0, 3));
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886628476/fstmerge_var2_7882774335171165553

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_90d77_3984c/rev_90d77-3984c/tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c00f1_90d77/rev_c00f1-90d77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_b103d/rev_ee0dc-b103d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c6078_ee0dc/rev_c6078-ee0dc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test()
    public void mustAllowDoubleCommitAndRollback() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717946/fstmerge_var1_7020377683525797203
        {
            WriteTransaction trans = db.beginWrite();
            Table tbl = trans.getTable("EmployeeTable");
            tbl.addColumn(ColumnType.ColumnTypeString, "name");
            tbl.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717946/fstmerge_base_8863732109043998200
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    tbl.addColumn(ColumnType.ColumnTypeString, "name");
		    tbl.addColumn(ColumnType.ColumnTypeInt, "number");
	
		    // allow commit before any changes
		    assertEquals(0, tbl.size());
	        tbl.add("Hello", 1);
		    trans.commit();
    	}
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    // allow double rollback
	        tbl.add("Hello", 2);
	        assertEquals(2, tbl.size());
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
    	}
    	{
    		ReadTransaction trans = db.beginRead();
    		Table tbl = trans.getTable("EmployeeTable");
	        assertEquals(1, tbl.size());
	        trans.endRead();
    	}
=======
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    tbl.addColumn(ColumnType.STRING, "name");
		    tbl.addColumn(ColumnType.INTEGER, "number");
	
		    // allow commit before any changes
		    assertEquals(0, tbl.size());
	        tbl.add("Hello", 1);
		    trans.commit();
    	}
    	{
	    	WriteTransaction trans = db.beginWrite();
		    Table tbl = trans.getTable("EmployeeTable");
		    // allow double rollback
	        tbl.add("Hello", 2);
	        assertEquals(2, tbl.size());
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
	        trans.rollback();
    	}
    	{
    		ReadTransaction trans = db.beginRead();
    		Table tbl = trans.getTable("EmployeeTable");
	        assertEquals(1, tbl.size());
	        trans.endRead();
    	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717946/fstmerge_var2_2377119262115182725

            // allow commit before any changes
            assertEquals(0, tbl.size());
            tbl.add("Hello", 1);
            trans.commit();
        }
        {
            WriteTransaction trans = db.beginWrite();
            Table tbl = trans.getTable("EmployeeTable");
            // allow double rollback
            tbl.add("Hello", 2);
            assertEquals(2, tbl.size());
            trans.rollback();
            trans.rollback();
            trans.rollback();
            trans.rollback();
        }
        {
            ReadTransaction trans = db.beginRead();
            Table tbl = trans.getTable("EmployeeTable");
            assertEquals(1, tbl.size());
            trans.endRead();
        }

        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void mustFailOnWriteInReadTransactions() {

        writeOneTransaction(1);

        ReadTransaction t = db.beginRead();
        Table table = t.getTable("EmployeeTable");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717951/fstmerge_var1_533625105004081931
        try { table.insert(0, 0, false);            assert(false);} catch (IllegalStateException e) {}
        try { table.add(0, false);                  assert(false);} catch (IllegalStateException e) {}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717951/fstmerge_base_1544431837374587702
        try { table.insert(0, 0, false);        assert(false);} catch (IllegalStateException e) {}
        try { table.add(0, false);              assert(false);} catch (IllegalStateException e) {}
=======
        try { table.addAt(0, 0, false);             assert(false);} catch (IllegalStateException e) {}
        try { table.add(0, false);                  assert(false);} catch (IllegalStateException e) {}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717951/fstmerge_var2_3835468656034224149
        try { table.addEmptyRow();                  assert(false);} catch (IllegalStateException e) {}
        try { table.addEmptyRows(1);                assert(false);} catch (IllegalStateException e) {}
        try { table.adjust(0,0);        assert(false);} catch (IllegalStateException e) {}
        try { table.clear();                        assert(false);} catch (IllegalStateException e) {}
        try { table.clearSubTable(0,0);             assert(false);} catch (IllegalStateException e) {}
        try { table.optimize();                     assert(false);} catch (IllegalStateException e) {}
        try { table.remove(0);                      assert(false);} catch (IllegalStateException e) {}
        try { table.removeLast();                   assert(false);} catch (IllegalStateException e) {}
        try { table.setBinaryByteArray(0,0,null);   assert(false);} catch (IllegalStateException e) {}
        try { table.setBoolean(0,0,false);          assert(false);} catch (IllegalStateException e) {}
        try { table.setDate(0,0,new Date(0));       assert(false);} catch (IllegalStateException e) {}
        try { table.setIndex(0);                    assert(false);} catch (IllegalStateException e) {}
        try { table.setLong(0,0,0);                 assert(false);} catch (IllegalStateException e) {}
        try { table.setMixed(0,0,null);             assert(false);} catch (IllegalStateException e) {}
        try { table.setString(0,0,"");              assert(false);} catch (IllegalStateException e) {}
        try { table.updateFromSpec(null);           assert(false);} catch (IllegalStateException e) {}

        TableQuery q = table.where();
        try { q.remove();                           assert(false);} catch (IllegalStateException e) {}
        try { q.remove(0,0);                        assert(false);} catch (IllegalStateException e) {}

        TableView v = q.findAll();
        try { v.adjust(0, 0);           assert(false);} catch (IllegalStateException e) {}
        try { v.clear();                            assert(false);} catch (IllegalStateException e) {}
        try { v.clearSubTable(0, 0);                assert(false);} catch (IllegalStateException e) {}
        try { v.remove(0);                          assert(false);} catch (IllegalStateException e) {}
        try { v.removeLast();                       assert(false);} catch (IllegalStateException e) {}
        try { v.setBinaryByteArray(0, 0, null);     assert(false);} catch (IllegalStateException e) {}
        try { v.setBoolean(0, 0, false);            assert(false);} catch (IllegalStateException e) {}
        try { v.setDate(0, 0, new Date());          assert(false);} catch (IllegalStateException e) {}
        try { v.setLong(0, 0, 0);                   assert(false);} catch (IllegalStateException e) {}
        try { v.setString(0,0,"");                  assert(false);} catch (IllegalStateException e) {}
        try { v.setMixed(0, 0, null);               assert(false);} catch (IllegalStateException e) {}

        t.endRead();
        clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717969/fstmerge_var1_3533074589557991873
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717969/fstmerge_base_1211056647603575627
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.ColumnTypeString, "Name");
	    t.addColumn(ColumnType.ColumnTypeBool,   "Study");
	    t.addColumn(ColumnType.ColumnTypeInt,    "Age");
	    t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
	    t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
	    t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
	    t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
	    t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
=======
@BeforeMethod
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.STRING, "Name");
	    t.addColumn(ColumnType.BOOLEAN,   "Study");
	    t.addColumn(ColumnType.INTEGER,    "Age");
	    t.addColumn(ColumnType.DATE,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.STRING, "Unsupported0");
	    t.addColumn(ColumnType.FLOAT,  "Unsupported1");
	    t.addColumn(ColumnType.DOUBLE, "Unsupported2");
	    t.addColumn(ColumnType.MIXED,  "Unsupported3");
	    t.addColumn(ColumnType.TABLE,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886717969/fstmerge_var2_4772072168625941889

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test()
    public void ShouldFailInsert() {
        Table table = new Table();
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.BOOLEAN, "bool");
        tableSpec.addColumn(ColumnType.INTEGER, "number");
        tableSpec.addColumn(ColumnType.STRING, "string");
        tableSpec.addColumn(ColumnType.BINARY, "Bin");
        tableSpec.addColumn(ColumnType.DATE, "date");
        tableSpec.addColumn(ColumnType.MIXED, "mix");
        TableSpec subspec = tableSpec.addSubtableColumn("sub");
        subspec.addColumn(ColumnType.INTEGER, "sub-num");
        table.updateFromSpec(tableSpec);

        // Wrong number of parameters
        byte[] buf = new byte[23];
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false);
            assertTrue(false);
=======
            table.addAt(0, false);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // wrong row index
        long mix = 123;
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(1, false, 1, "hi", buf, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(1, false, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(1, false, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // wrong row index
        table.addAt(0, false, 1, "hi", buf, new Date(), 123, null);
        table.addAt(1, false, 1, "hi", buf, new Date(), 123, null);
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(3, false, 1, "hi", buf, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(3, false, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(3, false, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (999 instead of bool)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, 999, 1, "hi", buf, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, 999, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(0, 999, 1, "hi", buf, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (bool instead of 1)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, true, false, "hi", buf, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, true, false, "hi", buf, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(0, true, false, "hi", buf, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (999 instead of string)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, 999, buf, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, 999, buf, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(0, false, 1, 999, buf, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (999 instead of Binary)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, "hi", 999, new Date(), mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, "hi", 999, new Date(), mix, null);
            assertTrue(false);
=======
            table.addAt(0, false, 1, "hi", 999, new Date(), mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (999 instead of Date)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, "hi", buf, 999, mix, null);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, "hi", buf, 999, mix, null);
            assertTrue(false);
=======
            table.addAt(0, false, 1, "hi", buf, 999, mix, null);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (999 instead of subtable)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, "hi", buf, new Date(), mix, 999);
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, "hi", buf, new Date(), mix, 999);
            assertTrue(false);
=======
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, 999);
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (String instead of subtable-Int)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, "hi", buf, new Date(), mix, new Object[][] { {"err",2,3}} );
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, "hi", buf, new Date(), mix, new Object[][] { {"err",2,3}} );
            assertTrue(false);
=======
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, new Object[][] { {"err",2,3}} );
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}

        // Wrong type of parameter (String instead of subtable-Int)
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var1_2349127489264285860
            table.insert(0, false, 1, "hi", buf, new Date(), mix, new Object[] {1,2,3} );
            fail("expected exception.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_base_5260224348720122641
            table.insert(0, false, 1, "hi", buf, new Date(), mix, new Object[] {1,2,3} );
            assertTrue(false);
=======
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, new Object[] {1,2,3} );
            assertTrue(false);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718001/fstmerge_var2_2855825286861921428
        } catch (IllegalArgumentException e) {}
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718045/fstmerge_var1_7871918273142667047
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718045/fstmerge_base_7765199457917067557
@Test(expectedExceptions=UnsupportedOperationException.class)
    public void shouldThrowOnAddColumnFromSubtable() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.ColumnTypeString, "name");
        persons.addColumn(ColumnType.ColumnTypeString, "email");
        persons.addColumn(ColumnType.ColumnTypeTable, "addresses");


        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");


        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");

        // Inserting data

        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });


        // Should throw

        persons.getSubTable(2,0).addColumn(ColumnType.ColumnTypeInt, "i");

    }
=======
@Test(expectedExceptions=UnsupportedOperationException.class)
    public void shouldThrowOnAddColumnFromSubtable() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");


        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE, "phone_numbers");


        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.INTEGER, "number");

        // Inserting data

        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });


        // Should throw

        persons.getSubTable(2,0).addColumn(ColumnType.INTEGER, "i");

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718045/fstmerge_var2_2823109368037557683

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718050/fstmerge_var1_5216410735583019536
@Test (enabled=true, expectedExceptions = IllegalStateException.class)
    public void shouldCloseTable() throws Throwable {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718050/fstmerge_base_9207333555326281178
@Test (enabled=true, expectedExceptions = IllegalStateException.class)
    public void shouldCloseTable() {
=======
@Test (expectedExceptions = IllegalStateException.class)
    public void shouldCloseTable() {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718050/fstmerge_var2_379516265329467643
        // util.setDebugLevel(1);
        Table table = new Table();
        table.finalize();

        @SuppressWarnings("unused")
        long s = table.size();
        
        // TODO: Test all methods...
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718152/fstmerge_var1_3543522470762244077
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718152/fstmerge_base_3857184778558593636
@Test(enabled = true)
    public void shouldSearchByColumnValue() {
        Table table = new Table();

        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        table.updateFromSpec(tableSpec);

        table.add("Foo");
        table.add("Bar");

        TableQuery query = table.where();
        TableView view = query.findAll(0, table.size(), Integer.MAX_VALUE);
        assertEquals(2, view.size());

        view.findAllString(0, "Foo");
    }
=======
@Test(enabled = true)
    public void shouldSearchByColumnValue() {
        Table table = new Table();

        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.STRING, "name");
        table.updateFromSpec(tableSpec);

        table.add("Foo");
        table.add("Bar");

        TableQuery query = table.where();
        TableView view = query.findAll(0, table.size(), Integer.MAX_VALUE);
        assertEquals(2, view.size());

        view.findAllString(0, "Foo");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718152/fstmerge_var2_8267095194205651080

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718157/fstmerge_var1_2646262984682184738
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718157/fstmerge_base_8382551046531356195
@Test()
    public void shouldQueryInView() {
        Table table = new Table();

        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.ColumnTypeString, "name");
        table.updateFromSpec(tableSpec);

        table.add("A1");
        table.add("B");
        table.add("A2");
        table.add("B");
        table.add("A3");
        table.add("B");
        table.add("A3");

        TableQuery query = table.where();
        TableView view = query.beginsWith(0, "A").findAll(0, table.size(), Table.INFINITE);
        assertEquals(4, view.size());

        TableQuery query2 = table.where();
        TableView view2 = query2.tableview(view).contains(0, "3").findAll();
        assertEquals(2, view2.size());
    }
=======
@Test()
    public void shouldQueryInView() {
        Table table = new Table();

        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.STRING, "name");
        table.updateFromSpec(tableSpec);

        table.add("A1");
        table.add("B");
        table.add("A2");
        table.add("B");
        table.add("A3");
        table.add("B");
        table.add("A3");

        TableQuery query = table.where();
        TableView view = query.beginsWith(0, "A").findAll(0, table.size(), Table.INFINITE);
        assertEquals(4, view.size());

        TableQuery query2 = table.where();
        TableView view2 = query2.tableview(view).contains(0, "3").findAll();
        assertEquals(2, view2.size());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718157/fstmerge_var2_859870534545079066

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test 
    public void shouldOpenExistingGroupFile() throws IOException {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_var1_4617730240993831374
        new File(FILENAME).delete();
        Group group = new Group();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_base_8227573049744910165
    	new File(FILENAME).delete();
    	Group group = new Group();
=======
    	new File(FILENAME).delete();
    	
    	Group group = new Group();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_var2_1801583288703457320
        group.writeToFile(FILENAME);
        group.close();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_var1_4617730240993831374

        Group group2 = new Group(FILENAME);
        group2.close();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_base_8227573049744910165
        
    	Group group2 = new Group(FILENAME);
    	group2.close();
=======
        
    	Group group2 = new Group(FILENAME);
    	group2.close();

    	Group group3 = new Group(FILENAME, OpenMode.READ_ONLY);
    	group3.close();

    	Group group4 = new Group(FILENAME, OpenMode.READ_WRITE);
    	group4.close();

    	Group group5 = new Group(FILENAME, OpenMode.READ_WRITE_NO_CREATE);
    	group5.close();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886718663/fstmerge_var2_1801583288703457320
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719001/fstmerge_var1_6011729364288497842
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719001/fstmerge_base_2482298701472067752
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.ColumnTypeString, "Name");
        table.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        table.addColumn(ColumnType.ColumnTypeInt, "Age");
        table.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Name");
        fromGroup.addColumn(ColumnType.ColumnTypeDouble, "GPA");
        fromGroup.addColumn(ColumnType.ColumnTypeInt, "Age");
        fromGroup.addColumn(ColumnType.ColumnTypeString, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.ColumnTypeString, "Name");
            tab.addColumn(ColumnType.ColumnTypeDouble, "GPA");
            tab.addColumn(ColumnType.ColumnTypeInt, "Age");
            tab.addColumn(ColumnType.ColumnTypeString, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
=======
@Test
    public void shouldSetIndexWithoutFailing() {

        //Specify table
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "Name");
        table.addColumn(ColumnType.DOUBLE, "GPA");
        table.addColumn(ColumnType.INTEGER, "Age");
        table.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        table.add("cc", 2.5, 24, "Pete");
        table.add("dd", 4.5, 35, "Su");
        table.add("bb", 3.6, 22, "Bri");
        table.add("aa", 3.6, 22, "Chris");
        
        //Set index on column with Strings
        table.setIndex(0);
        
        Group group = new Group();
        Table fromGroup = group.getTable("test");
        fromGroup.addColumn(ColumnType.STRING, "Name");
        fromGroup.addColumn(ColumnType.DOUBLE, "GPA");
        fromGroup.addColumn(ColumnType.INTEGER, "Age");
        fromGroup.addColumn(ColumnType.STRING, "Nickname");
        
        //Add data
        fromGroup.add("cc", 2.5, 24, "Pete");
        fromGroup.add("dd", 4.5, 35, "Su");
        fromGroup.add("bb", 3.6, 22, "Bri");
        fromGroup.add("aa", 3.6, 22, "Chris");
        
        table.setIndex(0);
        
        SharedGroup sharedGroup = new SharedGroup("testGroup.tightdb");
        WriteTransaction wt = sharedGroup.beginWrite();
        
        try{
            Table tab = wt.getTable("table1");
            tab.addColumn(ColumnType.STRING, "Name");
            tab.addColumn(ColumnType.DOUBLE, "GPA");
            tab.addColumn(ColumnType.INTEGER, "Age");
            tab.addColumn(ColumnType.STRING, "Nickname");
            
            //Add data
            tab.add("cc", 2.5, 24, "Pete");
            tab.add("dd", 4.5, 35, "Su");
            tab.add("bb", 3.6, 22, "Bri");
            tab.add("aa", 3.6, 22, "Chris");
            
            wt.commit();
            
        } catch(Throwable error){
            wt.rollback();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719001/fstmerge_var2_8941694410910162958

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719931/fstmerge_var1_5801991460850684872
public boolean equals(Object other) {
        if(other == null)
            return false;
        if(other == this)
            return true;
        if( ! (other instanceof Group))
            return false;
        
        Group otherGroup = (Group) other;
        return nativeEquals(nativePtr, otherGroup.nativePtr);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719931/fstmerge_base_8177907436397644083
=======
public boolean equals(Object group) {
    	if (!(group instanceof Group))
    		return false;
		return nativeEquals(nativePtr, ((Group)group).nativePtr);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886719931/fstmerge_var2_7932568530892822557

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee0dc_e90a2/rev_ee0dc-e90a2/tightdb-java-core/src/main/java/com/tightdb/Group.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb42f_9e836/rev_cb42f-9e836.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeMethod
    void init() {       
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741444/fstmerge_var1_6555894766452744533
        t = createTestTable(); 
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741444/fstmerge_base_7339009370075458467
        t.addColumn(ColumnType.ColumnTypeBinary, "binary"); // 0
        t.addColumn(ColumnType.ColumnTypeBool, "boolean");  // 1
        t.addColumn(ColumnType.ColumnTypeDate, "date");     // 2
        t.addColumn(ColumnType.ColumnTypeDouble, "double"); // 3
        t.addColumn(ColumnType.ColumnTypeFloat, "float");   // 4
        t.addColumn(ColumnType.ColumnTypeInt, "long");      // 5
        t.addColumn(ColumnType.ColumnTypeMixed, "mixed");   // 6
        t.addColumn(ColumnType.ColumnTypeString, "string"); // 7
        t.addColumn(ColumnType.ColumnTypeTable, "table");   // 8
=======
        t.addColumn(ColumnType.BINARY, "binary"); // 0
        t.addColumn(ColumnType.BOOLEAN, "boolean");  // 1
        t.addColumn(ColumnType.DATE, "date");     // 2
        t.addColumn(ColumnType.DOUBLE, "double"); // 3
        t.addColumn(ColumnType.FLOAT, "float");   // 4
        t.addColumn(ColumnType.INTEGER, "long");      // 5
        t.addColumn(ColumnType.MIXED, "mixed");   // 6
        t.addColumn(ColumnType.STRING, "string"); // 7
        t.addColumn(ColumnType.TABLE, "table");   // 8
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741444/fstmerge_var2_729642845003417767
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb42f_9e836/rev_cb42f-9e836/tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741784/fstmerge_var1_3442115696659493189
@Test
    public void tableEquals() {
        TestEmployeeTable t1 = getFilledTestEmployeeTable();
        TestEmployeeTable t2 = getFilledTestEmployeeTable();
        assertEquals(true, t1.equals(t2));
        
        t1.add(NAME2, "B. Good", 10000, true, new byte[] { 1 }, new Date(), true, null);
        assertEquals(false, t1.equals(t2));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741784/fstmerge_base_7399457698106847310
=======
@Test
    public void tableEquals() {
        TestEmployeeTable t1 = getFilledTestEmployeeTable();
        TestEmployeeTable t2 = getFilledTestEmployeeTable();
        
        assertEquals(true, t1.equals(t2));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415886741784/fstmerge_var2_6265118157958409424

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb42f_9e836/rev_cb42f-9e836/tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1b511_be98b/rev_1b511-be98b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb42f_5ef34/rev_cb42f-5ef34.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ae52c_e8d5d/rev_ae52c-e8d5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_211a4_cb42f/rev_211a4-cb42f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8a56d_ae52c/rev_8a56d-ae52c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5605f_40511/rev_5605f-40511.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_50128_5605f/rev_50128-5605f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b9e93_c36ff/rev_b9e93-c36ff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3cda4_45561/rev_3cda4-45561.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4dcf2_40511/rev_4dcf2-40511.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3cda4_bcaba/rev_3cda4-bcaba.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b90fd_3cda4/rev_b90fd-3cda4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_969cc_66eb6/rev_969cc-66eb6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_893a7_97088/rev_893a7-97088.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2bdcd_68441/rev_2bdcd-68441.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a8676_969cc/rev_a8676-969cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f97ae_88e49/rev_f97ae-88e49.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e449e_028e1/rev_e449e-028e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e449e_81128/rev_e449e-81128.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_5f3ea/rev_e2326-5f3ea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236689/fstmerge_var1_3702606072061148345
@Test
    public void shouldThrowExceptionOnGroupReadOnly() throws IOException {
    	new File(FILENAME).delete();
    	// Throw when opening non-existing file
    	try { Group group = new Group(FILENAME, OpenMode.READ_ONLY); fail("Group is read only"); } catch (com.tightdb.IOException e) { } 	
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236689/fstmerge_base_2574046415506183169
=======
@Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldThrowExceptionOnGroupReadOnly() throws IOException {
    	new File(FILENAME).delete();
    	// Throw when opening non-existing file
    	Group group = new Group(FILENAME, OpenMode.READ_ONLY);    	
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236689/fstmerge_var2_6313461983894016254

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236699/fstmerge_var1_3610900479689003868
@Test
    public void ThrowExceptionOnGroupNoCreate() throws IOException {
    	new File(FILENAME).delete();      
    	try { Group group2 = new Group(FILENAME, OpenMode.READ_WRITE_NO_CREATE); fail("Exception excpected"); } catch (com.tightdb.IOException e) { }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236699/fstmerge_base_7205291444573192144
=======
@Test(expectedExceptions = IllegalArgumentException.class)
    public void ThrowExceptionOnGroupNoCreate() throws IOException {
    	new File(FILENAME).delete();      
    	Group group2 = new Group(FILENAME, OpenMode.READ_WRITE_NO_CREATE);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236699/fstmerge_var2_6938883983219603114

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236718/fstmerge_var1_1417772472570200748
@Test
    public void shouldCommitToDisk() throws IOException {
    	new File(FILENAME).delete();

    	// Write a DB to file
    	Group group = new Group(FILENAME, OpenMode.READ_WRITE);
    	group.commit();
  	
      	Table tbl = group.getTable("test");
    	tbl.addColumn(ColumnType.INTEGER, "number");
    	tbl.add(1);
    	group.commit();
    	assertEquals(tbl.getLong(0, 0), 1);
    	
    	// Update, commit and close file.
    	tbl.set(0, 27);
    	group.commit();
    	group.close();
    	
    	// Open file again and verify content
    	Group readGrp = new Group(FILENAME);
    	Table tbl2 = readGrp.getTable("test");
    	assertEquals(tbl2.getLong(0, 0), 27);
    	readGrp.close();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236718/fstmerge_base_4844085145981280348
=======
@Test
    public void shouldCommitToDisk() throws IOException {
    	new File(FILENAME).delete();

    	// Write a DB to file
    	Group group = new Group(FILENAME, OpenMode.READ_WRITE);
    	group.commit();
  	
      	Table tbl = group.getTable("test");
    	tbl.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl.add(1);
    	group.commit();
    	assertEquals(tbl.getLong(0, 0), 1);
    	
    	// Update, commit and close file.
    	tbl.set(0, 27);
    	group.commit();
    	group.close();
    	
    	// Open file again and verify content
    	Group readGrp = new Group(FILENAME);
    	Table tbl2 = readGrp.getTable("test");
    	assertEquals(tbl2.getLong(0, 0), 27);
    	readGrp.close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236718/fstmerge_var2_7602000686086335866

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236747/fstmerge_var1_1045900626254367611
@Test
    public void shouldCompareGroups() {
    	Group group1 = new Group();
      	Table tbl = group1.getTable("test");
    	tbl.addColumn(ColumnType.INTEGER, "number");
    	tbl.add(1);

    	Group group2 = new Group();
      	Table tbl2 = group2.getTable("test");
    	tbl2.addColumn(ColumnType.INTEGER, "number");
    	tbl2.add(1);
    	
    	assertEquals(true, group1.equals(group2));
    	
    	tbl2.add(2);
    	assertEquals(false, group1.equals(group2));    	
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236747/fstmerge_base_7899316554367520895
=======
@Test
    public void shouldCompareGroups() {
    	Group group1 = new Group();
      	Table tbl = group1.getTable("test");
    	tbl.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl.add(1);

    	Group group2 = new Group();
      	Table tbl2 = group2.getTable("test");
    	tbl2.addColumn(ColumnType.ColumnTypeInt, "number");
    	tbl2.add(1);
    	
    	assertEquals(true, group1.equals(group2));
    	
    	tbl2.add(2);
    	assertEquals(false, group1.equals(group2));    	
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887236747/fstmerge_var2_2446144384938196759

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237896/fstmerge_var1_1209511778890217683
public boolean equals(Object other) {
        if (other == null)
            return false;
        if (other == this)
            return true;
        if (!(other instanceof Group))
            return false;
        
        Group otherGroup = (Group) other;
        return nativeEquals(nativePtr, otherGroup.nativePtr);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237896/fstmerge_base_6385786586793265982
=======
public boolean equals(Object group) {
    	if (!(group instanceof Group))
    		return false;
		return nativeEquals(nativePtr, ((Group)group).nativePtr);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237896/fstmerge_var2_8343911697590037253

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-core/src/main/java/com/tightdb/Group.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237900/fstmerge_var1_4070455410265343814
protected native boolean nativeEquals(long nativeGroupPtr, long nativeGroupToComparePtr);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237900/fstmerge_base_5860283064682896042
=======
protected native boolean nativeEquals(long nativeGroupPtr, long compareToGroupPtr);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237900/fstmerge_var2_7812156317123978990

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-core/src/main/java/com/tightdb/Group.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237962/fstmerge_var1_6967514140112211514
public void commit() {
        verifyGroupIsValid();
        nativeCommit(nativePtr);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237962/fstmerge_base_9027021526341414314
=======
public void commit() {
    	verifyGroupIsValid();
        nativeCommit(nativePtr);    	
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887237962/fstmerge_var2_7021878987786681485

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-core/src/main/java/com/tightdb/Group.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 18; ##FSTMerge## public static final long REQUIRED_JNI_VERSION = 19;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2326_3b0ea/rev_e2326-3b0ea/tightdb-java-core/src/main/java/com/tightdb/internal/util.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_01c1d_e2326/rev_01c1d-e2326.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4aff8_112e3/rev_4aff8-112e3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284337/fstmerge_var1_6515081668305620831
public static void getColumnCountExample(){
        // @@Example: ex_java_typed_table_get_column_count @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column count. This example uses the table from Table (typed) intro
        //Assert(people.getColumnCount() == 3);
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284337/fstmerge_base_6734945041225074144
public static void getColumnCountExample(){
        // @@Example: ex_java_typed_table_get_column_count @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column count. This example uses the table from Table /typed) intro
        Assert(people.getColumnCount() == 3);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284337/fstmerge_var2_5985362387847978925

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4aff8_112e3/rev_4aff8-112e3/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284338/fstmerge_var1_8767035052455992994
public static void getColumnNameExample(){
        // @@Example: ex_java_typed_table_get_column_name @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column name. This example uses the table from Table (typed) intro
        //Assert(people.getColumnName(1).equals("age"));
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284338/fstmerge_base_6736491008204356744
public static void getColumnNameExample(){
        // @@Example: ex_java_typed_table_get_column_name @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column name. This example uses the table from Table /typed) intro
        Assert(people.getColumnName(1).equals("age"));
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284338/fstmerge_var2_4110162324719194424

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4aff8_112e3/rev_4aff8-112e3/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284340/fstmerge_var1_1258990791757397094
public static void getColumnIndexExample(){
        // @@Example: ex_java_typed_table_get_column_index @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column index. This example uses the table from Table (typed) intro
        //Assert(people.getColumnIndex("age") == 1);
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284340/fstmerge_base_4924638585777820051
public static void getColumnIndexExample(){
        // @@Example: ex_java_typed_table_get_column_index @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column index. This example uses the table from Table /typed) intro
        Assert(people.getColumnIndex("age") == 1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284340/fstmerge_var2_4918061368036949912

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4aff8_112e3/rev_4aff8-112e3/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284341/fstmerge_var1_701504527624750028
public static void getColumnTypeExample(){
        // @@Example: ex_java_typed_table_get_column_type @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column index. This example uses the table from Table (typed) intro
        //Assert(people.getColumnType(1).equals(ColumnType.INTEGER));
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284341/fstmerge_base_8338861729386149757
public static void getColumnTypeExample(){
        // @@Example: ex_java_typed_table_get_column_type @@
        // @@Show@@
        PeopleTable people = new PeopleTable();
        
        // Get column index. This example uses the table from Table /typed) intro
        Assert(people.getColumnType(1).equals(ColumnType.INTEGER));
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887284341/fstmerge_var2_4047177543294257959

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4aff8_112e3/rev_4aff8-112e3/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d3803_4aff8/rev_d3803-4aff8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_48540_c7fc1/rev_48540-c7fc1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e449e_28d9f/rev_e449e-28d9f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363730/fstmerge_var1_7274341942637480598
public void insertBinary(long columnIndex, long rowIndex, ByteBuffer data) {
        if (immutable) throwImmutable();
        if (data == null)
            throw new NullPointerException("ByteBuffer is null");
        //System.err.printf("\ninsertBinary(col %d, row %d, ByteBuffer)\n", columnIndex, rowIndex);
        //System.err.println("-- HasArray: " + (data.hasArray() ? "yes":"no") + " len= " + data.array().length);
        if (data.isDirect())
            nativeInsertByteBuffer(nativePtr, columnIndex, rowIndex, data);
        else
            throw new RuntimeException("Currently ByteBuffer must be allocateDirect().");   // FIXME: support other than allocateDirect
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363730/fstmerge_base_9083418415687413758
public void insertBinary(long columnIndex, long rowIndex, ByteBuffer data) {
        if (immutable) throwImmutable();
        //System.err.printf("\ninsertBinary(col %d, row %d, ByteBuffer)\n", columnIndex, rowIndex);
        //System.err.println("-- HasArray: " + (data.hasArray() ? "yes":"no") + " len= " + data.array().length);
        if (data.isDirect())
            nativeInsertByteBuffer(nativePtr, columnIndex, rowIndex, data);
        else
            throw new RuntimeException("Currently ByteBuffer must be allocateDirect().");   // FIXME: support other than allocateDirect
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363730/fstmerge_var2_4685846540173139801

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e449e_28d9f/rev_e449e-28d9f/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363739/fstmerge_var1_6206205782263428915
public void insertBinary(long columnIndex, long rowIndex, byte[] data) {
        if (data == null)
            throw new NullPointerException("Null Array");
        if (immutable) throwImmutable();
        nativeInsertByteArray(nativePtr, columnIndex, rowIndex, data);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363739/fstmerge_base_1338110452316510231
public void insertBinary(long columnIndex, long rowIndex, byte[] data) {
        if (immutable) throwImmutable();
        nativeInsertByteArray(nativePtr, columnIndex, rowIndex, data);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887363739/fstmerge_var2_3715545632923571585

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e449e_28d9f/rev_e449e-28d9f/tightdb-java-core/src/main/java/com/tightdb/Table.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_776e2_28d9f/rev_776e2-28d9f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2c51e_6fc09/rev_2c51e-6fc09.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e1da8_c56bf/rev_e1da8-c56bf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e1da8_2e0a0/rev_e1da8-2e0a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_12938_19fe3/rev_12938-19fe3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b84c4_12938/rev_b84c4-12938.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c62d3_e1da8/rev_c62d3-e1da8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7e1b1_931d1/rev_7e1b1-931d1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_56c70_3f97e/rev_56c70-3f97e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f573e_56c70/rev_f573e-56c70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_44edb_c6790/rev_44edb-c6790.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void shouldMatchOnSimpleStringCriteria() {
        assertEquals(1, employees.firstName.equalTo("John").findAll().size());
        assertEquals(1, employees.firstName.equalTo("John").findAll().size());

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678378/fstmerge_var1_8281571064640247255
        assertEquals(2, employees.firstName.neq("John").findAll().size());
        assertEquals(2, employees.firstName.notEqual("John").findAll().size());
        assertEquals(2, employees.firstName.neq("John", true).findAll().size());
        assertEquals(2, employees.firstName.notEqual("John", true).findAll().size());
        
        assertEquals(2, employees.firstName.neq("johN", false).findAll().size());
        assertEquals(2, employees.firstName.notEqual("johN", false).findAll().size());

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678378/fstmerge_base_4924084680799261533
        assertEquals(2, employees.firstName.neq("John").findAll().size());
        assertEquals(2, employees.firstName.notEqual("John").findAll().size());
=======
        assertEquals(2, employees.firstName.notEqualTo("John").findAll().size());
        assertEquals(2, employees.firstName.notEqualTo("John").findAll().size());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678378/fstmerge_var2_2950880825345599445

        assertEquals(2, employees.firstName.startsWith("J").findAll().size());
        assertEquals(1, employees.firstName.endsWith("hny").findAll().size());
        assertEquals(2, employees.firstName.contains("ohn").findAll().size());

        assertEquals(1, employees.firstName.equalTo("john", false).findAll().size());
        assertEquals(1, employees.firstName.equalTo("john", false).findAll().size());
        assertEquals(2, employees.firstName.startsWith("j", false).findAll().size());
        assertEquals(1, employees.firstName.endsWith("hnY", false).findAll().size());
        assertEquals(2, employees.firstName.contains("ohN", false).findAll().size());
        
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-test/src/test/java/com/tightdb/typed/TableQueryTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void shouldSaveSubtableChanges() {
        TestEmployeeRow employee = employees.get(0);

        // check the basic operations
        TestPhoneTable phones1 = employee.getPhones();
        assertEquals(1, phones1.size());

        phones1.add("mobile", "111");
        assertEquals(2, phones1.size());

        TestPhoneTable phones2 = employee.getPhones();
        assertEquals(2, phones2.size());

        phones2.add("mobile", "222");
        assertEquals(3, phones2.size());

        phones2.insert(1, "home", "333");
        assertEquals(4, phones2.size());

        TestPhoneTable phones3 = employee.getPhones();
        assertEquals(2, phones3.type.equalTo("mobile").count());
        assertEquals(2, phones3.type.equalTo("home").count());

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678531/fstmerge_var1_8738169843336199316
        assertEquals(1, phones3.number.eq("111").count());
        assertEquals(1, phones3.number.eq("123").count());
        assertEquals(0, phones3.number.eq("xxx").count());
        
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678531/fstmerge_base_2656213138242667514
        assertEquals(1, phones3.number.eq("111").count());
        assertEquals(1, phones3.number.eq("123").count());
        assertEquals(0, phones3.number.eq("xxx").count());

=======
        assertEquals(1, phones3.number.equalTo("111").count());
        assertEquals(1, phones3.number.equalTo("123").count());
        assertEquals(0, phones3.number.equalTo("xxx").count());

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887678531/fstmerge_var2_2513947641447878322
        // check the search operations
        TestPhoneQuery phoneQuery = phones3.where().number.equalTo("111").number
                .notEqualTo("wrong").type.equalTo("mobile").type.notEqualTo("wrong");
        assertEquals(1, phoneQuery.count());

        TestPhoneView all = phoneQuery.findAll();
        assertEquals(1, all.size());
        checkPhone(all.get(0), "mobile", "111");

        checkPhone(phoneQuery.findFirst(), "mobile", "111");
        checkPhone(phoneQuery.findLast(), "mobile", "111");
        checkPhone(phoneQuery.findNext(), "mobile", "111");
        assertEquals(null, phoneQuery.findNext());

        // make sure the other sub-tables and independent and were not changed
        assertEquals(EmployeesFixture.PHONES[1].length, employees.get(1)
                .getPhones().size());
        assertEquals(EmployeesFixture.PHONES[2].length, employees.get(2)
                .getPhones().size());

        // check the clear operation on the query
        phoneQuery.clear();
        assertEquals(3, phones1.size());

        // check the clear operation
        phones3.clear();
        assertEquals(0, phones1.size());
        assertEquals(0, phones2.size());
        assertEquals(0, phones3.size());

        employees.clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-test/src/test/java/com/tightdb/typed/SubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681919/fstmerge_var1_5394936186485044989
public TableQuery equal(long columnIndex, Date value){
        nativeEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681919/fstmerge_base_6752451746330502822
public TableQuery equal(long columnIndex, Date value){
        nativeEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681919/fstmerge_var2_4712043815909800246

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681923/fstmerge_var1_3858712202980281282
public TableQuery eq(long columnIndex, Date value){
        nativeEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681923/fstmerge_base_221569180814730134
public TableQuery eq(long columnIndex, Date value){
        nativeEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681923/fstmerge_var2_2322627831616582315

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681928/fstmerge_var1_3986309091090448287
public TableQuery notEqual(long columnIndex, Date value){
        nativeNotEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681928/fstmerge_base_3629259812628931508
public TableQuery notEqual(long columnIndex, Date value){
        nativeNotEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681928/fstmerge_var2_6121501582869127521

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681933/fstmerge_var1_2454985767459545395
public TableQuery neq(long columnIndex, Date value){
        nativeNotEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681933/fstmerge_base_8492124890535927114
public TableQuery neq(long columnIndex, Date value){
        nativeNotEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681933/fstmerge_var2_3648535018947120667

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681937/fstmerge_var1_1886989157881929341
public TableQuery gt(long columnIndex, Date value){
        nativeGreaterDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681937/fstmerge_base_1917529142357623293
public TableQuery gt(long columnIndex, Date value){
        nativeGreaterDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681937/fstmerge_var2_924421924062833401

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681942/fstmerge_var1_5403546710021281948
public TableQuery gte(long columnIndex, Date value){
        nativeGreaterEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681942/fstmerge_base_3329908487859205037
public TableQuery gte(long columnIndex, Date value){
        nativeGreaterEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681942/fstmerge_var2_59332701855966611

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681947/fstmerge_var1_8297216247247423237
public TableQuery lt(long columnIndex, Date value){
        nativeLessDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681947/fstmerge_base_3125458622021696531
public TableQuery lt(long columnIndex, Date value){
        nativeLessDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681947/fstmerge_var2_8747817857352138295

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681952/fstmerge_var1_7300801513932107316
public TableQuery lte(long columnIndex, Date value){
        nativeLessEqualDateTime(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681952/fstmerge_base_3669629551975534709
public TableQuery lte(long columnIndex, Date value){
        nativeLessEqualDate(nativePtr, columnIndex, value.getTime()/1000);
        return this;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887681952/fstmerge_var2_5478822417647105042

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_b899c/rev_2eb11-b899c/tightdb-java-core/src/main/java/com/tightdb/TableQuery.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fb401_2eb11/rev_fb401-2eb11.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_abc5e_a0b7a/rev_abc5e-a0b7a.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

TableView view;

// Find all employees with a first name of John.
view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_var1_6882760645044220495
double avgSalary = table.where().equal(1, "Anderson").averageInt(2);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_base_6435811826208660794
double avgSalary = table.where().equal(1, "Anderson").average(2);
=======
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_var2_1885807031490953893

// Find the total salary of people named Jane and Erik.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_var1_6882760645044220495
double salary = table.where().group().equal(0, "Jane").or().equal(0, "Erik").endGroup().sumInt(2);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_base_6435811826208660794
double salary = table.where().group().equal(0, "Jane").or().equal(0, "Erik").endGroup().sum(2);
=======
double salary = table.where().group().equalTo(0, "Jane").or().equalTo(0, "Erik").endGroup().sumInt(2);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887729421/fstmerge_var2_1885807031490953893

// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_abc5e_a0b7a/rev_abc5e-a0b7a/doc/ref/examples/src/com/tightdb/refdoc/DynQueryIntro.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_56506_abc5e/rev_56506-abc5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b4b6f_e449e/rev_b4b6f-e449e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8eb3b_bed68/rev_8eb3b-bed68.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

TableView view;

// Find all employees with a first name of John.
view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_var1_5381416855379183518
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_base_7472875693049231505
double avgSalary = table.where().equal(1, "Anderson").average(2);
=======
double avgSalary = table.where().equal(1, "Anderson").averageInt(2);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_var2_3545502296755343794

// Find the total salary of people named Jane and Erik.
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_var1_5381416855379183518
double salary = table.where().group().equalTo(0, "Jane").or().equalTo(0, "Erik").endGroup().sumInt(2);

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_base_7472875693049231505
double salary = table.where().group().equal(0, "Jane").or().equal(0, "Erik").endGroup().sum(2);
=======
double salary = table.where().group().equal(0, "Jane").or().equal(0, "Erik").endGroup().sumInt(2);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887807165/fstmerge_var2_3545502296755343794

// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8eb3b_bed68/rev_8eb3b-bed68/doc/ref/examples/src/com/tightdb/refdoc/DynQueryIntro.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_528df_698a7/rev_528df-698a7.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887835142/fstmerge_var1_2525770318760939881
@Override
    public TableDefinition getSubTableDefinition(long columnIndex) {
        if(nativeIsRootTable(nativePtr) == false)
            throw new UnsupportedOperationException("This is a subtable. Can only be called on root table.");

        long[] newPath = new long[1];
        newPath[0] = columnIndex;
        return new SubTableDefinition(nativePtr, newPath);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887835142/fstmerge_base_340981570983066372
public TableDefinition getSubTableDefinition(long columnIndex) {
        if(nativeIsRootTable(nativePtr) == false)
            throw new UnsupportedOperationException("This is a subtable. Can only be called on root table.");

        long[] newPath = new long[1];
        newPath[0] = columnIndex;
        return new SubTableDefinition(nativePtr, newPath);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887835142/fstmerge_var2_7465881806651286731

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_528df_698a7/rev_528df-698a7/tightdb-java-core/src/main/java/com/tightdb/Table.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_aef21_528df/rev_aef21-528df.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4362b_8eb3b/rev_4362b-8eb3b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void addColumnsToSubtables() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_var1_7739270488681821061
        TableSchema addresses = persons.getSubTableSchema(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_base_5013532260799911342
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
=======
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE, "phone_numbers");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_var2_7478289461976225821

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_var1_7739270488681821061
        TableSchema phone_numbers = addresses.getSubTableSchema(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_base_5013532260799911342
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
=======
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.INTEGER, "number");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905414/fstmerge_var2_7478289461976225821

        // Inserting data
        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });

        // Assertions
        assertEquals(persons.getColumnName(2), "addresses");
        assertEquals(persons.getSubTable(2,0).getColumnName(2), "phone_numbers");
        assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getColumnName(0), "number");

        assertEquals(persons.getString(1,0), "xx@xxxx.com");
        assertEquals(persons.getSubTable(2,0).getString(0,0), "X Street");
        assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getLong(0,0), 12345678);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void removeColumnFromSubtable() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_var1_4171981913432728701
        TableSchema addresses = persons.getSubTableSchema(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_base_8902474589723325480
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
=======
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE, "phone_numbers");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_var2_7716324846003801172

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_var1_4171981913432728701
        TableSchema phone_numbers = addresses.getSubTableSchema(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_base_8902474589723325480
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
=======
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.INTEGER, "number");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905419/fstmerge_var2_7716324846003801172

        // Inserting data
        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });

        // Assertions
        assertEquals(persons.getSubTable(2,0).getColumnCount(), 3);
        addresses.removeColumn(1);
        assertEquals(persons.getSubTable(2,0).getColumnCount(), 2);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void renameColumnInSubtable() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_var1_1972170303913167544
        TableSchema addresses = persons.getSubTableSchema(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_base_1345616197036634177
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
=======
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE , "phone_numbers");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_var2_8393385058560062696

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_var1_1972170303913167544
        TableSchema phone_numbers = addresses.getSubTableSchema(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_base_1345616197036634177
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
=======
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.INTEGER, "number");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905423/fstmerge_var2_8393385058560062696

        // Inserting data
        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });

        // Assertions
        assertEquals("zipcode", persons.getSubTable(2,0).getColumnName(1));
        addresses.renameColumn(1, "zip");
        assertEquals("zip", persons.getSubTable(2,0).getColumnName(1));
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void shouldThrowOnGetSubtableDefinitionFromSubtable() {
        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_var1_956570196696493022
        TableSchema addresses = persons.getSubTableSchema(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_base_282544348324927871
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
=======
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE, "phone_numbers");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_var2_6249443890739326252

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_var1_956570196696493022
        TableSchema phone_numbers = addresses.getSubTableSchema(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_base_282544348324927871
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.ColumnTypeInt, "number");
=======
        TableDefinition phone_numbers = addresses.getSubTableDefinition(2);
        phone_numbers.addColumn(ColumnType.INTEGER, "number");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905428/fstmerge_var2_6249443890739326252

        // Inserting data
        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, new Object[][] {{ 12345678 }} }} });

        try {
            // Should throw
            persons.getSubTable(2,0).addColumn(ColumnType.INTEGER, "i");
            fail("expected exception.");
        } catch (UnsupportedOperationException e) {}
        
        try {
            // Should throw
            persons.getSubTable(2,0).getSubTableSchema(2);
            fail("expected exception.");
        } catch (UnsupportedOperationException e) {}


    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void immutableInsertNotAllowed() {
        
        String FILENAME = "only-test-file.tightdb";
        String TABLENAME = "tableName";
        
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_var1_1401662455979009369
      //  new File(FILENAME).delete();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_base_7965218266554479410
        new File(FILENAME).delete();
=======
        new File(FILENAME).delete();
        new File(FILENAME + ".lock").delete();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_var2_608523802235285189

        SharedGroup group = new SharedGroup(FILENAME);

        // Write transaction must be run so where are sure a db exists with the correct table
        WriteTransaction wt = group.beginWrite();
        try{
            Table table = wt.getTable(TABLENAME);
            table.addColumn(ColumnType.STRING, "col0");
            table.add("value0");
            table.add("value1");  
            table.add("value2");

            wt.commit();
        } catch (Throwable t) {
            wt.rollback();
        }

        ReadTransaction rt = group.beginRead();
        try{
            Table table = rt.getTable(TABLENAME);
            
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_var1_1401662455979009369
            try {  table.insert(1, "NewValue"); fail("Exception expected when inserting in read transaction"); } catch (IllegalStateException e) { }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_base_7965218266554479410
            try {  table.insert(1, "NewValue"); fail("Exception excpeted when inserting in read transaction"); } catch (IllegalStateException e) { }
=======
            try {  table.addAt(1, "NewValue"); fail("Exception excpeted when inserting in read transaction"); } catch (IllegalStateException e) { }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905480/fstmerge_var2_608523802235285189
            
        } finally {
            rt.endRead();
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void shouldThrowOnUpdateFromTableSpecOnSubtable() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.STRING, "name");
        persons.addColumn(ColumnType.STRING, "email");
        persons.addColumn(ColumnType.TABLE, "addresses");


<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905598/fstmerge_var1_742963931902873843
        TableSchema addresses = persons.getSubTableSchema(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905598/fstmerge_base_4515685042075069954
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.ColumnTypeString, "street");
        addresses.addColumn(ColumnType.ColumnTypeInt, "zipcode");
        addresses.addColumn(ColumnType.ColumnTypeTable, "phone_numbers");
=======
        TableDefinition addresses = persons.getSubTableDefinition(2);
        addresses.addColumn(ColumnType.STRING, "street");
        addresses.addColumn(ColumnType.INTEGER, "zipcode");
        addresses.addColumn(ColumnType.TABLE, "phone_numbers");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905598/fstmerge_var2_8476249668578008428

        persons.add(new Object[] {"Mr X", "xx@xxxx.com", new Object[][] {{ "X Street", 1234, null }} });

        Table address = persons.getSubTable(2,0);

        TableSpec spec = new TableSpec();
        spec.addColumn(ColumnType.INTEGER, "foo");

        
       try { address.updateFromSpec(spec); fail("Address is subtable. Not allowed to update from spec"); } catch (UnsupportedOperationException e) { }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/JNITableSpecTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void setAndGetNumbers() {
        
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905842/fstmerge_var1_6036442034973798507
        
        // Integer set all columns
        view.longNum.setAll(400);
        assertEquals(new Long(400), view.get(0).longNum.get());
        view.longNum.setAll(-1); 
        assertEquals(new Long(-1), view.get(1).longNum.get());
        
        // Double columns
        view.get(0).doubleNum.set(400d);
        assertEquals(400d, view.get(0).doubleNum.get());
        view.get(1).doubleNum.set(-0.01d);
        assertEquals(-0.01d, view.get(1).doubleNum.get());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905842/fstmerge_base_579238509094531521
        // Double column s
        view.get(0).doubleNum.set(400d);
        assertEquals(400d, view.get(0).doubleNum.get());
        view.get(1).doubleNum.set(-0.01d);
        assertEquals(-0.01d, view.get(1).doubleNum.get());
=======
        // Double column s
        view.get(0).setDoubleNum(400d);
        assertEquals(400d, view.get(0).getDoubleNum());
        view.get(1).setDoubleNum(-0.01d);
        assertEquals(-0.01d, view.get(1).getDoubleNum());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887905842/fstmerge_var2_8892822763800712867
        
        // FLoat columns
        view.get(0).setFloatNum(400f);
        assertEquals(400f, view.get(0).getFloatNum());
        view.get(1).setFloatNum(-0.01f);
        assertEquals(-0.01f, view.get(1).getFloatNum());
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-test/src/test/java/com/tightdb/typed/NumbersTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887906619/fstmerge_var1_2347429768618939163
@Override
    public void removeColumn(long columnIndex) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887906619/fstmerge_base_7686999995124762329
public void removeColumn(long columnIndex)
    {
=======
public void removeColumn(long columnIndex) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887906619/fstmerge_var2_355273853778358478
        nativeRemoveColumn(nativePtr, columnIndex);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907355/fstmerge_var1_5675817052581784385
@Override
    public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex) {
        return nativeGetByteBuffer(nativePtr, columnIndex, rowIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907355/fstmerge_base_6307558221099933029
public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex) {
        return nativeGetByteBuffer(nativePtr, columnIndex, rowIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907355/fstmerge_var2_587623343665518600

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907364/fstmerge_var1_6816617451731426932
@Override
    public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data) {
        if (immutable) throwImmutable();
        if (data == null)
            throw new NullPointerException("Null array");
        if (data.isDirect())
            nativeSetByteBuffer(nativePtr, columnIndex, rowIndex, data);
        else
            throw new RuntimeException("Currently ByteBuffer must be allocateDirect()."); // FIXME: support other than allocateDirect
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907364/fstmerge_base_5970765542103621888
public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data) {
        if (immutable) throwImmutable();
        if (data == null)
            throw new NullPointerException("Null array");
        if (data.isDirect())
            nativeSetByteBuffer(nativePtr, columnIndex, rowIndex, data);
        else
            throw new RuntimeException("Currently ByteBuffer must be allocateDirect()."); // FIXME: support other than allocateDirect
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907364/fstmerge_var2_3445841120256272882

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907373/fstmerge_var1_2305587397336112483
@Override
    public void addLong(long columnIndex, long value) {
        if (immutable) throwImmutable();
        nativeAddInt(nativePtr, columnIndex, value);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907373/fstmerge_base_8922073509391764338
public void addLong(long columnIndex, long value) {
        if (immutable) throwImmutable();
        nativeAddInt(nativePtr, columnIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907373/fstmerge_var2_4975081660115696289

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907378/fstmerge_var1_4492885116225772606
@Override
    public long sum(long columnIndex) {
        return nativeSum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907378/fstmerge_base_4666352324887501308
public long sum(long columnIndex) {
        return nativeSum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907378/fstmerge_var2_6345886998830865956

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907388/fstmerge_var1_5606172269033625869
@Override
    public long maximum(long columnIndex) {
        return nativeMaximum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907388/fstmerge_base_2955935089215695294
public long maximum(long columnIndex) {
        return nativeMaximum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907388/fstmerge_var2_3916855087302951661

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907397/fstmerge_var1_2458670372496319165
@Override
    public long minimum(long columnIndex) {
        return nativeMinimum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907397/fstmerge_base_7688552943336202720
public long minimum(long columnIndex) {
        return nativeMinimum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907397/fstmerge_var2_3224060485088426954

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907405/fstmerge_var1_6725903900913569911
@Override
    public double average(long columnIndex) { 
        return nativeAverage(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907405/fstmerge_base_7839652611575582580
public double average(long columnIndex) {
        return nativeAverage(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907405/fstmerge_var2_5977114292955872872

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907414/fstmerge_var1_8875542225910706329
@Override
    public long lookup(String value) {
        if (!this.hasIndex(0) || this.getColumnType(0) != ColumnType.ColumnTypeString)
            throw new RuntimeException("lookup() requires index on column 0 which must be a String column.");
        return nativeLookup(nativePtr, value);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907414/fstmerge_base_3816488120413821129
public long lookup(String value) {
        if (!this.hasIndex(0) || this.getColumnType(0) != ColumnType.ColumnTypeString)
            throw new RuntimeException("lookup() requires index on column 0 which must be a String column.");
        return nativeLookup(nativePtr, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887907414/fstmerge_var2_3854467520908908535

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908698/fstmerge_var1_8896550825087645235
@Override
    public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex){
        return nativeGetBinary(nativePtr, columnIndex, rowIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908698/fstmerge_base_8870603627338559568
public ByteBuffer getBinaryByteBuffer(long columnIndex, long rowIndex){
        return nativeGetBinary(nativePtr, columnIndex, rowIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908698/fstmerge_var2_8323551483919376228

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908707/fstmerge_var1_2808087663141282032
@Override
    public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data){
        if (immutable) throwImmutable();
        nativeSetBinary(nativePtr, columnIndex, rowIndex, data);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908707/fstmerge_base_2421068464550709614
public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data){
        if (immutable) throwImmutable();
        nativeSetBinary(nativePtr, columnIndex, rowIndex, data);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908707/fstmerge_var2_3206244459016257072

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908715/fstmerge_var1_4807648036203900953
@Override
    public void addLong(long columnIndex, long value) {
        if (immutable) throwImmutable();
        nativeAddInt(nativePtr, columnIndex, value);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908715/fstmerge_base_7633267382677915807
public void addLong(long columnIndex, long value) {
        if (immutable) throwImmutable();
        nativeAddInt(nativePtr, columnIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908715/fstmerge_var2_739932117885740082

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908720/fstmerge_var1_1949480455627508344
@Override
    public long sum(long columnIndex){
        return nativeSum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908720/fstmerge_base_5881177464969595140
public long sum(long columnIndex){
        return nativeSum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908720/fstmerge_var2_8540649962995802363

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908729/fstmerge_var1_7651033109176181438
@Override
    public long maximum(long columnIndex){
        return nativeMaximum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908729/fstmerge_base_8269885902519684625
public long maximum(long columnIndex){
        return nativeMaximum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908729/fstmerge_var2_8281089027662201001

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908738/fstmerge_var1_7954305779022485017
@Override
    public long minimum(long columnIndex){
        return nativeMinimum(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908738/fstmerge_base_5532186722366508793
public long minimum(long columnIndex){
        return nativeMinimum(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908738/fstmerge_var2_3756027458154023813

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908747/fstmerge_var1_399747584071403803
@Override
    public double average(long columnIndex) {
        return nativeAverage(nativePtr, columnIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908747/fstmerge_base_7417255972300226762
public double average(long columnIndex) {
        return nativeAverage(nativePtr, columnIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415887908747/fstmerge_var2_577710711453868220

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_8eb3b/rev_36612-8eb3b/tightdb-java-core/src/main/java/com/tightdb/TableView.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf049_2deb3/rev_bf049-2deb3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36612_296f2/rev_36612-296f2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c4a70_36612/rev_c4a70-36612.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7c513_5c738/rev_7c513-5c738.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ba9f6_c66aa/rev_ba9f6-c66aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eae4_7c513/rev_2eae4-7c513.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b65ed_2e0a0/rev_b65ed-2e0a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_41d05_b65ed/rev_41d05-b65ed.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7cbe7_39c11/rev_7cbe7-39c11.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_447f3_57575/rev_447f3-57575.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57f79_c66aa/rev_57f79-c66aa.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeMethod
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163222/fstmerge_var1_164925501289321748
    void init() {
        //Specify table		
        t = new Table();
        t.addColumn(ColumnType.ColumnTypeString, "Name");
        t.addColumn(ColumnType.ColumnTypeBool,   "Study");
        t.addColumn(ColumnType.ColumnTypeInt,    "Age");
        t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");

        // Add unsupported column types
        t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
        t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
        t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
        t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
        t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");

        //Add data
        t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
        t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
        t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
        t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163222/fstmerge_base_6860691254754665241
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.ColumnTypeString, "Name");
	    t.addColumn(ColumnType.ColumnTypeBool,   "Study");
	    t.addColumn(ColumnType.ColumnTypeInt,    "Age");
	    t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
	    t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
	    t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
	    t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
	    t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
=======
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.STRING, "Name");
	    t.addColumn(ColumnType.BOOLEAN,   "Study");
	    t.addColumn(ColumnType.INTEGER,    "Age");
	    t.addColumn(ColumnType.DATE,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.STRING, "Unsupported0");
	    t.addColumn(ColumnType.FLOAT,  "Unsupported1");
	    t.addColumn(ColumnType.DOUBLE, "Unsupported2");
	    t.addColumn(ColumnType.MIXED,  "Unsupported3");
	    t.addColumn(ColumnType.TABLE,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163222/fstmerge_var2_6862980564596686676

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57f79_c66aa/rev_57f79-c66aa/tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void viewToString() {
        Table t = new Table();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163272/fstmerge_var1_8197636836692227554

        t.addColumn(ColumnType.ColumnTypeString, "stringCol");
        t.addColumn(ColumnType.ColumnTypeInt, "intCol");
        t.addColumn(ColumnType.ColumnTypeBool, "boolCol");

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163272/fstmerge_base_3981373620099423705
        
        t.addColumn(ColumnType.ColumnTypeString, "stringCol");
        t.addColumn(ColumnType.ColumnTypeInt, "intCol");
        t.addColumn(ColumnType.ColumnTypeBool, "boolCol");
        
=======
        
        t.addColumn(ColumnType.STRING, "stringCol");
        t.addColumn(ColumnType.INTEGER, "intCol");
        t.addColumn(ColumnType.BOOLEAN, "boolCol");
        
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163272/fstmerge_var2_8515146589956224141
        t.add("s1", 1, true);
        t.add("s2", 2, false);

        TableView view = t.where().findAll();

        String expected =  
                "    stringCol  intCol  boolCol\n" +
                        "0:  s1              1     true\n" + 
                        "1:  s2              2    false\n" ;

        assertEquals(expected, view.toString());
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57f79_c66aa/rev_57f79-c66aa/tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void SubtableAddColumnsChekcNames() {

        // Table definition
        Table persons = new Table();

        persons.addColumn(ColumnType.TABLE, "sub");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163295/fstmerge_var1_587563885472661145
        TableSchema addresses = persons.getSubTableSchema(0);
        try { addresses.addColumn(ColumnType.ColumnTypeString, "I am 64 chracters..............................................."); fail("Only 63 chracters supported"); } catch (IllegalArgumentException e) { }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163295/fstmerge_base_4389150989459591788
        TableDefinition addresses = persons.getSubTableDefinition(0);
        try { addresses.addColumn(ColumnType.ColumnTypeString, "I am 64 chracters..............................................."); fail("Only 63 chracters supported"); } catch (IllegalArgumentException e) { }
=======
        TableSchema addresses = persons.getSubTableSchema(0);
        try { addresses.addColumn(ColumnType.STRING, "I am 64 chracters..............................................."); fail("Only 63 chracters supported"); } catch (IllegalArgumentException e) { }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888163295/fstmerge_var2_506681410278516055
        
        addresses.addColumn(ColumnType.STRING, "I am 63 chracters..............................................");

    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57f79_c66aa/rev_57f79-c66aa/tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_30aa6_57f79/rev_30aa6-57f79.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_83f3a_447f3/rev_83f3a-447f3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b2a46_c66aa/rev_b2a46-c66aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_eab40_b10d9/rev_eab40-b10d9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_521f8_b01e1/rev_521f8-b01e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_12071_df69e/rev_12071-df69e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b4a88_1516e/rev_b4a88-1516e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_41ac8_b4a88/rev_41ac8-b4a88.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_22457_ccfa5/rev_22457-ccfa5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ff9e7_22457/rev_ff9e7-22457.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7c183_c7ebd/rev_7c183-c7ebd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2eb11_8896d/rev_2eb11-8896d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b2239_36a86/rev_b2239-36a86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0755c_b2239/rev_0755c-b2239.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_12071_2472d/rev_12071-2472d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_134cb_12071/rev_134cb-12071.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8523c_bd27c/rev_8523c-bd27c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8e6b9_f8748/rev_8e6b9-f8748.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void immutableInsertNotAllowed() {
        
        String FILENAME = "only-test-file.tightdb";
        String TABLENAME = "tableName";
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888620943/fstmerge_var1_8693200304266765503
        
        new File(FILENAME).delete();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888620943/fstmerge_base_7148817689139392074
        
      //  new File(FILENAME).delete();
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888620943/fstmerge_var2_6420057851245343158

        SharedGroup group = new SharedGroup(FILENAME);

        // Write transaction must be run so where are sure a db exists with the correct table
        WriteTransaction wt = group.beginWrite();
        try{
            Table table = wt.getTable(TABLENAME);
            table.addColumn(ColumnType.STRING, "col0");
            table.add("value0");
            table.add("value1");  
            table.add("value2");

            wt.commit();
        } catch (Throwable t) {
            wt.rollback();
        }

        ReadTransaction rt = group.beginRead();
        try{
            Table table = rt.getTable(TABLENAME);
            
            try {  table.addAt(1, "NewValue"); fail("Exception expected when inserting in read transaction"); } catch (IllegalStateException e) { }

        } finally {
            rt.endRead();
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8e6b9_f8748/rev_8e6b9-f8748/tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void shouldSaveSubtableChanges() {
        TestEmployeeRow employee = employees.get(0);

        // check the basic operations
        TestPhoneTable phones1 = employee.getPhones();
        assertEquals(1, phones1.size());

        phones1.add("mobile", "111");
        assertEquals(2, phones1.size());

        TestPhoneTable phones2 = employee.getPhones();
        assertEquals(2, phones2.size());

        phones2.add("mobile", "222");
        assertEquals(3, phones2.size());

        phones2.insert(1, "home", "333");
        assertEquals(4, phones2.size());

        TestPhoneTable phones3 = employee.getPhones();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var1_7155505985945956394
        assertEquals(2, phones3.type.equal("mobile").count());
        assertEquals(2, phones3.type.equal("home").count());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_base_5519029247536521193
        assertEquals(2, phones3.type.eq("mobile").count());
        assertEquals(2, phones3.type.eq("home").count());
=======
        assertEquals(2, phones3.type.equalTo("mobile").count());
        assertEquals(2, phones3.type.equalTo("home").count());

        assertEquals(1, phones3.number.equalTo("111").count());
        assertEquals(1, phones3.number.equalTo("123").count());
        assertEquals(0, phones3.number.equalTo("xxx").count());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var2_141941382699330957

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var1_7155505985945956394
        assertEquals(1, phones3.number.equal("111").count());
        assertEquals(1, phones3.number.equal("123").count());
        assertEquals(0, phones3.number.equal("xxx").count());
        
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_base_5519029247536521193
        assertEquals(1, phones3.number.eq("111").count());
        assertEquals(1, phones3.number.eq("123").count());
        assertEquals(0, phones3.number.eq("xxx").count());
        
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var2_141941382699330957
        // check the search operations
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var1_7155505985945956394
        TestPhoneQuery phoneQuery = phones3.where().number.equal("111").number
                .notEqual("wrong").type.equal("mobile").type.notEqual("wrong");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_base_5519029247536521193
        TestPhoneQuery phoneQuery = phones3.where().number.eq("111").number
                .neq("wrong").type.eq("mobile").type.neq("wrong");
=======
        TestPhoneQuery phoneQuery = phones3.where().number.equalTo("111").number
                .notEqualTo("wrong").type.equalTo("mobile").type.notEqualTo("wrong");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888621572/fstmerge_var2_141941382699330957
        assertEquals(1, phoneQuery.count());

        TestPhoneView all = phoneQuery.findAll();
        assertEquals(1, all.size());
        checkPhone(all.get(0), "mobile", "111");

        checkPhone(phoneQuery.findFirst(), "mobile", "111");
        checkPhone(phoneQuery.findLast(), "mobile", "111");
//        checkPhone(phoneQuery.findNext(), "mobile", "111");
        assertEquals(null, phoneQuery.findNext());

        // make sure the other sub-tables and independent and were not changed
        assertEquals(EmployeesFixture.PHONES[1].length, employees.get(1)
                .getPhones().size());
        assertEquals(EmployeesFixture.PHONES[2].length, employees.get(2)
                .getPhones().size());

        // check the clear operation on the query
        phoneQuery.clear();
        assertEquals(3, phones1.size());

        // check the clear operation
        phones3.clear();
        assertEquals(0, phones1.size());
        assertEquals(0, phones2.size());
        assertEquals(0, phones3.size());

        employees.clear();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8e6b9_f8748/rev_8e6b9-f8748/tightdb-java-test/src/test/java/com/tightdb/typed/SubtableTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3639e_578e1/rev_3639e-578e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7c483_c7b2c/rev_7c483-c7b2c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_04e0a_7c483/rev_04e0a-7c483.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bfdc9_fad6a/rev_bfdc9-fad6a.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void columnIndexOutOfBounds() {
        Table table = TestHelper.getTableWithAllColumnTypes();

        // Query the table
        TableQuery query = table.where();

        try { query.minimumInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(1);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(6);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumInt(7);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(7);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(7);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumInt(8);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumFloat(8);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.minimumDouble(8);           assert(false); } catch(IllegalArgumentException e) {}

        try { query.maximumInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(1);         	assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(6);         	assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumInt(7);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(7);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(7);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumInt(8);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumFloat(8);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.maximumDouble(8);           assert(false); } catch(IllegalArgumentException e) {}

        try { query.sumInt(0);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(0);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(0);               assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumInt(1);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(1);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(1);               assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumInt(2);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(2);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(2);               assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumInt(6);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(6);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(6);               assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumInt(7);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(7);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(7);               assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumInt(8);                     assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumFloat(8);                assert(false); } catch(IllegalArgumentException e) {}
        try { query.sumDouble(8);               assert(false); } catch(IllegalArgumentException e) {}

        try { query.averageInt(0);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(0);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(0);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageInt(1);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(1);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(1);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageInt(2);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(2);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(2);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageInt(6);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(6);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(6);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageInt(7);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(7);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(7);           assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageInt(8);                 assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageFloat(8);            assert(false); } catch(IllegalArgumentException e) {}
        try { query.averageDouble(8);           assert(false); } catch(IllegalArgumentException e) {}
        // Out of bounds for string
        try { query.equalTo(9, "string");                 assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.notEqualTo(9, "string");              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.beginsWith(9, "string");            assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.endsWith(9, "string");              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.contains(9, "string");              assert(false); } catch(ArrayIndexOutOfBoundsException e) {}


        // Out of bounds for integer
        try { query.equalTo(9, 123);                      assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.notEqualTo(9, 123);                   assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThan(9, 123);                   assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThanOrEqual(9, 123);            assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThan(9, 123);                assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThanOrEqual(9, 123);         assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.between(9, 123, 321);               assert(false); } catch(ArrayIndexOutOfBoundsException e) {}


        // Out of bounds for float
        try { query.equalTo(9, 123F);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.notEqualTo(9, 123F);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThan(9, 123F);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThanOrEqual(9, 123F);           assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThan(9, 123F);               assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThanOrEqual(9, 123F);        assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.between(9, 123F, 321F);             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}


        // Out of bounds for double
        try { query.equalTo(9, 123D);                     assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.notEqualTo(9, 123D);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThan(9, 123D);                  assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.lessThanOrEqual(9, 123D);           assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThan(9, 123D);               assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.greaterThanOrEqual(9, 123D);        assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
        try { query.between(9, 123D, 321D);             assert(false); } catch(ArrayIndexOutOfBoundsException e) {}


        // Out of bounds for boolean
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888726905/fstmerge_var1_4094025813897603146
        try { query.equal(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888726905/fstmerge_base_612882685550770635
        try { query.equal(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {}

=======
        try { query.equalTo(9, true);                       assert(false); } catch(ArrayIndexOutOfBoundsException e) {}

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888726905/fstmerge_var2_3533876742765850338
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bfdc9_fad6a/rev_bfdc9-fad6a/tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7439a_bfdc9/rev_7439a-bfdc9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1a6a6_f65bc/rev_1a6a6-f65bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d75a0_fbd17/rev_d75a0-fbd17.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d75a0_26923/rev_d75a0-26923.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void tableBinaryTest() {
        Table t = new Table();
        t.addColumn(ColumnType.BINARY, "binary");
        
        byte[] row0 = new byte[] { 1, 2, 3 };
        byte[] row1 = new byte[] { 10, 20, 30 };
        
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888820392/fstmerge_var1_3299278098522989133
        t.insertBinary(0, 0, row0);
        t.insertDone();
        t.insertBinary(0, 1, row1);
        t.insertDone();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888820392/fstmerge_base_8156279207696754784
        t.insertBinary(0, 0, row0);
        t.insertBinary(0, 1, row1);
        t.insertDone();
=======
        t.getInternalMethods().insertBinary(0, 0, row0);
        t.getInternalMethods().insertBinary(0, 1, row1);
        t.getInternalMethods().insertDone();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888820392/fstmerge_var2_4318016537080775408
        
        byte[] nullByte = null;
        
        try { t.getInternalMethods().insertBinary(0, 2, nullByte); fail("Inserting null array"); } catch(NullPointerException e) { }
        
        
        assertEquals(new byte[] { 1, 2, 3 }, t.getBinaryByteArray(0, 0));
        assertEquals(false, t.getBinaryByteArray(0, 0) == new byte[]{1, 2, 3});
        
        byte[] newRow0 = new byte[] { 7, 77, 77 };
        t.setBinaryByteArray(0, 0, newRow0);
        
        assertEquals(new byte[] { 7, 77, 77 }, t.getBinaryByteArray(0, 0));
        assertEquals(false, t.getBinaryByteArray(0, 0) == new byte[] { 1, 2, 3 });
        
        try { t.setBinaryByteArray(0, 2, nullByte); fail("Inserting null array"); } catch(NullPointerException e) { }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d75a0_26923/rev_d75a0-26923/tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d3860_ab582/rev_d3860-ab582.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fa9a0_7faa9/rev_fa9a0-7faa9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fa192_5545f/rev_fa192-5545f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@BeforeMethod
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888896550/fstmerge_var1_8505485148232970815
    void init() {
        //Specify table		
        t = new Table();
        t.addColumn(ColumnType.ColumnTypeString, "Name");
        t.addColumn(ColumnType.ColumnTypeBool,   "Study");
        t.addColumn(ColumnType.ColumnTypeInt,    "Age");
        t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");

        // Add unsupported column types
        t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
        t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
        t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
        t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
        t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");

        //Add data
        t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
        t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
        t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
        t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);

        assertEquals(date1, t.getDate(3, 0));      
        assertEquals(date2, t.getDate(3, 1));
        assertEquals(date3, t.getDate(3, 2));
        assertEquals(date4, t.getDate(3, 3));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888896550/fstmerge_base_447333524589513981
    void init() {
        //Specify table		
        t = new Table();
        t.addColumn(ColumnType.ColumnTypeString, "Name");
        t.addColumn(ColumnType.ColumnTypeBool,   "Study");
        t.addColumn(ColumnType.ColumnTypeInt,    "Age");
        t.addColumn(ColumnType.ColumnTypeDate,   "Birthday");

        // Add unsupported column types
        t.addColumn(ColumnType.ColumnTypeString, "Unsupported0");
        t.addColumn(ColumnType.ColumnTypeFloat,  "Unsupported1");
        t.addColumn(ColumnType.ColumnTypeDouble, "Unsupported2");
        t.addColumn(ColumnType.ColumnTypeMixed,  "Unsupported3");
        t.addColumn(ColumnType.ColumnTypeTable,  "Unsupported4");

        //Add data
        t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
        t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
        t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
        t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
    }
=======
	void init() {
		//Specify table		
	    t = new Table();
	    t.addColumn(ColumnType.STRING, "Name");
	    t.addColumn(ColumnType.BOOLEAN,   "Study");
	    t.addColumn(ColumnType.INTEGER,    "Age");
	    t.addColumn(ColumnType.DATE,   "Birthday");
	    
	    // Add unsupported column types
	    t.addColumn(ColumnType.STRING, "Unsupported0");
	    t.addColumn(ColumnType.FLOAT,  "Unsupported1");
	    t.addColumn(ColumnType.DOUBLE, "Unsupported2");
	    t.addColumn(ColumnType.MIXED,  "Unsupported3");
	    t.addColumn(ColumnType.TABLE,  "Unsupported4");
	    
	    //Add data
	    t.add("cc", true,  24, date1, "", 0.0f, 0.0, 0, null);
	    t.add("dd", false, 35, date2, "", 0.0f, 0.0, 0, null);
	    t.add("bb", true,  22, date3, "", 0.0f, 0.0, 0, null);
	    t.add("aa", false, 22, date4, "", 0.0f, 0.0, 0, null);
	    
	    assertEquals(date1, t.getDate(3, 0));	    
	    assertEquals(date2, t.getDate(3, 1));
	    assertEquals(date3, t.getDate(3, 2));
	    assertEquals(date4, t.getDate(3, 3));
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415888896550/fstmerge_var2_4783232055943957822

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fa192_5545f/rev_fa192-5545f/tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db214_d3f9b/rev_db214-d3f9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_af246_db214/rev_af246-db214.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e692f_29961/rev_e692f-29961.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d3f9b_0370e/rev_d3f9b-0370e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f5cfe_9bdff/rev_f5cfe-9bdff.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889029516/fstmerge_var1_6598663902994454120
@Test
    public void lookupTableTest() {
        Table t = new Table();
      
        t.addColumn(ColumnType.STRING, "col0");
        t.addColumn(ColumnType.INTEGER, "col1");
        
        t.add("s", 1);
        t.add("s", 2);
        t.add("ss",1);
        t.add("ss", 2);
        
        // Currently lookup works, even if no index has been set on first string column. Shouldn't there be an index? TODO
        // try {  t.lookup("ss"); fail("Index not set"); } catch (RuntimeException r) { };
        
        assertEquals(2, t.lookup("ss"));
        
        t.setIndex(0);
        long rowIndex = t.lookup("ss");
        assertEquals(1, t.getLong(1, rowIndex));
        
        Table t2 = new Table();
        
        t2.addColumn(ColumnType.INTEGER , "col0");
        t2.addColumn(ColumnType.INTEGER, "col1");
        
        t2.add(1, 2);
        t2.add(3, 4);
        
        try {  t2.lookup("ss"); fail("Column not String"); } catch (RuntimeException r) { };
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889029516/fstmerge_base_5087091634460176833
@Test
    public void lookupTableTest() {
        Table t = new Table();
      
        t.addColumn(ColumnType.ColumnTypeString, "col0");
        t.addColumn(ColumnType.ColumnTypeInt, "col1");
        
        t.add("s", 1);
        t.add("s", 2);
        t.add("ss",1);
        t.add("ss", 2);
        
        try {  t.lookup("ss"); fail("Index not set"); } catch (RuntimeException r) { };
        
        t.setIndex(0);
        long rowIndex = t.lookup("ss");
        assertEquals(1, t.getLong(1, rowIndex));
        
        Table t2 = new Table();
        
        t2.addColumn(ColumnType.ColumnTypeInt, "col0");
        t2.addColumn(ColumnType.ColumnTypeInt, "col1");
        
        t2.add(1, 2);
        t2.add(3, 4);
        
        try {  t2.lookup("ss"); fail("Column not String"); } catch (RuntimeException r) { };
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889029516/fstmerge_var2_1994827678702364441

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f5cfe_9bdff/rev_f5cfe-9bdff/tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f5cfe_046f4/rev_f5cfe-046f4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ea6c5_f5cfe/rev_ea6c5-f5cfe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9045e_f5cfe/rev_9045e-f5cfe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c0919_68b99/rev_c0919-68b99.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c66d8_2c12d/rev_c66d8-2c12d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_debed_c66d8/rev_debed-c66d8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_92d5d_c0919/rev_92d5d-c0919.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_848ac_92d5d/rev_848ac-92d5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_93123_36eec/rev_93123-36eec.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_86c5d_3d023/rev_86c5d-3d023.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cf5c1_208b3/rev_cf5c1-208b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d6b79_b3700/rev_d6b79-b3700.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8de2a_0380d/rev_8de2a-0380d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fe14d_1ddac/rev_fe14d-1ddac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b7db7_b496f/rev_b7db7-b496f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_909c9_fe14d/rev_909c9-fe14d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54608_ba2b8/rev_54608-ba2b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6dc3f_198c2/rev_6dc3f-198c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ee642_5f770/rev_ee642-5f770.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f4803_81b64/rev_f4803-81b64.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e253e_f4803/rev_e253e-f4803.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_91aa8_0ad7a/rev_91aa8-0ad7a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_91aa8_b7367/rev_91aa8-b7367.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_91aa8_a722e/rev_91aa8-a722e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_66a9d_8de2a/rev_66a9d-8de2a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2fc85_91aa8/rev_2fc85-91aa8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5b094_7fbf1/rev_5b094-7fbf1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_87571_0f90d/rev_87571-0f90d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e9c34_d984d/rev_e9c34-d984d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_61108_fd8e4/rev_61108-fd8e4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_61108_0a832/rev_61108-0a832.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_371fc_a4650/rev_371fc-a4650.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_91625_e7d1c/rev_91625-e7d1c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978509/fstmerge_var1_2813259640192866086
public static void main(String[] args) throws FileNotFoundException  {
        
        constructorStringExample();
        beginWriteExample();
        beginReadExample();
        hasChangedExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978509/fstmerge_base_4118193225947893088
public static void main(String[] args) throws FileNotFoundException  {
        
        // Constructor methods
        constructorStringExample();
        beginWriteExample();
        beginReadExample();
        hasChangedExample();


    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978509/fstmerge_var2_7717240365052118635

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978535/fstmerge_var1_8956972751678909213
public static void main(String[] args) {
        // @@Show@@
        // Create a basic dynamic table with 3 columns: long, String, Mixed
        Table tbl = new Table();
        tbl.addColumn(ColumnType.INTEGER, "myInt");
        tbl.addColumn(ColumnType.STRING, "myStr");
        tbl.addColumn(ColumnType.MIXED, "myMixed");

        //
        // Add, delete and set whole Rows
        //
        
        tbl.add(12, "hello", 2);
        tbl.add(-15, "World", "I can be different types...");
        tbl.addAt(0, 53, "I'm now first", true);      // insert at row 0. data in order of columns
        tbl.addEmptyRow();                            // append row at end of table - default values
        tbl.set(3, 198, "TightDB", 12.345);           // set values in row 3
        tbl.remove(0);                                // remove row 0
        tbl.removeLast();                             // remove last row

        // Get and set cell values
        Assert(tbl.getLong(0,1) == -15);              // get value at column 0, row 2
        tbl.setMixed(2,  0, new Mixed("changed Long value to String"));
        // Inspect the type of Mixed value that was just added:
        Assert(tbl.getMixedType(2, 0) == ColumnType.STRING);
   //TODO:     Assert(tbl.getMixed(2, 0).getStringValue().equals("changed Long value to String"));

        // Inspect table
        Assert(tbl.size() == 2);
        Assert(tbl.isEmpty() == false);

        // Update columns
        tbl.renameColumn(0, "myLong");                // Rename the first column
        tbl.removeColumn(1);                          // Remove the string column
        tbl.add(42, "this is the mixed column");      // We now got two columns left
        tbl.addColumn(ColumnType.DOUBLE, "myDouble");
        tbl.add(-15, "still mixed", 123.45);

        // Column introspection
        Assert(tbl.getColumnCount() == 3);
        Assert(tbl.getColumnName(0).equals("myLong"));
        Assert(tbl.getColumnIndex("myMixed") == 1);
        Assert(tbl.getColumnType(2) == ColumnType.DOUBLE);

        // Do some simple aggregations
        Assert(tbl.maximumDouble(2) == 123.45);
        Assert(tbl.sumInt(0) == 24);
        Assert(tbl.averageInt(0) == 6.0);

        // Simple match search
        Assert(tbl.findFirstLong(0, -15) == 1);       // Search for -15 in column 0. returns rowIndex
        TableView view = tbl.findAllLong(0, -15);     // Find all -15 in column 0
        Assert(view.size() == 2);                     // expect 2 matches

        // For more advanced search, checkout the TableQuery Object
        TableQuery q = tbl.where();                   // Create a query on the table
        Assert(q.between(0, 0, 100).count() == 2);    // Column 0 values in range 0-100

        // Set index and get distinct values (currently only works on Strings)
        Table tbl2 = new Table();
        long strColumn = tbl2.addColumn(ColumnType.STRING, "new Strings");
        tbl2.setIndex(strColumn);
        tbl2.add("MyString");
        tbl2.add("MyString2");
        tbl2.add("MyString");
        TableView view2 = tbl2.getDistinctView(strColumn);   // Get distinct values
        Assert(view2.size() == 2);

        // Dump table content to json format
        String json = tbl.toJson();
        System.out.println("JSON: " + json);

        //-------------------------------------------------------------------------
        // Working with sub tables
        //-------------------------------------------------------------------------

        Table tbl3 = new Table();

        tbl3.addColumn(ColumnType.STRING, "name");
        tbl3.addColumn(ColumnType.TABLE, "subtable");

        TableSchema subSchema = tbl3.getSubTableSchema(1);
        subSchema.addColumn(ColumnType.STRING, "key");
        subSchema.addColumn(ColumnType.MIXED, "value");


        // Add two rows - the first with two rows in its' subtable cell
        Object[][] sub = new Object[][] { {"firstkey", 12},
                                          {"secondkey", "hi - I'm mixed" } };
        tbl3.add("first", sub);
        tbl3.add("second", null);
        Assert(tbl3.getSubTableSize(1, 0) == 2);

        // Add some rows to the empty subtable in the second row
        Table subTbl = tbl3.getSubTable(1,1);     // Get subtable
        // Now you can work with the subtable as any other table
        subTbl.add("key1", 23);
        Assert(subTbl.getString(0, 0).equals("key1"));

        // @@EndShow@@
        System.out.println("Everything worked :-)");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978535/fstmerge_base_631967755681950007
public static void main(String[] args) {
        // @@Show@@
        // Create a basic dynamic table with 3 columns: long, String, Mixed
        Table tbl = new Table();
        tbl.addColumn(ColumnType.INTEGER, "myInt");
        tbl.addColumn(ColumnType.STRING, "myStr");
        tbl.addColumn(ColumnType.MIXED, "myMixed");

        //
        // Add, delete and set whole Rows
        //
        // Add some data
        tbl.add(12, "hello", 2);
        tbl.add(-15, "World", "I can be different types...");
        tbl.addAt(0, 53, "I'm now first", true);     // data in order of columns
        tbl.addEmptyRow();                            // append row at end of table - default values
        tbl.set(3, 198, "TightDB", 12.345);           // set values in row 3
        tbl.remove(0);                                // remove row 0
        tbl.removeLast();                             // remove last row

        // Get and set cell values
        Assert(tbl.getLong(0,1) == -15);              // get value at column 0, row 2
        tbl.setMixed(2,  0, new Mixed("changed Long value to String"));
        // Inspect the type of Mixed value that was just added:
        Assert(tbl.getMixedType(2, 0) == ColumnType.STRING);

        // Inspect table
        Assert(tbl.size() == 2);
        Assert(tbl.isEmpty() == false);

        // Update columns
        tbl.renameColumn(0,  "myLong");               // Rename the first column
        tbl.removeColumn(1);                          // Remove the string column
        tbl.add(42, "this is the mixed column");      // We now got two columns left
        tbl.addColumn(ColumnType.DOUBLE, "myDouble");
        tbl.add(-15, "still mixed", 123.45);

        // Column introspection
        Assert(tbl.getColumnCount() == 3);
        Assert(tbl.getColumnName(0).equals("myLong"));
        Assert(tbl.getColumnIndex("myMixed") == 1);
        Assert(tbl.getColumnType(2) == ColumnType.DOUBLE);

        // Do some simple aggregations
        Assert(tbl.maximumDouble(2) == 123.45);
        Assert(tbl.sumInt(0) == 24);
        Assert(tbl.averageInt(0) == 6.0);

        // Simple match search
        Assert(tbl.findFirstLong(0, -15) == 1);       // Search for -15 in column 0. returns rowIndex
        TableView view = tbl.findAllLong(0, -15);     // Find all -15 in column 0
        Assert(view.size() == 2);                     // expect 2 matches

        // For more advanced search, checkout the TableQuery Object
        TableQuery q = tbl.where();                   // Create a query on the table
        Assert(q.between(0, 0, 100).count() == 2);    // Column 0 values in range 0-100

        // Set index and get distinct values (currently only works on Strings)
        Table tbl2 = new Table();
        long strColumn = tbl2.addColumn(ColumnType.STRING, "new Strings");
        tbl2.setIndex(strColumn);
        tbl2.add("MyString");
        tbl2.add("MyString2");
        tbl2.add("MyString");
        TableView view2 = tbl2.getDistinctView(strColumn);   // Get distinct values
        Assert(view2.size() == 2);

        // Dump table content to json format
        String json = tbl.toJson();
        System.out.println("JSON: " + json);

        //-------------------------------------------------------------------------
        // Working with sub tables
        //-------------------------------------------------------------------------

        Table tbl3 = new Table();

        tbl3.addColumn(ColumnType.STRING, "name");
        tbl3.addColumn(ColumnType.TABLE, "subtable");

        TableSchema subSchema = tbl3.getSubTableSchema(1);
        subSchema.addColumn(ColumnType.STRING, "key");
        subSchema.addColumn(ColumnType.MIXED, "value");


        // Add two rows - the first with two rows in its' subtable cell
        Object[][] sub = new Object[][] { {"firstkey", 12},
                                          {"secondkey", "hi - I'm mixed" } };
        tbl3.add("first", sub);
        tbl3.add("second", null);
        Assert(tbl3.getSubTableSize(1, 0) == 2);

        // Add some rows to the empty subtable in the second row
        Table subTbl = tbl3.getSubTable(1,1);     // Get subtable
        // Now you can work with the subtable as any other table
        subTbl.add("key1", 23);
        Assert(subTbl.getString(0, 0).equals("key1"));

        // @@EndShow@@
        System.out.println("Everything worked :-)");
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978535/fstmerge_var2_7819580915842787430

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978545/fstmerge_var1_7315243589191045716
public static void main(String[] args) throws FileNotFoundException  {

        // View methods:
        sizeExample();
        isEmptyExample();
        clearExample();

        // Columns methods:
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();

        // Rows methods:
        removeExample();
        removeLastExample();
        adjustExample();

        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable

        // Searching methods:
        findFirstExamples();
        findAllExample();
        whereExample();

        // Aggregates methods:
        sumExample();
        maximumExample();
        minimumExample();
        averageExample();

        // Dump methods:
        toJsonExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978545/fstmerge_base_2599982318437333876
public static void main(String[] args) throws FileNotFoundException  {

        // View methods:
        sizeExample();
        isEmptyExample();
        clearExample();


        // Columns methods: 
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();



        // Rows methods:
        removeExample();
        removeLastExample();
        adjustExample();


        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable


        // Searching methods:
        findFirstExamples();
        findAllExample();
        whereExample();

        // Aggregates methods:
        sumExample();
        maximumExample();
        minimumExample();
        averageExample();

        // Dump methods:
        toJsonExample();




    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978545/fstmerge_var2_7365631803817285899

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableViewExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978638/fstmerge_var1_5953279945169193781
public static void main(String[] args) throws FileNotFoundException {
        transactionExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978638/fstmerge_base_8953651139488274961
public static void main(String[] args) throws FileNotFoundException  {
        commitExample();
        roolbackExample();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978638/fstmerge_var2_5833090396444734314

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/WriteTransactionExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978643/fstmerge_var1_896366566004545558
public static void main(String[] args) throws FileNotFoundException  {

        // Constructor methods
        constructorPlainExample();
        constructorGroupExample();
        constructorGroupNameExample();

        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        optimizeExample();
        setIndexExample();
        hasIndexExample();

        // Column methods:
        /* getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();*/


        // Row methods:
        getExample();
        addExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();

        // Searching methods
        whereExample();

        // Dump methods:
        toJSONExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978643/fstmerge_base_271939296800711059
public static void main(String[] args) throws FileNotFoundException  {


        // Constructor methods
        constructorPlainExample();
        constructorGroupExample();
        constructorGroupNameExample();



        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        optimizeExample();
        setIndexExample();
        hasIndexExample();


        // Column methods:
        /* getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();*/


        // Row methods:
        getExample();
        addExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();


        // Searching methods
        whereExample();


        // Dump methods:
        toJSONExample();

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978643/fstmerge_var2_9091596671782496089

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978728/fstmerge_var1_1778951035786750068
public static void main(String[] args) {
        // Delete file to start from scratch
        (new File("mydatabase.tightdb")).delete();
        
        // @@Show@@
        // Opens an existing database file or creates a
        // new database file and opens it into a shared group.
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Get the table (or create it if it's not there)
            Table table = wt.getTable("people");
            // Define the table schema if the table is new
            if (table.getColumnCount() == 0) {
                // Define 2 columns
                table.addColumn(ColumnType.STRING,  "Name");
                table.addColumn(ColumnType.INTEGER, "Age");
            }
            // Add 3 rows of data
            table.add("Ann",   26);
            table.add("Peter", 14);
            table.add("Oldie", 117);

            // Close the transaction. 
            // All changes are written to the shared group.
            wt.commit();
        } catch (Throwable t) {
            // In case of an error, rollback to close the transaction and discard all changes
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("people");

            // Get the size of the table
            long size = table.size();

            // Size should be 3 rows.
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978728/fstmerge_base_2502060564495815694
public static void main(String[] args) {

        // @@Example: ex_java_shared_group_intro @@
        // @@Show@@
        // Opens an existing database file or creates a new database file and opens it into a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Creates a new table by using getTable with the new table name as parameter
            Table table = wt.getTable("newTable");

            // Specify 2 columns and add 3 rows of data
            table.addColumn(ColumnType.INTEGER, "ID");
            table.addColumn(ColumnType.STRING, "City");
            table.add(1, "Washington");
            table.add(2, "Los Angeles");
            table.add(3, "New York");

            // Commit the changes, otherwise no data is written to the table
            wt.commit();
        } catch (Throwable t) {
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("newTable");

            // Get the size of the table
            long size = table.size();

            // Size should be 3, as we have added 3 rows
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978728/fstmerge_var2_607504622313498179

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978737/fstmerge_var1_8731470773024437744
public static void main(String[] args) {
        {
            // Delete file to start from scratch
            (new File("mydatabase.tightdb")).delete();
            // Create table, add columns and add row with data
            SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
            WriteTransaction wt = group.beginWrite(); 
            Table users = wt.getTable("myTable");
            users.addColumn(ColumnType.STRING, "username");
            users.addColumn(ColumnType.INTEGER, "level");
            users.add("tarzan", 45);
            wt.commit();
        }

        typedReadTransactionIntro();
        dynamicReadTransactionIntro();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978737/fstmerge_base_2823152170421514095
public static void main(String[] args) {

        typedReadTransactionIntro();
        dynamicReadTransactionIntro();

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978737/fstmerge_var2_4168909600931040087

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978742/fstmerge_var1_1280094346561052307
public static void typedReadTransactionIntro() {
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 

        // Create read transaction from the shared group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            PeopleTable people = new PeopleTable(rt);

            // Read from the first row, the name column
            String name = people.get(0).getName();

            // Do more table read operations here...

        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978742/fstmerge_base_5758757329611374715
public static void typedReadTransactionIntro(){
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 

        // Create read transaction from the shared group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            PeopleTable people = new PeopleTable(rt);

            // Read from the first row, the name column
            String name = people.get(0).getName();

            // Do more table read operations here...

        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978742/fstmerge_var2_1556941730006512603

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978747/fstmerge_var1_8906824759443593524
public static void dynamicReadTransactionIntro() {
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            Table table = rt.getTable("people");

            // Actions inside a ReadTransacton will never affect the original group and tables
            String name = table.getString(0, 0);

            // Do more table read operations here...
            
        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978747/fstmerge_base_3197194926153793907
public static void dynamicReadTransactionIntro(){
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            Table table = rt.getTable("people");

            // Actions inside a ReadTransacton will never affect the original group and tables
            String name = table.getString(0, 0);

            // Do more table read operations here...
            
        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978747/fstmerge_var2_2698051807262015910

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978774/fstmerge_var1_6027776814080119225
public static void main(String[] args) {
        // @@Show@@

        // Create a table with some data
        EmployeeTable employees = new EmployeeTable();
        employees.add("John", "Lee", 10000);
        employees.add("Jane", "Lee", 15000);
        employees.add("John", "Anderson", 20000);
        employees.add("Erik", "Lee", 30000);
        employees.add("Henry", "Anderson", 10000);

        // Find all employees with a first name of John.
        EmployeeView view = employees.firstName.equalTo("John").findAll();

        // Find the average salary of all employees with the last name Anderson.
        double avgSalary = employees.lastName.equalTo("Anderson").salary.average();
        System.out.println(avgSalary);

        // Find the total salary of all people named Jane and Erik.
        double salary = employees.where()
                        .group()
                           .lastName.equalTo("Jane")
                           .or()
                           .lastName.equalTo("Erik")
                        .endGroup()
                        .salary.sum();

        // Find all employees with a last name of Lee and a salary less than 25000.
        EmployeeView view2 = employees.lastName.equalTo("Lee").salary.lessThan(25000).findAll();
        
        // @@EndShow@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978774/fstmerge_base_506111343258052034
public static void main(String[] args) {
        // @@Show@@
        
        // Create a table with some data
        EmployeeTable employees = new EmployeeTable();
        employees.add("John", "Lee", 10000);
        employees.add("Jane", "Lee", 15000);
        employees.add("John", "Anderson", 20000);
        employees.add("Erik", "Lee", 30000);
        employees.add("Henry", "Anderson", 10000);

        // Find all employees with a first name of John.
        EmployeeView view = employees.firstName.equalTo("John").findAll();

        // Find the average salary of all employees with the last name Anderson.
        double avgSalary = employees.lastName.equalTo("Anderson").salary.average();
        System.out.println(avgSalary);

        // Find the total salary of all people named Jane and Erik.
        double salary = employees.where()
                        .group()
                           .lastName.equalTo("Jane")
                           .or()
                           .lastName.equalTo("Erik")
                        .endGroup()
                        .salary.sum();

        // Find all employees with a last name of Lee and a salary less than 25000.
        EmployeeView view2 = employees.lastName.equalTo("Lee").salary.lessThan(25000).findAll();
        
        // @@EndShow@@

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978774/fstmerge_var2_4661161533515091531

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/TypedQueryIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978779/fstmerge_var1_4927470341724831004
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

// Find all employees with a first name of John.
TableView view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);

// Find the total salary of people named Jane and Erik.
double salary = table.where().group()
                                .equalTo(0, "Jane")
                                .or()
                                .equalTo(0, "Erik")
                             .endGroup()
                             .sumInt(2);

// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978779/fstmerge_base_418397799102803862
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

TableView view;

// Find all employees with a first name of John.
view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);

// Find the total salary of people named Jane and Erik.
double salary = table.where().group().equalTo(0, "Jane").or().equalTo(0, "Erik").endGroup().sumInt(2);


// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978779/fstmerge_var2_1185884645995374042

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynQueryIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978784/fstmerge_var1_941969837800882271
public static void main(String[] args) {
        findFirstExample();
        findFromExample();
        findAllExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978784/fstmerge_base_6699464746664939895
public static void main(String[] args) {
        
        findFirstExample();
        findFromExample();
        findAllExample();
        
        
        
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978784/fstmerge_var2_8065000745784641538

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/TypedQueryExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978836/fstmerge_var1_5610527824557265480
public static void endReadExample(){
        // @@Example: ex_java_shared_group_end_read @@
        {
            // Delete file to start from scratch
            (new File("mydatabase.tightdb")).delete();
            // Create table, add columns and add row with data
            SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
            WriteTransaction wt = group.beginWrite(); 
            Table users = wt.getTable("myTable");
            users.addColumn(ColumnType.STRING, "username");
            users.addColumn(ColumnType.INTEGER, "level");
            users.add("tarzan", 45);
            wt.commit();
        }

        // @@Show@@
        // Open database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
        
        // Start read transaction
        ReadTransaction rt = group.beginRead();
        
        // Always do try / finally when using read transactions
        try {
            if (rt.hasTable("myTable")) {
                Table table = rt.getTable("mytable");
                // More table read operations here....
            }
        } finally {
            rt.endRead(); // End read transaction in finally
        }
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978836/fstmerge_base_4822312615424633548
public static void endReadExample(){
        // @@Example: ex_java_shared_group_end_read @@
        // @@Show@@
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
        
        // Start read transaction
        ReadTransaction rt = group.beginRead();
        
        // Always do try / finally when using read transactions
        try { 
            Table table = rt.getTable("mytable");
            // More table read operations here
        } finally {
            rt.endRead(); // End read transaction in finally
        }
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978836/fstmerge_var2_4900290541526687369

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978937/fstmerge_var1_86365458497465758
public static void main(String[] args) {
        // @@Show@@

        //Create table instance from the generated class
        PeopleTable peopleTable = new PeopleTable();

        // Add data to table
        peopleTable.add("John", 20, true);
        peopleTable.add("Mary", 21, false);
        peopleTable.add("Lars", 32, true);
        peopleTable.add("Phil", 43, false);
        peopleTable.add("Anni", 54, true); 
        
        peopleTable.get(0).getAge();  
        
        // Insert data at row index 2
        peopleTable.insert(2, "Frank", 34, true);

        if (!peopleTable.isEmpty()) {
            long s = peopleTable.size(); // s => 6
        }

        System.out.println("Size = " + peopleTable.size() + "\n");

        /****************************** GETTERS AND SETTERS **********************/

        // Get value from row 2 column Name
        String name = peopleTable.get(2).getName(); // name => "Mary"
        
        // Set the value from in row 2 column Name
        peopleTable.get(2).setName("NewName"); 

        String lastRowName = peopleTable.last().getName();  // retrieve name for last row

        // Replace entire row 4 with new values
        peopleTable.get(4).set("Eric", 50, true);

        /****************************** DATA REMOVAL *****************************/
        peopleTable.remove(2);

        System.out.println("\nRemoved row 2. Down to " + peopleTable.size() + " rows.\n");

        /****************************** ITERATION OF ALL RECORDS *****************/

        // lazy iteration over the table

        for (PeopleRow person : peopleTable) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old.");
        }

        /****************************** SIMPLE QUERY *****************************/

        System.out.println("\nFound: ");
        PeopleRow p = peopleTable.name.equalTo("John").findFirst();
        System.out.println( p );
        // prints: "Employee {name=John, age=20, hired=true}"

        /****************************** COMPLEX QUERY ****************************/

        // Define the query
        PeopleQuery query = peopleTable
                .age.between(20, 35)    // Implicit AND with below
                .name.contains("a")     // Implicit AND with below
                .group()                // "("
                    .hired.equalTo(true)
                    .or()               // or
                    .name.endsWith("y")
                .endGroup();            // ")"
        // Count matches
        PeopleView match = query.findAll();
        System.out.println(match.size() + " employee(s) match query.");

        // Take the average age of the matches
        System.out.println(match.age.sum() + " years is the sum of ages.");

        // Perform query and use the result
        for (PeopleRow person : match) {
            // ... do something with matching 'person'
        }
        System.out.println("");

        /****************************** SERIALIZE ********************************/

        System.out.println("Serialize to file:");
        new File("people.tightdb").delete(); // overwrites file if it already exists

        // Create Table in Group
        Group group = new Group();
        PeopleTable person1 = new PeopleTable(group);

        person1.add("John", 20, true);
        person1.add("Mary", 21, false);

        // Write to disk
        try {
            group.writeToFile("people.tightdb");
        } catch (IOException e) {
            // unable to write - handle...
            System.exit(1);
        }

        // Load a group from disk (and print contents)
        Group fromDisk = new Group("people.tightdb");
        PeopleTable people2 = new PeopleTable(fromDisk);

        for (PeopleRow person : people2) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        // Write same group to memory buffer
        byte[] buffer = group.writeToMem();

        // Load a group from memory (and print contents)
        Group fromMem = new Group(buffer);
        PeopleTable people3 = new PeopleTable(fromMem);

        for (PeopleRow person : people3) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        /****************************** TRANSACTIONS ********************************/

        System.out.println("\nTransactions:");

        // Open a shared group
        SharedGroup db = new SharedGroup("people.tightdb");

        // Write transaction:
        WriteTransaction wrtTrans = db.beginWrite();    // Start transaction
        try {
            PeopleTable person = new PeopleTable(wrtTrans);
            // Add row to table
            person.add("Bill", 53, true);
            wrtTrans.commit();                          // End transaction
        } catch (Throwable e) {
            wrtTrans.rollback();                        // or Rollback
        }

        // Read transaction:
        ReadTransaction rdTrans = db.beginRead();       // Start transaction
        try{
            PeopleTable people = new PeopleTable(rdTrans);
            for (PeopleRow person2 : people) {
                System.out.println(person2.getName() + " is " +
                        person2.getAge() + " years old");
            }
        } finally {
            rdTrans.endRead();                          // End transaction 
        }
        
        // @@EndShow@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978937/fstmerge_base_1276361641187872830
public static void main(String[] args) {
        // @@Show@@

        //Create table instance from the generated class
        PeopleTable peopleTable = new PeopleTable();

        // Add data to table
        peopleTable.add("John", 20, true);
        peopleTable.add("Mary", 21, false);
        peopleTable.add("Lars", 32, true);
        peopleTable.add("Phil", 43, false);
        peopleTable.add("Anni", 54, true); 
        
        peopleTable.get(0).getAge();  
        
        // Insert data at row index 2
        peopleTable.insert(2, "Frank", 34, true);

        if (!peopleTable.isEmpty()) {
            long s = peopleTable.size(); // s => 6
        }

        System.out.println("Size = " + peopleTable.size() + "\n");

        /****************************** GETTERS AND SETTERS **********************/

        // Get value from row 2 column Name
        String name = peopleTable.get(2).getName(); // name => "Mary"
        
        // Set the value from in row 2 column Name
        peopleTable.get(2).setName("NewName"); 

        String lastRowName = peopleTable.last().getName();  // retrieve name for last row

        // Replace entire row 4 with new values
        peopleTable.get(4).set("Eric", 50, true);

        /****************************** DATA REMOVAL *****************************/
        peopleTable.remove(2);

        System.out.println("\nRemoved row 2. Down to " + peopleTable.size() + " rows.\n");

        /****************************** ITERATION OF ALL RECORDS *****************/

        // lazy iteration over the table

        for (PeopleRow person : peopleTable) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old.");
        }

        /****************************** SIMPLE QUERY *****************************/

        System.out.println("\nFound: ");
        PeopleRow p = peopleTable.name.equalTo("John").findFirst();
        System.out.println( p );
        // prints: "Employee {name=John, age=20, hired=true}"

        /****************************** COMPLEX QUERY ****************************/

        // Define the query
        PeopleQuery query = peopleTable
                .age.between(20, 35)    // Implicit AND with below
                .name.contains("a")     // Implicit AND with below
                .group()                // "("
                .hired.equalTo(true)
                .or()               // or
                .name.endsWith("y")
                .endGroup();            // ")"
        // Count matches
        PeopleView match = query.findAll();
        System.out.println(match.size() + " employee(s) match query.");

        // Take the average age of the matches
        System.out.println(match.age.sum() + " years is the sum of ages.");

        // Perform query and use the result
        for (PeopleRow person : match) {
            // ... do something with matching 'person'
        }
        System.out.println("");

        /****************************** SERIALIZE ********************************/

        System.out.println("Serialize to file:");
        new File("people.tightdb").delete(); // overwrites file if it already exists

        // Create Table in Group
        Group group = new Group();
        PeopleTable person1 = new PeopleTable(group);

        person1.add("John", 20, true);
        person1.add("Mary", 21, false);

        // Write to disk
        try {
            group.writeToFile("people.tightdb");
        } catch (IOException e) {
            // unable to write - handle...
            System.exit(1);
        }

        // Load a group from disk (and print contents)
        Group fromDisk = new Group("people.tightdb");
        PeopleTable people2 = new PeopleTable(fromDisk);

        for (PeopleRow person : people2) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        // Write same group to memory buffer
        byte[] buffer = group.writeToMem();

        // Load a group from memory (and print contents)
        Group fromMem = new Group(buffer);
        PeopleTable people3 = new PeopleTable(fromMem);

        for (PeopleRow person : people3) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        /****************************** TRANSACTIONS ********************************/

        System.out.println("\nTransactions:");

        // Open a shared group
        SharedGroup db = new SharedGroup("people.tightdb");

        // Write transaction:
        WriteTransaction wrtTrans = db.beginWrite();    // Start transaction
        try {
            PeopleTable person = new PeopleTable(wrtTrans);
            // Add row to table
            person.add("Bill", 53, true);
            wrtTrans.commit();                          // End transaction
        } catch (Throwable e) {
            wrtTrans.rollback();                        // or Rollback
        }

        // Read transaction:
        ReadTransaction rdTrans = db.beginRead();       // Start transaction
        try{
            PeopleTable people = new PeopleTable(rdTrans);
            for (PeopleRow person2 : people) {
                System.out.println(person2.getName() + " is " +
                        person2.getAge() + " years old");
            }
        } finally {
            rdTrans.endRead();                          // End transaction 
        }
        
        // @@EndShow@@

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978937/fstmerge_var2_7601990825933154494

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/TypedTableIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978943/fstmerge_var1_2988304381913197221
public static void main(String[] args) throws FileNotFoundException  {
        
        new File("mydatabasefile.tightdb").delete();

        // Constructor methods
        constructorPlainExample();
        constructorFileExample();
        constructorStringExample();
        constructorStringModeExample();
        constructorByteArrayExample();

        // Table methods
        getTableExample();
        getTableNameExample();
        hasTableExample();

        // Serialization methods
        writeToFileExample();
        writeToMemExample();
        toStringExample();
        toJSONExample();

        // Group methods
        sizeExample();
        isEmptyExample();
        equalsExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978943/fstmerge_base_2568232076205997160
public static void main(String[] args) throws FileNotFoundException  {
        
        new File("mydatabasefile.tightdb").delete();

        // Constructor methods
        constructorPlainExample();
        constructorFileExample();
        constructorStringExample();
        constructorStringModeExample();
        constructorByteArrayExample();


        // Table methods
        getTableExample();
        getTableNameExample();
        hasTableExample();

        // Serialization methods
        writeToFileExample();
        writeToMemExample();
        toStringExample();
        toJSONExample();

        // Group methods
        sizeExample();
        isEmptyExample();
        equalsExample();


    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889978943/fstmerge_var2_8108704672788234539

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/GroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979017/fstmerge_var1_3842739964743048468
public static void equalsExample(){
        // @@Example: ex_java_group_operator_equal @@
        // @@Show@@
        // Group1 with 1 table with 1 row of data
        Group group1 = new Group();
        Table table1 = group1.getTable("mytable1"); 
        table1.addColumn(ColumnType.STRING, "stringCol");
        table1.add("StringVal");

        // Group2 with 1 table with 1 row of data
        Group group2 = new Group();
        Table table2 = group2.getTable("mytable1"); 
        table2.addColumn(ColumnType.STRING, "stringCol");
        table2.add("StringVal");

        // Groups are equal
        Assert(group1.equals(group2));

        // Add 1 extra row to table in group 2
        table2.add("new String val");

        // Groups are not equal
        Assert(group1.equals(group2) == false);

        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979017/fstmerge_base_6835718680381370617
public static void equalsExample(){
        // @@Example: ex_java_group_operator_equal @@
        // @@Show@@
        // Group1 with 1 table with 1 row of data
        Group group1 = new Group();
        Table table1 = group1.getTable("mytable1"); 
        table1.addColumn(ColumnType.STRING, "stringCol");
        table1.add("StringVal");


        // Group2 with 1 table with 1 row of data
        Group group2 = new Group();
        Table table2 = group2.getTable("mytable1"); 
        table2.addColumn(ColumnType.STRING, "stringCol");
        table2.add("StringVal");

        // Groups are equal
        Assert(group1.equals(group2));

        // Add 1 extra row to table in group 2
        table2.add("new String val");

        // Groups are not equal
        Assert(group1.equals(group2) == false);

        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979017/fstmerge_var2_9216357232885073371

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/GroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979026/fstmerge_var1_4133355898675210792
public static void main(String[] args) throws FileNotFoundException  {
        
        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        //TODO getSortedViewExample();
        //TODO optimizeExample();
        //TODO setIndexExample();
        //TODO hasIndexExample();
        
        // Columns methods: 
        addColumnExample();
        removeColumnExample();
        renameColumnExample();
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();
        
        // Rows methods:
        addAtExample();
        addAtExample();
        setRowExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();
        addEmptyRowsExample();
        adjustExample();
        
        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable
        
        // Searching methods:
        findFirstExamples();
        findAllExample();
        getDistinctViewExample();
        whereExample();
        
        // Aggregates methods:
       sumExample();
       maximumExample();
       minimumExample();
       averageExample();
        
        // Dump methods:
        toJsonExample();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979026/fstmerge_base_6132690161676137140
public static void main(String[] args) throws FileNotFoundException  {
        
        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        //TODO getSortedViewExample();
        //TODO optimizeExample();
        //TODO setIndexExample();
        //TODO hasIndexExample();
        
        
        // Columns methods: 
        addColumnExample();
        removeColumnExample();
        renameColumnExample();
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();
        
        
        
        // Rows methods:
        addAtExample();
        addAtExample();
        setRowExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();
        addEmptyRowsExample();
        adjustExample();
        
        
        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable
        
        
        // Searching methods:
        findFirstExamples();
        findAllExample();
        getDistinctViewExample();
        whereExample();
        
        // Aggregates methods:
       sumExample();
       maximumExample();
       minimumExample();
       averageExample();
        
        // Dump methods:
        toJsonExample();
        
        
        

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979026/fstmerge_var2_7893806169667392006

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979137/fstmerge_var1_2252874552458964688
public static void whereExample(){
        // @@Example: ex_java_dyn_table_where @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed"); // column 2
        table.add("user1", 420, false);
        table.add("user2", 770, true);
        table.add("user3", 327, false);
        
        // where() returns a Query
        TableQuery query = table.where();
        
        // You can continue to build the query
        // Here you want all the rows where
        // column 2 contains false, and column 1 > 400
        query = query.equalTo(2, false);
        query = query.greaterThan(1, 400);
        // Now execute the query, and get the results in a TableView
        TableView view = query.findAll();

        // Expect 1 match
        Assert(view.size() == 1);
        Assert(view.getString(0,0).equals("user3"));
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979137/fstmerge_base_596968203900516187
public static void whereExample(){
        // @@Example: ex_java_dyn_table_where @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // Get a query from the table
        TableQuery query = table.where();
        
        // USe the query object to query the table and get a table view with the results
        TableView view = query.equalTo(2, false).findAll();
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979137/fstmerge_var2_6084539618609562222

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979142/fstmerge_var1_9040422146906859289
public static void sumExample(){
        // @@Example: ex_java_dyn_table_sum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);

        // The sum of all values in column 1
        long totalScore = table.sumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979142/fstmerge_base_4395488742157974200
public static void sumExample(){
        // @@Example: ex_java_dyn_table_sum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The sum of all values in column 1
        long totalScore = table.sumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979142/fstmerge_var2_7411356167241683666

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979147/fstmerge_var1_3954040530227114754
public static void maximumExample(){
        // @@Example: ex_java_dyn_table_maximum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The maximum score in column 1
        long maxScore = table.maximumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979147/fstmerge_base_2546280030634351967
public static void maximumExample(){
        // @@Example: ex_java_dyn_table_maximum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The maximum score in column 1
        long maxScore = table.maximumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979147/fstmerge_var2_1235968221196725889

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979152/fstmerge_var1_1804244738425427994
public static void minimumExample(){
        // @@Example: ex_java_dyn_table_minimum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The minimum score in column 1
        long minScore = table.minimumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979152/fstmerge_base_477592315658969345
public static void minimumExample(){
        // @@Example: ex_java_dyn_table_minimum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The minimum score in column 1
        long minScore = table.minimumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979152/fstmerge_var2_8471040635526336604

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979156/fstmerge_var1_6932090209476322070
public static void averageExample(){
        // @@Example: ex_java_dyn_table_average @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The average score in column 1
        double avgScore = table.averageInt(1); // Returns a double
        // @@EndShow@@
        // @@EndExample@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979156/fstmerge_base_1171799655815627271
public static void averageExample(){
        // @@Example: ex_java_dyn_table_average @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The average score in column 1
        double avgScore = table.averageInt(1); // Returns a double
        // @@EndShow@@
        // @@EndExample@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415889979156/fstmerge_var2_2492525373988311629

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54b18_72172/rev_54b18-72172/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1d5cd_9f665/rev_1d5cd-9f665.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_83bf3_edba6/rev_83bf3-edba6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e0d4_1d5cd/rev_2e0d4-1d5cd.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890066806/fstmerge_var1_7754909729615285029

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890066806/fstmerge_base_4347049086417325076

        // @@Example: ex_java_shared_group_intro @@
=======
        // Delete file to start from scratch
        (new File("mydatabase.tightdb")).delete();
        
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890066806/fstmerge_var2_8517402979056594175
        // @@Show@@
        // Opens an existing database file or creates a
        // new database file and opens it into a shared group.
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Get the table (or create it if it's not there)
            Table table = wt.getTable("people");
            // Define the table schema if the table is new
            if (table.getColumnCount() == 0) {
                // Define 2 columns
                table.addColumn(ColumnType.STRING,  "Name");
                table.addColumn(ColumnType.INTEGER, "Age");
            }
            // Add 3 rows of data
            table.add("Ann",   26);
            table.add("Peter", 14);
            table.add("Oldie", 117);

            // Close the transaction. 
            // All changes are written to the shared group.
            wt.commit();
        } catch (Throwable t) {
            // In case of an error, rollback to close the transaction and discard all changes
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("people");

            // Get the size of the table
            long size = table.size();

            // Size should be 3 rows.
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e0d4_1d5cd/rev_2e0d4-1d5cd/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupIntro.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_23e94_13047/rev_23e94-13047.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890095700/fstmerge_var1_7252937743279486025
public static void main(String[] args) {
        // Delete file to start from scratch
        (new File("mydatabase.tightdb")).delete();

        // @@Show@@
        // Opens an existing database file or creates a
        // new database file and opens it into a shared group.
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Get the table (or create it if it's not there)
            Table table = wt.getTable("people");
            // Define the table schema if the table is new
            if (table.getColumnCount() == 0) {
                // Define 2 columns
                table.addColumn(ColumnType.STRING,  "Name");
                table.addColumn(ColumnType.INTEGER, "Age");
            }
            // Add 3 rows of data
            table.add("Ann",   26);
            table.add("Peter", 14);
            table.add("Oldie", 117);

            // Close the transaction. 
            // All changes are written to the shared group.
            wt.commit();
        } catch (Throwable t) {
            // In case of an error, rollback to close the transaction and discard all changes
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("people");

            // Get the size of the table
            long size = table.size();

            // Size should be 3 rows.
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890095700/fstmerge_base_6719152030917113178
public static void main(String[] args) {
        // Delete file to start from scratch
        (new File("mydatabase.tightdb")).delete();
        
        // @@Show@@
        // Opens an existing database file or creates a
        // new database file and opens it into a shared group.
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Get the table (or create it if it's not there)
            Table table = wt.getTable("people");
            // Define the table schema if the table is new
            if (table.getColumnCount() == 0) {
                // Define 2 columns
                table.addColumn(ColumnType.STRING,  "Name");
                table.addColumn(ColumnType.INTEGER, "Age");
            }
            // Add 3 rows of data
            table.add("Ann",   26);
            table.add("Peter", 14);
            table.add("Oldie", 117);

            // Close the transaction. 
            // All changes are written to the shared group.
            wt.commit();
        } catch (Throwable t) {
            // In case of an error, rollback to close the transaction and discard all changes
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("people");

            // Get the size of the table
            long size = table.size();

            // Size should be 3 rows.
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890095700/fstmerge_var2_6610935075783317748

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_23e94_13047/rev_23e94-13047/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupIntro.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_330cf_5dfea/rev_330cf-5dfea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9e670_330cf/rev_9e670-330cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_330cf_9e670/rev_330cf-9e670.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_17e5d_46a81/rev_17e5d-46a81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_13ec6_17e5d/rev_13ec6-17e5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a87bf_328e3/rev_a87bf-328e3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a7cee_330cf/rev_a7cee-330cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_85177_7895e/rev_85177-7895e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d18a1_85177/rev_d18a1-85177.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_64e37_5c8f9/rev_64e37-5c8f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_030f6_64e37/rev_030f6-64e37.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ab803_3b1a0/rev_ab803-3b1a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0cd85_ab803/rev_0cd85-ab803.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e9482_3b1a0/rev_e9482-3b1a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2ff1f_38dce/rev_2ff1f-38dce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2ff1f_b079d/rev_2ff1f-b079d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dab51_2ff1f/rev_dab51-2ff1f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2d8e1_286fa/rev_2d8e1-286fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a3da1_cb93a/rev_a3da1-cb93a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f693b_80869/rev_f693b-80869.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_67729/rev_e7cb3-67729.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763759/fstmerge_var1_1002885216146977248
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763759/fstmerge_base_4829029807539055533
public static void main(String[] args) throws FileNotFoundException  {
        
        // Constructor methods
        constructorStringExample();
        beginWriteExample();
        beginReadExample();
        hasChangedExample();


    }
=======
public static void main(String[] args) throws FileNotFoundException  {
        
        constructorStringExample();
        beginWriteExample();
        beginReadExample();
        hasChangedExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763759/fstmerge_var2_2876612552598359732

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763771/fstmerge_var1_8972502223578810685
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763771/fstmerge_base_4134369517499143177
public static void main(String[] args) {
        // @@Show@@
        // Create a basic dynamic table with 3 columns: long, String, Mixed
        Table tbl = new Table();
        tbl.addColumn(ColumnType.INTEGER, "myInt");
        tbl.addColumn(ColumnType.STRING, "myStr");
        tbl.addColumn(ColumnType.MIXED, "myMixed");

        //
        // Add, delete and set whole Rows
        //
        // Add some data
        tbl.add(12, "hello", 2);
        tbl.add(-15, "World", "I can be different types...");
        tbl.addAt(0, 53, "I'm now first", true);     // data in order of columns
        tbl.addEmptyRow();                            // append row at end of table - default values
        tbl.set(3, 198, "TightDB", 12.345);           // set values in row 3
        tbl.remove(0);                                // remove row 0
        tbl.removeLast();                             // remove last row

        // Get and set cell values
        Assert(tbl.getLong(0,1) == -15);              // get value at column 0, row 2
        tbl.setMixed(2,  0, new Mixed("changed Long value to String"));
        // Inspect the type of Mixed value that was just added:
        Assert(tbl.getMixedType(2, 0) == ColumnType.STRING);

        // Inspect table
        Assert(tbl.size() == 2);
        Assert(tbl.isEmpty() == false);

        // Update columns
        tbl.renameColumn(0,  "myLong");               // Rename the first column
        tbl.removeColumn(1);                          // Remove the string column
        tbl.add(42, "this is the mixed column");      // We now got two columns left
        tbl.addColumn(ColumnType.DOUBLE, "myDouble");
        tbl.add(-15, "still mixed", 123.45);

        // Column introspection
        Assert(tbl.getColumnCount() == 3);
        Assert(tbl.getColumnName(0).equals("myLong"));
        Assert(tbl.getColumnIndex("myMixed") == 1);
        Assert(tbl.getColumnType(2) == ColumnType.DOUBLE);

        // Do some simple aggregations
        Assert(tbl.maximumDouble(2) == 123.45);
        Assert(tbl.sumInt(0) == 24);
        Assert(tbl.averageInt(0) == 6.0);

        // Simple match search
        Assert(tbl.findFirstLong(0, -15) == 1);       // Search for -15 in column 0. returns rowIndex
        TableView view = tbl.findAllLong(0, -15);     // Find all -15 in column 0
        Assert(view.size() == 2);                     // expect 2 matches

        // For more advanced search, checkout the TableQuery Object
        TableQuery q = tbl.where();                   // Create a query on the table
        Assert(q.between(0, 0, 100).count() == 2);    // Column 0 values in range 0-100

        // Set index and get distinct values (currently only works on Strings)
        Table tbl2 = new Table();
        long strColumn = tbl2.addColumn(ColumnType.STRING, "new Strings");
        tbl2.setIndex(strColumn);
        tbl2.add("MyString");
        tbl2.add("MyString2");
        tbl2.add("MyString");
        TableView view2 = tbl2.getDistinctView(strColumn);   // Get distinct values
        Assert(view2.size() == 2);

        // Dump table content to json format
        String json = tbl.toJson();
        System.out.println("JSON: " + json);

        //-------------------------------------------------------------------------
        // Working with sub tables
        //-------------------------------------------------------------------------

        Table tbl3 = new Table();

        tbl3.addColumn(ColumnType.STRING, "name");
        tbl3.addColumn(ColumnType.TABLE, "subtable");

        TableSchema subSchema = tbl3.getSubTableSchema(1);
        subSchema.addColumn(ColumnType.STRING, "key");
        subSchema.addColumn(ColumnType.MIXED, "value");


        // Add two rows - the first with two rows in its' subtable cell
        Object[][] sub = new Object[][] { {"firstkey", 12},
                                          {"secondkey", "hi - I'm mixed" } };
        tbl3.add("first", sub);
        tbl3.add("second", null);
        Assert(tbl3.getSubTableSize(1, 0) == 2);

        // Add some rows to the empty subtable in the second row
        Table subTbl = tbl3.getSubTable(1,1);     // Get subtable
        // Now you can work with the subtable as any other table
        subTbl.add("key1", 23);
        Assert(subTbl.getString(0, 0).equals("key1"));

        // @@EndShow@@
        System.out.println("Everything worked :-)");
    }
=======
public static void main(String[] args) {
        // @@Show@@
        // Create a basic dynamic table with 3 columns: long, String, Mixed
        Table tbl = new Table();
        tbl.addColumn(ColumnType.INTEGER, "myInt");
        tbl.addColumn(ColumnType.STRING, "myStr");
        tbl.addColumn(ColumnType.MIXED, "myMixed");

        //
        // Add, delete and set whole Rows
        //
        
        tbl.add(12, "hello", 2);
        tbl.add(-15, "World", "I can be different types...");
        tbl.addAt(0, 53, "I'm now first", true);      // insert at row 0. data in order of columns
        tbl.addEmptyRow();                            // append row at end of table - default values
        tbl.set(3, 198, "TightDB", 12.345);           // set values in row 3
        tbl.remove(0);                                // remove row 0
        tbl.removeLast();                             // remove last row

        // Get and set cell values
        Assert(tbl.getLong(0,1) == -15);              // get value at column 0, row 2
        tbl.setMixed(2,  0, new Mixed("changed Long value to String"));
        // Inspect the type of Mixed value that was just added:
        Assert(tbl.getMixedType(2, 0) == ColumnType.STRING);
   //TODO:     Assert(tbl.getMixed(2, 0).getStringValue().equals("changed Long value to String"));

        // Inspect table
        Assert(tbl.size() == 2);
        Assert(tbl.isEmpty() == false);

        // Update columns
        tbl.renameColumn(0, "myLong");                // Rename the first column
        tbl.removeColumn(1);                          // Remove the string column
        tbl.add(42, "this is the mixed column");      // We now got two columns left
        tbl.addColumn(ColumnType.DOUBLE, "myDouble");
        tbl.add(-15, "still mixed", 123.45);

        // Column introspection
        Assert(tbl.getColumnCount() == 3);
        Assert(tbl.getColumnName(0).equals("myLong"));
        Assert(tbl.getColumnIndex("myMixed") == 1);
        Assert(tbl.getColumnType(2) == ColumnType.DOUBLE);

        // Do some simple aggregations
        Assert(tbl.maximumDouble(2) == 123.45);
        Assert(tbl.sumInt(0) == 24);
        Assert(tbl.averageInt(0) == 6.0);

        // Simple match search
        Assert(tbl.findFirstLong(0, -15) == 1);       // Search for -15 in column 0. returns rowIndex
        TableView view = tbl.findAllLong(0, -15);     // Find all -15 in column 0
        Assert(view.size() == 2);                     // expect 2 matches

        // For more advanced search, checkout the TableQuery Object
        TableQuery q = tbl.where();                   // Create a query on the table
        Assert(q.between(0, 0, 100).count() == 2);    // Column 0 values in range 0-100

        // Set index and get distinct values (currently only works on Strings)
        Table tbl2 = new Table();
        long strColumn = tbl2.addColumn(ColumnType.STRING, "new Strings");
        tbl2.setIndex(strColumn);
        tbl2.add("MyString");
        tbl2.add("MyString2");
        tbl2.add("MyString");
        TableView view2 = tbl2.getDistinctView(strColumn);   // Get distinct values
        Assert(view2.size() == 2);

        // Dump table content to json format
        String json = tbl.toJson();
        System.out.println("JSON: " + json);

        //-------------------------------------------------------------------------
        // Working with sub tables
        //-------------------------------------------------------------------------

        Table tbl3 = new Table();

        tbl3.addColumn(ColumnType.STRING, "name");
        tbl3.addColumn(ColumnType.TABLE, "subtable");

        TableSchema subSchema = tbl3.getSubTableSchema(1);
        subSchema.addColumn(ColumnType.STRING, "key");
        subSchema.addColumn(ColumnType.MIXED, "value");


        // Add two rows - the first with two rows in its' subtable cell
        Object[][] sub = new Object[][] { {"firstkey", 12},
                                          {"secondkey", "hi - I'm mixed" } };
        tbl3.add("first", sub);
        tbl3.add("second", null);
        Assert(tbl3.getSubTableSize(1, 0) == 2);

        // Add some rows to the empty subtable in the second row
        Table subTbl = tbl3.getSubTable(1,1);     // Get subtable
        // Now you can work with the subtable as any other table
        subTbl.add("key1", 23);
        Assert(subTbl.getString(0, 0).equals("key1"));

        // @@EndShow@@
        System.out.println("Everything worked :-)");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763771/fstmerge_var2_2586731095809328567

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763778/fstmerge_var1_2153052637996241673
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763778/fstmerge_base_577859813620509288
public static void main(String[] args) throws FileNotFoundException  {

        // View methods:
        sizeExample();
        isEmptyExample();
        clearExample();


        // Columns methods: 
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();



        // Rows methods:
        removeExample();
        removeLastExample();
        adjustExample();


        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable


        // Searching methods:
        findFirstExamples();
        findAllExample();
        whereExample();

        // Aggregates methods:
        sumExample();
        maximumExample();
        minimumExample();
        averageExample();

        // Dump methods:
        toJsonExample();




    }
=======
public static void main(String[] args) throws FileNotFoundException  {

        // View methods:
        sizeExample();
        isEmptyExample();
        clearExample();

        // Columns methods:
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();

        // Rows methods:
        removeExample();
        removeLastExample();
        adjustExample();

        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable

        // Searching methods:
        findFirstExamples();
        findAllExample();
        whereExample();

        // Aggregates methods:
        sumExample();
        maximumExample();
        minimumExample();
        averageExample();

        // Dump methods:
        toJsonExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763778/fstmerge_var2_5047788350978796173

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableViewExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763857/fstmerge_var1_606502449753085358
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763857/fstmerge_base_8099040085499666708
public static void main(String[] args) throws FileNotFoundException  {
        commitExample();
        roolbackExample();
    }
=======
public static void main(String[] args) throws FileNotFoundException {
        transactionExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763857/fstmerge_var2_4979138480723561892

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/WriteTransactionExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763861/fstmerge_var1_6238592361219247290
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763861/fstmerge_base_8792464551192273064
public static void main(String[] args) throws FileNotFoundException  {


        // Constructor methods
        constructorPlainExample();
        constructorGroupExample();
        constructorGroupNameExample();



        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        optimizeExample();
        setIndexExample();
        hasIndexExample();


        // Column methods:
        /* getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();*/


        // Row methods:
        getExample();
        addExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();


        // Searching methods
        whereExample();


        // Dump methods:
        toJSONExample();

    }
=======
public static void main(String[] args) throws FileNotFoundException  {

        // Constructor methods
        constructorPlainExample();
        constructorGroupExample();
        constructorGroupNameExample();

        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        optimizeExample();
        setIndexExample();
        hasIndexExample();

        // Column methods:
        /* getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();*/


        // Row methods:
        getExample();
        addExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();

        // Searching methods
        whereExample();

        // Dump methods:
        toJSONExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763861/fstmerge_var2_3337408174771203923

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/TypedTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763929/fstmerge_var1_2887563743009545013
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763929/fstmerge_base_2747488414281985551
public static void main(String[] args) {

        // @@Show@@
        // Opens an existing database file or creates a new database file and opens it into a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Creates a new table by using getTable with the new table name as parameter
            Table table = wt.getTable("newTable");

            // Specify 2 columns and add 3 rows of data
            table.addColumn(ColumnType.INTEGER, "ID");
            table.addColumn(ColumnType.STRING, "City");
            table.add(1, "Washington");
            table.add(2, "Los Angeles");
            table.add(3, "New York");

            // Commit the changes, otherwise no data is written to the table
            wt.commit();
        } catch (Throwable t) {
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("newTable");

            // Get the size of the table
            long size = table.size();

            // Size should be 3, as we have added 3 rows
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
=======
public static void main(String[] args) {
        // Delete file to start from scratch
        (new File("mydatabase.tightdb")).delete();

        // @@Show@@
        // Opens an existing database file or creates a
        // new database file and opens it into a shared group.
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // -------------------------------------------------------------------
        // Writing to the group using transaction
        // -------------------------------------------------------------------

        // Begins a write transaction
        WriteTransaction wt = group.beginWrite(); 
        try { 
            // Get the table (or create it if it's not there)
            Table table = wt.getTable("people");
            // Define the table schema if the table is new
            if (table.getColumnCount() == 0) {
                // Define 2 columns
                table.addColumn(ColumnType.STRING,  "Name");
                table.addColumn(ColumnType.INTEGER, "Age");
            }
            // Add 3 rows of data
            table.add("Ann",   26);
            table.add("Peter", 14);
            table.add("Oldie", 117);

            // Close the transaction. 
            // All changes are written to the shared group.
            wt.commit();
        } catch (Throwable t) {
            // In case of an error, rollback to close the transaction and discard all changes
            wt.rollback();
        }

        // -------------------------------------------------------------------
        // Reading from the group using transaction
        // -------------------------------------------------------------------

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        try {
            // Get the newly created table
            Table table = rt.getTable("people");

            // Get the size of the table
            long size = table.size();

            // Size should be 3 rows.
            Assert(size == 3);

        } finally {
            // Always end the read transaction
            rt.endRead();
        }  // @@EndShow@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763929/fstmerge_var2_8765248450199108544

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/SharedGroupIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763936/fstmerge_var1_2086062906136322645
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763936/fstmerge_base_2734505121748187902
public static void main(String[] args) {

        typedReadTransactionIntro();
        dynamicReadTransactionIntro();

    }
=======
public static void main(String[] args) {
        {
            // Delete file to start from scratch
            (new File("mydatabase.tightdb")).delete();
            // Create table, add columns and add row with data
            SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
            WriteTransaction wt = group.beginWrite(); 
            Table users = wt.getTable("myTable");
            users.addColumn(ColumnType.STRING, "username");
            users.addColumn(ColumnType.INTEGER, "level");
            users.add("tarzan", 45);
            wt.commit();
        }

        typedReadTransactionIntro();
        dynamicReadTransactionIntro();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763936/fstmerge_var2_2728441888322603397

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763939/fstmerge_var1_703879529652195666
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763939/fstmerge_base_4513632245301722764
public static void typedReadTransactionIntro(){
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 

        // Create read transaction from the shared group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            PeopleTable people = new PeopleTable(rt);

            // Read from the first row, the name column
            String name = people.get(0).getName();

            // Do more table read operations here...

        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
=======
public static void typedReadTransactionIntro() {
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 

        // Create read transaction from the shared group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            PeopleTable people = new PeopleTable(rt);

            // Read from the first row, the name column
            String name = people.get(0).getName();

            // Do more table read operations here...

        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763939/fstmerge_var2_3029157276811225263

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763943/fstmerge_var1_1234852989520405375
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763943/fstmerge_base_4740835444502998874
public static void dynamicReadTransactionIntro(){
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            Table table = rt.getTable("people");

            // Actions inside a ReadTransacton will never affect the original group and tables
            String name = table.getString(0, 0);

            // Do more table read operations here...
            
        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
=======
public static void dynamicReadTransactionIntro() {
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb");

        // Create a read transaction from the group
        ReadTransaction rt = group.beginRead();

        // Inside transaction is a fully consistent and immutable view of the group
        try {
            // Get a table from the group
            Table table = rt.getTable("people");

            // Actions inside a ReadTransacton will never affect the original group and tables
            String name = table.getString(0, 0);

            // Do more table read operations here...
            
        } finally {
            // End the read transaction in a finally block. If the read-transaction is not
            // closed, a new one cannot be started using the same SharedGroup instance.
            rt.endRead();
        }  
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763943/fstmerge_var2_3854843464956717748

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763965/fstmerge_var1_3928055277705971322
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763965/fstmerge_base_4372394643622137773
public static void main(String[] args) {
        // @@Show@@
        
        // Create a table with some data
        EmployeeTable employees = new EmployeeTable();
        employees.add("John", "Lee", 10000);
        employees.add("Jane", "Lee", 15000);
        employees.add("John", "Anderson", 20000);
        employees.add("Erik", "Lee", 30000);
        employees.add("Henry", "Anderson", 10000);

        // Find all employees with a first name of John.
        EmployeeView view = employees.firstName.equalTo("John").findAll();

        // Find the average salary of all employees with the last name Anderson.
        double avgSalary = employees.lastName.equalTo("Anderson").salary.average();
        System.out.println(avgSalary);

        // Find the total salary of all people named Jane and Erik.
        double salary = employees.where()
                        .group()
                           .lastName.equalTo("Jane")
                           .or()
                           .lastName.equalTo("Erik")
                        .endGroup()
                        .salary.sum();

        // Find all employees with a last name of Lee and a salary less than 25000.
        EmployeeView view2 = employees.lastName.equalTo("Lee").salary.lessThan(25000).findAll();
        
        // @@EndShow@@

    }
=======
public static void main(String[] args) {
        // @@Show@@

        // Create a table with some data
        EmployeeTable employees = new EmployeeTable();
        employees.add("John", "Lee", 10000);
        employees.add("Jane", "Lee", 15000);
        employees.add("John", "Anderson", 20000);
        employees.add("Erik", "Lee", 30000);
        employees.add("Henry", "Anderson", 10000);

        // Find all employees with a first name of John.
        EmployeeView view = employees.firstName.equalTo("John").findAll();

        // Find the average salary of all employees with the last name Anderson.
        double avgSalary = employees.lastName.equalTo("Anderson").salary.average();
        System.out.println(avgSalary);

        // Find the total salary of all people named Jane and Erik.
        double salary = employees.where()
                        .group()
                           .lastName.equalTo("Jane")
                           .or()
                           .lastName.equalTo("Erik")
                        .endGroup()
                        .salary.sum();

        // Find all employees with a last name of Lee and a salary less than 25000.
        EmployeeView view2 = employees.lastName.equalTo("Lee").salary.lessThan(25000).findAll();
        
        // @@EndShow@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763965/fstmerge_var2_7239246878096067845

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/TypedQueryIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763970/fstmerge_var1_7403725117493868608
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763970/fstmerge_base_5517958388450270320
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

TableView view;

// Find all employees with a first name of John.
view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);

// Find the total salary of people named Jane and Erik.
double salary = table.where().group().equalTo(0, "Jane").or().equalTo(0, "Erik").endGroup().sumInt(2);


// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}
=======
public static void main(String[] args) {

// @@Show@@
Table table = new Table();

// Specify the column types and names
table.addColumn(ColumnType.STRING, "firstName");
table.addColumn(ColumnType.STRING, "lastName");
table.addColumn(ColumnType.INTEGER, "salary");

// Add data to the table
table.add("John", "Lee", 10000);
table.add("Jane", "Lee", 15000);
table.add("John", "Anderson", 20000);
table.add("Erik", "Lee", 30000);
table.add("Henry", "Anderson", 10000);

// Create a query object from the table.
TableQuery query = table.where();

// Find all employees with a first name of John.
TableView view = table.where().equalTo(0, "John").findAll();

// Find the average salary of all employees with the last name Anderson.
double avgSalary = table.where().equalTo(1, "Anderson").averageInt(2);

// Find the total salary of people named Jane and Erik.
double salary = table.where().group()
                                .equalTo(0, "Jane")
                                .or()
                                .equalTo(0, "Erik")
                             .endGroup()
                             .sumInt(2);

// Find all employees with a last name of Lee and a salary less than 25000.
view = table.where().equalTo(1, "Lee").lessThan(2, 25000).findAll();

// Querying on a view
view = table.where().tableview(view).equalTo(0, "Jane").findAll();
// @@EndShow@@

}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763970/fstmerge_var2_4769925529929182933

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynQueryIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763973/fstmerge_var1_6853236106113048828
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763973/fstmerge_base_2547335357333230548
public static void main(String[] args) {
        
        findFirstExample();
        findFromExample();
        findAllExample();
        
        
        
    }
=======
public static void main(String[] args) {
        findFirstExample();
        findFromExample();
        findAllExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763973/fstmerge_var2_1208090672932942680

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/TypedQueryExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763994/fstmerge_var1_2477990616697271130
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763994/fstmerge_base_7624228397621630036
public static void endReadExample(){
        // @@Example: ex_java_shared_group_end_read @@
        // @@Show@@
        // Open existing database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
        
        // Start read transaction
        ReadTransaction rt = group.beginRead();
        
        // Always do try / finally when using read transactions
        try { 
            Table table = rt.getTable("mytable");
            // More table read operations here
        } finally {
            rt.endRead(); // End read transaction in finally
        }
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void endReadExample(){
        // @@Example: ex_java_shared_group_end_read @@
        {
            // Delete file to start from scratch
            (new File("mydatabase.tightdb")).delete();
            // Create table, add columns and add row with data
            SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
            WriteTransaction wt = group.beginWrite(); 
            Table users = wt.getTable("myTable");
            users.addColumn(ColumnType.STRING, "username");
            users.addColumn(ColumnType.INTEGER, "level");
            users.add("tarzan", 45);
            wt.commit();
        }

        // @@Show@@
        // Open database file in a shared group
        SharedGroup group = new SharedGroup("mydatabase.tightdb"); 
        
        // Start read transaction
        ReadTransaction rt = group.beginRead();
        
        // Always do try / finally when using read transactions
        try {
            if (rt.hasTable("myTable")) {
                Table table = rt.getTable("mytable");
                // More table read operations here....
            }
        } finally {
            rt.endRead(); // End read transaction in finally
        }
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890763994/fstmerge_var2_7008529163520089242

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/ReadTransactionExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764098/fstmerge_var1_6403746852325745425
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764098/fstmerge_base_1258141611613796679
public static void main(String[] args) {
        // @@Show@@

        //Create table instance from the generated class
        PeopleTable peopleTable = new PeopleTable();

        // Add data to table
        peopleTable.add("John", 20, true);
        peopleTable.add("Mary", 21, false);
        peopleTable.add("Lars", 32, true);
        peopleTable.add("Phil", 43, false);
        peopleTable.add("Anni", 54, true); 
        
        peopleTable.get(0).getAge();  
        
        // Insert data at row index 2
        peopleTable.insert(2, "Frank", 34, true);

        if (!peopleTable.isEmpty()) {
            long s = peopleTable.size(); // s => 6
        }

        System.out.println("Size = " + peopleTable.size() + "\n");

        /****************************** GETTERS AND SETTERS **********************/

        // Get value from row 2 column Name
        String name = peopleTable.get(2).getName(); // name => "Mary"
        
        // Set the value from in row 2 column Name
        peopleTable.get(2).setName("NewName"); 

        String lastRowName = peopleTable.last().getName();  // retrieve name for last row

        // Replace entire row 4 with new values
        peopleTable.get(4).set("Eric", 50, true);

        /****************************** DATA REMOVAL *****************************/
        peopleTable.remove(2);

        System.out.println("\nRemoved row 2. Down to " + peopleTable.size() + " rows.\n");

        /****************************** ITERATION OF ALL RECORDS *****************/

        // lazy iteration over the table

        for (PeopleRow person : peopleTable) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old.");
        }

        /****************************** SIMPLE QUERY *****************************/

        System.out.println("\nFound: ");
        PeopleRow p = peopleTable.name.equalTo("John").findFirst();
        System.out.println( p );
        // prints: "Employee {name=John, age=20, hired=true}"

        /****************************** COMPLEX QUERY ****************************/

        // Define the query
        PeopleQuery query = peopleTable
                .age.between(20, 35)    // Implicit AND with below
                .name.contains("a")     // Implicit AND with below
                .group()                // "("
                .hired.equalTo(true)
                .or()               // or
                .name.endsWith("y")
                .endGroup();            // ")"
        // Count matches
        PeopleView match = query.findAll();
        System.out.println(match.size() + " employee(s) match query.");

        // Take the average age of the matches
        System.out.println(match.age.sum() + " years is the sum of ages.");

        // Perform query and use the result
        for (PeopleRow person : match) {
            // ... do something with matching 'person'
        }
        System.out.println("");

        /****************************** SERIALIZE ********************************/

        System.out.println("Serialize to file:");
        new File("people.tightdb").delete(); // overwrites file if it already exists

        // Create Table in Group
        Group group = new Group();
        PeopleTable person1 = new PeopleTable(group);

        person1.add("John", 20, true);
        person1.add("Mary", 21, false);

        // Write to disk
        try {
            group.writeToFile("people.tightdb");
        } catch (IOException e) {
            // unable to write - handle...
            System.exit(1);
        }

        // Load a group from disk (and print contents)
        Group fromDisk = new Group("people.tightdb");
        PeopleTable people2 = new PeopleTable(fromDisk);

        for (PeopleRow person : people2) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        // Write same group to memory buffer
        byte[] buffer = group.writeToMem();

        // Load a group from memory (and print contents)
        Group fromMem = new Group(buffer);
        PeopleTable people3 = new PeopleTable(fromMem);

        for (PeopleRow person : people3) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        /****************************** TRANSACTIONS ********************************/

        System.out.println("\nTransactions:");

        // Open a shared group
        SharedGroup db = new SharedGroup("people.tightdb");

        // Write transaction:
        WriteTransaction wrtTrans = db.beginWrite();    // Start transaction
        try {
            PeopleTable person = new PeopleTable(wrtTrans);
            // Add row to table
            person.add("Bill", 53, true);
            wrtTrans.commit();                          // End transaction
        } catch (Throwable e) {
            wrtTrans.rollback();                        // or Rollback
        }

        // Read transaction:
        ReadTransaction rdTrans = db.beginRead();       // Start transaction
        try{
            PeopleTable people = new PeopleTable(rdTrans);
            for (PeopleRow person2 : people) {
                System.out.println(person2.getName() + " is " +
                        person2.getAge() + " years old");
            }
        } finally {
            rdTrans.endRead();                          // End transaction 
        }
        
        // @@EndShow@@

    }
=======
public static void main(String[] args) {
        // @@Show@@

        //Create table instance from the generated class
        PeopleTable peopleTable = new PeopleTable();

        // Add data to table
        peopleTable.add("John", 20, true);
        peopleTable.add("Mary", 21, false);
        peopleTable.add("Lars", 32, true);
        peopleTable.add("Phil", 43, false);
        peopleTable.add("Anni", 54, true); 
        
        peopleTable.get(0).getAge();  
        
        // Insert data at row index 2
        peopleTable.insert(2, "Frank", 34, true);

        if (!peopleTable.isEmpty()) {
            long s = peopleTable.size(); // s => 6
        }

        System.out.println("Size = " + peopleTable.size() + "\n");

        /****************************** GETTERS AND SETTERS **********************/

        // Get value from row 2 column Name
        String name = peopleTable.get(2).getName(); // name => "Mary"
        
        // Set the value from in row 2 column Name
        peopleTable.get(2).setName("NewName"); 

        String lastRowName = peopleTable.last().getName();  // retrieve name for last row

        // Replace entire row 4 with new values
        peopleTable.get(4).set("Eric", 50, true);

        /****************************** DATA REMOVAL *****************************/
        peopleTable.remove(2);

        System.out.println("\nRemoved row 2. Down to " + peopleTable.size() + " rows.\n");

        /****************************** ITERATION OF ALL RECORDS *****************/

        // lazy iteration over the table

        for (PeopleRow person : peopleTable) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old.");
        }

        /****************************** SIMPLE QUERY *****************************/

        System.out.println("\nFound: ");
        PeopleRow p = peopleTable.name.equalTo("John").findFirst();
        System.out.println( p );
        // prints: "Employee {name=John, age=20, hired=true}"

        /****************************** COMPLEX QUERY ****************************/

        // Define the query
        PeopleQuery query = peopleTable
                .age.between(20, 35)    // Implicit AND with below
                .name.contains("a")     // Implicit AND with below
                .group()                // "("
                    .hired.equalTo(true)
                    .or()               // or
                    .name.endsWith("y")
                .endGroup();            // ")"
        // Count matches
        PeopleView match = query.findAll();
        System.out.println(match.size() + " employee(s) match query.");

        // Take the average age of the matches
        System.out.println(match.age.sum() + " years is the sum of ages.");

        // Perform query and use the result
        for (PeopleRow person : match) {
            // ... do something with matching 'person'
        }
        System.out.println("");

        /****************************** SERIALIZE ********************************/

        System.out.println("Serialize to file:");
        new File("people.tightdb").delete(); // overwrites file if it already exists

        // Create Table in Group
        Group group = new Group();
        PeopleTable person1 = new PeopleTable(group);

        person1.add("John", 20, true);
        person1.add("Mary", 21, false);

        // Write to disk
        try {
            group.writeToFile("people.tightdb");
        } catch (IOException e) {
            // unable to write - handle...
            System.exit(1);
        }

        // Load a group from disk (and print contents)
        Group fromDisk = new Group("people.tightdb");
        PeopleTable people2 = new PeopleTable(fromDisk);

        for (PeopleRow person : people2) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        // Write same group to memory buffer
        byte[] buffer = group.writeToMem();

        // Load a group from memory (and print contents)
        Group fromMem = new Group(buffer);
        PeopleTable people3 = new PeopleTable(fromMem);

        for (PeopleRow person : people3) {
            System.out.println(person.getName() + " is " + person.getAge() + " years old");
        }

        /****************************** TRANSACTIONS ********************************/

        System.out.println("\nTransactions:");

        // Open a shared group
        SharedGroup db = new SharedGroup("people.tightdb");

        // Write transaction:
        WriteTransaction wrtTrans = db.beginWrite();    // Start transaction
        try {
            PeopleTable person = new PeopleTable(wrtTrans);
            // Add row to table
            person.add("Bill", 53, true);
            wrtTrans.commit();                          // End transaction
        } catch (Throwable e) {
            wrtTrans.rollback();                        // or Rollback
        }

        // Read transaction:
        ReadTransaction rdTrans = db.beginRead();       // Start transaction
        try{
            PeopleTable people = new PeopleTable(rdTrans);
            for (PeopleRow person2 : people) {
                System.out.println(person2.getName() + " is " +
                        person2.getAge() + " years old");
            }
        } finally {
            rdTrans.endRead();                          // End transaction 
        }
        
        // @@EndShow@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764098/fstmerge_var2_8898185946878677105

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/TypedTableIntro.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764102/fstmerge_var1_2987102250342347957
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764102/fstmerge_base_1233100887145915657
public static void main(String[] args) throws FileNotFoundException  {
        
        new File("mydatabasefile.tightdb").delete();

        // Constructor methods
        constructorPlainExample();
        constructorFileExample();
        constructorStringExample();
        constructorStringModeExample();
        constructorByteArrayExample();


        // Table methods
        getTableExample();
        getTableNameExample();
        hasTableExample();

        // Serialization methods
        writeToFileExample();
        writeToMemExample();
        toStringExample();
        toJSONExample();

        // Group methods
        sizeExample();
        isEmptyExample();
        equalsExample();


    }
=======
public static void main(String[] args) throws FileNotFoundException  {
        
        new File("mydatabasefile.tightdb").delete();

        // Constructor methods
        constructorPlainExample();
        constructorFileExample();
        constructorStringExample();
        constructorStringModeExample();
        constructorByteArrayExample();

        // Table methods
        getTableExample();
        getTableNameExample();
        hasTableExample();

        // Serialization methods
        writeToFileExample();
        writeToMemExample();
        toStringExample();
        toJSONExample();

        // Group methods
        sizeExample();
        isEmptyExample();
        equalsExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764102/fstmerge_var2_2356993710265331934

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/GroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764161/fstmerge_var1_3978437790392264939
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764161/fstmerge_base_1765340290985182948
public static void equalsExample(){
        // @@Example: ex_java_group_operator_equal @@
        // @@Show@@
        // Group1 with 1 table with 1 row of data
        Group group1 = new Group();
        Table table1 = group1.getTable("mytable1"); 
        table1.addColumn(ColumnType.STRING, "stringCol");
        table1.add("StringVal");


        // Group2 with 1 table with 1 row of data
        Group group2 = new Group();
        Table table2 = group2.getTable("mytable1"); 
        table2.addColumn(ColumnType.STRING, "stringCol");
        table2.add("StringVal");

        // Groups are equal
        Assert(group1.equals(group2));

        // Add 1 extra row to table in group 2
        table2.add("new String val");

        // Groups are not equal
        Assert(group1.equals(group2) == false);

        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void equalsExample(){
        // @@Example: ex_java_group_operator_equal @@
        // @@Show@@
        // Group1 with 1 table with 1 row of data
        Group group1 = new Group();
        Table table1 = group1.getTable("mytable1"); 
        table1.addColumn(ColumnType.STRING, "stringCol");
        table1.add("StringVal");

        // Group2 with 1 table with 1 row of data
        Group group2 = new Group();
        Table table2 = group2.getTable("mytable1"); 
        table2.addColumn(ColumnType.STRING, "stringCol");
        table2.add("StringVal");

        // Groups are equal
        Assert(group1.equals(group2));

        // Add 1 extra row to table in group 2
        table2.add("new String val");

        // Groups are not equal
        Assert(group1.equals(group2) == false);

        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764161/fstmerge_var2_525603492534023515

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/GroupExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764169/fstmerge_var1_2316240022706108477
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764169/fstmerge_base_1873971105707306422
public static void main(String[] args) throws FileNotFoundException  {
        
        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        //TODO getSortedViewExample();
        //TODO optimizeExample();
        //TODO setIndexExample();
        //TODO hasIndexExample();
        
        
        // Columns methods: 
        addColumnExample();
        removeColumnExample();
        renameColumnExample();
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();
        
        
        
        // Rows methods:
        addAtExample();
        addAtExample();
        setRowExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();
        addEmptyRowsExample();
        adjustExample();
        
        
        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable
        
        
        // Searching methods:
        findFirstExamples();
        findAllExample();
        getDistinctViewExample();
        whereExample();
        
        // Aggregates methods:
       sumExample();
       maximumExample();
       minimumExample();
       averageExample();
        
        // Dump methods:
        toJsonExample();
        
        
        

    }
=======
public static void main(String[] args) throws FileNotFoundException  {
        
        // Table methods:
        isValidExample();
        sizeExample();
        isEmptyExample();
        clearExample();
        //TODO getSortedViewExample();
        //TODO optimizeExample();
        //TODO setIndexExample();
        //TODO hasIndexExample();
        
        // Columns methods: 
        addColumnExample();
        removeColumnExample();
        renameColumnExample();
        getColumnCountExample();
        getColumnNameExample();
        getColumnIndexExample();
        getColumnTypeExample();
        
        // Rows methods:
        addAtExample();
        addAtExample();
        setRowExample();
        removeExample();
        removeLastExample();
        addEmptyRowExample();
        addEmptyRowsExample();
        adjustExample();
        
        // Cells methods:
        getExamples();
        setExamples();
        //TODO getSubtableSize();
        //TODO clearSubtable
        
        // Searching methods:
        findFirstExamples();
        findAllExample();
        getDistinctViewExample();
        whereExample();
        
        // Aggregates methods:
       sumExample();
       maximumExample();
       minimumExample();
       averageExample();
        
        // Dump methods:
        toJsonExample();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764169/fstmerge_var2_4106394783143275322

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764288/fstmerge_var1_7384323786990019323
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764288/fstmerge_base_224133070856080506
public static void whereExample(){
        // @@Example: ex_java_dyn_table_where @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // Get a query from the table
        TableQuery query = table.where();
        
        // USe the query object to query the table and get a table view with the results
        TableView view = query.equalTo(2, false).findAll();
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void whereExample(){
        // @@Example: ex_java_dyn_table_where @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed"); // column 2
        table.add("user1", 420, false);
        table.add("user2", 770, true);
        table.add("user3", 327, false);
        
        // where() returns a Query
        TableQuery query = table.where();
        
        // You can continue to build the query
        // Here you want all the rows where
        // column 2 contains false, and column 1 > 400
        query = query.equalTo(2, false);
        query = query.greaterThan(1, 400);
        // Now execute the query, and get the results in a TableView
        TableView view = query.findAll();

        // Expect 1 match
        Assert(view.size() == 1);
        Assert(view.getString(0,0).equals("user3"));
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764288/fstmerge_var2_1763594340796256199

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764292/fstmerge_var1_4513779422075822545
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764292/fstmerge_base_7722316891011738222
public static void sumExample(){
        // @@Example: ex_java_dyn_table_sum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The sum of all values in column 1
        long totalScore = table.sumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void sumExample(){
        // @@Example: ex_java_dyn_table_sum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);

        // The sum of all values in column 1
        long totalScore = table.sumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764292/fstmerge_var2_360695703642698132

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764297/fstmerge_var1_4472126461909724579
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764297/fstmerge_base_1704874330863603474
public static void maximumExample(){
        // @@Example: ex_java_dyn_table_maximum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The maximum score in column 1
        long maxScore = table.maximumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void maximumExample(){
        // @@Example: ex_java_dyn_table_maximum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The maximum score in column 1
        long maxScore = table.maximumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764297/fstmerge_var2_3918637137353558297

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764302/fstmerge_var1_7380138960796531603
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764302/fstmerge_base_9160925845224844973
public static void minimumExample(){
        // @@Example: ex_java_dyn_table_minimum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The minimum score in column 1
        long minScore = table.minimumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void minimumExample(){
        // @@Example: ex_java_dyn_table_minimum @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The minimum score in column 1
        long minScore = table.minimumInt(1);
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764302/fstmerge_var2_4838560842077499430

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764307/fstmerge_var1_5355609497032830604
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764307/fstmerge_base_4165666481365108688
public static void averageExample(){
        // @@Example: ex_java_dyn_table_average @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        table.add("user4", 770, false);
        table.add("user5", 564, true);
        table.add("user6", 875, false);
        table.add("user7", 420, true);
        table.add("user8", 770, true);
        
        // The average score in column 1
        double avgScore = table.averageInt(1); // Returns a double
        // @@EndShow@@
        // @@EndExample@@
    }
=======
public static void averageExample(){
        // @@Example: ex_java_dyn_table_average @@
        // @@Show@@
        // Create table with 3 columns and add data
        Table table = new Table();
        table.addColumn(ColumnType.STRING, "username");
        table.addColumn(ColumnType.INTEGER, "score");
        table.addColumn(ColumnType.BOOLEAN, "completed");
        table.add("user1", 420, false);
        table.add("user2", 770, false);
        table.add("user3", 327, false);
        
        // The average score in column 1
        double avgScore = table.averageInt(1); // Returns a double
        // @@EndShow@@
        // @@EndExample@@
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415890764307/fstmerge_var2_1435937371039189775

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7cb3_b5b4f/rev_e7cb3-b5b4f/doc/ref/examples/src/com/tightdb/refdoc/DynTableExamples.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e190_e7cb3/rev_2e190-e7cb3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_728bc_e9046/rev_728bc-e9046.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0cc1d_728bc/rev_0cc1d-728bc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2336c_fc425/rev_2336c-fc425.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2336c_bbdce/rev_2336c-bbdce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1c09_d13b7/rev_c1c09-d13b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c5501_2336c/rev_c5501-2336c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6c98c_2d8d2/rev_6c98c-2d8d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ac647_09b3b/rev_ac647-09b3b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_56daf_4b372/rev_56daf-4b372.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e641c_56daf/rev_e641c-56daf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b0b71_ed6c5/rev_b0b71-ed6c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e3fae_b0b71/rev_e3fae-b0b71.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3331e_8a96a/rev_3331e-8a96a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6745_8a96a/rev_a6745-8a96a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6745_e9126/rev_a6745-e9126.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e9126_8432d/rev_e9126-8432d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_845d4_95e1a/rev_845d4-95e1a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3f8fd_845d4/rev_3f8fd-845d4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6745_70b35/rev_a6745-70b35.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6745_5c3e1/rev_a6745-5c3e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2467b_ec7a3/rev_2467b-ec7a3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5190f_39128/rev_5190f-39128.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_640a0_b716e/rev_640a0-b716e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2467b_a7f2a/rev_2467b-a7f2a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2467b_3f981/rev_2467b-3f981.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_150bc_821b3/rev_150bc-821b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e3a48_0c240/rev_e3a48-0c240.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e3a48_e086d/rev_e3a48-e086d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e3a48_50581/rev_e3a48-50581.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_56bb1_e3a48/rev_56bb1-e3a48.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8cf8b_b9906/rev_8cf8b-b9906.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_359fb_8cf8b/rev_359fb-8cf8b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_88d63_d4b63/rev_88d63-d4b63.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_88d63_a17c3/rev_88d63-a17c3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_65c05_88d63/rev_65c05-88d63.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_62645_66191/rev_62645-66191.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c3f4d_18cd6/rev_c3f4d-18cd6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5041a_41c6a/rev_5041a-41c6a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_500a1_bb6a8/rev_500a1-bb6a8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_500a1_8be53/rev_500a1-8be53.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d02e0_500a1/rev_d02e0-500a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c78fa_d09da/rev_c78fa-d09da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c78fa_13504/rev_c78fa-13504.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c78fa_894b6/rev_c78fa-894b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_826d6_c78fa/rev_826d6-c78fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ae5df_f11cc/rev_ae5df-f11cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8a34d_ae5df/rev_8a34d-ae5df.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_01f43_0521b/rev_01f43-0521b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_726d8_01f43/rev_726d8-01f43.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_96953_dd372/rev_96953-dd372.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_908ed_96953/rev_908ed-96953.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6e8b0_35ee1/rev_6e8b0-35ee1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6e8b0_8ef6f/rev_6e8b0-8ef6f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3c58f_77af8/rev_3c58f-77af8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3c58f_e12c9/rev_3c58f-e12c9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3c58f_e5d23/rev_3c58f-e5d23.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_61508_d6463/rev_61508-d6463.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_96e45_62d6e/rev_96e45-62d6e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6b524_96e45/rev_6b524-96e45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0bed6_2758a/rev_0bed6-2758a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fc5cf_779d5/rev_fc5cf-779d5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_71c30_fc5cf/rev_71c30-fc5cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76549_f7b6a/rev_76549-f7b6a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_40438_a4476/rev_40438-a4476.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e4bd2_40438/rev_e4bd2-40438.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_aa07f_15945/rev_aa07f-15945.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d0f00_da922/rev_d0f00-da922.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_14611_d0f00/rev_14611-d0f00.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_60bcc_9fc98/rev_60bcc-9fc98.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_73258_60bcc/rev_73258-60bcc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_c3440/rev_7ec56-c3440.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142007/fstmerge_var1_6686951122828989691
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142007/fstmerge_base_5238317958659644003
@Override
    public Table getSubTable(long columnIndex, long rowIndex) {
        return new Table(this, nativeGetSubTable(nativePtr, columnIndex, rowIndex), immutable);
    }
=======
@Override
    public Table getSubTable(long columnIndex, long rowIndex) {
        // Execute the disposal of abandoned tightdb objects each time a new tightdb object is created
        context.executeDelayedDisposal();
        long nativeSubtablePtr = nativeGetSubTable(nativePtr, columnIndex, rowIndex);
        try {
            // Copy context reference from parent
            return new Table(context, this, nativeSubtablePtr, immutable);
        }
        catch (RuntimeException e) {
            nativeClose(nativeSubtablePtr);
            throw e;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142007/fstmerge_var2_1754906859677415408

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_c3440/rev_7ec56-c3440/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142016/fstmerge_var1_6706114859391817620
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142016/fstmerge_base_2149951876119285680
private Table getSubTableDuringInsert(long columnIndex, long rowIndex) {
        return new Table(this, nativeGetSubTableDuringInsert(nativePtr, columnIndex, rowIndex), immutable);
    }
=======
private Table getSubTableDuringInsert(long columnIndex, long rowIndex) {
        // Execute the disposal of abandoned tightdb objects each time a new tightdb object is created
        context.executeDelayedDisposal();
        long nativeSubtablePtr =  nativeGetSubTableDuringInsert(nativePtr, columnIndex, rowIndex);
        try {
            return new Table(this.context, this,nativeSubtablePtr, immutable);
        }
        catch (RuntimeException e) {
            nativeClose(nativeSubtablePtr);
            throw e;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893142016/fstmerge_var2_5102872139815543326

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_c3440/rev_7ec56-c3440/tightdb-java-core/src/main/java/com/tightdb/Table.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893143467/fstmerge_var1_4281847681706578779
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893143467/fstmerge_base_7735348939307451229
@Override
    public Table getSubTable(long columnIndex, long rowIndex){
        return new Table(this, nativeGetSubTable(nativePtr, columnIndex, rowIndex), immutable);
    }
=======
@Override
    public Table getSubTable(long columnIndex, long rowIndex) {
        this.context.executeDelayedDisposal();
        return new Table(this.context, this, nativeGetSubTable(nativePtr, columnIndex, rowIndex), immutable);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893143467/fstmerge_var2_5006773882649629127

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_c3440/rev_7ec56-c3440/tightdb-java-core/src/main/java/com/tightdb/TableView.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_96681/rev_7ec56-96681.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void getValuesFromNonExistingColumn() {
        Table table = TestHelper.getTableWithAllColumnTypes();
        TableView view = table.where().findAll();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893174338/fstmerge_var1_1114605158123838321

        try { view.getBinaryByteArray(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getBoolean(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getDate(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getDouble(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getFloat(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getLong(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getMixed(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getString(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }

        try { view.getSubtable(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubtable(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubtable(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893174338/fstmerge_base_8351961267264221951
        
        try { view.getBinaryByteArray(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getBoolean(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getDate(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getDouble(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getFloat(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getLong(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getMixed(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getString(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getSubTable(-1, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubTable(-10, 0); fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubTable(100, 0); fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
=======
        
        try { view.getBinaryByteArray(-1, 0);   fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(-10, 0);  fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBinaryByteArray(100, 0);  fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getBoolean(-1, 0);           fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(-10, 0);          fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getBoolean(100, 0);          fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getDate(-1, 0);              fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(-10, 0);             fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDate(100, 0);             fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getDouble(-1, 0);            fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(-10, 0);           fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getDouble(100, 0);           fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getFloat(-1, 0);             fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(-10, 0);            fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getFloat(100, 0);            fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getLong(-1, 0);              fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(-10, 0);             fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getLong(100, 0);             fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getMixed(-1, 0);             fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(-10, 0);            fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getMixed(100, 0);            fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getString(-1, 0);            fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(-10, 0);           fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getString(100, 0);           fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
        
        try { view.getSubTable(-1, 0);          fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubTable(-10, 0);         fail("Column is less than 0"); } catch (ArrayIndexOutOfBoundsException e) { }
        try { view.getSubTable(100, 0);         fail("Column does not exist"); } catch (ArrayIndexOutOfBoundsException e) { }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893174338/fstmerge_var2_7909909661829862898
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_96681/rev_7ec56-96681/tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java
Conflict type: LineBasedMCFd
Conflict body: 
private void verifyColumnName(String name) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893175757/fstmerge_var1_4580779046300428710
        if (name.length() > 63) {
            throw new IllegalArgumentException("Column names are currently limited to max 63 characters.");
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893175757/fstmerge_base_2722935286362187507
    	if (name.length() > 63) {
    		throw new IllegalArgumentException("Column names are currently limited to max 63 characters.");
    	}    	
=======
        if (name.length() > 63) {
            throw new IllegalArgumentException("Column names are currently limited to max 63 characters.");
        }    	
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893175757/fstmerge_var2_5998986828355728427
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_96681/rev_7ec56-96681/tightdb-java-core/src/main/java/com/tightdb/Table.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ec56_646df/rev_7ec56-646df.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_20144_7ec56/rev_20144-7ec56.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b5d33_acaa3/rev_b5d33-acaa3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public Group(String filepath, OpenMode mode) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893280568/fstmerge_var1_385243505931910945
        if (mode.equals(OpenMode.READ_ONLY))
            this.immutable = true; // Group immutable
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893280568/fstmerge_base_2076387114895771874
=======
        context = new Context();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415893280568/fstmerge_var2_6454436098503872039
        this.nativePtr = createNative(filepath, mode.value);
        try { 
            checkNativePtr();
        } catch (RuntimeException e) {
            nativeClose(nativePtr);
            throw e;
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b5d33_acaa3/rev_b5d33-acaa3/tightdb-java-core/src/main/java/com/tightdb/Group.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b5d33_f316d/rev_b5d33-f316d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_89d5e_b5d33/rev_89d5e-b5d33.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e8649_9ff28/rev_e8649-9ff28.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_76329_1aac8/rev_76329-1aac8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f9ebe_86f36/rev_f9ebe-86f36.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9be8e_0adcf/rev_9be8e-0adcf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_95632_b33c1/rev_95632-b33c1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_02625_106c5/rev_02625-106c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_99ade_02625/rev_99ade-02625.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bf351_48762/rev_bf351-48762.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bdcb4_02625/rev_bdcb4-02625.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_65985_fa8bd/rev_65985-fa8bd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d2209_65985/rev_d2209-65985.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_edf70_14b70/rev_edf70-14b70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9b99e_edf70/rev_9b99e-edf70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1e552_97297/rev_1e552-97297.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9d00b_1e552/rev_9d00b-1e552.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e12d5_f67bd/rev_e12d5-f67bd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ef9aa_e12d5/rev_ef9aa-e12d5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6b0de_b86c2/rev_6b0de-b86c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9fc08_6b0de/rev_9fc08-6b0de.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_68ab6_9fc08/rev_68ab6-9fc08.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_68ab6_f92a2/rev_68ab6-f92a2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8494c_4387b/rev_8494c-4387b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_964e0_68253/rev_964e0-68253.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7466f_3cb21/rev_7466f-3cb21.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4bb62_46210/rev_4bb62-46210.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d5733_3e821/rev_d5733-3e821.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7ae00_ab594/rev_7ae00-ab594.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a8811_720ac/rev_a8811-720ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1fdd3_45078/rev_1fdd3-45078.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3a18c_97e22/rev_3a18c-97e22.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_538f3_a85f9/rev_538f3-a85f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3b5b2_2a80b/rev_3b5b2-2a80b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6fc54_de100/rev_6fc54-de100.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_92ce8_ebca3/rev_92ce8-ebca3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e374_177fa/rev_2e374-177fa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6150a_d0e94/rev_6150a-d0e94.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d029f_ddcb1/rev_d029f-ddcb1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_92c62_02aab/rev_92c62-02aab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f619c_2e79c/rev_f619c-2e79c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fffef_c05da/rev_fffef-c05da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_45a05_e2a05/rev_45a05-e2a05.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_00490_97201/rev_00490-97201.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_32048_00490/rev_32048-00490.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dfabb_c7128/rev_dfabb-c7128.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f2027_22c73/rev_f2027-22c73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_52d56_e1d75/rev_52d56-e1d75.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_04733_e96f1/rev_04733-e96f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a3516_3a75f/rev_a3516-3a75f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fa456_b11cc/rev_fa456-b11cc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_17787_c260f/rev_17787-c260f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a5230_8be42/rev_a5230-8be42.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_17787_d436a/rev_17787-d436a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_17787_fbae3/rev_17787-fbae3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a5230_c4304/rev_a5230-c4304.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72fb9_3ac3d/rev_72fb9-3ac3d.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346408/fstmerge_var1_1253247124976507249
public Table getLinkTarget(long columnIndex) {
        // Execute the disposal of abandoned realm objects each time a new realm object is created
        context.executeDelayedDisposal();
        long nativeTablePointer = nativeGetLinkTarget(nativePtr, columnIndex);
        try {
            // Copy context reference from parent
            return new Table(context, this.parent, nativeTablePointer, immutable);
        }
        catch (RuntimeException e) {
            Table.nativeClose(nativeTablePointer);
            throw e;
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346408/fstmerge_base_4313870406239911241
=======
public Table getLinkTarget(long columnIndex) {
        // Execute the disposal of abandoned realm objects each time a new realm object is created
        context.executeDelayedDisposal();
        long nativeTablePointer = nativeGetLinkTarget(nativePtr, columnIndex);
        try {
            // Copy context reference from parent
            return new Table(context, this, nativeTablePointer);
        }
        catch (RuntimeException e) {
            Table.nativeClose(nativeTablePointer);
            throw e;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346408/fstmerge_var2_645755770947488383

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72fb9_3ac3d/rev_72fb9-3ac3d/realm-java-core/src/main/java/io/realm/Table.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346510/fstmerge_var1_8693640198416127719
public void setLink(long columnIndex, long rowIndex, long value) {
        if (immutable) throwImmutable();
        nativeSetLink(nativePtr, columnIndex, rowIndex, value);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346510/fstmerge_base_6916935474708163081
=======
public void setLink(long columnIndex, long rowIndex, long value) {
        checkImmutable();
        nativeSetLink(nativePtr, columnIndex, rowIndex, value);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895346510/fstmerge_var2_8765963745587719142

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72fb9_3ac3d/rev_72fb9-3ac3d/realm-java-core/src/main/java/io/realm/Table.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895348132/fstmerge_var1_8722869505339392424
public void setLink(long columnIndex, long rowIndex, long value){
        if (immutable) throwImmutable();
        nativeSetLink(nativePtr, columnIndex, rowIndex, value);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895348132/fstmerge_base_1864139645268662955
=======
public void setLink(long columnIndex, long rowIndex, long value){
        if (parent.isImmutable()) throwImmutable();
        nativeSetLink(nativePtr, columnIndex, rowIndex, value);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895348132/fstmerge_var2_4297442300553026659

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72fb9_3ac3d/rev_72fb9-3ac3d/realm-java-core/src/main/java/io/realm/TableView.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895351981/fstmerge_var1_8375539585021696242
@Test
    public void testLinkColumns() {

        Group group = new Group();

        Table table1 = group.getTable("table1");


        Table table2 = group.getTable("table2");
        table2.addColumn(ColumnType.INTEGER, "int");
        table2.addColumn(ColumnType.STRING, "string");

        table2.add(1, "c");
        table2.add(2, "b");
        table2.add(3, "a");

        table1.addColumnLink(ColumnType.LINK, "Link", table2);


        table1.addEmptyRow();
        table1.setLink(0, 0, 1);

        Table target = table1.getLinkTarget(0);

        System.gc();


        assertEquals(target.getColumnCount(), 2);


        String test = target.getString(1, table1.getLink(0, 0));

        assertEquals(test, "b");

        group.close();


    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895351981/fstmerge_base_5897496792360797863
=======
@Test
    public void testLinkColumns() {

        Group group = new Group();

        Table table1 = group.getTable("table1");


        Table table2 = group.getTable("table2");
        table2.addColumn(ColumnType.INTEGER, "int");
        table2.addColumn(ColumnType.STRING, "string");

        table2.add(1, "c");
        table2.add(2, "b");
        table2.add(3, "a");

        table1.addColumnLink(ColumnType.LINK, "Link", table2);


        table1.addEmptyRow();
        table1.setLink(0, 0, 1);

        Table target = table1.getLinkTarget(0);

        assertEquals(target.getColumnCount(), 2);


        String test = target.getString(1, table1.getLink(0, 0));

        assertEquals(test, "b");



    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415895351981/fstmerge_var2_3508970578181079908

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72fb9_3ac3d/rev_72fb9-3ac3d/realm-java-test/src/test/java/io/realm/JNILinkTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1eaf9_eeaff/rev_1eaf9-eeaff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9d316_2d971/rev_9d316-2d971.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_27b29_7a606/rev_27b29-7a606.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3761c_d436a/rev_3761c-d436a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_289b4_84bc0/rev_289b4-84bc0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_88282_289b4/rev_88282-289b4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36701_bbc79/rev_36701-bbc79.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ea597_12a3c/rev_ea597-12a3c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_823b0_9de20/rev_823b0-9de20.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3a290_0fde5/rev_3a290-0fde5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2f2dc_cf356/rev_2f2dc-cf356.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_228d1_4e128/rev_228d1-4e128.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_af3b0_e8f05/rev_af3b0-e8f05.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cb034_b0315/rev_cb034-b0315.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_915a6_af627/rev_915a6-af627.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d2c2a_83498/rev_d2c2a-83498.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_30f06_20a9d/rev_30f06-20a9d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cc568_8e85f/rev_cc568-8e85f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_001ed_cc568/rev_001ed-cc568.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_72c00_8ab8c/rev_72c00-8ab8c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a9b75_b1d15/rev_a9b75-b1d15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279004/fstmerge_var1_533829275079640795
public void createItem(View v) {

        Realm wrRealm = null;
        try {
            wrRealm = new Realm(this.getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
        }
        wrRealm.beginWrite();

        User user = realm.create(User.class);

        user.setId(0);
        user.setName("Username " + this.users.size());
        user.setEmail("");


        wrRealm.commit();


    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279004/fstmerge_base_5529350657706773827
public void createItem(View v) {

        Realm wrRealm = null;
        try {
            wrRealm = new Realm(this.getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
        }
        wrRealm.beginWrite();

        User user = new User();

        user.setId(0);
        user.setName("Username " + this.users.size());
        user.setEmail("");

        wrRealm.add(user);
        wrRealm.commit();


    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279004/fstmerge_var2_6687784419108480782

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/example/MainActivity.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/example/entities/User.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279028/fstmerge_var1_1064375463652338615
@Override
    public void add(int location, E object) {
//        if(object.row == null) {
//            realm.add(object);
//            view.add(object.realmAddedAtRowIndex);
//        } else {
            view.add(object.row.getIndex());
//        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279028/fstmerge_base_5623903267737523006
@Override
    public void add(int location, E object) {
        if(object.realmGetRow() == null) {
            realm.add(object);
            view.add(object.realmAddedAtRowIndex);
        } else {
            view.add(object.realmGetRow().getIndex());
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279028/fstmerge_var2_3336581633528221738

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/RealmLinkList.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279032/fstmerge_var1_5056090704145134480
@Override
    public E set(int location, E object) {
//        if(object.row == null) {
//            realm.add(object);
//            view.set(location, object.realmAddedAtRowIndex);
//            return realm.get((Class<E>)object.getClass(), object.realmAddedAtRowIndex);
//        } else {
            view.set(location, object.row.getIndex());
            return object;
//        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279032/fstmerge_base_2941653319776364565
@Override
    public E set(int location, E object) {
        if(object.realmGetRow() == null) {
            realm.add(object);
            view.set(location, object.realmAddedAtRowIndex);
            return realm.get((Class<E>)object.getClass(), object.realmAddedAtRowIndex);
        } else {
            view.set(location, object.realmGetRow().getIndex());
            return object;
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279032/fstmerge_var2_3677636039384716750

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/RealmLinkList.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279046/fstmerge_var1_1466850032297403722
@Override
    public E get(int i) {

//  NOTE
// Need to find out why this has changed:
//        String outClass = clazz.getSimpleName()+"RealmProxy";
//
//        try {
//            Class<E> clazzCreate = (Class<E>)Class.forName(outClass);
//            Constructor<E> ctor = clazzCreate.getConstructor();
//            E object = ctor.newInstance(new Object[]{});
//
//
//
//            TableOrView table =  realm.getTable(clazz);
//            if(table instanceof TableView) {
//                realm.get(clazz, ((TableView)table).getSourceRowIndex(i));
//            } else {
//                realm.get(clazz, i);
//            }
//
//            return object;
//
//
//        }
//        catch (Exception ex)
//        {
//            System.out.print("Realm.create has failed: "+ex.getMessage());
//        }
//        return null;
// END NOTE

        return realm.get(clazz, view.getTargetRowIndex(i));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279046/fstmerge_base_3117708293819722219
@Override
    public E get(int i) {
        return realm.get(clazz, view.getTargetRowIndex(i));
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279046/fstmerge_var2_6706824789281462236

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/RealmLinkList.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279598/fstmerge_var1_1059474694906733416
public Realm(File writeablePath, String filePath) throws IOException {
        this.filePath = new File(writeablePath, filePath).getAbsolutePath();

        this.changeListeners = new ArrayList<RealmChangeListener>();
        init();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279598/fstmerge_base_5663876578234588667
public Realm(File writeablePath, String filePath) throws IOException {
        this.filePath = new File(writeablePath, filePath).getAbsolutePath();
        File bytecodeCache = new File(writeablePath, "dx");
        if (!bytecodeCache.exists()) {
            boolean success = bytecodeCache.mkdirs();
            if (!success) {
                throw new IOException("Could not create the bytecode cache folder");
            }
        }

        this.bytecodeCache = bytecodeCache;
        this.changeListeners = new ArrayList<RealmChangeListener>();
        init();
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279598/fstmerge_var2_6572854514330292315

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279623/fstmerge_var1_215684074562177847
public <E extends RealmObject> E create(Class<E> classSpec) {

        E obj = null;

        try {
            String className = classSpec.getName()+"RealmProxy";
            Class cl = Class.forName(className);
            Constructor con = cl.getConstructor();
            obj = (E)con.newInstance();


            initTable(obj);

            Table table = getTable(classSpec);

            long rowIndex = table.addEmptyRow();

            obj.realmAddedAtRowIndex = rowIndex;

            obj.row = transaction.getTable(classSpec.getSimpleName()).getRow(rowIndex);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

        return obj;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279623/fstmerge_base_7344042002707166385
public <E extends RealmObject> E create(Class<E> classSpec) {

        initTable(classSpec);

        Table table = getTable(classSpec);

        long rowIndex = table.addEmptyRow();

        return get(classSpec, rowIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279623/fstmerge_var2_9186622038493799711

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279631/fstmerge_var1_8702829140111486459
<E extends RealmObject> E get(Class<E> clazz, long rowIndex) {

        E obj = null;

        try {
            Row row = transaction.getTable(clazz.getSimpleName()).getRow(rowIndex);

            String className = clazz.getName()+"RealmProxy";

            Class cl = Class.forName(className);
            Constructor con = cl.getConstructor();
            obj = (E)con.newInstance();
            obj.row = row;
        } catch (Exception e) {
            e.printStackTrace();
        }


        return obj;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279631/fstmerge_base_3689414460057826287
<E extends RealmObject> E get(Class<E> clazz, long rowIndex) {

        E obj = null;

        try {
            Row row = transaction.getTable(clazz.getSimpleName()).getRow(rowIndex);
            obj = ProxyBuilder.forClass(clazz)
                    .parentClassLoader(clazz.getClassLoader())
                    .dexCache(getBytecodeCache())
                    .handler(new RealmProxy(this, row))
                    .build();
            obj.realmSetRow(row);
        } catch (IOException e) {
            e.printStackTrace();
        }


        return obj;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279631/fstmerge_var2_6959100550014648693

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public Row row; ##FSTMerge## private Row row; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/main/java/io/realm/typed/RealmObject.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279732/fstmerge_var1_4731532384477398633
public void testPerformance() {

        final int listSize = 10000;
        long timer;
        Map<String, Long> timings = new HashMap<String, Long>();

        // ArrayList

        System.out.println("################################ Testing ArrayList");

        List<User> arrayList = new ArrayList<User>(listSize);

        timer = System.currentTimeMillis();
        for(int i = 0; i < listSize; i++) {
            User user = new User();

            user.setId(i);
            user.setName("John Doe");
            user.setEmail("john@doe.com");

            arrayList.add(user);
        }
        timings.put("ArrayList_Add", (System.currentTimeMillis() - timer));

        timer = System.currentTimeMillis();
        for(int i = 0; i < listSize; i++) {
            User u = arrayList.get(i);
        }
        timings.put("ArrayList_Get", (System.currentTimeMillis() - timer));


        // RealmList

        System.out.println("################################ Testing new interface");

        Realm.setDefaultDurability(SharedGroup.Durability.FULL);
        Realm realm = null;
        try {
            realm = new Realm(getContext().getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        realm.clear();

        timer = System.currentTimeMillis();
        try {
            realm.beginWrite();
            for(int i = 0; i < listSize; i++) {
                User user = realm.create(User.class);

                user.setId(i);
                user.setName("John Doe"+(i/3));
                user.setEmail("john@doe.com");
           }
            realm.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            fail();
        }

        timings.put("RealmList_Add", (System.currentTimeMillis() - timer));

        timer = System.currentTimeMillis();
        RealmList<User> realmList = realm.where(User.class).findAll();
        for(int i = 0; i < listSize; i++) {
            User u = realmList.get(i);

            int id = u.getId();
            String name = u.getName();
            String email = u.getEmail();

//            if (id != i)
//            {
//                fail("read does not match write (id)");
//            }
//            if (("John Doe"+(i/3)).compareTo(name) != 0)
//            {
//                fail("read does not match write (name)");
//            }


        }
        timings.put("RealmList_Get", (System.currentTimeMillis() - timer));


        System.out.println("################################ Testing raw");

        realm.clear();
        realm = null;

        timer = System.currentTimeMillis();
        String filePath = new File(getContext().getFilesDir(),  "default.realm").getAbsolutePath();
        try {

            SharedGroup sg = new SharedGroup(filePath,  SharedGroup.Durability.FULL);
            ImplicitTransaction transaction = sg.beginImplicitTransaction();
            transaction.promoteToWrite();
            Table table = transaction.getTable("User");
            table.addColumn(ColumnType.INTEGER, "id");
            table.addColumn(ColumnType.STRING, "user");
            table.addColumn(ColumnType.STRING, "email");

            table = transaction.getTable("User");

            for(int i = 0; i < listSize; i++) {
                Row row = table.getRow(table.addEmptyRow());
                row.setLong(0,i);
                row.setString(1,"John Doe"+(i/3));
                row.setString(2,"john@doe.com");
            }
            transaction.commitAndContinueAsRead();


            timings.put("RealmList_RawW", (System.currentTimeMillis() - timer));

            timer = System.currentTimeMillis();

            TableOrView dataStore =  transaction.getTable("User");
            TableQuery query = dataStore.where();
            TableView tv = query.findAll();

            for(int i = 0; i < listSize; i++) {
                long v = tv.getLong(0,i);
                String s1 = tv.getString(1,i);
                String s2 = tv.getString(2,i);
            }
            } catch(Throwable t) {
            t.printStackTrace();
            fail();
        }
        timings.put("RealmList_RawG", (System.currentTimeMillis() - timer));

        // TightDB dyn

        System.out.println("################################ Testing dynamic interface");

        SharedGroup sg = new SharedGroup(this.getContext().getFilesDir().getPath()+"/perfTest.tightdb");

        WriteTransaction wt = sg.beginWrite();
        try {
            if (!wt.hasTable("test")) {
                System.out.println("Creating new table");
                Table users = wt.getTable("test");
                users.addColumn(ColumnType.INTEGER, "id");
                users.addColumn(ColumnType.STRING, "name");
                users.addColumn(ColumnType.STRING, "email");
            }
            wt.getTable("test").clear();
            wt.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            wt.rollback();
        }

        timer = System.currentTimeMillis();
        wt = sg.beginWrite();
        try {
            Table users = wt.getTable("test");
            for (int i = 0; i < listSize; i++) {
                User user = new User();

                user.setId(i);
                user.setName("John Doe");
                user.setEmail("john@doe.com");
                users.add(user.getId(), user.getName(), user.getEmail());
            }
            wt.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            wt.rollback();
        }

        timings.put("TightDB_Add", (System.currentTimeMillis() - timer));
        timer = System.currentTimeMillis();

        ReadTransaction rt = sg.beginRead();
        Table users = rt.getTable("test");
        for(int i = 0; i < listSize; i++) {
            User u = new User();
            u.setId(((Long)users.getLong(0, i)).intValue());
            u.setName(users.getString(1, i));
            u.setEmail(users.getString(2, i));
        }
        rt.endRead();
        timings.put("TightDB_Get", (System.currentTimeMillis() - timer));


        // SQLite

        System.out.println("################################ Testing SQLite");

        SQLiteOpenHelper sqLiteOpenHelper = new SQLiteHelper(getContext());
        SQLiteDatabase database = sqLiteOpenHelper.getWritableDatabase();

        database.execSQL("DELETE FROM t1 WHERE 1=1");

        timer = System.currentTimeMillis();


        SQLiteStatement stmt = database.compileStatement("INSERT INTO t1 VALUES(?1, ?2, ?3)");
        database.beginTransaction();
        for (int i = 0; i < listSize; ++i) {
            stmt.clearBindings();
            stmt.bindLong(1, i);
            stmt.bindString(2, "John Doe");
            stmt.bindString(3, "john@doe.com");
            stmt.executeInsert();
        }
        database.setTransactionSuccessful();
        database.endTransaction();
        stmt.close();

        timings.put("SQLite_Add", (System.currentTimeMillis() - timer));
        timer = System.currentTimeMillis();


        Cursor cursor = database.rawQuery(
                String.format("SELECT * FROM t1"),
                null);
        int i = 0;
        if(cursor.moveToFirst()) {
            do {
                User user = new User();
                user.setId(cursor.getInt(0));
                user.setName(cursor.getString(1));
                user.setEmail(cursor.getString(2));
                i++;
            } while(cursor.moveToNext());
        }

        timings.put("SQLite_Get", (System.currentTimeMillis() - timer));
        System.out.println("SQL ROWS " + i);

        // Output results
        System.out.println("New Interface:");
        System.out.println("Add: " + timings.get("RealmList_Add")+" ms");
        System.out.println("Get: " + timings.get("RealmList_Get")+" ms");

        // Output results
        System.out.println("RAW Interface:");
        System.out.println("Add: " + timings.get("RealmList_RawW")+" ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("RealmList_RawW").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("RealmList_RawG")+" ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("RealmList_RawG").doubleValue()) + ")");

        System.out.println("Old Dyn Interface:");
        System.out.println("Add: " + timings.get("TightDB_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("TightDB_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("TightDB_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("TightDB_Get").doubleValue()) + ")");

        System.out.println("ArrayList Interface:");
        System.out.println("Add: " + timings.get("ArrayList_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("ArrayList_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("ArrayList_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("ArrayList_Get").doubleValue()) + ")");

        System.out.println("SQLite:");
        System.out.println("Add: " + timings.get("SQLite_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("SQLite_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("SQLite_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("SQLite_Get").doubleValue()) + ")");

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279732/fstmerge_base_6242948556758670103
public void testPerformance() {

        final int listSize = 10000;
        long timer;
        Map<String, Long> timings = new HashMap<String, Long>();

        // ArrayList

        System.out.println("################################ Testing ArrayList");

        List<User> arrayList = new ArrayList<User>(listSize);

        timer = System.currentTimeMillis();
        for(int i = 0; i < listSize; i++) {
            User user = new User();

            user.setId(i);
            user.setName("John Doe");
            user.setEmail("john@doe.com");

            arrayList.add(user);
        }
        timings.put("ArrayList_Add", (System.currentTimeMillis() - timer));

        timer = System.currentTimeMillis();
        for(int i = 0; i < listSize; i++) {
            User u = arrayList.get(i);
        }
        timings.put("ArrayList_Get", (System.currentTimeMillis() - timer));


        // RealmList

        System.out.println("################################ Testing new interface");

        Realm.setDefaultDurability(SharedGroup.Durability.FULL);
        Realm realm = null;
        try {
            realm = new Realm(getContext().getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        realm.clear();

        timer = System.currentTimeMillis();
        try {
            realm.beginWrite();
            for(int i = 0; i < listSize; i++) {
                User user = realm.create(User.class);

                user.setId(i);
                user.setName("John Doe");
                user.setEmail("john@doe.com");

               // realm.add(user);

            }
            realm.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            fail();
        }

        timings.put("RealmList_Add", (System.currentTimeMillis() - timer));

        timer = System.currentTimeMillis();
        RealmList<User> realmList = realm.where(User.class).findAll();
        for(int i = 0; i < listSize; i++) {
            // IUser u = realmList.getTest(i, IUser.class);
            User u = realmList.get(i);
     //       System.out.println(u.getId());

            u.getId();
            u.getName();
            u.getEmail();

        }
        timings.put("RealmList_Get", (System.currentTimeMillis() - timer));


        // TightDB dyn

        System.out.println("################################ Testing dynamic interface");

        SharedGroup sg = new SharedGroup(this.getContext().getFilesDir().getPath()+"/perfTest.tightdb");

        WriteTransaction wt = sg.beginWrite();
        try {
            if (!wt.hasTable("test")) {
                System.out.println("Creating new table");
                Table users = wt.getTable("test");
                users.addColumn(ColumnType.INTEGER, "id");
                users.addColumn(ColumnType.STRING, "name");
                users.addColumn(ColumnType.STRING, "email");
            }
            wt.getTable("test").clear();
            wt.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            wt.rollback();
        }

        timer = System.currentTimeMillis();
        wt = sg.beginWrite();
        try {
            Table users = wt.getTable("test");
            for (int i = 0; i < listSize; i++) {
                User user = new User();

                user.setId(i);
                user.setName("John Doe");
                user.setEmail("john@doe.com");
                users.add(user.getId(), user.getName(), user.getEmail());
            }
            wt.commit();
        } catch(Throwable t) {
            t.printStackTrace();
            wt.rollback();
        }

        timings.put("TightDB_Add", (System.currentTimeMillis() - timer));
        timer = System.currentTimeMillis();

        ReadTransaction rt = sg.beginRead();
        Table users = rt.getTable("test");
        for(int i = 0; i < listSize; i++) {
            User u = new User();
            u.setId(((Long)users.getLong(0, i)).intValue());
            u.setName(users.getString(1, i));
            u.setEmail(users.getString(2, i));
        }
        rt.endRead();
        timings.put("TightDB_Get", (System.currentTimeMillis() - timer));


        // SQLite

        System.out.println("################################ Testing SQLite");

        SQLiteOpenHelper sqLiteOpenHelper = new SQLiteHelper(getContext());
        SQLiteDatabase database = sqLiteOpenHelper.getWritableDatabase();

        database.execSQL("DELETE FROM t1 WHERE 1=1");

        timer = System.currentTimeMillis();


        SQLiteStatement stmt = database.compileStatement("INSERT INTO t1 VALUES(?1, ?2, ?3)");
        database.beginTransaction();
        for (int i = 0; i < listSize; ++i) {
            stmt.clearBindings();
            stmt.bindLong(1, i);
            stmt.bindString(2, "John Doe");
            stmt.bindString(3, "john@doe.com");
            stmt.executeInsert();
        }
        database.setTransactionSuccessful();
        database.endTransaction();
        stmt.close();

        timings.put("SQLite_Add", (System.currentTimeMillis() - timer));
        timer = System.currentTimeMillis();


        Cursor cursor = database.rawQuery(
                String.format("SELECT * FROM t1"),
                null);
        int i = 0;
        if(cursor.moveToFirst()) {
            do {
                User user = new User();
                user.setId(cursor.getInt(0));
                user.setName(cursor.getString(1));
                user.setEmail(cursor.getString(2));
                i++;
            } while(cursor.moveToNext());
        }

        timings.put("SQLite_Get", (System.currentTimeMillis() - timer));
        System.out.println("SQL ROWS " + i);

        // Output results
        System.out.println("New Interface:");
        System.out.println("Add: " + timings.get("RealmList_Add")+" ms");
        System.out.println("Get: " + timings.get("RealmList_Get")+" ms");

        System.out.println("Old Dyn Interface:");
        System.out.println("Add: " + timings.get("TightDB_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("TightDB_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("TightDB_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("TightDB_Get").doubleValue()) + ")");

        System.out.println("ArrayList Interface:");
        System.out.println("Add: " + timings.get("ArrayList_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("ArrayList_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("ArrayList_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("ArrayList_Get").doubleValue()) + ")");

        System.out.println("SQLite:");
        System.out.println("Add: " + timings.get("SQLite_Add") + " ms\t\t(x" + (timings.get("RealmList_Add").doubleValue() / timings.get("SQLite_Add").doubleValue()) + ")");
        System.out.println("Get: " + timings.get("SQLite_Get") + " ms\t\t(x" + (timings.get("RealmList_Get").doubleValue() / timings.get("SQLite_Get").doubleValue()) + ")");

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279732/fstmerge_var2_1111206039981242046

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/performance/PerformanceTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279757/fstmerge_var1_588228720316627341
public void addObjectsToRealm() {
        realm.beginWrite();

        for(int i = 0; i < 10; i++) {
            AllColumns allColumns = realm.create(AllColumns.class);

            allColumns.setColumnString("dsfs");
            allColumns.setColumnLong(i);
            allColumns.setColumnFloat(1.1F);
            allColumns.setColumnDouble(1.1);
            allColumns.setColumnBoolean(true);
            allColumns.setColumnDate(new Date());
            allColumns.setColumnBinary(new byte[20]);

            User user = realm.create(User.class);
            user.setId(i);
            user.setName("Test User");
            user.setEmail("user@test.com");

            allColumns.setColumnRealmObject(user);
        }

        realm.commit();

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279757/fstmerge_base_8136908381123699401
public void addObjectsToRealm() {
        realm.beginWrite();

        for(int i = 0; i < 10; i++) {
            AllColumns allColumns = new AllColumns();

            allColumns.setColumnString("dsfs");
            allColumns.setColumnLong(i);
            allColumns.setColumnFloat(1.1F);
            allColumns.setColumnDouble(1.1);
            allColumns.setColumnBoolean(true);
            allColumns.setColumnDate(new Date());
            allColumns.setColumnBinary(new byte[20]);

            User user = new User();
            user.setId(i);
            user.setName("Test User");
            user.setEmail("user@test.com");

            allColumns.setColumnRealmObject(user);

            realm.add(allColumns);
        }

        realm.commit();

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279757/fstmerge_var2_1658673422049954996

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmListTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279762/fstmerge_var1_8183557509791252023
public void testAddObject() {

        realm.beginWrite();

        AllColumns allColumns = realm.create(AllColumns.class);

        allColumns.setColumnString("dsfs");
        allColumns.setColumnLong(1);
        allColumns.setColumnFloat(1.1F);
        allColumns.setColumnDouble(1.1);
        allColumns.setColumnBoolean(true);
        allColumns.setColumnDate(new Date());
        allColumns.setColumnBinary(new byte[20]);


        RealmTableOrViewList<AllColumns> list = realm.allObjects(AllColumns.class);
        assertEquals(1, list.size());

        try {
            realm.commit();

        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
        }

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279762/fstmerge_base_541052075666818811
public void testAddObject() {

        AllColumns allColumns = new AllColumns();

        allColumns.setColumnString("dsfs");
        allColumns.setColumnLong(1);
        allColumns.setColumnFloat(1.1F);
        allColumns.setColumnDouble(1.1);
        allColumns.setColumnBoolean(true);
        allColumns.setColumnDate(new Date());
        allColumns.setColumnBinary(new byte[20]);


        realm.beginWrite();

        RealmTableOrViewList<AllColumns> list = realm.allObjects(AllColumns.class);

        assertEquals(0, list.size());

        try {
            list.add(allColumns);
            fail("Should throw UnsupportedOperationException");
            realm.commit();

        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
        }

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279762/fstmerge_var2_7516129802719897034

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmListTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279820/fstmerge_var1_7400861076521644522
public void testAdd() {

        realm.beginWrite();

        AllColumns obj = realm.create(AllColumns.class);

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        obj.setColumnBinary(new byte[20]);

        User user = realm.create(User.class);
        user.setName("Rasmus");
        user.setEmail("ra@realm.io");
        user.setId(0);

        realm.commit();

        assertEquals(1, realm.allObjects(AllColumns.class).size());
        assertEquals(1, realm.allObjects(User.class).size());

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279820/fstmerge_base_4036320872431481959
public void testAdd() {

        realm.beginWrite();

        AllColumns obj = new AllColumns();

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        obj.setColumnBinary(new byte[20]);

        User user = new User();
        user.setName("Rasmus");
        user.setEmail("ra@realm.io");
        user.setId(0);

        obj.setColumnRealmObject(user);

        realm.add(obj);


        realm.commit();

        assertEquals(1, realm.allObjects(AllColumns.class).size());
        assertEquals(1, realm.allObjects(User.class).size());

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279820/fstmerge_var2_8729791926788051501

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279825/fstmerge_var1_3300238923613115138
public void testLinkList() {
        realm.beginWrite();

        User user1 = realm.create(User.class);
        user1.setName("Rasmus");
        user1.setEmail("ra@realm.io");
        user1.setId(0);

        User user2 = realm.create(User.class);
        user2.setName("Morten");
        user2.setEmail("mk@realm.io");
        user2.setId(1);

        RealmList<User> users = new RealmArrayList<User>();
        users.add(user1);
        users.add(user2);

        assertEquals(false, realm.contains(Dog.class));
        assertEquals(false, realm.contains(User.class));

        //realm.beginWrite();

        Dog dog = realm.create(Dog.class);
        dog.setName("Fido");
        dog.setOwners(users);

        realm.commit();

        Dog fido = realm.allObjects(Dog.class).first();

        assertEquals("Fido", fido.getName());

        RealmList<User> owners = fido.getOwners();

        assertEquals("Rasmus", owners.get(0).getName());




        assertEquals(1, realm.allObjects(Dog.class).size());
        assertEquals(2, realm.allObjects(User.class).size());


        realm.beginWrite();
        Dog vuf = realm.create(Dog.class);
        vuf.setName("Vuf");
        vuf.getOwners().add(user1);

        realm.commit();

        assertEquals(2, realm.allObjects(Dog.class).size());
        assertEquals(2, realm.allObjects(User.class).size());

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279825/fstmerge_base_3928678624266404013
public void testLinkList() {

        User user1 = new User();
        user1.setName("Rasmus");
        user1.setEmail("ra@realm.io");
        user1.setId(0);

        User user2 = new User();
        user2.setName("Morten");
        user2.setEmail("mk@realm.io");
        user2.setId(1);

        RealmList<User> users = new RealmArrayList<User>();
        users.add(user1);
        users.add(user2);

        assertEquals(false, realm.contains(Dog.class));
        assertEquals(false, realm.contains(User.class));

        realm.beginWrite();

        Dog dog = realm.create(Dog.class);
        dog.setName("Fido");
        dog.setOwners(users);

        realm.commit();

        Dog fido = realm.allObjects(Dog.class).first();

        assertEquals("Fido", fido.getName());

        RealmList<User> owners = fido.getOwners();

        assertEquals("Rasmus", owners.get(0).getName());




        assertEquals(1, realm.allObjects(Dog.class).size());
        assertEquals(2, realm.allObjects(User.class).size());


        Dog vuf = new Dog();
        vuf.setName("Vuf");
        vuf.getOwners().add(user1);

        realm.beginWrite();
        realm.add(vuf);
        realm.commit();

        assertEquals(2, realm.allObjects(Dog.class).size());
        assertEquals(2, realm.allObjects(User.class).size());

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279825/fstmerge_var2_4907431109395058751

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmTest.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/User.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/Dog.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279945/fstmerge_var1_5417420180031957317
public void testExample() {


        // Set & read properties

        // Realms are used to group data together
        Realm realm = null;
        try {
            realm = new Realm(getContext().getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        realm.beginWrite();
        // Create a standalone object
        Dog myDog = realm.create(Dog.class);
        myDog.setName("Rex");
        System.out.println(myDog.getName());

        // Save your object
        realm.commit();

        // Query
        RealmList<Dog> results = realm.where(Dog.class).contains("name", "x").findAll();

        // Queries are chainable!
        results.where().greaterThan("age", 8);

        // Link objects

        realm.beginWrite();

        Person person = realm.create(Person.class);

        person.setName("Tim");

        person.getDogs().add(myDog);

        realm.commit();

        // Query across links
       // RealmList<Person> persons = realm.where(Person.class).with("dogs").contains("name", "x").findAll();

        // Query from another thread
        new Thread() {
            public void run() {

                Realm realm = null;
                try {
                    realm = new Realm(getContext().getFilesDir());
                } catch (IOException e) {
                    e.printStackTrace();
                    return;
                }
                realm.where(Dog.class).contains("name", "x").findAll();

            }
        }.run();

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279945/fstmerge_base_4133012584396464620
public void testExample() {

        // Create a standalone object
        Dog myDog = new Dog();

        // Set & read properties
        myDog.setName("Rex");
        System.out.println(myDog.getName());

        // Realms are used to group data together
        Realm realm = null;
        try {
            realm = new Realm(getContext().getFilesDir());
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Save your object
        realm.beginWrite();
        realm.add(myDog);
        realm.commit();

        // Query
        RealmList<Dog> results = realm.where(Dog.class).contains("name", "x").findAll();

        // Queries are chainable!
        results.where().greaterThan("age", 8);

        // Link objects
        Person person = new Person("Tim");

        person.getDogs().add(myDog);

        realm.beginWrite();
        realm.add(person);
        realm.commit();

        // Query across links
       // RealmList<Person> persons = realm.where(Person.class).with("dogs").contains("name", "x").findAll();

        // Query from another thread
        new Thread() {
            public void run() {

                Realm realm = null;
                try {
                    realm = new Realm(getContext().getFilesDir());
                } catch (IOException e) {
                    e.printStackTrace();
                    return;
                }
                realm.where(Dog.class).contains("name", "x").findAll();

            }
        }.run();

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896279945/fstmerge_var2_7455366644105223645

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/RealmExample.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/Dog.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @RealmClass
public ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d61ae_ffe3f/rev_d61ae-ffe3f/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/Person.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e.revisions
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/example/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330098/fstmerge_var1_2445761399115043105
@Override
  public int getId() {
    return (int)row.getLong( index_id );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330098/fstmerge_base_8013161546405401226
public int getId()
    {
        return (int)row.getLong(idIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330098/fstmerge_var2_4481127877390747627

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/example/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330102/fstmerge_var1_6689848752855866834
@Override
  public void setId(int value) {
    row.setLong( index_id, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330102/fstmerge_base_6574255410921840209
public void setId(int value)
    {
        row.setLong(idIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330102/fstmerge_var2_7154849285624093235

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/example/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330107/fstmerge_var1_2464444190051695183
@Override
  public String getEmail() {
    return row.getString( index_email );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330107/fstmerge_base_4164707697951715276
public java.lang.String getEmail()
    {
        return row.getString(emailIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330107/fstmerge_var2_7082723725494249585

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/example/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330111/fstmerge_var1_3302088759161661892
@Override
  public String getName() {
    return row.getString( index_name );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330111/fstmerge_base_8593471251207170393
public java.lang.String getName()
    {
        return row.getString(nameIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330111/fstmerge_var2_3776265671956457356

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/example/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330746/fstmerge_var1_1297216908727106564
public <E extends RealmObject> E create(Class<E> classSpec) {
        Table table = null;
        try {
            String className = classSpec.getName() + "RealmProxy";
            Class cl = Class.forName(className);
            Method method = cl.getMethod("initTable", new Class[] {io.realm.ImplicitTransaction.class});
            table = (Table)method.invoke(null, new Object[] {transaction});
            long rowIndex = table.addEmptyRow();
            E obj = get(classSpec, rowIndex);
            obj.realmAddedAtRowIndex = rowIndex;
            return obj;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330746/fstmerge_base_7690015735341289372
public <E extends RealmObject> E create(Class<E> classSpec) {

        E obj = null;

        try {
            String className = classSpec.getName()+"RealmProxy";
            Class cl = Class.forName(className);
            Constructor con = cl.getConstructor();
            obj = (E)con.newInstance();


            initTable(obj);

            Table table = getTable(classSpec);

            long rowIndex = table.addEmptyRow();

            obj.realmAddedAtRowIndex = rowIndex;

            obj.row = transaction.getTable(classSpec.getSimpleName()).getRow(rowIndex);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

        return obj;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330746/fstmerge_var2_5640981628473583726

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/typed/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ protected Row row; ##FSTMerge## public Row row; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/main/java/io/realm/typed/RealmObject.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330878/fstmerge_var1_1644347682113629594
public void addObjectsToRealm() {
        realm.beginWrite();

        for(int i = 0; i < 10; i++) {
            AllColumns allColumns = realm.create(AllColumns.class);

            allColumns.setColumnString("dsfs");
            allColumns.setColumnLong(i);
            allColumns.setColumnFloat(1.1F);
            allColumns.setColumnDouble(1.1);
            allColumns.setColumnBoolean(true);
            allColumns.setColumnDate(new Date());
            //allColumns.setColumnBinary(new byte[20]);

            User user = realm.create(User.class);
            user.setId(i);
            user.setName("Test User");
            user.setEmail("user@test.com");

            //allColumns.setColumnRealmObject(user);
        }

        realm.commit();

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330878/fstmerge_base_1259982465492287430
public void addObjectsToRealm() {
        realm.beginWrite();

        for(int i = 0; i < 10; i++) {
            AllColumns allColumns = realm.create(AllColumns.class);

            allColumns.setColumnString("dsfs");
            allColumns.setColumnLong(i);
            allColumns.setColumnFloat(1.1F);
            allColumns.setColumnDouble(1.1);
            allColumns.setColumnBoolean(true);
            allColumns.setColumnDate(new Date());
            allColumns.setColumnBinary(new byte[20]);

            User user = realm.create(User.class);
            user.setId(i);
            user.setName("Test User");
            user.setEmail("user@test.com");

            allColumns.setColumnRealmObject(user);
        }

        realm.commit();

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330878/fstmerge_var2_6846565676758480108

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmListTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330883/fstmerge_var1_8045552396190102035
public void testAddObject() {

        realm.beginWrite();

        AllColumns allColumns = realm.create(AllColumns.class);

        allColumns.setColumnString("dsfs");
        allColumns.setColumnLong(1);
        allColumns.setColumnFloat(1.1F);
        allColumns.setColumnDouble(1.1);
        allColumns.setColumnBoolean(true);
        allColumns.setColumnDate(new Date());
        //allColumns.setColumnBinary(new byte[20]);


        RealmTableOrViewList<AllColumns> list = realm.allObjects(AllColumns.class);
        assertEquals(1, list.size());

        try {
            realm.commit();

        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
        }

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330883/fstmerge_base_2635099949195152859
public void testAddObject() {

        realm.beginWrite();

        AllColumns allColumns = realm.create(AllColumns.class);

        allColumns.setColumnString("dsfs");
        allColumns.setColumnLong(1);
        allColumns.setColumnFloat(1.1F);
        allColumns.setColumnDouble(1.1);
        allColumns.setColumnBoolean(true);
        allColumns.setColumnDate(new Date());
        allColumns.setColumnBinary(new byte[20]);


        RealmTableOrViewList<AllColumns> list = realm.allObjects(AllColumns.class);
        assertEquals(1, list.size());

        try {
            realm.commit();

        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
        }

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330883/fstmerge_var2_4004805481423698304

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmListTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330926/fstmerge_var1_811668449960683361
public void testCreate() {

        realm.beginWrite();

        AllColumns obj = realm.create(AllColumns.class);

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        //obj.setColumnBinary(new byte[20]);

        realm.commit();

        RealmList<AllColumns> result = realm.where(AllColumns.class).findAll();

        assertEquals(1, result.size());

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330926/fstmerge_base_1795434476337861274
public void testCreate() {

        realm.beginWrite();

        AllColumns obj = realm.create(AllColumns.class);

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        obj.setColumnBinary(new byte[20]);

        realm.commit();

        RealmList<AllColumns> result = realm.where(AllColumns.class).findAll();

        assertEquals(1, result.size());

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330926/fstmerge_var2_4283403253556505908

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmTest.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330931/fstmerge_var1_5315986131312304108
public void testAdd() {

        realm.beginWrite();

        AllColumns obj = realm.create(AllColumns.class);

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        //obj.setColumnBinary(new byte[20]);

        User user = realm.create(User.class);
        user.setName("Rasmus");
        user.setEmail("ra@realm.io");
        user.setId(0);

        realm.commit();

        assertEquals(1, realm.allObjects(AllColumns.class).size());
        assertEquals(1, realm.allObjects(User.class).size());

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330931/fstmerge_base_9188334886958217509
public void testAdd() {

        realm.beginWrite();

        AllColumns obj = realm.create(AllColumns.class);

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        obj.setColumnBinary(new byte[20]);

        User user = realm.create(User.class);
        user.setName("Rasmus");
        user.setEmail("ra@realm.io");
        user.setId(0);

        realm.commit();

        assertEquals(1, realm.allObjects(AllColumns.class).size());
        assertEquals(1, realm.allObjects(User.class).size());

    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330931/fstmerge_var2_6166065032544374462

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/RealmTest.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ @io.realm.base.RealmClass
public ##FSTMerge## @RealmClass
public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330975/fstmerge_var1_1045555885395020400
public void setColumnString(String value) {
        columnString = value;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330975/fstmerge_base_2438476661825241412
public void setColumnString(String columnString) {
        this.columnString = columnString;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330975/fstmerge_var2_785075638165980605

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330984/fstmerge_var1_1155947797959469223
public void setColumnLong(long value) {
        columnLong = value;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330984/fstmerge_base_6504099006406255264
public void setColumnLong(long columnLong) {
        this.columnLong = columnLong;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330984/fstmerge_var2_4084030646022179383

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330993/fstmerge_var1_2644170888640585758
public void setColumnFloat(float value) {
        columnFloat = value;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330993/fstmerge_base_2639169088420289200
public void setColumnFloat(float columnFloat) {
        this.columnFloat = columnFloat;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896330993/fstmerge_var2_8279393697035719246

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331002/fstmerge_var1_3111564689985104690
public void setColumnDouble(double value) {
        columnDouble = value;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331002/fstmerge_base_4232098813927559462
public void setColumnDouble(double columnDouble) {
        this.columnDouble = columnDouble;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331002/fstmerge_var2_411971066537068283

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331007/fstmerge_var1_8802510794936836118
public void setColumnBoolean(boolean value) {
        columnBoolean = value;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331007/fstmerge_base_8805199226702019289
public void setColumnBoolean(boolean columnBoolean) {
        this.columnBoolean = columnBoolean;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331007/fstmerge_var2_1456276255973154417

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331011/fstmerge_var1_9107587441479352713
public java.util.Date getColumnDate() {
        return columnDate;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331011/fstmerge_base_425408078895210538
public Date getColumnDate() {
        return columnDate;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331011/fstmerge_var2_2038574510086908494

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumns.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331016/fstmerge_var1_3269328403548082579
@Override
  public java.util.Date getColumnDate() {
    return row.getDate( index_columnDate );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331016/fstmerge_base_6729213171447623628
public java.util.Date getColumnDate()
    {
        return row.getDate(columnDateIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331016/fstmerge_var2_8636532244917859210

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331020/fstmerge_var1_7112731304467079874
@Override
  public void setColumnDate(java.util.Date value) {
    row.setDate( index_columnDate, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331020/fstmerge_base_6185037248198492881
public void setColumnDate(java.util.Date value)
    {
        row.setDate(columnDateIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331020/fstmerge_var2_2026426373403475977

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331024/fstmerge_var1_5618616693095352133
@Override
  public double getColumnDouble() {
    return row.getDouble( index_columnDouble );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331024/fstmerge_base_5745429550673096932
public double getColumnDouble()
    {
        return row.getDouble(columnDoubleIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331024/fstmerge_var2_1718310573723439633

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331029/fstmerge_var1_3005209176115362256
@Override
  public void setColumnDouble(double value) {
    row.setDouble( index_columnDouble, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331029/fstmerge_base_2329806891242938050
public void setColumnDouble(double value)
    {
        row.setDouble(columnDoubleIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331029/fstmerge_var2_273409196594619035

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331034/fstmerge_var1_8777888312415009646
@Override
  public boolean getColumnBoolean() {
    return row.getBoolean( index_columnBoolean );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331034/fstmerge_base_8840727820746420782
public boolean getColumnBoolean()
    {
        return row.getBoolean(columnBooleanIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331034/fstmerge_var2_4537893578398702659

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331039/fstmerge_var1_6483938623732693887
@Override
  public void setColumnBoolean(boolean value) {
    row.setBoolean( index_columnBoolean, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331039/fstmerge_base_6500165926928258015
public void setColumnBoolean(boolean value)
    {
        row.setBoolean(columnBooleanIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331039/fstmerge_var2_3787209811803938393

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331043/fstmerge_var1_2719255890207996818
@Override
  public String getColumnString() {
    return row.getString( index_columnString );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331043/fstmerge_base_136115663686214820
public java.lang.String getColumnString()
    {
        return row.getString(columnStringIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331043/fstmerge_var2_6088726565478692191

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331048/fstmerge_var1_2396239522805962136
@Override
  public float getColumnFloat() {
    return row.getFloat( index_columnFloat );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331048/fstmerge_base_669267667287508891
public float getColumnFloat()
    {
        return row.getFloat(columnFloatIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331048/fstmerge_var2_4913734207291601026

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331052/fstmerge_var1_7554636937673504416
@Override
  public void setColumnFloat(float value) {
    row.setFloat( index_columnFloat, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331052/fstmerge_base_3866197162085636928
public void setColumnFloat(float value)
    {
        row.setFloat(columnFloatIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331052/fstmerge_var2_988601066868261089

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/AllColumnsRealmProxy.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331074/fstmerge_var1_503386175268672372
@Override
  public int getId() {
    return (int)row.getLong( index_id );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331074/fstmerge_base_691652022379241635
public int getId()
    {
        return (int)row.getLong(idIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331074/fstmerge_var2_1496965999798920556

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331079/fstmerge_var1_876493788921845315
@Override
  public void setId(int value) {
    row.setLong( index_id, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331079/fstmerge_base_7146420077737625170
public void setId(int value)
    {
        row.setLong(idIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331079/fstmerge_var2_8817258937338636387

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331083/fstmerge_var1_2372542374247107902
@Override
  public String getEmail() {
    return row.getString( index_email );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331083/fstmerge_base_5329046934820205036
public java.lang.String getEmail()
    {
        return row.getString(emailIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331083/fstmerge_var2_2388962603618088258

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/UserRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331088/fstmerge_var1_3665065625062531530
@Override
  public String getName() {
    return row.getString( index_name );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331088/fstmerge_base_448487129332887741
public java.lang.String getName()
    {
        return row.getString(nameIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331088/fstmerge_var2_4261520760978503952

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/UserRealmProxy.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/DogRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331092/fstmerge_var1_6076920152699512767
@Override
  public String getName() {
    return row.getString( index_name );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331092/fstmerge_base_6446262665062628261
public java.lang.String getName()
    {
        return row.getString(nameIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331092/fstmerge_var2_8740102012862078015

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/typed/entities/DogRealmProxy.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/PersonRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331119/fstmerge_var1_3130007604082640611
@Override
  public String getName() {
    return row.getString( index_name );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331119/fstmerge_base_197623668640626545
public java.lang.String getName()
    {
        return row.getString(nameIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331119/fstmerge_var2_1146204452389905292

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/PersonRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ public RealmList<Dog> dogs = new RealmArrayList<Dog>(); ##FSTMerge## private RealmList<Dog> dogs = new RealmArrayList<Dog>(); ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/Person.java
Conflict type: ModifierList
Conflict body: 
~~FSTMerge~~ public final ##FSTMerge## public ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/DogRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331141/fstmerge_var1_5370572123078426695
@Override
  public String getName() {
    return row.getString( index_name );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331141/fstmerge_base_7888786036274269376
public java.lang.String getName()
    {
        return row.getString(nameIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331141/fstmerge_var2_3891323079249631624

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/DogRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331146/fstmerge_var1_240771065210256179
@Override
  public int getAge() {
    return (int)row.getLong( index_age );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331146/fstmerge_base_6276685192069546087
public int getAge()
    {
        return (int)row.getLong(ageIndex);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331146/fstmerge_var2_5425621153752938150

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/DogRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331150/fstmerge_var1_534481415023104877
@Override
  public void setAge(int value) {
    row.setLong( index_age, value );
  }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331150/fstmerge_base_8850112751437070449
public void setAge(int value)
    {
        row.setLong(ageIndex, value);
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331150/fstmerge_var2_4153223503376336493

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/RealmAndroid/lib/src/androidTest/java/io/realm/tests/examples/entities/DogRealmProxy.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331654/fstmerge_var1_6126242681639779767
@Override
	    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

	        for (Element classElement : roundEnv.getElementsAnnotatedWith(Ignore.class)) {
	            // Check the annotation was applied to a FIELD
	            if (!classElement.getKind().equals(ElementKind.FIELD)) {
	                error("The Ignore annotation can only be applied to Fields");
	                return false;
	            }
	            if (!codeGenerator.add_Ignore(classElement.getSimpleName().toString()))
	            {
	            	error(codeGenerator.getError());
	            	return false;
	            }
	        }

		   for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
	            // Check the annotation was applied to a Class
	            if (!classElement.getKind().equals(ElementKind.CLASS)) {
	                error("The RealmClass annotation can only be applied to classes");
	                return false;
	            }
	            TypeElement typeElement = (TypeElement) classElement;
	            
	            // Get the package of the class
	            Element enclosingElement = typeElement.getEnclosingElement();
	            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
	                error("The RealmClass annotation does not support nested classes");
	                return false;
	            }

	            try 
	            {
	            	PackageElement packageElement = (PackageElement) enclosingElement;
	            	String qName = packageElement.getQualifiedName().toString();
	            	
	            	if (qName != null)
	            	{
	            		String qualifiedClassName = qName + "."+classElement.getSimpleName()+"RealmProxy";
	            		qualifiedClassName = qualifiedClassName.replace(".", "/");

	            		JavaFileObject jfo = processingEnv.getFiler().createSourceFile(qualifiedClassName);
			            codeGenerator.setBufferedWriter(new BufferedWriter(jfo.openWriter()));

			            if (!codeGenerator.setPackageName(qName))
	    	            {
	    	            	error(codeGenerator.getError());
	    	            	return false;
	    	            }

	    	            if (!codeGenerator.setClassName(classElement.getSimpleName().toString()))
	    	            {
	    	            	error(codeGenerator.getError());
	    	            	return false;
	    	            }

			            for (Element element : typeElement.getEnclosedElements()) {
			                if (element.getKind().equals(ElementKind.FIELD)) 
			                {
			                	String elementName = element.getSimpleName().toString();
			                	VariableElement varElem = (VariableElement)element;
			                	
			                	Set<Modifier> modifiers = varElem.getModifiers();
			                	
			                	for (Iterator<Modifier> m = modifiers.iterator();m.hasNext();)
			                	{
			                		Modifier modifier = m.next();
			                		if (modifier == Modifier.PRIVATE)
			                		{
			    	    	            if (!codeGenerator.setField(elementName, varElem))
			    	    	            {
			    	    	            	error(codeGenerator.getError());
			    	    	            	return false;
			    	    	            }
			                		}
			                	}			                    
			                }
			            }
	    	            if (!codeGenerator.generate())
	    	            {
	    	            	error(codeGenerator.getError());
	    	            	return false;
	    	            }
	            	}
	            }
	            catch (IOException ex)
	            {
	            	error("Unable to write file: "+ex.getMessage());
	            }
	        }
	        
	        return true;
	    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331654/fstmerge_base_8332888546717427912
@Override
	    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

	        for (Element classElement : roundEnv.getElementsAnnotatedWith(Ignore.class)) {
	            // Check the annotation was applied to a FIELD
	            if (!classElement.getKind().equals(ElementKind.FIELD)) {
	                error("The Ignore annotation can only be applied to Fields");
	                return false;
	            }
	            codeGenerator.add_Ignore(classElement.getSimpleName().toString());  
	            
	        }

		   
		   
		   for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
	            // Check the annotation was applied to a Class
	            if (!classElement.getKind().equals(ElementKind.CLASS)) {
	                error("The RealmClass annotation can only be applied to classes");
	                return false;
	            }
	            TypeElement typeElement = (TypeElement) classElement;
	            
	            // Get the package of the class
	            Element enclosingElement = typeElement.getEnclosingElement();
	            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
	                error("The RealmClass annotation does not support nested classes");
	                return false;
	            }

	            try 
	            {
	            	PackageElement packageElement = (PackageElement) enclosingElement;
	            	String qName = packageElement.getQualifiedName().toString();
	            	
	            	if (qName != null)
	            	{
	            		String qualifiedClassName = qName + "."+classElement.getSimpleName()+"RealmProxy";
	            		qualifiedClassName = qualifiedClassName.replace(".", "/");
	            		
	            		codeGenerator.set_packageName(qName);
	            		codeGenerator.set_className(classElement.getSimpleName().toString());
	            		
	            		JavaFileObject jfo = processingEnv.getFiler().createSourceFile(qualifiedClassName);
			            
			            BufferedWriter bw = new BufferedWriter(jfo.openWriter());
			            codeGenerator.setBufferedWriter(bw);
			            
			            for (Element element : typeElement.getEnclosedElements()) {
			                if (element.getKind().equals(ElementKind.FIELD)) {
			                	String elementName = element.getSimpleName().toString();
			                	VariableElement varElem = (VariableElement)element;
			                	
			                	Set<Modifier> modifiers = varElem.getModifiers();
			                	
			                	for (Iterator<Modifier> m = modifiers.iterator();m.hasNext();)
			                	{
			                		Modifier modifier = m.next();
			                		if (modifier == Modifier.PRIVATE)
			                		{
			                			codeGenerator.add_Field(elementName, varElem);
			                		}
			                	}			                    
			                }
			            }
			            
			            codeGenerator.generate();
			            bw.flush();
			            bw.close();
	            	}
	            }
	            catch (Exception ex)
	            {
	            	error("Unable to write file: "+ex.getMessage());
	            }
	        }
	        
	        return true;
	    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331654/fstmerge_var2_7408166440295734074

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/realm-java-annotator/src/main/java/io/realm/processor/RealmProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private Set<String> ignoreFields = new HashSet<String>(); ##FSTMerge## private HashSet<String> ignoreFields = new HashSet<String>(); ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/realm-java-annotator/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331663/fstmerge_var1_1760454045352193539
public void setBufferedWriter(BufferedWriter bw) 
	{
		writer = new JavaWriter(bw);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331663/fstmerge_base_5019671344527729249
public void setBufferedWriter(BufferedWriter bw) 
	{
		_bw = bw;
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331663/fstmerge_var2_3859120402402957960

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/realm-java-annotator/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331668/fstmerge_var1_9139444701084701897
public boolean add_Ignore(String symbolName) 
	{
		ignoreFields.add(symbolName);		
		return true;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331668/fstmerge_base_4269957282320372878
public void add_Ignore(String symbolName) 
	{
		ignoreFields.add(symbolName);
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331668/fstmerge_var2_6879610021184001112

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/realm-java-annotator/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331672/fstmerge_var1_7268435512405958350
public boolean generate() throws IOException
	{
		if (!checkState(GeneratorStates.METHODS)) return false;

		writer.beginMethod("Table", "initTable", EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),
				"io.realm.ImplicitTransaction", "transaction").
				beginControlFlow("if(!transaction.hasTable(\""+this.className+"\"))").
				emitStatement("Table table = transaction.getTable(\""+this.className+"\")");

		for (int index=0;index<fields.size();++index)
		{
			FieldInfo field = fields.get(index);
			String fieldName = field.name.substring("index_".length());
			writer.emitStatement(field.name+"  = "+Integer.toString(index));
			writer.emitStatement("table.addColumn( %s, \"%s\" )", field.columnType, fieldName.toLowerCase(Locale.getDefault()));
		}
		
		writer.emitStatement("return table");
		writer.endControlFlow();
		writer.emitStatement("return transaction.getTable(\""+this.className+"\")");
		writer.endMethod().emitEmptyLine();

		writer.endType();
		writer.close();
		
		ignoreFields.clear();
		fields.clear();

		generatorState = GeneratorStates.PACKAGE;
		return true;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331672/fstmerge_base_5692510726468352162
public boolean generate() throws Exception
	{
		_bw.append(generateFragment(_codeHeader));
		
		Set<String> keys = _methods.keySet();
		Iterator<String> it = keys.iterator();
		String _fieldTable = "";
		String _typeTable = "";
		
		int fieldIndex = 0;

		while (it.hasNext())
		{
			String k = it.next();
			
			
			if (ignoreFields.contains(k))
			{
				continue;
			}

			_bw.append(generateMethod(_codeGetter, k, fieldIndex));
			_bw.append(generateMethod(_codeSetter, k, fieldIndex));
			
			fieldIndex++;
			
			Element e = _methods.get(k);
			if (_fieldTable.length() > 0) _fieldTable += " ,";
			_fieldTable += "\""+k+"\"";
			
			if (_typeTable.length() > 0) _typeTable += " ,";
			
			if (e.asType().toString().compareTo("java.lang.String") == 0)
			{
				_typeTable += ColumnType.STRING.getValue();
			}
			else if (e.asType().toString().compareTo("int") == 0 || e.asType().toString().compareTo("long") == 0 || 
					 e.asType().toString().compareTo("java.lang.Integer") == 0 || e.asType().toString().compareTo("java.lang.Long") == 0)
			{
				_typeTable += ColumnType.INTEGER.getValue();
			}
			else if (e.asType().toString().compareTo("double") == 0 || e.asType().toString().compareTo("java.lang.Double") == 0)
			{
				_typeTable += ColumnType.DOUBLE.getValue();
			}
			else if (e.asType().toString().compareTo("float") == 0 || e.asType().toString().compareTo("java.lang.Float") == 0)
			{
				_typeTable += ColumnType.FLOAT.getValue();
			}
			else if (e.asType().toString().compareTo("boolean")  == 0 || e.asType().toString().compareTo("java.lang.Boolean") == 0)
			{
				_typeTable += ColumnType.BOOLEAN.getValue();				
			}
			else if (e.asType().toString().compareTo("java.util.Date") == 0)
			{
				_typeTable += ColumnType.DATE.getValue();
			}
//			else if (e.asType().equals(byte[].class) )
//			{
//				_typeTable += ColumnType.BINARY.getValue();				
//			}
			else
			{
				_typeTable += e.asType().toString()+" - "+String.class.toString();				
			}
		}
		
		_bw.append(_fieldTableHeader);
		_bw.append(_fieldTable);
		_bw.append(_fieldTableFooter);

		_bw.append(_typeTableHeader);
		_bw.append(_typeTable);
		_bw.append(_typeTableFooter);
		
		_bw.append(_getTableName);
		
		_bw.append(generateFragment(_codeFooter));
		
		_methods.clear();

		return true;
	}
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415896331672/fstmerge_var2_6342966727426380727

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca31c_0fb6e/rev_ca31c-0fb6e/realm-java-annotator/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cbda0_88282/rev_cbda0-88282.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3975c_90c73/rev_3975c-90c73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0f644_c5b89/rev_0f644-c5b89.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_51588_45660/rev_51588-45660.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ca6c0_ef560/rev_ca6c0-ef560.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_eb9a5_ca6c0/rev_eb9a5-ca6c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2116a_26de5/rev_2116a-26de5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2116a_42127/rev_2116a-42127.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2116a_960fb/rev_2116a-960fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c035f_2116a/rev_c035f-2116a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_92fa9_81e5d/rev_92fa9-81e5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_23547_ed7f7/rev_23547-ed7f7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e554c_fdb83/rev_e554c-fdb83.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_014c4_e554c/rev_014c4-e554c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_75160_938a8/rev_75160-938a8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4bc76_cf4a6/rev_4bc76-cf4a6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_938a8_3b3de/rev_938a8-3b3de.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_282c8_4fde2/rev_282c8-4fde2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_81888_282c8/rev_81888-282c8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fb9d4_5d3b0/rev_fb9d4-5d3b0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ebac2_6a8d2/rev_ebac2-6a8d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d4e34_ebac2/rev_d4e34-ebac2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_86ed3_5f62c/rev_86ed3-5f62c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_70d35_7e30a/rev_70d35-7e30a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c5015_6679c/rev_c5015-6679c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_464f4_9a3d4/rev_464f4-9a3d4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a8d3d_809be/rev_a8d3d-809be.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b6344_1bda4/rev_b6344-1bda4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ce138_1979a/rev_ce138-1979a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_032b7_c5a80/rev_032b7-c5a80.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean setField(String fieldName, Element fieldElement) {
        if (!checkState(GeneratorStates.METHODS)) return false;

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_var1_5961554391147391138
        String shortType = convertSimpleTypesToObject(fieldElement.asType().toString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_base_2945270099947037250
        String fieldId = "index_" + fieldName;

        String shortType = convertSimpleTypesToObject(fieldElement.asType().toString());
=======
        String fieldId = "index_" + fieldName;

        String shortType = objectTypes.get(fieldElement.asType().toString());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_var2_3534655112892355621
        shortType = shortType.substring(shortType.lastIndexOf(".") + 1);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_var1_5961554391147391138
        fields.add(new FieldInfo(fieldName, convertTypesToColumnType(shortType), fieldElement));
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_base_2945270099947037250
        fields.add(new FieldInfo(fieldName, fieldId, convertTypesToColumnType(shortType), fieldElement));
=======
        fields.add(new FieldInfo(fieldName, fieldId, columnTypes.get(shortType), fieldElement));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898329372/fstmerge_var2_3534655112892355621

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_032b7_c5a80/rev_032b7-c5a80/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_06e95_032b7/rev_06e95-032b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_81965_fd67b/rev_81965-fd67b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean emitFields() throws IOException {

        int columnIndex = 0;
    	
        for (FieldInfo field : fields) {
            String originalType = field.fieldElement.asType().toString();
            String fullType = objectTypes.get(originalType);
            String shortType = fullType.substring(fullType.lastIndexOf(".") + 1);

            String returnCast = "";
            String camelCaseFieldName = Character.toUpperCase(field.fieldName.charAt(0)) + field.fieldName.substring(1);

            if (originalType.equals("int")) {
                shortType = "Long";
                returnCast = "(int)";
            }

            if (shortType.equals("Integer")) {
                shortType = "Long";
                returnCast = "(int)";
            }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898465531/fstmerge_var1_5018666493562810517
            String getterStmt = "return " + returnCast + "row.get" + shortType + "( " + columnIndex + " )";

            String setterStmt = "row.set" + shortType + "( " + columnIndex + ", value )";
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898465531/fstmerge_base_2645951495162164190
            String getterStmt = "return " + returnCast + "row.get" + shortType + "( " + field.fieldId + " )";

            String setterStmt = "row.set" + shortType + "( " + field.fieldId + ", value )";
=======
            String getterStmt = String.format("return %s row.get%s(%s)", returnCast, shortType, field.fieldId);
            String setterStmt = String.format("row.set%s(%s, value)", shortType, field.fieldId);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415898465531/fstmerge_var2_8604199146290775130

            columnIndex++;

            writer.emitAnnotation("Override").beginMethod(originalType, "get" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC))
                    .emitStatement(getterStmt)
                    .endMethod();

            writer.emitAnnotation("Override").beginMethod("void", "set" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC),
                    originalType, "value")
                    .emitStatement(setterStmt)
                    .endMethod().emitEmptyLine();
        }

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_81965_fd67b/rev_81965-fd67b/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cd3d4_81965/rev_cd3d4-81965.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_396ff_83caa/rev_396ff-83caa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7751c_959ae/rev_7751c-959ae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_740e3_b79cf/rev_740e3-b79cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0f631_d9de5/rev_0f631-d9de5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_58a10_a44d1/rev_58a10-a44d1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9bbea_1ce1d/rev_9bbea-1ce1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b974d_9bbea/rev_b974d-9bbea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c7517_8e635/rev_c7517-8e635.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_197f5_bbabd/rev_197f5-bbabd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bbabd_ab63d/rev_bbabd-ab63d.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899242718/fstmerge_var1_5490140580919496041
public void WriteAndRead() throws java.io.IOException {
        // open a default realm
        Realm realm = new Realm(activity.getFilesDir());

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog dog = realm.create(Dog.class);
        dog.setName("Fido");

        for (int i = 0; i<10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(dog);
            person.setData(new byte[] {1,2,3});
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        Log.i(TAG, "Number of persons: " + realm.allObjects(Person.class).size());

        // Iterate over all objects
        for (Person p : realm.allObjects(Person.class)) {
            Log.i(TAG, String.format("%s : %d : %s : %b", p.getName(), p.getAge(), p.getDog().getName(), Arrays.equals(p.getData(), new byte[] {1,2,3})));
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899242718/fstmerge_base_6613765031571783108
public void WriteAndRead() throws java.io.IOException {
        // open a default realm
        Realm realm = new Realm(activity.getFilesDir());

        // Add ten persons in one write transaction
        realm.beginWrite();
        for (int i = 0; i<10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        Log.i(TAG, "Number of persons: " + realm.allObjects(Person.class).size());

        // Iterate over all objects
        for (Person p : realm.allObjects(Person.class)) {
            Log.i(TAG, p.getName() + ":" + p.getAge());
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899242718/fstmerge_var2_5034121209221346469

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bbabd_ab63d/rev_bbabd-ab63d/distribution/RealmIntroExample/app/src/main/java/io/realm/realmintroexample/IntroExample.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d89cd_c4967/rev_d89cd-c4967.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8c708_3377a/rev_8c708-3377a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0196a_10b4f/rev_0196a-10b4f.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void generate() throws IOException, UnsupportedOperationException {
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", packageName, className);
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var1_2531960627702511682
        // Emit java writer code in sections: 
        
        //   1. Package Header and imports
        emitPackage();
        
        //   2. class definition
        emitClass();
        
        //   3. public setters and getters for each field
        emitFields();

        // Generate initTable method, which is used to create the datqbase table

        String tableName = this.className.toLowerCase(Locale.getDefault());

        writer.beginMethod("Table", "initTable", EnumSet.of(Modifier.PUBLIC, Modifier.STATIC),
                "ImplicitTransaction", "transaction").
                beginControlFlow("if(!transaction.hasTable(\"" + tableName + "\"))").
                emitStatement("Table table = transaction.getTable(\"" + tableName + "\")");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_base_6135829963686223873
        // Emit java writer code in sections: 
        
        //   1. Package Header and imports
        emitPackage();
        
        //   2. class definition
        emitClass();
        
        //   3. public setters and getters for each field
        emitFields();

        // Generate initTable method, which is used to create the datqbase table
        writer.beginMethod("Table", "initTable", EnumSet.of(Modifier.PUBLIC, Modifier.STATIC),
                "ImplicitTransaction", "transaction").
                beginControlFlow("if(!transaction.hasTable(\"" + this.className + "\"))").
                emitStatement("Table table = transaction.getTable(\"" + this.className + "\")");
=======
        writer.emitPackage(packageName)
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmLinkList",
                "io.realm.RealmObject",
                "io.realm.RealmList")
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) row.get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "row.set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmLinkList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s\")", this.className);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var2_1884005599404712765

        // For each field generate corresponding table index constant
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var1_2531960627702511682
        for (FieldInfo field : fields) {

            if (field.columnType.equals("ColumnType.LINK")) {
                writer.emitStatement("table.addColumnLink( %s, \"%s\", %s)", field.columnType,
                    field.fieldName.toLowerCase(Locale.getDefault()), "table");
            }
            else {
                writer.emitStatement("table.addColumn( %s, \"%s\" )", field.columnType, field.fieldName.toLowerCase(Locale.getDefault()));
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_base_6135829963686223873
        for (FieldInfo field : fields) {
            writer.emitStatement("table.addColumn( %s, \"%s\" )", field.columnType, field.fieldName.toLowerCase(Locale.getDefault()));
=======
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), fieldTypeName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), genericType);
            }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var2_1884005599404712765
        }

        writer.emitStatement("return table");
        writer.endControlFlow();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var1_2531960627702511682
        writer.emitStatement("return transaction.getTable(\"" + tableName + "\")");
        writer.endMethod().emitEmptyLine();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_base_6135829963686223873
        writer.emitStatement("return transaction.getTable(\"" + this.className + "\")");
        writer.endMethod().emitEmptyLine();
=======
        writer.emitStatement("return transaction.getTable(\"%s\")", this.className);
        writer.endMethod();
        writer.emitEmptyLine();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438718/fstmerge_var2_1884005599404712765

        // End the class definition
        writer.endType();
        writer.close();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0196a_10b4f/rev_0196a-10b4f/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438778/fstmerge_var1_4362836735741853465
public void emitFields() throws IOException {

        int columnIndex = 0;

        for (FieldInfo field : fields) {
            String originalType = field.fieldElement.asType().toString();
            String fullType = convertSimpleTypesToObject(originalType);
            String shortType = fullType.substring(fullType.lastIndexOf(".") + 1);

            String returnCast = "";
            String camelCaseFieldName = Character.toUpperCase(field.fieldName.charAt(0)) + field.fieldName.substring(1);

            if (originalType.equals("int")) {
                fullType = "long";
                shortType = "Long";
                returnCast = "(" + originalType + ")";
            } else if (shortType.equals("Integer")) {
                fullType = "long";
                shortType = "Long";
                returnCast = "(int)";
            } else if (shortType.equals("byte[]")) {
                shortType = "BinaryByteArray";
                returnCast = "(byte[])";
            }

            String getterStmt = "return " + returnCast + "row.get" + shortType + "( " + columnIndex + " )";

            String setterStmt = "row.set" + shortType + "( " + columnIndex + ", value )";

            if (!field.fieldElement.asType().getKind().isPrimitive())
            {
                if (!originalType.equals("java.lang.String") &&
                	!originalType.equals("java.lang.Long") &&
                	!originalType.equals("java.lang.Integer") &&
                	!originalType.equals("java.lang.Float") &&
                	!originalType.equals("java.lang.Double") &&
                	!originalType.equals("java.lang.Boolean") &&
                	!originalType.equals("java.util.Date") &&
                	!originalType.equals("byte[]")) {
                	
                	// We now know this is a type derived from RealmObject - 
                	// this has already been checked in the RealmProcessor
                	setterStmt = String.format("if (value != null) {row.setLink( %d, value.realmGetRow().getIndex() );}", columnIndex);
                	getterStmt = String.format("return realmGetRow().getLink(%d)==-1?null:realm.get(%s.class, realmGetRow().getLink(%d))", columnIndex, fullType, columnIndex);
                    field.columnType = "ColumnType.LINK";
                }
            }
            
            columnIndex++;

            writer.emitAnnotation("Override").beginMethod(originalType, "get" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC))
                    .emitStatement(getterStmt)
                    .endMethod();

            writer.emitAnnotation("Override").beginMethod("void", "set" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC),
                    originalType, "value")
                    .emitStatement(setterStmt)
                    .endMethod().emitEmptyLine();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438778/fstmerge_base_5924481380402194586
public void emitFields() throws IOException {

        int columnIndex = 0;

        for (FieldInfo field : fields) {
            String originalType = field.fieldElement.asType().toString();
            String fullType = convertSimpleTypesToObject(originalType);
            String shortType = fullType.substring(fullType.lastIndexOf(".") + 1);

            String returnCast = "";
            String camelCaseFieldName = Character.toUpperCase(field.fieldName.charAt(0)) + field.fieldName.substring(1);

            if (originalType.equals("int")) {
                fullType = "long";
                shortType = "Long";
                returnCast = "(" + originalType + ")";
            } else if (shortType.equals("Integer")) {
                fullType = "long";
                shortType = "Long";
                returnCast = "(int)";
            } else if (shortType.equals("byte[]")) {
                shortType = "BinaryByteArray";
                returnCast = "(byte[])";
            }

            String getterStmt = "return " + returnCast + "row.get" + shortType + "( " + columnIndex + " )";

            String setterStmt = "row.set" + shortType + "( " + columnIndex + ", value )";

            if (!field.fieldElement.asType().getKind().isPrimitive())
            {
                if (!originalType.equals("java.lang.String") &&
                	!originalType.equals("java.lang.Long") &&
                	!originalType.equals("java.lang.Integer") &&
                	!originalType.equals("java.lang.Float") &&
                	!originalType.equals("java.lang.Double") &&
                	!originalType.equals("java.lang.Boolean") &&
                	!originalType.equals("java.util.Date") &&
                	!originalType.equals("byte[]")) {
                	
                	// We now know this is a type derived from RealmObject - 
                	// this has already been checked in the RealmProcessor
                	setterStmt = String.format("if (value != null) {row.setLink( %d, value.realmGetRow().getIndex() );}", columnIndex);
                	getterStmt = String.format("return realm.get( %s.class, realmGetRow().getLink( %d ) )", fullType, columnIndex);
                    field.columnType = "ColumnType.LINK";
                }
            }
            
            columnIndex++;

            writer.emitAnnotation("Override").beginMethod(originalType, "get" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC))
                    .emitStatement(getterStmt)
                    .endMethod();

            writer.emitAnnotation("Override").beginMethod("void", "set" + camelCaseFieldName, EnumSet.of(Modifier.PUBLIC),
                    originalType, "value")
                    .emitStatement(setterStmt)
                    .endMethod().emitEmptyLine();
        }
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415899438778/fstmerge_var2_5135164606591047698

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0196a_10b4f/rev_0196a-10b4f/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_89fe7_0196a/rev_89fe7-0196a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a1437_75f1d/rev_a1437-75f1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e46a9_674b3/rev_e46a9-674b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a00d2_e6c49/rev_a00d2-e6c49.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b3e55_a00d2/rev_b3e55-a00d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c6246_129fc/rev_c6246-129fc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f7d42_c6246/rev_f7d42-c6246.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4d5cb_d01ea/rev_4d5cb-d01ea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5113f_1407e/rev_5113f-1407e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7d506_42a46/rev_7d506-42a46.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3806b_7d506/rev_3806b-7d506.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bb12d_8be38/rev_bb12d-8be38.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b82cc_bfb18/rev_b82cc-bfb18.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4ee92_bc626/rev_4ee92-bc626.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c21df_f9c3c/rev_c21df-f9c3c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4cce3_dfe8b/rev_4cce3-dfe8b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_993d7_4cce3/rev_993d7-4cce3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_202be_d686b/rev_202be-d686b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7e94e_202be/rev_7e94e-202be.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fe4d7_cb063/rev_fe4d7-cb063.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934831/fstmerge_var1_2628606727359379836
private void basicReadWrite() throws java.io.IOException {
        showStatus("Performing basic Read/Write operation...");

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Person person = realm.create(Person.class);
        person.setName("Happy Person");
        person.setAge(14);
        realm.commit();

        // Iterate over all objects
        person = realm.where(Person.class).findFirst();
        showStatus(person.getName() + ":" + person.getAge());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934831/fstmerge_base_8813293141569428646
private void basicReadWrite() throws java.io.IOException {
        showStatus("Performing basic Read/Write operation...");

        // open a default realm
        Realm realm = new Realm(getFilesDir());

        // Add ten persons in one write transaction
        realm.beginWrite();
        Person person = realm.create(Person.class);
        person.setName("Happy Person");
        person.setAge(14);
        realm.commit();

        // Iterate over all objects
        person = realm.where(Person.class).findFirst();
        showStatus(person.getName() + ":" + person.getAge());
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934831/fstmerge_var2_7944767118296346112

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934836/fstmerge_var1_5664771503644997471
private void basicQuery() throws java.io.IOException {
        showStatus("\nPerforming basic Query operation...");

        Realm realm = new Realm(this);
        showStatus("Number of persons: " + realm.allObjects(Person.class).size());
        RealmResults<Person> results = realm.where(Person.class).equalTo("age", 99).findAll();
        showStatus("Size of result set: " + results.size());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934836/fstmerge_base_4920472509632216540
private void basicQuery() throws java.io.IOException {
        showStatus("\nPerforming basic Query operation...");

        Realm realm = new Realm(getFilesDir());
        showStatus("Number of persons: " + realm.allObjects(Person.class).size());
        ResultList<Person> result = realm.where(Person.class).equalTo("age", 99).findAll();
        showStatus("Size of result set: " + result.size());
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934836/fstmerge_var2_2330278057549082716

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934842/fstmerge_var1_2128410809904289112
private void basicUpdate() throws java.io.IOException {
        showStatus("\nPerforming basic Update operation...");

        // open a default realm
        Realm realm = new Realm(this);

        // Iterate over all objects
        Person person = realm.get(Person.class, 0);

        // Add ten persons in one write transaction
        realm.beginWrite();
        person.setName("Senior Person");
        person.setAge(99);
        realm.commit();

        showStatus(person.getName() + ":" + person.getAge());
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934842/fstmerge_base_8412569269601340918
private void basicUpdate() throws java.io.IOException {
        showStatus("\nPerforming basic Update operation...");

        // open a default realm
        Realm realm = new Realm(getFilesDir());

        // Iterate over all objects
        Person person = realm.get(Person.class, 0);

        // Add ten persons in one write transaction
        realm.beginWrite();
        person.setName("Senior Person");
        person.setAge(99);
        realm.commit();

        showStatus(person.getName() + ":" + person.getAge());
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934842/fstmerge_var2_1801768190323094978

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934852/fstmerge_var1_2099602914619160323
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();
        }

        return status;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934852/fstmerge_base_6600664328303271637
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(getFilesDir());

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();
        }

        return status;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934852/fstmerge_var2_2285684832084036032

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934857/fstmerge_var1_2668755942517927451
private String complexQuery() throws IOException {
        String status = "\n\nPerforming complex Query operation...";

        Realm realm = new Realm(this);
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();
        // Find all persons where age > 5
        RealmResults<Person> results = realm.where(Person.class)
                .greaterThan("age", 5).between("age", 7, 9).beginsWith("name", "Person").findAll();
        status += "\nSize of result set: " + results.size();
        return status;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934857/fstmerge_base_87208697146100749
private String complexQuery() throws IOException {
        String status = "\n\nPerforming complex Query operation...";

        Realm realm = new Realm(getFilesDir());
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();
        // Find all persons where age > 5
        ResultList<Person> result = realm.where(Person.class)
                .greaterThan("age", 5).between("age", 7, 9).beginsWith("name", "Person").findAll();
        status += "\nSize of result set: " + result.size();
        return status;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934857/fstmerge_var2_7007422660762903603

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ private RealmList<Cat> cats; ##FSTMerge## private RelationList<Cat> cats; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/model/Person.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934908/fstmerge_var1_3672265671247797074
public RealmList<Cat> getCats() {
        return cats;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934908/fstmerge_base_8588639407943482043
public RelationList<Cat> getCats() {
        return cats;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415900934908/fstmerge_var2_5785651360375131303

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e689b_2692e/rev_e689b-2692e/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/model/Person.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_00a6c_e689b/rev_00a6c-e689b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1a547_d1f69/rev_1a547-d1f69.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901077007/fstmerge_var1_2229021504247920801
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901077007/fstmerge_base_1702811052982811834
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();
        }

        return status;
    }
=======
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();

            // Note that the tempReference field has been annotated with @Ignore
            // It is therefore not persisted:
            assert(pers.getTempReference() == 0);

        }

        return status;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901077007/fstmerge_var2_7644929225223568705

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1a547_d1f69/rev_1a547-d1f69/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c02e6_1a547/rev_c02e6-1a547.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6e616_3f860/rev_6e616-3f860.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_899e5_34fb3/rev_899e5-34fb3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901291506/fstmerge_var1_9010073346147038023
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901291506/fstmerge_base_2532522894305531822
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();

            // Note that the tempReference field has been annotated with @Ignore
            // It is therefore not persisted:
            assert(pers.getTempReference() == 0);

        }

        return status;
    }
=======
private String complexReadWrite() throws IOException {
        String status = "\nPerforming complex Read/Write operation...";

        // open a default realm
        Realm realm = new Realm(this);

        // Add ten persons in one write transaction
        realm.beginWrite();
        Dog fido = realm.create(Dog.class);
        fido.setName("fido");
        for (int i = 0; i < 10; i++) {
            Person person = realm.create(Person.class);
            person.setName("Person no. " + i);
            person.setAge(i);
            person.setDog(fido);
            person.setTempReference(42);
            for (int j = 0; j < i; j++) {
                Cat cat = realm.create(Cat.class);
                cat.setName("Cat_" + j);
                person.getCats().add(cat);
            }
        }
        realm.commit();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.getDog() == null) {
                dogName = "None";
            } else {
                dogName = pers.getDog().getName();
            }
            status += "\n" + pers.getName() + ":" + pers.getAge() + " : " + dogName + " : " + pers.getCats().size();

            // Note that the tempReference field has been annotated with @Ignore
            // It is therefore not persisted:
            assert(pers.getTempReference() == 0);

        }

        return status;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415901291506/fstmerge_var2_1875606804924378230

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_899e5_34fb3/rev_899e5-34fb3/distribution/RealmBasicExample/app/src/main/java/io/realm/examples/realmintroexample/RealmBasicExampleActivity.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dee75_adeac/rev_dee75-adeac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dee75_92baa/rev_dee75-92baa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f1309_dee75/rev_f1309-dee75.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0cf06_5b41d/rev_0cf06-5b41d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_27065_cf9af/rev_27065-cf9af.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_84955_1aada/rev_84955-1aada.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_61114_84955/rev_61114-84955.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4b386_0cee0/rev_4b386-0cee0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9afce_4b386/rev_9afce-4b386.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_62a46_87e3f/rev_62a46-87e3f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1d91c_844c7/rev_1d91c-844c7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_54bf9_62092/rev_54bf9-62092.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_baffc_54bf9/rev_baffc-54bf9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d8f6e_cf8f8/rev_d8f6e-cf8f8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d8f6e_f1fbf/rev_d8f6e-f1fbf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d8f6e_97ac6/rev_d8f6e-97ac6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d0ca4_d8f6e/rev_d0ca4-d8f6e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cfe2d_2b81a/rev_cfe2d-2b81a.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415902587952/fstmerge_var1_7277114150789703856
@Override
    public List<City> loadInBackground() throws RuntimeException {
        List<City> items = loadCities();

        if (items == null) {
            Log.e(TAG, "No cities found");
            return null;
        }

        dataIsReady = true;

        // Delete realm files
        File writablePath = context.getFilesDir();
        for (File file : Arrays.asList(
                new File(writablePath, Realm.DEFAULT_REALM_NAME),
                new File(writablePath, Realm.DEFAULT_REALM_NAME + ".lock"))) {
            if (file.exists()) {
                boolean deleteResult = file.delete();
                if (!deleteResult) {
                    throw new AssertionError("Could not delete file: " + file.getAbsolutePath());
                }
            }
        }

        //Store the retrieved items to the Realm
        Realm realm = Realm.getInstance(context);

        realm.beginTransaction();
        for (City city : items) {
            City realmCity = realm.createObject(City.class);
            realmCity.setName(city.getName());
            realmCity.setVotes(city.getVotes());
        }
        realm.commitTransaction();

        return items;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415902587952/fstmerge_base_5282846014277350488
=======
@Override
    public List<City> loadInBackground() throws RuntimeException {
        List<City> items = loadCities();

        if (items == null) {
            Log.e(TAG, "No cities found");
            return null;
        }

        dataIsReady = true;

        // Delete realm files
        Realm.deleteRealmFile(context);

        //Store the retrieved items to the Realm
        Realm realm = Realm.getInstance(context);

        realm.beginTransaction();
        for (City city : items) {
            City realmCity = realm.createObject(City.class);
            realmCity.setName(city.getName());
            realmCity.setVotes(city.getVotes());
        }
        realm.commitTransaction();

        return items;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415902587952/fstmerge_var2_6610600016905610848

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cfe2d_2b81a/rev_cfe2d-2b81a/examples/gridViewExample/src/main/java/io/realm/examples/realmgridview/CityLoader.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9f568_cfe2d/rev_9f568-cfe2d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_385d6_fe418/rev_385d6-fe418.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7dcd3_865b2/rev_7dcd3-865b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7dcd3_98994/rev_7dcd3-98994.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_57ee3_ab831/rev_57ee3-ab831.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_322f0_7dcd3/rev_322f0-7dcd3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dab0f_b83e0/rev_dab0f-b83e0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void generate() throws IOException, UnsupportedOperationException {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_base_9087383304966998373
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", packageName, className);
=======
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var2_4911453877813718060
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_base_9087383304966998373
        writer.emitPackage(packageName)
=======
        writer.emitPackage(realmPackageName)
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var2_4911453877813718060
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var1_5260249778439853592
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_base_9087383304966998373
                "java.util.Date")
=======
                "java.util.Date",
                packageName + ".*")
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var2_4911453877813718060
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s\")", this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", fieldTypeName);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_base_9087383304966998373
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeCanonicalName);
=======
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var2_4911453877813718060
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", genericType);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_base_9087383304966998373
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericCanonicalType);
=======
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903106491/fstmerge_var2_4911453877813718060
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s\")", this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * equals method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o");
        writer.emitStatement("if (this == o) return true");
        writer.emitStatement("if (o == null || getClass() != o.getClass()) return false");
        writer.emitStatement("%s a%s = (%s)o", className, className, className);  // Foo aFoo = (Foo)o

        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String capFieldName = capitaliseFirstChar(fieldName);
            String fieldTypeCanonicalName = field.asType().toString();
            if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
                switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
                    case equals_direct: // if (getField() != aFoo.getField()) return false
                        String getterPrefix = fieldTypeCanonicalName.equals("boolean") ? "is" : "get";
                        writer.emitStatement("if (get%s() != a%s.%s%s()) return false", capFieldName, className, getterPrefix, capFieldName);
                        break;
                    case equals_null: // if (getField() != null = !getField().equals(aFoo.getField()) : aFoo.getField() != null) return false
                        writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                                capFieldName,
                                capFieldName, className, capFieldName,
                                className, capFieldName);
                        break;
                    case equals_array: // if (!Array.equals(getField(), aFoo.getField()) return false
                        writer.emitStatement("if (!Array.equals(get%s(), a%s.get%s()) return false",
                                capFieldName,
                                className, capFieldName);
                        break;
                    case equals_compare:
                        writer.emitStatement("if (%s.compare(get%s, a%s.get%s) != 0) return false", capitaliseFirstChar(fieldName), className, capitaliseFirstChar(fieldName));
                        break;
                }
            }
            else {
                if (typeUtils.isAssignable(field.asType(), realmObject) || typeUtils.isAssignable(field.asType(), realmList)) {
                    writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                            capFieldName,
                            capFieldName, className, capFieldName,
                            className, capFieldName);

                }
            }
        }
        writer.emitStatement("return true");
        writer.endMethod();
        writer.emitEmptyLine();

        // End the class definition
        writer.endType();
        writer.close();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dab0f_b83e0/rev_dab0f-b83e0/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dab0f_668e7/rev_dab0f-668e7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9ed26_dab0f/rev_9ed26-dab0f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_709c9_b83e0/rev_709c9-b83e0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void generate() throws IOException, UnsupportedOperationException {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_base_7350258303005711818
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", packageName, className);
=======
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var2_2273468055594867815
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_base_7350258303005711818
        writer.emitPackage(packageName)
=======
        writer.emitPackage(realmPackageName)
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var2_2273468055594867815
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var1_985581542285455284
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_base_7350258303005711818
                "java.util.Date")
=======
                "java.util.Date",
                packageName + ".*")
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var2_2273468055594867815
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s\")", this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", fieldTypeName);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_base_7350258303005711818
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeCanonicalName);
=======
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var2_2273468055594867815
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", genericType);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_base_7350258303005711818
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericCanonicalType);
=======
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903331145/fstmerge_var2_2273468055594867815
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s\")", this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * equals method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o");
        writer.emitStatement("if (this == o) return true");
        writer.emitStatement("if (o == null || getClass() != o.getClass()) return false");
        writer.emitStatement("%s a%s = (%s)o", className, className, className);  // Foo aFoo = (Foo)o

        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String capFieldName = capitaliseFirstChar(fieldName);
            String fieldTypeCanonicalName = field.asType().toString();
            if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
                switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
                    case equals_direct: // if (getField() != aFoo.getField()) return false
                        String getterPrefix = fieldTypeCanonicalName.equals("boolean") ? "is" : "get";
                        writer.emitStatement("if (get%s() != a%s.%s%s()) return false", capFieldName, className, getterPrefix, capFieldName);
                        break;
                    case equals_null: // if (getField() != null = !getField().equals(aFoo.getField()) : aFoo.getField() != null) return false
                        writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                                capFieldName,
                                capFieldName, className, capFieldName,
                                className, capFieldName);
                        break;
                    case equals_array: // if (!Array.equals(getField(), aFoo.getField()) return false
                        writer.emitStatement("if (!Array.equals(get%s(), a%s.get%s()) return false",
                                capFieldName,
                                className, capFieldName);
                        break;
                    case equals_compare:
                        writer.emitStatement("if (%s.compare(get%s, a%s.get%s) != 0) return false", capitaliseFirstChar(fieldName), className, capitaliseFirstChar(fieldName));
                        break;
                }
            }
            else {
                if (typeUtils.isAssignable(field.asType(), realmObject) || typeUtils.isAssignable(field.asType(), realmList)) {
                    writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                            capFieldName,
                            capFieldName, className, capFieldName,
                            className, capFieldName);

                }
            }
        }
        writer.emitStatement("return true");
        writer.endMethod();
        writer.emitEmptyLine();

        // End the class definition
        writer.endType();
        writer.close();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_709c9_b83e0/rev_709c9-b83e0/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2b2c8_49799/rev_2b2c8-49799.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void generate() throws IOException, UnsupportedOperationException {
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

        writer.emitPackage(realmPackageName)
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s\")", this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s\")", this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903405312/fstmerge_var1_1911345067566587672
        /**
         * equals method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o");
        writer.emitStatement("if (this == o) return true");
        writer.emitStatement("if (o == null || getClass() != o.getClass()) return false");
        writer.emitStatement("%s a%s = (%s)o", className, className, className);  // Foo aFoo = (Foo)o

        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String capFieldName = capitaliseFirstChar(fieldName);
            String fieldTypeCanonicalName = field.asType().toString();
            if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
                switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
                    case equals_direct: // if (getField() != aFoo.getField()) return false
                        String getterPrefix = fieldTypeCanonicalName.equals("boolean") ? "is" : "get";
                        writer.emitStatement("if (get%s() != a%s.%s%s()) return false", capFieldName, className, getterPrefix, capFieldName);
                        break;
                    case equals_null: // if (getField() != null = !getField().equals(aFoo.getField()) : aFoo.getField() != null) return false
                        writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                                capFieldName,
                                capFieldName, className, capFieldName,
                                className, capFieldName);
                        break;
                    case equals_array: // if (!Array.equals(getField(), aFoo.getField()) return false
                        writer.emitStatement("if (!Array.equals(get%s(), a%s.get%s()) return false",
                                capFieldName,
                                className, capFieldName);
                        break;
                    case equals_compare:
                        writer.emitStatement("if (%s.compare(get%s, a%s.get%s) != 0) return false", capitaliseFirstChar(fieldName), className, capitaliseFirstChar(fieldName));
                        break;
                }
            }
            else {
                if (typeUtils.isAssignable(field.asType(), realmObject) || typeUtils.isAssignable(field.asType(), realmList)) {
                    writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                            capFieldName,
                            capFieldName, className, capFieldName,
                            className, capFieldName);

                }
            }
        }
        writer.emitStatement("return true");
        writer.endMethod();
        writer.emitEmptyLine();

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903405312/fstmerge_base_2289508891505035670
=======
        /**
         * equals method
         */
        String proxyClassName = className + "RealmProxy";
        writer.emitAnnotation("Override");
        writer.beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o");
        writer.emitStatement("if (this == o) return true");
        writer.emitStatement("if (o == null || getClass() != o.getClass()) return false");
        writer.emitStatement("%s a%s = (%s)o", proxyClassName, className, proxyClassName);  // FooRealmProxy aFoo = (FooRealmProxy)o

        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String capFieldName = capitaliseFirstChar(fieldName);
            String fieldTypeCanonicalName = field.asType().toString();
            if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
                switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
                    case EQUALS_DIRECT: // if (getField() != aFoo.getField()) return false
                        String getterPrefix = fieldTypeCanonicalName.equals("boolean") ? "is" : "get";
                        writer.emitStatement("if (get%s() != a%s.%s%s()) return false", capFieldName, className, getterPrefix, capFieldName);
                        break;
                    case EQUALS_NULL: // if (getField() != null = !getField().equals(aFoo.getField()) : aFoo.getField() != null) return false
                        writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                                capFieldName,
                                capFieldName, className, capFieldName,
                                className, capFieldName);
                        break;
                    case EQUALS_ARRAY: // if (!Array.equals(getField(), aFoo.getField()) return false
                        writer.emitStatement("if (!Array.equals(get%s(), a%s.get%s()) return false",
                                capFieldName,
                                className, capFieldName);
                        break;
                    case EQUALS_COMPARE: // if (
                        writer.emitStatement("if (%s.compare(get%s, a%s.get%s) != 0) return false",
                                fieldTypeCanonicalName, capitaliseFirstChar(fieldName), className,
                                capitaliseFirstChar(fieldName));
                        break;
                }
            }
            else if (typeUtils.isAssignable(field.asType(), realmObject) || typeUtils.isAssignable(field.asType(), realmList)) {
                writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                        capFieldName,
                        capFieldName, className, capFieldName,
                         className, capFieldName);
            }
        }
        writer.emitStatement("return true");
        writer.endMethod();
        writer.emitEmptyLine();

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903405312/fstmerge_var2_8662170040138247274
        // End the class definition
        writer.endType();
        writer.close();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2b2c8_49799/rev_2b2c8-49799/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_709c9_f6a4a/rev_709c9-f6a4a.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void generate() throws IOException, UnsupportedOperationException {
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

        writer.emitPackage(realmPackageName)
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + table_prefix + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s%s\")", table_prefix, this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_var1_6072828286730262197
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_base_5509218120333243830
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeCanonicalName);
=======
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", table_prefix, fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeCanonicalName);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_var2_2341735282706257913
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), table_prefix, fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_var1_6072828286730262197
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_base_5509218120333243830
                writer.beginControlFlow("if (!transaction.hasTable(\"%s\"))", genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericCanonicalType);
=======
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", table_prefix, genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericCanonicalType);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415903480053/fstmerge_var2_2341735282706257913
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), table_prefix, genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s%s\")", table_prefix, this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

        // End the class definition
        writer.endType();
        writer.close();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_709c9_f6a4a/rev_709c9-f6a4a/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_449b1_709c9/rev_449b1-709c9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7523c_ed9c8/rev_7523c-ed9c8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8887d_e9505/rev_8887d-e9505.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8887d_709da/rev_8887d-709da.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_049f6_f36b3/rev_049f6-f36b3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cad5a_8887d/rev_cad5a-8887d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9ab70_22b2b/rev_9ab70-22b2b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2e0d9_8252c/rev_2e0d9-8252c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8a453_9ab70/rev_8a453-9ab70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9ab70_d851c/rev_9ab70-d851c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private Map<Class<?>, String> generatedClassNames = new HashMap<Class<?>, String>(); ##FSTMerge## private final Map<Class<?>, String> generatedClassNames = new HashMap<Class<?>, String>();
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9ab70_d851c/rev_9ab70-d851c/realm/src/main/java/io/realm/Realm.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7650c_bf4b6/rev_7650c-bf4b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dc5e1_61f88/rev_dc5e1-61f88.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dc5e1_6efea/rev_dc5e1-6efea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dc5e1_f52f9/rev_dc5e1-f52f9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_08bbe_dc5e1/rev_08bbe-dc5e1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bbadc_99c65/rev_bbadc-99c65.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d541d_bbadc/rev_d541d-bbadc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9eb0e_daa40/rev_9eb0e-daa40.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9eb0e_6efea/rev_9eb0e-6efea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9eb0e_32955/rev_9eb0e-32955.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_46df8_fa049/rev_46df8-fa049.revisions
Conflict type: LineBasedMCFd
Conflict body: 
private Realm(String absolutePath) {
        this.sharedGroup = new SharedGroup(absolutePath, true);
        this.transaction = sharedGroup.beginImplicitTransaction();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905053361/fstmerge_var1_2372235555660600566
        this.id = absolutePath.hashCode();
        if (!looperThread.isAlive()) {
            looperThread.start();
        }

        if (Looper.myLooper() == null) {
            Looper.prepare();
        }
        handler = new Handler() {
            @Override
            public void handleMessage(Message message) {
                if (message.what == LooperThread.REALM_CHANGED) {
                    if (autoRefresh) {
                        transaction.advanceRead();
                    }
                    sendNotifications();
                }
            }
        };
        if (Looper.myLooper() == null) {
            Looper.loop();
        }
        LooperThread.handlers.put(handler, id);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905053361/fstmerge_base_4707268014328496786
=======
        this.id = absolutePath.hashCode();
        if (!looperThread.isAlive()) {
            looperThread.start();
        }

        if (Looper.myLooper() == null) {
            Looper.prepare();
        }
        handler = new Handler() {
            @Override
            public void handleMessage(Message message) {
                if (message.what == LooperThread.REALM_CHANGED) {
                    sendNotifications();
                }
            }
        };
        if (Looper.myLooper() == null) {
            Looper.loop();
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905053361/fstmerge_var2_2066358232828876165
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_46df8_fa049/rev_46df8-fa049/realm/src/main/java/io/realm/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905059127/fstmerge_var1_811474559579646934
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905059127/fstmerge_base_7518128189470731439
public void generate() throws IOException, UnsupportedOperationException {
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

        writer.emitPackage(realmPackageName)
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + tablePrefix + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s%s\")", tablePrefix, this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", tablePrefix, fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), tablePrefix, fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", tablePrefix, genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), tablePrefix, genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s%s\")", tablePrefix, this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

        // End the class definition
        writer.endType();
        writer.close();
    }
=======
public void generate() throws IOException, UnsupportedOperationException {
        String qualifiedGeneratedClassName = String.format("%s.%sRealmProxy", realmPackageName, className);
        JavaFileObject sourceFile = processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
        JavaWriter writer = new JavaWriter(new BufferedWriter(sourceFile.openWriter()));

        Elements elementUtils = processingEnvironment.getElementUtils();
        Types typeUtils = processingEnvironment.getTypeUtils();

        TypeMirror realmObject = elementUtils.getTypeElement("io.realm.RealmObject").asType();
        DeclaredType realmList = typeUtils.getDeclaredType(elementUtils.getTypeElement("io.realm.RealmList"), typeUtils.getWildcardType(null, null));

        // Set source code indent to 4 spaces
        writer.setIndent("    ");

        writer.emitPackage(realmPackageName)
                .emitEmptyLine();

        writer.emitImports(
                "io.realm.internal.ColumnType",
                "io.realm.internal.Table",
                "io.realm.internal.ImplicitTransaction",
                "io.realm.internal.Row",
                "io.realm.internal.LinkView",
                "io.realm.RealmList",
                "io.realm.RealmObject",
                "java.util.Date",
                "java.util.Arrays",
                packageName + ".*")
                .emitEmptyLine();

        // Begin the class definition
        writer.beginType(
                qualifiedGeneratedClassName, // full qualified name of the item to generate
                "class",                     // the type of the item
                EnumSet.of(Modifier.PUBLIC), // modifiers to apply
                className)                   // class to extend
                .emitEmptyLine();

        // Accessors
        ListIterator<VariableElement> iterator = fields.listIterator();
        while (iterator.hasNext()) {
            int columnNumber = iterator.nextIndex();
            VariableElement field = iterator.next();

            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                /**
                 * Primitives and boxed types
                 */
                String realmType = JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
                String castingType = CASTING_TYPES.get(fieldTypeCanonicalName);

                // Getter
                writer.emitAnnotation("Override");
                String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
                writer.beginMethod(fieldTypeCanonicalName, getterPrefix + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return (%s) realmGetRow().get%s(%d)",
                        fieldTypeCanonicalName, realmType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement(
                        "realmGetRow().set%s(%d, (%s) value)",
                        realmType, columnNumber, castingType);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                /**
                 * Links
                 */

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.beginControlFlow("if (realmGetRow().isNullLink(%d))", columnNumber);
                writer.emitStatement("return null");
                writer.endControlFlow();
                writer.emitStatement(
                        "return realm.get(%s.class, realmGetRow().getLink(%d))",
                        fieldTypeCanonicalName, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("realmGetRow().nullifyLink(%d)", columnNumber);
                writer.endControlFlow();
                writer.emitStatement("realmGetRow().setLink(%d, value.realmGetRow().getIndex())", columnNumber);
                writer.endMethod();
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                /**
                 * LinkLists
                 */
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }

                // Getter
                writer.emitAnnotation("Override");
                writer.beginMethod(fieldTypeCanonicalName, "get" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC));
                writer.emitStatement(
                        "return new RealmList(%s.class, realmGetRow().getLinkList(%d), realm)",
                        genericType, columnNumber);
                writer.endMethod();
                writer.emitEmptyLine();

                // Setter
                writer.emitAnnotation("Override");
                writer.beginMethod("void", "set" + capitaliseFirstChar(fieldName), EnumSet.of(Modifier.PUBLIC), fieldTypeCanonicalName, "value");
                writer.emitStatement("LinkView links = realmGetRow().getLinkList(%d)", columnNumber);
                writer.beginControlFlow("if (value == null)");
                writer.emitStatement("return"); // TODO: delete all the links instead
                writer.endControlFlow();
                writer.beginControlFlow("for (RealmObject linkedObject : (RealmList<? extends RealmObject>) value)");
                writer.emitStatement("links.add(linkedObject.realmGetRow().getIndex())");
                writer.endControlFlow();
                writer.endMethod();
            } else {
                throw new UnsupportedOperationException(
                        String.format("Type %s of field %s is not supported", fieldTypeCanonicalName, fieldName));
            }
            writer.emitEmptyLine();
        }

        /**
         * initTable method
         */
        writer.beginMethod(
                "Table", // Return type
                "initTable", // Method name
                EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
                "ImplicitTransaction", "transaction"); // Argument type & argument name

        writer.beginControlFlow("if(!transaction.hasTable(\"" + tablePrefix + this.className + "\"))");
        writer.emitStatement("Table table = transaction.getTable(\"%s%s\")", tablePrefix, this.className);

        // For each field generate corresponding table index constant
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String fieldTypeName;
            if (fieldTypeCanonicalName.contains(".")) {
                fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
            } else {
                fieldTypeName = fieldTypeCanonicalName;
            }

            if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
                writer.emitStatement("table.addColumn(%s, \"%s\")",
                        JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),
                        fieldName.toLowerCase(Locale.getDefault()));
            } else if (typeUtils.isAssignable(field.asType(), realmObject)) {
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", tablePrefix, fieldTypeName);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", fieldTypeName);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), tablePrefix, fieldTypeName);
            } else if (typeUtils.isAssignable(field.asType(), realmList)) {
                String genericCanonicalType = ((DeclaredType) field.asType()).getTypeArguments().get(0).toString();
                String genericType;
                if (genericCanonicalType.contains(".")) {
                    genericType = genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
                } else {
                    genericType = genericCanonicalType;
                }
                writer.beginControlFlow("if (!transaction.hasTable(\"%s%s\"))", tablePrefix, genericType);
                writer.emitStatement("%sRealmProxy.initTable(transaction)", genericType);
                writer.endControlFlow();
                writer.emitStatement("table.addColumnLink(ColumnType.LINK_LIST, \"%s\", transaction.getTable(\"%s%s\"))",
                        fieldName.toLowerCase(Locale.getDefault()), tablePrefix, genericType);
            }
        }
        writer.emitStatement("return table");
        writer.endControlFlow();
        writer.emitStatement("return transaction.getTable(\"%s%s\")", tablePrefix, this.className);
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * toString method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            String getterPrefix = fieldTypeCanonicalName.equals("boolean")?"is":"get";
            writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
            writer.emitStatement("stringBuilder.append(%s%s())", getterPrefix, capitaliseFirstChar(fieldName));
            writer.emitStatement("stringBuilder.append(\"} \")", fieldName);
        }
        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * hashCode method
         */
        writer.emitAnnotation("Override");
        writer.beginMethod("int", "hashCode", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("int result = 17");
        int counter = 0;
        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String fieldTypeCanonicalName = field.asType().toString();
            if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
                for (String statement : HASHCODE.get(fieldTypeCanonicalName)) {
                    if (statement.contains("%d") && statement.contains("%s")) {
                        // This statement introduces a temporary variable
                        writer.emitStatement(statement, counter, capitaliseFirstChar(fieldName));
                    } else if(statement.contains("%d")) {
                        // This statement uses the temporary variable
                        writer.emitStatement(statement, counter, counter);
                    } else if (statement.contains("%s")) {
                        // This is a normal statement with only one assignment
                        writer.emitStatement(statement, capitaliseFirstChar(fieldName));
                    } else {
                        // This should never happen
                        throw new AssertionError();
                    }
                }
            } else {
                // Links and Link lists
                writer.emitStatement("%s temp_%d = get%s()", fieldTypeCanonicalName, counter, capitaliseFirstChar(fieldName));
                writer.emitStatement("result = 31 * result + (temp_%d != null ? temp_%d.hashCode() : 0)", counter, counter);
            }
            counter++;
        }
        writer.emitStatement("return result");
        writer.endMethod();
        writer.emitEmptyLine();

        /**
         * equals method
         */
        String proxyClassName = className + "RealmProxy";
        writer.emitAnnotation("Override");
        writer.beginMethod("boolean", "equals", EnumSet.of(Modifier.PUBLIC), "Object", "o");
        writer.emitStatement("if (this == o) return true");
        writer.emitStatement("if (o == null || getClass() != o.getClass()) return false");
        writer.emitStatement("%s a%s = (%s)o", proxyClassName, className, proxyClassName);  // FooRealmProxy aFoo = (FooRealmProxy)o

        for (VariableElement field : fields) {
            String fieldName = field.getSimpleName().toString();
            String capFieldName = capitaliseFirstChar(fieldName);
            String fieldTypeCanonicalName = field.asType().toString();
            if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
                switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
                    case EQUALS_DIRECT: // if (getField() != aFoo.getField()) return false
                        String getterPrefix = fieldTypeCanonicalName.equals("boolean") ? "is" : "get";
                        writer.emitStatement("if (%s%s() != a%s.%s%s()) return false", getterPrefix, capFieldName, className, getterPrefix, capFieldName);
                        break;
                    case EQUALS_NULL: // if (getField() != null = !getField().equals(aFoo.getField()) : aFoo.getField() != null) return false
                        writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                                capFieldName,
                                capFieldName, className, capFieldName,
                                className, capFieldName);
                        break;
                    case EQUALS_ARRAY: // if (!Arrays.equals(getField(), aFoo.getField())) return false
                        writer.emitStatement("if (!Arrays.equals(get%s(), a%s.get%s())) return false",
                                capFieldName,
                                className, capFieldName);
                        break;
                    case EQUALS_COMPARE: // if (
                        writer.emitStatement("if (%s.compare(get%s(), a%s.get%s()) != 0) return false",
                                capitaliseFirstChar(fieldTypeCanonicalName), capitaliseFirstChar(fieldName), className,
                                capitaliseFirstChar(fieldName));
                        break;
                }
            }
            else if (typeUtils.isAssignable(field.asType(), realmObject) || typeUtils.isAssignable(field.asType(), realmList)) {
                writer.emitStatement("if (get%s() != null ? !get%s().equals(a%s.get%s()) : a%s.get%s() != null) return false",
                        capFieldName,
                        capFieldName, className, capFieldName,
                         className, capFieldName);
            }
        }
        writer.emitStatement("return true");
        writer.endMethod();
        writer.emitEmptyLine();

        // End the class definition
        writer.endType();
        writer.close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415905059127/fstmerge_var2_720980107055897780

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_46df8_fa049/rev_46df8-fa049/realm-annotations-processor/src/main/java/io/realm/processor/RealmSourceCodeGenerator.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b4ff9_47a26/rev_b4ff9-47a26.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b8e10_b4ff9/rev_b8e10-b4ff9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a6d56_8601e/rev_a6d56-8601e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_870c5_47a26/rev_870c5-47a26.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_870c5_d275d/rev_870c5-d275d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b17e8_870c5/rev_b17e8-870c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e154b_e1053/rev_e154b-e1053.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ce0ed_17733/rev_ce0ed-17733.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d838a_0d077/rev_d838a-0d077.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d838a_f06af/rev_d838a-f06af.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d838a_46408/rev_d838a-46408.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c7df5_d838a/rev_c7df5-d838a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5dfb1_51e1e/rev_5dfb1-51e1e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f88a4_bfda7/rev_f88a4-bfda7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_28c4b_12792/rev_28c4b-12792.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_821ef_28c4b/rev_821ef-28c4b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c6a9f_1018c/rev_c6a9f-1018c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f1fe1_c6a9f/rev_f1fe1-c6a9f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3bef3_6bcae/rev_3bef3-6bcae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a1bf7_3bef3/rev_a1bf7-3bef3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fdb54_8a997/rev_fdb54-8a997.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a888f_5f95f/rev_a888f-5f95f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ef354_d28c2/rev_ef354-d28c2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ef354_208d8/rev_ef354-208d8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ef354_7a8ac/rev_ef354-7a8ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f758a_ef354/rev_f758a-ef354.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_39b2a_35968/rev_39b2a-35968.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_28ad6_b9cd7/rev_28ad6-b9cd7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a42c0_b8a6f/rev_a42c0-b8a6f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b33c8_a42c0/rev_b33c8-a42c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_59b04_d4d90/rev_59b04-d4d90.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5e840_b1f3a/rev_5e840-b1f3a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5e840_c3b4e/rev_5e840-c3b4e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_5e840_57eca/rev_5e840-57eca.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_90626_5e840/rev_90626-5e840.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_a4f9b/rev_7121a-a4f9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_6765b/rev_7121a-6765b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_860b1_47f77/rev_860b1-47f77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static Realm create(File writableFolder, String filename) {
        String absolutePath = new File(writableFolder, filename).getAbsolutePath();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023357/fstmerge_var1_1589821129187925534
        return create(absolutePath, null);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023357/fstmerge_base_9040268015367370478
        return create(absolutePath);
=======
        return createAndValidate(absolutePath, true);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023357/fstmerge_var2_1467853728950471193
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm/src/main/java/io/realm/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023361/fstmerge_var1_7474194819615327759
        protected SoftReference<Realm> initialValue() {
            Realm realm = new Realm(absolutePath, key);
            key = null;
            return new SoftReference<Realm>(realm);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023361/fstmerge_base_331450697570572656
        protected SoftReference<Realm> initialValue() {
            Realm realm = new Realm(absolutePath);
            return new SoftReference<Realm>(realm);
=======
        protected Map<String, Realm> initialValue() {
            return new HashMap<String, Realm>();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023361/fstmerge_var2_969990859821777719
        }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm/src/main/java/io/realm/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023416/fstmerge_var1_7781721450009599181
private int getVersion() {
        return version;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023416/fstmerge_base_1362709294983621625
public int getVersion() {
        return version;
=======
private long getVersion() {
        if (!transaction.hasTable("metadata")) {
            return UNVERSIONED;
        }
        Table metadataTable = transaction.getTable("metadata");
        return metadataTable.getLong(0, 0);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023416/fstmerge_var2_7013080662659442184
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm/src/main/java/io/realm/Realm.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023430/fstmerge_var1_9178293683694573120
private void setVersion(int version) {
        this.version = version;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023430/fstmerge_base_7709395014541683823
public void setVersion(int version) {
        this.version = version;
    }
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908023430/fstmerge_var2_5051012435551477143

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm/src/main/java/io/realm/Realm.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ Set<String> classesToValidate = new HashSet<String>(); ##FSTMerge## ##FSTMerge## private static Set<String> classesToValidate = new HashSet<String>();
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ boolean done = false; ##FSTMerge## ##FSTMerge## private static boolean done = false;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908028166/fstmerge_var1_6898958462300402293
@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
            String className;
            String packageName;
            List<VariableElement> fields = new ArrayList<VariableElement>();

            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                error("The RealmClass annotation can only be applied to classes");
                return false;
            }
            TypeElement typeElement = (TypeElement) classElement;
            className = typeElement.getSimpleName().toString();
            classesToValidate.add(className);

            if (typeElement.toString().endsWith(".RealmObject") || typeElement.toString().endsWith("RealmProxy")) {
                continue;
            }

            // Get the package of the class
            Element enclosingElement = typeElement.getEnclosingElement();
            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
                error("The RealmClass annotation does not support nested classes");
                return false;
            }

            TypeElement parentElement = (TypeElement) processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
            if (!parentElement.toString().endsWith(".RealmObject")) {
                error("A RealmClass annotated object must be derived from RealmObject");
                return false;
            }

            PackageElement packageElement = (PackageElement) enclosingElement;
            packageName = packageElement.getQualifiedName().toString();

            for (Element element : typeElement.getEnclosedElements()) {
                if (element.getKind().equals(ElementKind.FIELD)) {
                    VariableElement variableElement = (VariableElement) element;
                    if (variableElement.getAnnotation(Ignore.class) != null) {
                        // The field has the @Ignore annotation. No need to go any further.
                        continue;
                    }

                    if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
                        error("The fields of the model must be private");
                        return false;
                    }

                    fields.add(variableElement);
                }
            }

            RealmProxyClassGenerator sourceCodeGenerator =
                    new RealmProxyClassGenerator(processingEnv, className, packageName, fields);
            try {
                sourceCodeGenerator.generate();
            } catch (IOException e) {
                error(e.getMessage());
            } catch (UnsupportedOperationException e) {
                error(e.getMessage());
            }
        }

        if (!done) {
            RealmValidationListGenerator validationGenerator = new RealmValidationListGenerator(processingEnv, classesToValidate);
            done = true;
            try {
                validationGenerator.generate();
            } catch (IOException e) {
                error(e.getMessage());
            }
        }

        return true;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908028166/fstmerge_base_1909198270360265523
=======
@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
            String className;
            String packageName;
            List<VariableElement> fields = new ArrayList<VariableElement>();

            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                error("The RealmClass annotation can only be applied to classes");
                return true;
            }
            TypeElement typeElement = (TypeElement) classElement;
            className = typeElement.getSimpleName().toString();

            if (typeElement.toString().endsWith(".RealmObject") || typeElement.toString().endsWith("RealmProxy")) {
                continue;
            }

            classesToValidate.add(typeElement.toString());

            // Get the package of the class
            Element enclosingElement = typeElement.getEnclosingElement();
            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
                error("The RealmClass annotation does not support nested classes");
                return true;
            }

            TypeElement parentElement = (TypeElement) processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
            if (!parentElement.toString().endsWith(".RealmObject")) {
                error("A RealmClass annotated object must be derived from RealmObject");
                return true;
            }

            PackageElement packageElement = (PackageElement) enclosingElement;
            packageName = packageElement.getQualifiedName().toString();

            for (Element element : typeElement.getEnclosedElements()) {
                if (element.getKind().equals(ElementKind.FIELD)) {
                    VariableElement variableElement = (VariableElement) element;
                    if (variableElement.getAnnotation(Ignore.class) != null) {
                        // The field has the @Ignore annotation. No need to go any further.
                        continue;
                    }

                    if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
                        error("The fields of the model must be private");
                        return true;
                    }

                    fields.add(variableElement);
                }
            }

            RealmProxyClassGenerator sourceCodeGenerator =
                    new RealmProxyClassGenerator(processingEnv, className, packageName, fields);
            try {
                sourceCodeGenerator.generate();
            } catch (IOException e) {
                error(e.getMessage());
            } catch (UnsupportedOperationException e) {
                error(e.getMessage());
            }
        }

        if (!done) {
            RealmValidationListGenerator validationGenerator = new RealmValidationListGenerator(processingEnv, classesToValidate);
            try {
                validationGenerator.generate();
                done = true;
            } catch (IOException e) {
                error(e.getMessage());
            }
        }

        return true;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908028166/fstmerge_var2_1082039970847271639

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7121a_855e2/rev_7121a-855e2/realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f96d6_7121a/rev_f96d6-7121a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6170c_bc2ad/rev_6170c-bc2ad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6170c_fbcea/rev_6170c-fbcea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1e117_6170c/rev_1e117-6170c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b05aa_9224f/rev_b05aa-9224f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b05aa_ad91f/rev_b05aa-ad91f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e15c1_b05aa/rev_e15c1-b05aa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8ab5d_ab696/rev_8ab5d-ab696.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8ab5d_d3306/rev_8ab5d-d3306.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dd78c_8ab5d/rev_dd78c-8ab5d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a009f_c0d19/rev_a009f-c0d19.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7eeaf_a009f/rev_7eeaf-a009f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_40377_464d4/rev_40377-464d4.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908928029/fstmerge_var1_3820950408071813423
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908928029/fstmerge_base_3994565596469763783

=======

        RealmVersionChecker updateChecker = new RealmVersionChecker(processingEnv);
        updateChecker.executeRealmVersionUpdate();

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415908928029/fstmerge_var2_7655069873123028136
        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
            String className;
            String packageName;
            List<VariableElement> fields = new ArrayList<VariableElement>();

            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                error("The RealmClass annotation can only be applied to classes");
                return true;
            }
            TypeElement typeElement = (TypeElement) classElement;
            className = typeElement.getSimpleName().toString();

            if (typeElement.toString().endsWith(".RealmObject") || typeElement.toString().endsWith("RealmProxy")) {
                continue;
            }

            classesToValidate.add(typeElement.toString());

            // Get the package of the class
            Element enclosingElement = typeElement.getEnclosingElement();
            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
                error("The RealmClass annotation does not support nested classes");
                return true;
            }

            TypeElement parentElement = (TypeElement) processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
            if (!parentElement.toString().endsWith(".RealmObject")) {
                error("A RealmClass annotated object must be derived from RealmObject");
                return true;
            }

            PackageElement packageElement = (PackageElement) enclosingElement;
            packageName = packageElement.getQualifiedName().toString();

            for (Element element : typeElement.getEnclosedElements()) {
                if (element.getKind().equals(ElementKind.FIELD)) {
                    VariableElement variableElement = (VariableElement) element;
                    if (variableElement.getAnnotation(Ignore.class) != null) {
                        // The field has the @Ignore annotation. No need to go any further.
                        continue;
                    }

                    if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
                        error("The fields of the model must be private");
                        return true;
                    }

                    fields.add(variableElement);
                }
            }

            RealmProxyClassGenerator sourceCodeGenerator =
                    new RealmProxyClassGenerator(processingEnv, className, packageName, fields);
            try {
                sourceCodeGenerator.generate();
            } catch (IOException e) {
                error(e.getMessage());
            } catch (UnsupportedOperationException e) {
                error(e.getMessage());
            }
        }

        if (!done) {
            RealmValidationListGenerator validationGenerator = new RealmValidationListGenerator(processingEnv, classesToValidate);
            try {
                validationGenerator.generate();
                done = true;
            } catch (IOException e) {
                error(e.getMessage());
            }
        }

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_40377_464d4/rev_40377-464d4/realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7976d_40377/rev_7976d-40377.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e164c_27e06/rev_e164c-27e06.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9db6a_19479/rev_9db6a-19479.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2958f_3db42/rev_2958f-3db42.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_335ce_5ecdd/rev_335ce-5ecdd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dd178_123fd/rev_dd178-123fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_73ba3_335ce/rev_73ba3-335ce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_aa688_847fd/rev_aa688-847fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1b5a9_4c1b2/rev_1b5a9-4c1b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ac615_d8592/rev_ac615-d8592.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b223e_66168/rev_b223e-66168.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void onClick(View v) {
        String personName = ((TextView) findViewById(R.id.name)).getText().toString();
        String personAge = ((TextView) findViewById(R.id.age)).getText().toString();
        String petName = ((TextView) findViewById(R.id.pets_name)).getText().toString();

        Integer parseAge = 0;
        try {
            parseAge = Integer.parseInt(personAge);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909267002/fstmerge_var1_4271488779193267964
        } catch (NumberFormatException ignored) {

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909267002/fstmerge_base_6174960394303606602
        } catch (NumberFormatException e) {

=======
        } catch (NumberFormatException e) {
	        Log.d(TAG, "Age for a person invalid");
	        return;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909267002/fstmerge_var2_6608832208084168886
        }

        realm.beginTransaction();
        Person person = realm.createObject(Person.class);
        person.setName(personName);
        person.setAge(parseAge);

        int checkedId = ((RadioGroup) findViewById(R.id.petType)).getCheckedRadioButtonId();
        if (checkedId == R.id.hasCat) {
            Cat cat = realm.createObject(Cat.class);
            cat.setName(petName);
            RealmList<Cat> cats = person.getCats();
            cats.add(cat);
        } else if (checkedId == R.id.hasDog) {
            Dog dog = realm.createObject(Dog.class);
            dog.setName(petName);
            person.setDog(dog);
        }

        realm.commitTransaction();

    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b223e_66168/rev_b223e-66168/examples/concurrencyExample/src/main/java/io/realm/examples/concurrency/RealmExampleActivity.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f8318_ac615/rev_f8318-ac615.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_89142_0aad8/rev_89142-0aad8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_351e8_7dd81/rev_351e8-7dd81.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ddae1_e40d8/rev_ddae1-e40d8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4537b_ddae1/rev_4537b-ddae1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b16fb_bccff/rev_b16fb-bccff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cefbb_002b1/rev_cefbb-002b1.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void promoteToWrite() {
        if (immutable) {
            immutable = false;
            parent.promoteToWrite();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909473514/fstmerge_var1_8796419257593093084
        }
        else {
            throw new RealmException("Nested transactions are not allowed. Use commitTransactoin() after each beginTransaction.");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909473514/fstmerge_base_3326599816247334726
        }
        else {
            throw new RealmException("Trying to begin write transaction within a write transaction");
=======
        } else {
            throw new RealmException("Trying to begin write transaction within a write transaction");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909473514/fstmerge_var2_3864604084528108935
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cefbb_002b1/rev_cefbb-002b1/realm/src/main/java/io/realm/internal/ImplicitTransaction.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_885de_b16fb/rev_885de-b16fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9cd52_35ee9/rev_9cd52-35ee9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7842e_9cd52/rev_7842e-9cd52.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1a0d_2e21b/rev_c1a0d-2e21b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_67a62_c1a0d/rev_67a62-c1a0d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3e5f9_e3cad/rev_3e5f9-e3cad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9cb3b_5f454/rev_9cb3b-5f454.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        RealmVersionChecker updateChecker = new RealmVersionChecker(processingEnv);
        updateChecker.executeRealmVersionUpdate();

        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
            String className;
            String packageName;
            List<VariableElement> fields = new ArrayList<VariableElement>();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909687994/fstmerge_var1_4945268384665747161
            List<String> ignoredFields = new ArrayList<String>();
            List<String> expectedGetters = new ArrayList<String>();
            List<String> expectedSetters = new ArrayList<String>();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909687994/fstmerge_base_2228415972300616962
=======
            List<VariableElement> fieldsToIndex = new ArrayList<VariableElement>();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415909687994/fstmerge_var2_6199996358935347212

            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                error("The RealmClass annotation can only be applied to classes", classElement);
            }
            TypeElement typeElement = (TypeElement) classElement;
            className = typeElement.getSimpleName().toString();

            if (typeElement.toString().endsWith(".RealmObject") || typeElement.toString().endsWith("RealmProxy")) {
                continue;
            }

            note("Processing class " + className);

            classesToValidate.add(typeElement.toString());

            // Get the package of the class
            Element enclosingElement = typeElement.getEnclosingElement();
            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
                error("The RealmClass annotation does not support nested classes", classElement);
            }

            TypeElement parentElement = (TypeElement) processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
            if (!parentElement.toString().endsWith(".RealmObject")) {
                error("A RealmClass annotated object must be derived from RealmObject", classElement);
            }

            PackageElement packageElement = (PackageElement) enclosingElement;
            packageName = packageElement.getQualifiedName().toString();

            for (Element element : typeElement.getEnclosedElements()) {
                ElementKind elementKind = element.getKind();
                if (elementKind.equals(ElementKind.FIELD)) {
                    VariableElement variableElement = (VariableElement) element;
                    String fieldName = variableElement.getSimpleName().toString();
                    if (variableElement.getAnnotation(Ignore.class) != null) {
                        // The field has the @Ignore annotation. No need to go any further.
                        ignoredFields.add(fieldName);
                        continue;
                    }

                    if (variableElement.getAnnotation(Index.class) != null) {
                        // The field has the @Index annotation. It's only valid for:
                        // * String
                        String elementTypeCanonicalName = variableElement.asType().toString();
                        if (elementTypeCanonicalName.equals("java.lang.String")) {
                            fieldsToIndex.add(variableElement);
                        } else {
                            error("@Index is only possible for String fields - got " + elementTypeCanonicalName);
                            return true;
                        }
                    }

                    if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
                        error("The fields of the model must be private", variableElement);
                    }

                    fields.add(variableElement);
                    expectedGetters.add(fieldName);
                    expectedSetters.add(fieldName);
                } else if (elementKind.equals(ElementKind.METHOD)) {
                    ExecutableElement executableElement = (ExecutableElement) element;

                    if (!executableElement.getModifiers().contains(Modifier.PUBLIC)) {
                        error("The methods of the model must be public", executableElement);
                    }

                    String methodName = executableElement.getSimpleName().toString();
                    String computedFieldName = methodName.startsWith("is")?lowerFirstChar(methodName.substring(2)):lowerFirstChar(methodName.substring(3));
                    if (methodName.startsWith("get") || methodName.startsWith("is")) {
                        boolean found = false;
                        for (VariableElement field : fields) {
                            if (field.getSimpleName().toString().equals(computedFieldName)) {
                                found = true;
                            }
                        }
                        if (ignoredFields.contains(computedFieldName)) {
                            found = true;
                        }
                        if (!found) {
                            error(String.format("No field named %s for the getter %s", computedFieldName, methodName), executableElement);
                        }
                        expectedGetters.remove(computedFieldName);
                    } else if (methodName.startsWith("set")) {
                        boolean found = false;
                        for (VariableElement field : fields) {
                            if (field.getSimpleName().toString().equals(computedFieldName)) {
                                found = true;
                            }
                        }
                        if (ignoredFields.contains(computedFieldName)) {
                            found = true;
                        }
                        if (!found) {
                            error(String.format("No field named %s for the setter %s", computedFieldName, methodName), executableElement);
                        }
                        expectedSetters.remove(computedFieldName);
                    } else {
                        error("Only getters and setters should be defined in model classes", executableElement);
                    }
                }
            }

            for (String expectedGetter : expectedGetters) {
                error("No getter found for field " + expectedGetter);
            }
            for (String expectedSetter : expectedSetters) {
                error("No getter found for field " + expectedSetter);
            }

            RealmProxyClassGenerator sourceCodeGenerator =
                    new RealmProxyClassGenerator(processingEnv, className, packageName, fields, fieldsToIndex);
            try {
                sourceCodeGenerator.generate();
            } catch (IOException e) {
                error(e.getMessage(), classElement);
            } catch (UnsupportedOperationException e) {
                error(e.getMessage(), classElement);
            }
        }

        if (!done) {
            RealmValidationListGenerator validationGenerator = new RealmValidationListGenerator(processingEnv, classesToValidate);
            try {
                validationGenerator.generate();
                done = true;
            } catch (IOException e) {
                error(e.getMessage());
            }
        }

        return true;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9cb3b_5f454/rev_9cb3b-5f454/realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_87b2c_abb51/rev_87b2c-abb51.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b31d1_9bad2/rev_b31d1-9bad2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f19a4_87b2c/rev_f19a4-87b2c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c5a86_87483/rev_c5a86-87483.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c744d_c5a86/rev_c744d-c5a86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b7655_06375/rev_b7655-06375.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d757f_4a84b/rev_d757f-4a84b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_36db9_e3930/rev_36db9-e3930.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e24be_b7655/rev_e24be-b7655.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_eb987_07749/rev_eb987-07749.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2622c_eb987/rev_2622c-eb987.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f8e70_b26ce/rev_f8e70-b26ce.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0cdc2_ded5b/rev_0cdc2-ded5b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1406a_0cdc2/rev_1406a-0cdc2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_9e42f_2dfcf/rev_9e42f-2dfcf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c043e_9e42f/rev_c043e-9e42f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4984b_e7803/rev_4984b-e7803.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4984b_7e318/rev_4984b-7e318.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_4984b_e837d/rev_4984b-e837d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_15cdc_4984b/rev_15cdc-4984b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2d1d7_300b6/rev_2d1d7-300b6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_48a27_2d1d7/rev_48a27-2d1d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_8aaf7_f79bb/rev_8aaf7-f79bb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3101e_8aaf7/rev_3101e-8aaf7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_39d00_53283/rev_39d00-53283.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_758d8_39d00/rev_758d8-39d00.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_00e86_f496b/rev_00e86-f496b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_6f5ee_39b7e/rev_6f5ee-39b7e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f6c08_00e86/rev_f6c08-00e86.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7e08f_a7171/rev_7e08f-a7171.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d414a_7e08f/rev_d414a-7e08f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2506e_6c9e8/rev_2506e-6c9e8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_3a0fb_4617f/rev_3a0fb-4617f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2a78a_2506e/rev_2a78a-2506e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_19889_3b0ab/rev_19889-3b0ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_93f05_19889/rev_93f05-19889.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2409a_a8806/rev_2409a-a8806.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2764e_46a36/rev_2764e-46a36.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d08b4_2764e/rev_d08b4-2764e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f2fec_2249f/rev_f2fec-2249f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_dfb3f_efb93/rev_dfb3f-efb93.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db870_a78c4/rev_db870-a78c4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db870_f8218/rev_db870-f8218.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void onResume() {
        super.onResume();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161178/fstmerge_var1_8609564803222877526

        //Alternatively can use transaction tests here...
        //startTransactionTests();

        startSpawnTests();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161178/fstmerge_base_7397380607351824959

	//Alternatively can use transaction tests here...
        //startTransactionTests();

        startSpawnTests();
=======
        startTests();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161178/fstmerge_var2_5411600459414369656
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db870_f8218/rev_db870-f8218/examples/concurrencyExample/src/main/java/io/realm/examples/concurrency/RealmExampleActivity.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void onStop() {
        super.onStop();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161183/fstmerge_var1_7887760104148209313

        //Alternatively can use transaction tests here...
        //stopTransactionTests();

        stopSpawnTests();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161183/fstmerge_base_7361722576775134904

	//Alternatively can use transaction tests here...
        //stopTransactionTests();

        stopSpawnTests();
=======
        stopTests();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415911161183/fstmerge_var2_9027675430224302370
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_db870_f8218/rev_db870-f8218/examples/concurrencyExample/src/main/java/io/realm/examples/concurrency/RealmExampleActivity.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e8f7f_2cc27/rev_e8f7f-2cc27.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1a93_0b9ec/rev_c1a93-0b9ec.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1a93_76e47/rev_c1a93-76e47.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_748ad_c1a93/rev_748ad-c1a93.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_82b4b_7f5cf/rev_82b4b-7f5cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_bd770_36ba5/rev_bd770-36ba5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_2a4b6_bd770/rev_2a4b6-bd770.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_1db8e_4cec1/rev_1db8e-4cec1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_43d1f_ad405/rev_43d1f-ad405.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b53aa_008fd/rev_b53aa-008fd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e2c09_857b1/rev_e2c09-857b1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_eb116_385f4/rev_eb116-385f4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c1bde_e19cd/rev_c1bde-e19cd.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_43a94_0d6ab/rev_43a94-0d6ab.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7f1e8_43a94/rev_7f1e8-43a94.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_355ba_3599b/rev_355ba-3599b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_edec6_da4e3/rev_edec6-da4e3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b56b8_7025b/rev_b56b8-7025b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_7df93_8b2d5/rev_7df93-8b2d5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_0f16b_d2e76/rev_0f16b-d2e76.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_123d1_0f16b/rev_123d1-0f16b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_d1b7a_03b01/rev_d1b7a-03b01.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_17905_7fc58/rev_17905-7fc58.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7325_58dbf/rev_e7325-58dbf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_e7325_de590/rev_e7325-de590.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_f2217_e7325/rev_f2217-e7325.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_07415_5a06b/rev_07415-5a06b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c08ac_8288b/rev_c08ac-8288b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_b4c41_c08ac/rev_b4c41-c08ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_688f1_c2c91/rev_688f1-c2c91.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_79b3e_1b6ee/rev_79b3e-1b6ee.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public void testDistinct() {
        testRealm.beginTransaction();
        for (int i = 0; i < 10; ++i) {
            Dog dog = testRealm.createObject(Dog.class);
            if (i % 2 == 0) {
                dog.setName("Rex");
            } else {
                dog.setName("King");
            }
        }
        testRealm.commitTransaction();

        RealmResults<Dog> dogs = testRealm.distinct(Dog.class, "name");
        assertEquals(2, dogs.size());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415912391193/fstmerge_var1_7811313160655887513
        
        // Verify exception is thrown if the field in not indexed.
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415912391193/fstmerge_base_8836387579753487387

=======

        // distinct() only works on indexed fields and will throw an exception if not
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1415912391193/fstmerge_var2_1019452322759859898
        try {
            RealmResults<AllTypes> allTypes = testRealm.distinct(AllTypes.class, "columnString");
            fail();
        } catch (UnsupportedOperationException ignore) {
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_79b3e_1b6ee/rev_79b3e-1b6ee/realm/src/androidTest/java/io/realm/RealmTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c656e_688f1/rev_c656e-688f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_a7a07_e97d8/rev_a7a07-e97d8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_cdb30_a7a07/rev_cdb30-a7a07.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_fb3fd_aad70/rev_fb3fd-aad70.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_c2f68_74218/rev_c2f68-74218.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/realm-java/revisions/rev_ed0ec_c2f68/rev_ed0ec-c2f68.revisions

=========================================================