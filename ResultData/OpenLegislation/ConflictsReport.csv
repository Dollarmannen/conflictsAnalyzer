=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_79edf_de57a/rev_79edf-de57a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_d9720_acbe9/rev_d9720-acbe9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_180aa_b7a8e/rev_180aa-b7a8e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_b8701_43229/rev_b8701-43229.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_dbff4_bf6c1/rev_dbff4-bf6c1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_fa185_bc200/rev_fa185-bc200.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_cba87_d0c8f/rev_cba87-d0c8f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_c82ba_32bf6/rev_c82ba-32bf6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_cbb6c_fdc6a/rev_cbb6c-fdc6a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7db23_8a3fb/rev_7db23-8a3fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_71b74_cc6a0/rev_71b74-cc6a0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_555e1_89d9b/rev_555e1-89d9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f5f44_bac8b/rev_f5f44-bac8b.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) throws IOException {
		IngestReader ir = new IngestReader();
		
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748840165/fstmerge_var1_5398931485408696288
		boolean tog = true;
		
		if(args.length > 0) {
			String command = args[0];
			if(args.length == 2) {
				String p1 = args[1];
				if(command.equals("-gx")) {
					XmlHelper.generateXml(p1);
				}
				else if(command.equals("-b")) {
					ir.writeBills(new ArrayList<Bill>(Arrays.asList((Bill)ir.loadObject(p1, Bill.class))), null, false);
				}
				else if(command.equals("-c")) {
					ir.indexSenateObject((Calendar)ir.loadObject(p1, Calendar.class));
				}
				else if(command.equals("-a")) {
					ir.indexSenateObject((Agenda)ir.loadObject(p1, Agenda.class));
				}
				else if(command.equals("-t")) {
					ir.indexSenateObject((Transcript)ir.loadObject(p1, Transcript.class));
				}
				else if(command.equals("-it")) {
					ir.handleTranscript(p1);
				}
				else {
					tog = false;
				}
			}
			else if(args.length == 3){
				String p1 = args[1];
				String p2 = args[2];
				if(command.equals("-i")) {
					WRITE_DIRECTORY = p1;
					ir.handlePath(p2);
				}
				else if(command.equals("-fc")) {
					ir.fixCalendarBills(p1, p2);
				}
				else if(command.equals("-fa")) {
					ir.fixAgendaBills(p1, p2);
				}
				else {
					tog = false;
				}
				
			}
			else if(args.length == 5) {
				String p1 = args[1];
				String p2 = args[2];
				String p3 = args[3];
				String p4 = args[4];
				
				if(command.equals("-pull")) {
					ir.pullSobis(p1, p2, p3, p4);
				}
				
			}
			else {
				tog = false;
			}
		}
		
		if(!tog) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748840165/fstmerge_base_4336678258924157653
		if(args.length == 2) {
			String command = args[0];
			String p1 = args[1];
			if(command.equals("-gx")) {
				XmlHelper.generateXml(p1);
			}
			else if(command.equals("-b")) {
				ir.writeBills(new ArrayList<Bill>(Arrays.asList((Bill)ir.loadObject(p1, Bill.class))), null, false);
			}
			else if(command.equals("-c")) {
				ir.indexSenateObject((Calendar)ir.loadObject(p1, Calendar.class));
			}
			else if(command.equals("-a")) {
				ir.indexSenateObject((Agenda)ir.loadObject(p1, Agenda.class));
			}
			else if(command.equals("-t")) {
				ir.indexSenateObject((Transcript)ir.loadObject(p1, Transcript.class));
			}
			else if(command.equals("-it")) {
				ir.handleTranscript(p1);
			}
			else {
				System.err.println("bad command");
			}
		}
		else if(args.length == 3){
			String command = args[0];
			String p1 = args[1];
			String p2 = args[2];
			if(command.equals("-i")) {
				WRITE_DIRECTORY = p1;
				ir.handlePath(p2);
			}
			else if(command.equals("-fc")) {
				ir.fixCalendarBills(p1, p2);
			}
			else if(command.equals("-fa")) {
				ir.fixAgendaBills(p1, p2);
			}
			else {
				System.err.println("bad command");
			}
		}
		else {
=======
		try {
			if(args.length == 2) {
				String command = args[0];
				String p1 = args[1];
				if(command.equals("-gx")) {
					XmlHelper.generateXml(p1);
				}
				else if(command.equals("-b")) {
					ir.writeBills(new ArrayList<Bill>(Arrays.asList((Bill)ir.loadObject(p1, Bill.class))), null, false);
				}
				else if(command.equals("-c")) {
					ir.indexSenateObject((Calendar)ir.loadObject(p1, Calendar.class));
				}
				else if(command.equals("-a")) {
					ir.indexSenateObject((Agenda)ir.loadObject(p1, Agenda.class));
				}
				else if(command.equals("-t")) {
					ir.indexSenateObject((Transcript)ir.loadObject(p1, Transcript.class));
				}
				else if(command.equals("-it")) {
					ir.handleTranscript(p1);
				}
				else {
					throw new IngestException();
				}
			}
			else if(args.length == 3){
				String command = args[0];
				String p1 = args[1];
				String p2 = args[2];
				if(command.equals("-i")) {
					WRITE_DIRECTORY = p1;
					ir.handlePath(p2);
				}
				else if(command.equals("-fc")) {
					ir.fixCalendarBills(p1, p2);
				}
				else if(command.equals("-fa")) {
					ir.fixAgendaBills(p1, p2);
				}
				else {
					throw new IngestException();
				}
			}
			else {
				throw new IngestException();
			}
		} catch(IngestException e) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748840165/fstmerge_var2_7457281139102293858
			System.err.println("appropriate usage is:\n" +
					"\t-i <json directory> <sobi directory> (to create index)\n" +
					"\t-gx <sobi directory> (to generate agenda and calendar xml from sobi)\n" +
					"\t-fc <year> <calendar directory> (to fix calendar bills)\n" +
					"\t-fa <year> <agenda directory> (to fix agenda bills)\n" +
					"\t-b <bill json path> (to reindex single bill)\n" +
					"\t-c <calendar json path> (to reindex single calendar)\n" +
					"\t-a <agenda json path> (to reindex single agenda)\n" +
					"\t-t <transcript json path> (to reindex single transcript)" +
					"\t-it <transcript sobi path> (to reindex dir of transcripts)\n" +
					"\t-pull <sobi directory> <output directory> <id> <year> (get an objects referencing sobis)");
		}
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f5f44_bac8b/rev_f5f44-bac8b/src/main/java/gov/nysenate/openleg/ingest/IngestReader.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_8a46e_5bdf7/rev_8a46e-5bdf7.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748857160/fstmerge_var1_5701834589721500106
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748857160/fstmerge_base_4700267028007284801
public void handleFile(File file) {
		logger.warn("Reading file: " + file);
		
		if(file.getName().endsWith(".TXT")) {			
			bills = new ArrayList<Bill>();
			try {
				bills.addAll(getBasicParser().handleBill(file.getAbsolutePath(), '-'));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if(!bills.isEmpty()) {
				writeBills(bills, file, true);
				basicParser.clearBills();
			}
			
			bills.clear();
		}
		
		else if(file.getName().contains("-calendar-")) {
			
			XmlHelper.fixCalendar(file);
			
			try {
				calendars = getCalendarParser().doParsing(file.getAbsolutePath());
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			if(!calendars.isEmpty()) {
				writeCalendars(calendars, file);
				calendarParser.clearCalendars();
			}
			
			calendars.clear();
		}
		else if(file.getName().contains("-agenda-")) {
			try {
				committeeUpdates = getCommitteeParser().doParsing(file);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			writeCommitteeUpdates(committeeUpdates, file);
			committeeParser.clearUpdates();
		}
		
		long start = System.currentTimeMillis();
		String message = file.getName();
		gitCommit(message);
		logger.warn(((System.currentTimeMillis()-start))/1000.0+" - Committed Changes");
		logger.warn("Finished with file: "+file.getName());
	}
=======
public void handleFile(File file) {
		logger.info("Reading file: " + file);
				
		if(file.getName().endsWith(".TXT")) {			
			bills = new ArrayList<Bill>();
			try {
				bills.addAll(getBasicParser().handleBill(file.getAbsolutePath(), '-'));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if(!bills.isEmpty()) {
				writeBills(bills, file, true);
				basicParser.clearBills();
			}
			
			bills.clear();
		}
		
		else if(file.getName().contains("-calendar-")) {
			
			XmlHelper.fixCalendar(file);
			
			try {
				calendars = getCalendarParser().doParsing(file.getAbsolutePath());
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			if(!calendars.isEmpty()) {
				writeCalendars(calendars, file);
				calendarParser.clearCalendars();
			}
			
			calendars.clear();
		}
		else if(file.getName().contains("-agenda-")) {
			try {
				committeeUpdates = getCommitteeParser().doParsing(file);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			writeCommitteeUpdates(committeeUpdates, file);
			committeeParser.clearUpdates();
		}
		
//		long start = System.currentTimeMillis();
//		String message = file.getName();
//		gitCommit(message);
//		logger.warn(((System.currentTimeMillis()-start))/1000.0+" - Committed Changes");
//		logger.warn("Finished with file: "+file.getName());
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748857160/fstmerge_var2_2457949224847003519

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_8a46e_5bdf7/rev_8a46e-5bdf7/src/main/java/gov/nysenate/openleg/ingest/IngestReader.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_2b22e_7370e/rev_2b22e-7370e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_83f1e_7b0f1/rev_83f1e-7b0f1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ee48b_1a668/rev_ee48b-1a668.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_094f3_1cfcc/rev_094f3-1cfcc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_91f70_b3754/rev_91f70-b3754.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
=======
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var1_2814207025260890649
        int sessionYear = SessionYear.getSessionYear();
        String pathInfo = request.getPathInfo();
        if (pathInfo != null) {
            Matcher pathMatcher = pathPattern.matcher(pathInfo);
            if (pathMatcher.find()) {
                sessionYear = SessionYear.getSessionYear(pathMatcher.group(1));
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
        String format = request.getParameter("format");
        String uri = request.getRequestURI();
=======
        int sessionYear = SessionYear.getSessionYear();
        String pathInfo = request.getPathInfo();
        if (pathInfo != null) {
            Matcher pathMatcher = pathPattern.matcher(pathInfo);
            if (pathMatcher.find()) {
                sessionYear = SessionYear.getSessionYear(pathMatcher.group(1));
            }
        }

        ObjectMapper mapper = new ObjectMapper();
        File committeesBase = new File(SenatorsServlet.class.getClassLoader().getResource("data/committees/").getPath());
        File committeesDir = new File(committeesBase, String.valueOf(sessionYear));
        if (!committeesDir.exists()) committeesDir.mkdirs();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var1_2814207025260890649
        ObjectMapper mapper = new ObjectMapper();
        File committeesBase = new File(SenatorsServlet.class.getClassLoader().getResource("data/committees/").getPath());
        File committeesDir = new File(committeesBase, String.valueOf(sessionYear));
        if (!committeesDir.exists()) committeesDir.mkdirs();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
        if (uri.indexOf(".") != -1)
            format = uri.substring(uri.indexOf(".") + 1);
=======
        ArrayList<Committee> committees = new ArrayList<Committee>();
        for (File committeeFile : FileUtils.listFiles(committeesDir, new String[]{"json"}, false)) {
            committees.add(mapper.readValue(committeeFile, Committee.class));
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var1_2814207025260890649
        ArrayList<Committee> committees = new ArrayList<Committee>();
        for (File committeeFile : FileUtils.listFiles(committeesDir, null, false)) {
            Committee committee = mapper.readValue(committeeFile, Committee.class);
            ArrayList<Member> members = committee.getMembers();
            Collections.sort(members, new Comparator<Member>() {
                public int compare(Member a, Member b) {
                    return a.getShortName().compareToIgnoreCase(b.getShortName());
                }
            });
            committee.setMembers(members);
            committees.add(committee);

        }

        Collections.sort(committees, new Comparator<Committee>() {
            public int compare(Committee a, Committee b) {
                return a.getName().compareToIgnoreCase(b.getName());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
        if (format != null) {
            if (format.equals("json")) {
                displayJSON(request, response);
=======
        Collections.sort(committees, new Comparator<Committee>() {
            public int compare(Committee a, Committee b) {
                return a.getName().compareToIgnoreCase(b.getName());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
        } else {
=======
        });

        FORMAT format = RequestUtils.getFormat(request, FORMAT.HTML);

        switch (format) {
        case JSON:
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            mapper.writeValue(response.getOutputStream(), committees);
            break;
        case XML:
            // TODO: write out the xml;
            break;
        case HTML:
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796
            request.setAttribute("committees", committees);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_base_1577347231835985528
            getServletContext().getRequestDispatcher(VIEW_PATH).forward(
                    request, response);
=======
            request.setAttribute("sessionStart", sessionYear);
            request.setAttribute("sessionEnd", sessionYear+1);
            request.getRequestDispatcher("/views/committees.jsp").forward(request, response);
            break;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420748963340/fstmerge_var2_648203129362850796
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_91f70_b3754/rev_91f70-b3754/src/main/java/gov/nysenate/openleg/api/servlets/CommitteesServlet.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_300b8_2f3f0/rev_300b8-2f3f0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f7af6_c617d/rev_f7af6-c617d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_b589a_46006/rev_b589a-46006.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_baf7c_e4335/rev_baf7c-e4335.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_dfded_1ed34/rev_dfded-1ed34.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_2d60c_baf7c/rev_2d60c-baf7c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4e5ad_58bc2/rev_4e5ad-58bc2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4e5ad_987c6/rev_4e5ad-987c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4f350_7f218/rev_4f350-7f218.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7d1e0_584af/rev_7d1e0-584af.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5fb63_a1ac0/rev_5fb63-a1ac0.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749231322/fstmerge_var1_2027715660033901669
public static void main(String[] args) throws Exception
    {
        new Push().run(args);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749231322/fstmerge_base_8677224543569807755
public static void main(String[] args) {
        String[] required = null;
        CommandLine opts = null;
        try {
            Options options = new Options()
                .addOption("l", "lucene", true, "Push changes to the Lucene service")
                .addOption("v", "varnish", false, "Push changes to the Varnish service")
                .addOption("f", "change-file", true, "Path of changeLog file.")
                .addOption("c", "changes", true, "A newline delimited list of changes")
                .addOption("h", "help", false, "Print this message");
            opts = new PosixParser().parse(options, args);
            required = opts.getArgs();
            if(opts.hasOption("-h")) {
                System.err.println("USAGE: Push STORAGE [--lucene LOCATION] [--varnish] [--change-file FILE] [--changes CHANGES]");
                System.exit(0);

            } else if (required.length != 1) {
                System.err.println("Storage is a required argument.");
                System.err.println("USAGE: Push STORAGE [--lucene LOCATION] [--varnish] [--change-file FILE] [--changes CHANGES]");
                System.exit(1);
            }
        } catch (ParseException e) {
            logger.fatal("Error parsing arguments: ", e);
            System.exit(1);
        }

        // Parse the specified changes into a hash
        HashMap<String, Storage.Status> changes = null;
        if (opts.hasOption("change-file")) {
            try {
                File changeFile = new File(opts.getOptionValue("change-file"));
                changes = parseChanges(FileUtils.readLines(changeFile, "UTF-8"));
            } catch (IOException e) {
                System.err.println("Error reading change-file: "+opts.getOptionValue("changes"));
                System.exit(1);
            }
        } else if (opts.hasOption("changes")) {
            changes = parseChanges(Arrays.asList(opts.getOptionValue("changes").split("\n")));
        } else {
            System.err.println("Changes to push must be specified with either --change-file or --changes");
            System.exit(1);
        }

        // Currently there is a Lucene hook and varnish hook, more to come
        ArrayList<ServiceBase> services = new ArrayList<ServiceBase>();
        if(opts.hasOption("lucene")) {
            services.add(new Lucene(opts.getOptionValue("lucene")));
        }

        if(opts.hasOption("varnish")) {
            services.add(new Varnish("127.0.0.1", 80));
        }

        // Pass the change log through a set of service hooks
        Storage storage = new Storage(required[0]);
        for(ServiceBase service:services) {
            try {
                service.process(changes, storage);
            } catch (Exception e) {
                logger.error("Fatal Error handling Service "+service.getClass().getName(), e);
            }
        }
=======
public static void main(String[] args) {
        String[] required = null;
        CommandLine opts = null;
        try {
            Options options = new Options()
                .addOption("l", "lucene", true, "Push changes to the Lucene service")
                .addOption("v", "varnish", false, "Push changes to the Varnish service")
                .addOption("f", "change-file", true, "Path of changeLog file.")
                .addOption("c", "changes", true, "A newline delimited list of changes")
                .addOption("h", "help", false, "Print this message")
                .addOption("u", "updateReporter", false, "Push updates to html");
            opts = new PosixParser().parse(options, args);
            required = opts.getArgs();
            if(opts.hasOption("-h")) {
                System.err.println("USAGE: Push STORAGE [--lucene LOCATION] [--varnish] [--change-file FILE] [--changes CHANGES]");
                System.exit(0);

            } else if (required.length != 1) {
                System.err.println("Storage is a required argument.");
                System.err.println("USAGE: Push STORAGE [--lucene LOCATION] [--varnish] [--change-file FILE] [--changes CHANGES]");
                System.exit(1);
            }
        } catch (ParseException e) {
            logger.fatal("Error parsing arguments: ", e);
            System.exit(1);
        }

        // Parse the specified changes into a hash
        HashMap<String, Storage.Status> changes = null;
        if (opts.hasOption("change-file")) {
            try {
                File changeFile = new File(opts.getOptionValue("change-file"));
                changes = parseChanges(FileUtils.readLines(changeFile, "UTF-8"));
            } catch (IOException e) {
                System.err.println("Error reading change-file: "+opts.getOptionValue("changes"));
                System.exit(1);
            }
        } else if (opts.hasOption("changes")) {
            changes = parseChanges(Arrays.asList(opts.getOptionValue("changes").split("\n")));
        } else {
            System.err.println("Changes to push must be specified with either --change-file or --changes");
            System.exit(1);
        }

        // Currently there is a Lucene hook and varnish hook, more to come
        ArrayList<ServiceBase> services = new ArrayList<ServiceBase>();
        if(opts.hasOption("lucene")) {
            services.add(new Lucene(opts.getOptionValue("lucene")));
        }

        if(opts.hasOption("varnish")) {
            services.add(new Varnish("127.0.0.1", 80));
        }

        if(opts.hasOption("updateReporter")) {
            services.add(new UpdateReporter());
        }

        // Pass the change log through a set of service hooks
        Storage storage = new Storage(required[0]);
        for(ServiceBase service:services) {
            try {
                service.process(changes, storage);
            } catch (Exception e) {
                logger.error("Fatal Error handling Service "+service.getClass().getName(), e);
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749231322/fstmerge_var2_1693358426871737354
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5fb63_a1ac0/rev_5fb63-a1ac0/src/main/java/gov/nysenate/openleg/scripts/Push.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_b99d1_fd61c/rev_b99d1-fd61c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_e4732_fe946/rev_e4732-fe946.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749298803/fstmerge_var1_3136114634120836859
@JsonIgnore
    public String getKey()
    {
        Matcher keyMatcher = keyPattern.matcher(this.getSenateBillNo());
        if (keyMatcher.find()) {
            return keyMatcher.group(2)+"/bill/"+keyMatcher.group(0);
        }
        else {
            System.out.println("COULD NOT PARSE senateBillNo: "+this.getSenateBillNo());
            return null;
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749298803/fstmerge_base_2938245639508029024
=======
@JsonIgnore
    public String getKey()
    {
        return Bill.getKey(this.getSenateBillNo());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749298803/fstmerge_var2_5092778294063578647

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/model/Bill.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private static final Logger logger = Logger.getLogger(ChangeLogger.class); ##FSTMerge## ##FSTMerge## private final Logger logger = Logger.getLogger(ChangeLogger.class);
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private static HashMap<String, Change> changeLog = new HashMap<String, Change>(); ##FSTMerge## ##FSTMerge## private static HashMap<String, Storage.Status> changeLog = new HashMap<String, Storage.Status>();
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300658/fstmerge_var1_2545804110277541395
public static HashMap<String, Storage.Status> parseChanges(Iterable<String> lines)
    {
        Pattern changePattern = Pattern.compile("\\s*(.*?)\\s+(NEW|DELETED|MODIFIED)");
        HashMap<String, Storage.Status> changes = new HashMap<String, Storage.Status>();
        for (String line : lines) {
            if (line.isEmpty() || line.matches("\\s*#")) {
                continue;
            }
            Matcher changeLine = changePattern.matcher(line);
            if (changeLine.find()) {
                changes.put(changeLine.group(1), Storage.Status.valueOf(changeLine.group(2).toUpperCase()));
            } else {
                logger.fatal("Malformed change line: "+line);
                System.exit(0);
            }
        }
        return changes;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300658/fstmerge_base_225264361830628368
=======
public HashMap<String, Storage.Status> parseChanges(Iterable<String> lines)
    {
        Pattern changePattern = Pattern.compile("\\s*(.*?)\\s+(NEW|DELETED|MODIFIED)");
        HashMap<String, Storage.Status> changes = new HashMap<String, Storage.Status>();
        for (String line : lines) {
            if (line.isEmpty() || line.matches("\\s*#")) {
                continue;
            }
            Matcher changeLine = changePattern.matcher(line);
            if (changeLine.find()) {
                changes.put(changeLine.group(1), Storage.Status.valueOf(changeLine.group(2).toUpperCase()));
            } else {
                logger.fatal("Malformed change line: "+line);
                System.exit(0);
            }
        }
        return changes;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300658/fstmerge_var2_654230856714982460

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300661/fstmerge_var1_7139855638977785701
public static void record(String key, Storage storage)
    {
        record(key, storage, null);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300661/fstmerge_base_5687160339094065973
=======
public static void record(String key, Storage storage)
    {
        Status keyStatus = changeLog.get(key);
        if (keyStatus == null) {
            if (storage.storageFile(key).exists()) {
                changeLog.put(key, Status.MODIFIED);
            } else {
                changeLog.put(key, Status.NEW);
            }
        } else if (keyStatus != Status.NEW) {
            changeLog.put(key, Status.MODIFIED);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300661/fstmerge_var2_8493551004294215642

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300665/fstmerge_var1_2457143733304681057
public static void delete(String key, Storage storage)
    {
        delete(key, storage, null);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300665/fstmerge_base_208150282189261559
=======
public static void delete(String key, Storage storage)
    {
        Status keyStatus = changeLog.get(key);
        if (keyStatus == Status.NEW) {
            changeLog.remove(key);
        } else {
            changeLog.put(key, Status.DELETED);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300665/fstmerge_var2_325821652286594306

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300672/fstmerge_var1_2963703415292460388
public static HashMap<String, Change> getChangeLog()
    {
        return changeLog;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300672/fstmerge_base_4937445486145850782
=======
public static HashMap<String, Storage.Status> getChangeLog()
    {
        return changeLog;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300672/fstmerge_var2_8611202195801333780

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: LineBasedMCFd
Conflict body: 
public Boolean del(String key) throws IOException {
        // Deletions are always automatically flushed
        logger.debug("Deleting key: "+key);

        // Instead, move to storage/unpublished
        if (flushKey(key)) {
            FileUtils.moveFileToDirectory(storageFile(key), new File(storage, "unpublished"), true);
        }
        memory.remove(key);
        dirty.remove(key);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300736/fstmerge_var1_2489749197735087343
        return storageFile(key).delete();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300736/fstmerge_base_5549610419740999720

        // Log the change
        Status keyStatus = changeLog.get(key);
        if (keyStatus == Status.NEW) {
            changeLog.remove(key);
        } else {
            changeLog.put(key, Status.DELETED);
        }
        return storageFile(key).delete();
=======
        return true;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300736/fstmerge_var2_2747647026009570894
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: LineBasedMCFd
Conflict body: 
public void process(File file, Storage storage) throws IOException, JAXBException {
        String packageName = "gov.nysenate.openleg.xml.committee";
        JAXBContext jc = JAXBContext.newInstance(packageName);
        Unmarshaller u = jc.createUnmarshaller();
        XMLSENATEDATA senateData = (XMLSENATEDATA)u.unmarshal(new FileReader(file));

        // TODO: We need a better default here
        Date modifiedDate = null;
        try {
            modifiedDate = sobiDateFormat.parse(file.getName());
        } catch (ParseException e) {
            logger.error("Error parsing file date.", e);
        }

        for(Object next : senateData.getSenagendaOrSenagendavote()) {
            if (next instanceof XMLSenagenda) {
                Agenda agenda = handleXMLSenagenda(storage,(XMLSenagenda)next, modifiedDate);

                if (agenda != null) {
                    agenda.addSobiReference(file.getName());
                    agenda.setModified(modifiedDate.getTime());
                    String key = agenda.getYear()+"/agenda/"+agenda.getId();
                    storage.set(key, agenda);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var1_7357289993770213700
                    ChangeLogger.record(key, storage, modifiedDate);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_base_1285871358716286538
=======
                    ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var2_3369839697424911395

                    for (Addendum addendum : agenda.getAddendums()) {
                        for (Meeting meeting : addendum.getMeetings()) {
                            calendar.setTime(meeting.getMeetingDateTime());
                            key = calendar.get(GregorianCalendar.YEAR)+"/meeting/"+meeting.getId();
                            logger.info(key);

                            // TODO: We don't actually know if the meeting was modified or not
                            // This might be a false positive change
                            meeting.setModified(addendum.getPublicationDateTime().getTime());
                            storage.set(key, meeting);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var1_7357289993770213700
                            ChangeLogger.record(key, storage, modifiedDate);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_base_1285871358716286538
=======
                            ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var2_3369839697424911395
                        }
                    }
                }

            } else if (next instanceof XMLSenagendavote) {
                Agenda agenda = handleXMLSenagendavote(storage, (XMLSenagendavote)next, modifiedDate);

                if (agenda != null) {
                    agenda.addSobiReference(file.getName());
                    agenda.setModified(modifiedDate.getTime());
                    String key = agenda.getYear()+"/agenda/"+agenda.getId();
                    storage.set(key, agenda);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var1_7357289993770213700
                    ChangeLogger.record(key, storage, modifiedDate);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_base_1285871358716286538
=======
                    ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var2_3369839697424911395

                    for (Addendum addendum : agenda.getAddendums()) {
                        for (Meeting meeting : addendum.getMeetings()) {
                            calendar.setTime(meeting.getMeetingDateTime());
                            key = calendar.get(GregorianCalendar.YEAR)+"/meeting/"+meeting.getId();
                            logger.info(key);
                            storage.set(key, meeting);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var1_7357289993770213700
                            ChangeLogger.record(key, storage, modifiedDate);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_base_1285871358716286538
=======
                            ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300950/fstmerge_var2_3369839697424911395
                        }
                    }
                }

            } else {
                // TODO: log error here; maybe not. This counts strings as "text" nodes I think
            }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/AgendaProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300954/fstmerge_var1_1339342648525554294
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300954/fstmerge_base_8019721220791017449
public Bill handleXMLBill(Storage storage, Meeting meeting, XMLBill xmlBill, int sessionYear) {
        Bill bill = getBill(storage, xmlBill.getNo(), sessionYear, xmlBill.getSponsor().getContent());

        if (xmlBill.getSponsor() != null && bill.getSponsor() == null) {
            bill.setSponsor(new Person(xmlBill.getSponsor().getContent()));
        }

        if (xmlBill.getTitle() != null && bill.getActClause().isEmpty()) {
            bill.setActClause(xmlBill.getTitle().getContent());
        }

        if (xmlBill.getVotes() != null) {
            int ayeCount = -1;
            int nayCount = -1;
            Date voteDate = meeting.getMeetingDateTime();
            Vote vote = new Vote(bill, voteDate, ayeCount, nayCount);

            // remove the old vote
            // TODO: will this ever actually work with aye/nay counts at -1?
            //    I suppose is will now that I'm using sequence numbers instead
            bill.removeVote(vote);

            vote.setVoteType(Vote.VOTE_TYPE_COMMITTEE);
            vote.setDescription(meeting.getCommitteeName());
            for( XMLMember member : xmlBill.getVotes().getMember()) {
                Person person = new Person(member.getName().getContent());
                String voteType = member.getVote().getContent().toLowerCase();

                logger.debug("adding vote: " + bill.getSenateBillNo() + " - " + voteType + " - " + person.getFullname());

                if (voteType.startsWith("abstain"))
                    vote.addAbstain(person);
                else if (voteType.startsWith("aye w/r"))
                    vote.addAyeWR(person);
                else if (voteType.startsWith("aye"))
                    vote.addAye(person);
                else if (voteType.startsWith("excused"))
                    vote.addExcused(person);
                else if (voteType.startsWith("nay"))
                    vote.addNay(person);
                //else if (voteType.startsWith("absent"))
                //    vote.Absent(person);
            }

            // Add the new vote, effectively replacing an older copy
            bill.addVote(vote);

            // Make sure the bill gets updated on disc
            String key = String.valueOf(bill.getYear())+"/bill/"+bill.getSenateBillNo();
            storage.set(key, bill);
        }

        return bill;
    }
=======
public Bill handleXMLBill(Storage storage, Meeting meeting, XMLBill xmlBill, int sessionYear) {
        Bill bill = getBill(storage, xmlBill.getNo(), sessionYear, xmlBill.getSponsor().getContent());

        if (xmlBill.getSponsor() != null && bill.getSponsor() == null) {
            bill.setSponsor(new Person(xmlBill.getSponsor().getContent()));
        }

        if (xmlBill.getTitle() != null && bill.getActClause().isEmpty()) {
            bill.setActClause(xmlBill.getTitle().getContent());
        }

        if (xmlBill.getVotes() != null) {
            int ayeCount = -1;
            int nayCount = -1;
            Date voteDate = meeting.getMeetingDateTime();
            Vote vote = new Vote(bill, voteDate, ayeCount, nayCount);

            // remove the old vote
            // TODO: will this ever actually work with aye/nay counts at -1?
            //    I suppose is will now that I'm using sequence numbers instead
            bill.removeVote(vote);

            vote.setVoteType(Vote.VOTE_TYPE_COMMITTEE);
            vote.setDescription(meeting.getCommitteeName());
            for( XMLMember member : xmlBill.getVotes().getMember()) {
                Person person = new Person(member.getName().getContent());
                String voteType = member.getVote().getContent().toLowerCase();

                logger.debug("adding vote: " + bill.getSenateBillNo() + " - " + voteType + " - " + person.getFullname());

                if (voteType.startsWith("abstain"))
                    vote.addAbstain(person);
                else if (voteType.startsWith("aye w/r"))
                    vote.addAyeWR(person);
                else if (voteType.startsWith("aye"))
                    vote.addAye(person);
                else if (voteType.startsWith("excused"))
                    vote.addExcused(person);
                else if (voteType.startsWith("nay"))
                    vote.addNay(person);
                //else if (voteType.startsWith("absent"))
                //    vote.Absent(person);
            }

            // Add the new vote, effectively replacing an older copy
            bill.addVote(vote);

            // Make sure the bill gets updated on disc
            String key = String.valueOf(bill.getYear())+"/bill/"+bill.getSenateBillNo();
            storage.set(key, bill);
            ChangeLogger.record(key, storage);
        }

        return bill;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300954/fstmerge_var2_9213486617940655475

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/AgendaProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300957/fstmerge_var1_8132494910125899000
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300957/fstmerge_base_5330916556301343077
public Agenda handleXMLSenagendavote(Storage storage, XMLSenagendavote xmlAgendaVote) {
        // TODO: It doesn't look like we parse any action here. Should we?

        // Sometimes these come up blank on bad feeds or something
        // TODO: Look into this with better documentation
        if (xmlAgendaVote.getYear().isEmpty())
            return null;

        logger.info("COMMITTEE AGENDA VOTE RECORD " + xmlAgendaVote.getNo());
        String agendaId = "commagenda-" + xmlAgendaVote.getNo() + '-' + xmlAgendaVote.getSessyr() + '-' + xmlAgendaVote.getYear();

        // Load the old agenda vote or create a new one
        String key = xmlAgendaVote.getYear()+"/agenda/"+agendaId;
        Agenda agendaVote = (Agenda)storage.get(key, Agenda.class);
        if (agendaVote == null) {
            logger.info("CREATING NEW AGENDA: " + agendaId);
            agendaVote = new Agenda();
            agendaVote.setId(agendaId);
            agendaVote.setNumber(Integer.parseInt(xmlAgendaVote.getNo()));

            if (xmlAgendaVote.getYear() != null && xmlAgendaVote.getYear().length() > 0) {
                agendaVote.setYear(Integer.parseInt(xmlAgendaVote.getYear()));
            }

            if (xmlAgendaVote.getSessyr() != null && xmlAgendaVote.getSessyr().length() > 0) {
                agendaVote.setSessionYear(Integer.parseInt(xmlAgendaVote.getSessyr()));
            }

        } else {
            logger.info("FOUND EXISTING AGENDA: " + agendaId);
        }

        // Add all the addendums to the agenda
        List<Addendum> listAddendums = agendaVote.getAddendums();
        for(Object next : xmlAgendaVote.getContent()) {

            if (next instanceof XMLAddendum) {
                XMLAddendum xmlAddendum = (XMLAddendum) next;
                // String keyId = "a-" + agendaVote.getNumber() + '-' + agendaVote.getSessionYear() + '-' + xmlAddendum.getId();
                String keyId = xmlAddendum.getId() + "-" + agendaVote.getNumber() + '-' + agendaVote.getSessionYear() + '-' + agendaVote.getYear();
                Addendum addendum = parseAddendum(storage, keyId, xmlAddendum, agendaVote, true);
                addendum.setAgenda(agendaVote);

                // Don't repeat yourself
                if (!listAddendums.contains(addendum)) {
                    listAddendums.add(addendum);
                }
            } else {
                // Don't log the text elements containing whitespace
                if (!(next instanceof String) || !((String) next).trim().isEmpty()) {
                    logger.error("Got AgendaVote content object anonamoly " + next.getClass()+ ": "+next);
                }
            }
        }

        return agendaVote;
    }
=======
public Agenda handleXMLSenagendavote(Storage storage, XMLSenagendavote xmlAgendaVote) throws IOException {
        // TODO: It doesn't look like we parse any action here. Should we?

        // Sometimes these come up blank on bad feeds or something
        // TODO: Look into this with better documentation
        if (xmlAgendaVote.getYear().isEmpty())
            return null;

        logger.info("COMMITTEE AGENDA VOTE RECORD " + xmlAgendaVote.getNo());
        String agendaId = "commagenda-" + xmlAgendaVote.getNo() + '-' + xmlAgendaVote.getSessyr() + '-' + xmlAgendaVote.getYear();

        // Load the old agenda vote or create a new one
        String key = xmlAgendaVote.getYear()+"/agenda/"+agendaId;
        Agenda agendaVote = (Agenda)storage.get(key, Agenda.class);
        if (agendaVote == null) {
            logger.info("CREATING NEW AGENDA: " + agendaId);
            agendaVote = new Agenda();
            agendaVote.setId(agendaId);
            agendaVote.setNumber(Integer.parseInt(xmlAgendaVote.getNo()));

            if (xmlAgendaVote.getYear() != null && xmlAgendaVote.getYear().length() > 0) {
                agendaVote.setYear(Integer.parseInt(xmlAgendaVote.getYear()));
            }

            if (xmlAgendaVote.getSessyr() != null && xmlAgendaVote.getSessyr().length() > 0) {
                agendaVote.setSessionYear(Integer.parseInt(xmlAgendaVote.getSessyr()));
            }

        } else {
            logger.info("FOUND EXISTING AGENDA: " + agendaId);
        }

        // Add all the addendums to the agenda
        List<Addendum> listAddendums = agendaVote.getAddendums();
        for(Object next : xmlAgendaVote.getContent()) {

            if (next instanceof XMLAddendum) {
                XMLAddendum xmlAddendum = (XMLAddendum) next;
                // String keyId = "a-" + agendaVote.getNumber() + '-' + agendaVote.getSessionYear() + '-' + xmlAddendum.getId();
                String keyId = xmlAddendum.getId() + "-" + agendaVote.getNumber() + '-' + agendaVote.getSessionYear() + '-' + agendaVote.getYear();
                Addendum addendum = parseAddendum(storage, keyId, xmlAddendum, agendaVote, true);
                addendum.setAgenda(agendaVote);

                // Don't repeat yourself
                if (!listAddendums.contains(addendum)) {
                    listAddendums.add(addendum);
                }
            } else {
                // Don't log the text elements containing whitespace
                if (!(next instanceof String) || !((String) next).trim().isEmpty()) {
                    logger.error("Got AgendaVote content object anonamoly " + next.getClass()+ ": "+next);
                }
            }
        }

        return agendaVote;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300957/fstmerge_var2_4261227853777519253

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/AgendaProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300961/fstmerge_var1_3002476071404015839
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300961/fstmerge_base_6142449183309010540
public Agenda handleXMLSenagenda(Storage storage, XMLSenagenda xmlAgenda) {
        // Sometimes these come up blank on bad feeds or something
        // TODO: Look into this with better documentation
        if (xmlAgenda.getYear().isEmpty())
            return null;

        logger.info("COMMITTEE AGENDA " + xmlAgenda.getNo() + " action=" + xmlAgenda.getAction());

        String agendaId = "commagenda-" + xmlAgenda.getNo() + '-' + xmlAgenda.getSessyr() + '-' + xmlAgenda.getYear();

        String key = xmlAgenda.getYear()+"/agenda/"+agendaId;
        Agenda agenda = (Agenda)storage.get(key, Agenda.class);

        String action = xmlAgenda.getAction();

        if (agenda != null && action.equalsIgnoreCase("remove")) {
            logger.info("removing agenda: " + agenda.getId());
            storage.del(key);

            for (Addendum addendum : agenda.getAddendums()) {
                for (Meeting meeting : addendum.getMeetings()) {
                    key = meeting.getYear()+"/meeting/"+meeting.getId();
                    storage.del(key);
                }
            }

            return null;

        } else if (agenda == null) {
            logger.info("CREATING NEW AGENDA: " + agendaId);

            agenda = new Agenda();
            agenda.setId(agendaId);
            agenda.setNumber(Integer.parseInt(xmlAgenda.getNo()));

            if (xmlAgenda.getYear() != null && xmlAgenda.getYear().length() > 0) {
                agenda.setYear(Integer.parseInt(xmlAgenda.getYear()));
            }

            if (xmlAgenda.getSessyr() != null && xmlAgenda.getSessyr().length() > 0) {
                agenda.setSessionYear(Integer.parseInt(xmlAgenda.getSessyr()));
            }

        } else {
            logger.debug("FOUND EXISTING AGENDA: " + agenda.getId());
        }


        // Build a list of addendums on the current list.
        // TOOD: is this resent whole each time or not?
        List<Addendum> listAddendums = agenda.getAddendums();
        for(XMLAddendum xmlAddendum : xmlAgenda.getAddendum()) {
            String keyId = xmlAddendum.getId() + "-" + agenda.getNumber() + '-' + agenda.getSessionYear() + '-' + agenda.getYear();

            Addendum addendum = parseAddendum(storage, keyId, xmlAddendum, agenda, false);
            addendum.setAgenda(agenda);

            // Don't add duplicates!
            // TODO: What about addendums that are updated? Can that happen?
            if (!listAddendums.contains(addendum)) {
                listAddendums.add(addendum);
            }
        }

        return agenda;
    }
=======
public Agenda handleXMLSenagenda(Storage storage, XMLSenagenda xmlAgenda) throws IOException {
        // Sometimes these come up blank on bad feeds or something
        // TODO: Look into this with better documentation
        if (xmlAgenda.getYear().isEmpty())
            return null;

        logger.info("COMMITTEE AGENDA " + xmlAgenda.getNo() + " action=" + xmlAgenda.getAction());

        String agendaId = "commagenda-" + xmlAgenda.getNo() + '-' + xmlAgenda.getSessyr() + '-' + xmlAgenda.getYear();

        String key = xmlAgenda.getYear()+"/agenda/"+agendaId;
        Agenda agenda = (Agenda)storage.get(key, Agenda.class);

        String action = xmlAgenda.getAction();

        if (agenda != null && action.equalsIgnoreCase("remove")) {
            logger.info("removing agenda: " + agenda.getId());
            storage.del(key);
            ChangeLogger.delete(key, storage);

            for (Addendum addendum : agenda.getAddendums()) {
                for (Meeting meeting : addendum.getMeetings()) {
                    key = meeting.getYear()+"/meeting/"+meeting.getId();
                    storage.del(key);
                    ChangeLogger.delete(key, storage);
                }
            }

            return null;

        } else if (agenda == null) {
            logger.info("CREATING NEW AGENDA: " + agendaId);

            agenda = new Agenda();
            agenda.setId(agendaId);
            agenda.setNumber(Integer.parseInt(xmlAgenda.getNo()));

            if (xmlAgenda.getYear() != null && xmlAgenda.getYear().length() > 0) {
                agenda.setYear(Integer.parseInt(xmlAgenda.getYear()));
            }

            if (xmlAgenda.getSessyr() != null && xmlAgenda.getSessyr().length() > 0) {
                agenda.setSessionYear(Integer.parseInt(xmlAgenda.getSessyr()));
            }

        } else {
            logger.debug("FOUND EXISTING AGENDA: " + agenda.getId());
        }


        // Build a list of addendums on the current list.
        // TOOD: is this resent whole each time or not?
        List<Addendum> listAddendums = agenda.getAddendums();
        for(XMLAddendum xmlAddendum : xmlAgenda.getAddendum()) {
            String keyId = xmlAddendum.getId() + "-" + agenda.getNumber() + '-' + agenda.getSessionYear() + '-' + agenda.getYear();

            Addendum addendum = parseAddendum(storage, keyId, xmlAddendum, agenda, false);
            addendum.setAgenda(agenda);

            // Don't add duplicates!
            // TODO: What about addendums that are updated? Can that happen?
            if (!listAddendums.contains(addendum)) {
                listAddendums.add(addendum);
            }
        }

        return agenda;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300961/fstmerge_var2_3559533001853964140

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/AgendaProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300965/fstmerge_var1_6929712939571801508
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300965/fstmerge_base_7700341117643601737
public Addendum parseAddendum(Storage storage, String keyId, XMLAddendum xmlAddendum, Agenda agenda, boolean isVote) {
        // TODO: Are addendums resent whole each time?
        // TODO: What are addendums?

        // Try to retrieve existing addendum
        Addendum addendum = new Addendum();
        addendum.setId(keyId);
        int index = agenda.getAddendums().indexOf(addendum);
        if (index == -1) {
            // Create a new one if it isn't found!
            addendum = new Addendum();
            addendum.setAddendumId(xmlAddendum.getId());
            addendum.setId(keyId);
            addendum.setAgenda(agenda);
            logger.debug("creating new addendum: " + addendum.getId());

        } else {
            addendum = agenda.getAddendums().get(index);
            addendum.setAgenda(agenda);
        }

        // Get the publication date if available
        if (xmlAddendum.getPubdate() != null) {
            try {
                Date pubDateTime = LRS_DATETIME_FORMAT.parse(xmlAddendum
                        .getPubdate().getContent()
                        + xmlAddendum.getPubtime().getContent());

                addendum.setPublicationDateTime(pubDateTime);
            } catch (ParseException pe) {
                logger.error("unable to parse addendum date/time format", pe);
            }
        }

        // Set weekOf if available.
        // TODO: What is the meaning of this?
        if (xmlAddendum.getWeekof() != null) {
            addendum.setWeekOf(xmlAddendum.getWeekof().getContent());
        }

        List<Meeting> listMeetings = addendum.getMeetings();
        for( XMLCommittee xmlCommMeeting : xmlAddendum.getCommittees().getCommittee()) {
            String action = xmlCommMeeting.getAction();

            String meetingId = "meeting-" + xmlCommMeeting.getName().getContent() + '-' + agenda.getNumber() + '-' + agenda.getSessionYear() + '-' + agenda.getYear();

            Meeting meeting = agenda.getCommitteeMeeting(meetingId);

            if (meeting != null && action != null) {
                if (action.matches("(remove|replace)")) {

                    // Pretty sure this is always false
                    if (!isVote) {
                        // Always remove the meeting
                        logger.info("removing meeting: " + meeting.getId());

                        // Delete the meeting and save the agenda
                        String key = meeting.getYear()+"/meeting/"+meeting.getId();
                        storage.del(key);

                        agenda.removeCommitteeMeeting(meeting);
                        key = agenda.getYear()+"/agenda/"+agenda.getId();
                        storage.set(key, agenda);
                    }

                    if (action.equals("remove")) {
                        // If the action was remove, then skip the add meeting parts
                        continue;
                    }
                }


            } else if (meeting == null) {
                // In rare cases a meeting can be initially sent with a remove flag
                // in these cases we don't need to do anything.
                if (action != null && action.toLowerCase().equals("remove")) {
                    continue;

                } else {
                    meeting = new Meeting();
                    meeting.setId(meetingId);
                    meeting.setYear(agenda.getYear());
                    logger.info("CREATED NEW meeting: "+agenda.getYear()+"; " + meeting.getId());
                }
            }

            // Get the meeting date if possible
            if( xmlCommMeeting.getMeetdate() != null) {
                try {
                    Date meetDateTime = LRS_DATETIME_FORMAT.parse(xmlCommMeeting
                            .getMeetdate().getContent()
                            + xmlCommMeeting.getMeettime().getContent());

                    meeting.setMeetingDateTime(meetDateTime);
                } catch (ParseException e) {
                    logger.error("Could not parse meeting date", e);
                    continue;
                }
            }

            // Not entirely sure what is going on here
            // TODO: What is the relationship between meetings and addendums
            List<Addendum> addendums = meeting.getAddendums();
            if (!addendums.contains(addendum))
                addendums.add(addendum);

            // Add a bunch of meeting metadata
            if (xmlCommMeeting.getLocation() != null
                    && xmlCommMeeting.getLocation().getContent().length() > 0)
                meeting.setLocation(xmlCommMeeting.getLocation().getContent());

            if (xmlCommMeeting.getMeetday() != null
                    && xmlCommMeeting.getMeetday().getContent().length() > 0)
                meeting.setMeetday(xmlCommMeeting.getMeetday().getContent());

            if (xmlCommMeeting.getNotes() != null
                    && xmlCommMeeting.getNotes().getContent().length() > 0) {
                meeting.setNotes(xmlCommMeeting.getNotes().getContent());
            }

            if (xmlCommMeeting.getName() != null
                    && xmlCommMeeting.getName().getContent().length() > 0) {
                String commName = xmlCommMeeting.getName().getContent();
                String commChair = null;
                if (xmlCommMeeting.getChair() != null)
                    commChair = xmlCommMeeting.getChair().getContent();

                meeting.setCommitteeChair(commChair);
                meeting.setCommitteeName(commName);
            }

            if (!listMeetings.contains(meeting)) {
                listMeetings.add(meeting);
            }

            if (xmlCommMeeting.getBills() != null) {

                List<Bill> listBills = meeting.getBills();

                if (listBills == null) {
                    listBills = new ArrayList<Bill>();
                    meeting.setBills(listBills);
                }

                for(XMLBill xmlBill : xmlCommMeeting.getBills().getBill()) {
                    Bill bill = handleXMLBill(storage, meeting, xmlBill, addendum.getAgenda().getSessionYear());

                    if (!listBills.contains(bill)) {
                        logger.debug("adding bill:" + bill.getSenateBillNo() + " to meeting:" + meeting.getId());
                        listBills.add(bill);
                    } else {
                        // TODO: It isn't doing any merging here?
                        logger.debug("bill:" + bill.getSenateBillNo() + " already added to meeting:" + meeting.getId() + ", merging.");
                    }
                }
            }
        }
        addendum.setMeetings(listMeetings);
        return addendum;
    }
=======
public Addendum parseAddendum(Storage storage, String keyId, XMLAddendum xmlAddendum, Agenda agenda, boolean isVote) throws IOException {
        // TODO: Are addendums resent whole each time?
        // TODO: What are addendums?

        // Try to retrieve existing addendum
        Addendum addendum = new Addendum();
        addendum.setId(keyId);
        int index = agenda.getAddendums().indexOf(addendum);
        if (index == -1) {
            // Create a new one if it isn't found!
            addendum = new Addendum();
            addendum.setAddendumId(xmlAddendum.getId());
            addendum.setId(keyId);
            addendum.setAgenda(agenda);
            logger.debug("creating new addendum: " + addendum.getId());

        } else {
            addendum = agenda.getAddendums().get(index);
            addendum.setAgenda(agenda);
        }

        // Get the publication date if available
        if (xmlAddendum.getPubdate() != null) {
            try {
                Date pubDateTime = LRS_DATETIME_FORMAT.parse(xmlAddendum
                        .getPubdate().getContent()
                        + xmlAddendum.getPubtime().getContent());

                addendum.setPublicationDateTime(pubDateTime);
            } catch (ParseException pe) {
                logger.error("unable to parse addendum date/time format", pe);
            }
        }

        // Set weekOf if available.
        // TODO: What is the meaning of this?
        if (xmlAddendum.getWeekof() != null) {
            addendum.setWeekOf(xmlAddendum.getWeekof().getContent());
        }

        List<Meeting> listMeetings = addendum.getMeetings();
        for( XMLCommittee xmlCommMeeting : xmlAddendum.getCommittees().getCommittee()) {
            String action = xmlCommMeeting.getAction();

            String meetingId = "meeting-" + xmlCommMeeting.getName().getContent() + '-' + agenda.getNumber() + '-' + agenda.getSessionYear() + '-' + agenda.getYear();

            Meeting meeting = agenda.getCommitteeMeeting(meetingId);

            if (meeting != null && action != null) {
                if (action.matches("(remove|replace)")) {

                    // Pretty sure this is always false
                    if (!isVote) {
                        // Always remove the meeting
                        logger.info("removing meeting: " + meeting.getId());

                        // Delete the meeting and save the agenda
                        String key = meeting.getYear()+"/meeting/"+meeting.getId();
                        storage.del(key);
                        ChangeLogger.delete(key, storage);

                        agenda.removeCommitteeMeeting(meeting);
                        key = agenda.getYear()+"/agenda/"+agenda.getId();
                        storage.set(key, agenda);
                        ChangeLogger.record(key, storage);
                    }

                    if (action.equals("remove")) {
                        // If the action was remove, then skip the add meeting parts
                        continue;
                    }
                }


            } else if (meeting == null) {
                // In rare cases a meeting can be initially sent with a remove flag
                // in these cases we don't need to do anything.
                if (action != null && action.toLowerCase().equals("remove")) {
                    continue;

                } else {
                    meeting = new Meeting();
                    meeting.setId(meetingId);
                    meeting.setYear(agenda.getYear());
                    logger.info("CREATED NEW meeting: "+agenda.getYear()+"; " + meeting.getId());
                }
            }

            // Get the meeting date if possible
            if( xmlCommMeeting.getMeetdate() != null) {
                try {
                    Date meetDateTime = LRS_DATETIME_FORMAT.parse(xmlCommMeeting
                            .getMeetdate().getContent()
                            + xmlCommMeeting.getMeettime().getContent());

                    meeting.setMeetingDateTime(meetDateTime);
                } catch (ParseException e) {
                    logger.error("Could not parse meeting date", e);
                    continue;
                }
            }

            // Not entirely sure what is going on here
            // TODO: What is the relationship between meetings and addendums
            List<Addendum> addendums = meeting.getAddendums();
            if (!addendums.contains(addendum))
                addendums.add(addendum);

            // Add a bunch of meeting metadata
            if (xmlCommMeeting.getLocation() != null
                    && xmlCommMeeting.getLocation().getContent().length() > 0)
                meeting.setLocation(xmlCommMeeting.getLocation().getContent());

            if (xmlCommMeeting.getMeetday() != null
                    && xmlCommMeeting.getMeetday().getContent().length() > 0)
                meeting.setMeetday(xmlCommMeeting.getMeetday().getContent());

            if (xmlCommMeeting.getNotes() != null
                    && xmlCommMeeting.getNotes().getContent().length() > 0) {
                meeting.setNotes(xmlCommMeeting.getNotes().getContent());
            }

            if (xmlCommMeeting.getName() != null
                    && xmlCommMeeting.getName().getContent().length() > 0) {
                String commName = xmlCommMeeting.getName().getContent();
                String commChair = null;
                if (xmlCommMeeting.getChair() != null)
                    commChair = xmlCommMeeting.getChair().getContent();

                meeting.setCommitteeChair(commChair);
                meeting.setCommitteeName(commName);
            }

            if (!listMeetings.contains(meeting)) {
                listMeetings.add(meeting);
            }

            if (xmlCommMeeting.getBills() != null) {

                List<Bill> listBills = meeting.getBills();

                if (listBills == null) {
                    listBills = new ArrayList<Bill>();
                    meeting.setBills(listBills);
                }

                for(XMLBill xmlBill : xmlCommMeeting.getBills().getBill()) {
                    Bill bill = handleXMLBill(storage, meeting, xmlBill, addendum.getAgenda().getSessionYear());

                    if (!listBills.contains(bill)) {
                        logger.debug("adding bill:" + bill.getSenateBillNo() + " to meeting:" + meeting.getId());
                        listBills.add(bill);
                    } else {
                        // TODO: It isn't doing any merging here?
                        logger.debug("bill:" + bill.getSenateBillNo() + " already added to meeting:" + meeting.getId() + ", merging.");
                    }
                }
            }
        }
        addendum.setMeetings(listMeetings);
        return addendum;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300965/fstmerge_var2_2628766311564100183

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/AgendaProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void process(File file, Storage storage) {
        Transcript transcript = new Transcript();
        StringBuffer fullText = new StringBuffer();
        StringBuffer fullTextProcessed = new StringBuffer();

        String pLine = null;
        int locationLineIdx = 9;
        boolean checkedLineFour = false;

        EasyReader reader = new EasyReader(file).open();
        String line = null;
        logger.debug("Skipping: "+reader.readLine());
        while ((line = reader.readLine()) != null) {
            pLine = line.trim();

            if (pLine.startsWith("4") && (!checkedLineFour)) {
                if (pLine.indexOf("STENOGRAPHIC RECORD")==-1)
                    locationLineIdx = 10;

                checkedLineFour = true;
            }
            else if (transcript.getLocation() == null && pLine.startsWith(locationLineIdx+" ")) {
                pLine = pLine.trim();

                if (pLine.length() < 3)
                    locationLineIdx++; //location must be on the next line
                else {
                    //9                   ALBANY, NEW YORK
                    pLine = pLine.substring(2).trim();

                    transcript.setLocation(pLine);
                    logger.debug("got location: " + transcript.getLocation());
                }
            }
            else if (transcript.getTimeStamp() == null && pLine.startsWith((locationLineIdx+1)+" ")) {
                // 11                    August 7, 2009
                //  12                      10:00 a.m.
                pLine = pLine.substring(2).trim();

                logger.debug("got day: " + pLine);

                String nextLine = reader.readLine();
                nextLine = reader.readLine().trim();
                nextLine = nextLine.substring(2).trim();

                logger.debug("got time: " + nextLine);

                pLine += ' ' + nextLine;
                pLine = pLine.replace(".", "");

                try {
                    Date tTime = TRANSCRIPT_DATE_PARSER.parse(pLine);
                    transcript.setTimeStamp(tTime);
                } catch (ParseException e) {
                    logger.error(file.getName()+": unable to parse transcript datetime " + pLine,e);
                }
            }
            else if (transcript.getType() == null && pLine.startsWith((locationLineIdx+5)+" ")) {
                // 15                    REGULAR SESSION
                pLine = pLine.substring(2);
                pLine = pLine.trim();

                transcript.setType(pLine);
            }

            fullText.append(line);
            fullText.append('\n');

            line = line.trim();

            if (line.length() > 2) {
                line = line.substring(2);
                fullTextProcessed.append(line);
                fullTextProcessed.append('\n');
            }
        }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300978/fstmerge_base_2220108178675466807
=======

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300978/fstmerge_var2_3496467459589765034
        transcript.setTranscriptText(fullText.toString());
        transcript.setTranscriptTextProcessed(fullTextProcessed.toString());
        transcript.setId(transcript.luceneOid());
        transcript.setModified(transcript.getTimeStamp().getTime());
        transcript.addSobiReference(file.getName());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300978/fstmerge_var1_6353734833362029738

        // Save the transcript
        String key = transcript.getYear()+"/transcript/"+transcript.luceneOid();
        storage.set(key, transcript);

        // Make an entry in the change log
        ChangeLogger.setContext(file, transcript.getTimeStamp());
        ChangeLogger.record(key, storage, transcript.getTimeStamp());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300978/fstmerge_base_2220108178675466807
        storage.set(transcript.getYear()+"/transcript/"+transcript.luceneOid(), transcript);
=======

        // Save the transcript
        String key = transcript.getYear()+"/transcript/"+transcript.luceneOid();
        storage.set(key, transcript);

        // Make an entry in the change log
        ChangeLogger.setContext(file, transcript.getTimeStamp());
        ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300978/fstmerge_var2_3496467459589765034
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/TranscriptProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void process(File file, Storage storage) throws IOException, JAXBException {
        // TODO: Definitely needs some revisiting. What can be removed, when/how?
        String packageName = "gov.nysenate.openleg.xml.calendar";
        JAXBContext jc = JAXBContext.newInstance( packageName );
        Unmarshaller u = jc.createUnmarshaller();
        XMLSENATEDATA senateData = (XMLSENATEDATA)u.unmarshal( new FileReader(file) );

        Date modifiedDate = null;
        try {
            modifiedDate = sobiDateFormat.parse(file.getName());
        } catch (ParseException e) {
            logger.error("Error parsing file date.", e);
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300984/fstmerge_base_1488642311424651566
=======
        ChangeLogger.setContext(file, modifiedDate);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300984/fstmerge_var2_2653134938574893802
        for(Object obj:senateData.getSencalendarOrSencalendaractive()) {

            Calendar calendar = null;
            String action = null;
            Supplemental supplemental = null;

            if (obj instanceof XMLSencalendar) {
                XMLSencalendar xmlCalendar = (XMLSencalendar)obj;

                action = xmlCalendar.getAction();

                calendar = getCalendar(storage, Calendar.TYPE_FLOOR,xmlCalendar.getNo(),xmlCalendar.getYear(),xmlCalendar.getSessyr());

                supplemental = parseSupplemental(storage, calendar,xmlCalendar.getSupplemental());

                if(supplemental.getSequences() != null
                        || (supplemental.getSections() != null && !supplemental.getSections().isEmpty())) {
                    supplemental.setCalendar(calendar);

                    calendar.addSupplemental(supplemental);
                }
            }
            else if (obj instanceof XMLSencalendaractive) {
                XMLSencalendaractive xmlActiveList = (XMLSencalendaractive)obj;

                action = xmlActiveList.getAction();

                calendar = getCalendar(storage, Calendar.TYPE_ACTIVE,xmlActiveList.getNo(),xmlActiveList.getYear(),xmlActiveList.getSessyr());

                supplemental = parseSupplemental(storage, calendar,xmlActiveList.getSupplemental());

                if(supplemental.getSequences() != null
                        || (supplemental.getSections() != null && !supplemental.getSections().isEmpty())) {
                    supplemental.setCalendar(calendar);

                    calendar.addSupplemental(supplemental);
                }
            } else {
                // TODO: log something here
                continue;
            }

            if (action.equals("remove") && removeObject != null) {

                logger.info("REMOVING: " + removeObject.getClass() + "=" + removeObjectId);

                if(removeObject instanceof Supplemental) {
                    if(calendar.getSupplementals() != null) {
                        int indexOf = -1;
                        if((indexOf = calendar.getSupplementals().indexOf(removeObject)) != -1) {
                            calendar.getSupplementals().remove(indexOf);
                        }
                    }
                }
                else if (removeObject instanceof Sequence && calendar.getSupplementals() != null){
                    int supSize = calendar.getSupplementals().size();

                    for(int i = 0; i < supSize; i++) {
                        Supplemental sup = calendar.getSupplementals().get(i);

                        int indexOf = -1;
                        if((indexOf = sup.getSequences().indexOf(removeObject)) != -1) {
                            calendar.getSupplementals().get(i).getSequences().remove(indexOf);
                            break;
                        }
                    }
                } else {
                    // TODO: log something here
                }
            }

            calendar.addSobiReference(file.getName());
            calendar.setModified(modifiedDate.getTime());
            String key = String.valueOf(calendar.getYear())+"/calendar/"+calendar.getId();
            storage.set(key, calendar);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300984/fstmerge_var1_4092599670819254106
            ChangeLogger.record(key, storage, modifiedDate);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300984/fstmerge_base_1488642311424651566
=======
            ChangeLogger.record(key, storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749300984/fstmerge_var2_2653134938574893802
            removeObject = null;
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/CalendarProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public void process(File sobiFile, Storage storage) throws IOException
    {
        Date date = null;
        try {
            date = BillProcessor.sobiDateFormat.parse(sobiFile.getName());
        }
        catch (ParseException e) {
            logger.error("Unparseable date: "+sobiFile.getName());
            return;
        }

        // Catch exceptions on a per-block basis so that a single error won't corrupt the whole file.
        for (SOBIBlock block : getBlocks(sobiFile)) {
            logger.info("Processing "+block);
            try {

                if (block.getType() == '1' && block.getData().startsWith("DELETE")) {
                    // Special case here were we delete the whole bill
                    // TODO: This might actually be a soft delete!
                    logger.info("DELETING "+block.getHeader());
                    deleteBill(block, storage, date);
                }
                else {
                    // Otherwise, apply the block to the bill normally
                    String data = block.getData().toString();
                    Bill bill = getOrCreateBill(block, storage, date);
                    switch (block.getType()) {
                        case '1': applyBillInfo(data, bill, date); break;
                        case '2': applyLawSection(data, bill, date); break;
                        case '3': applyTitle(data, bill, date); break;
                        case '4': applyBillEvent(data, bill, date); break;
                        case '5': applySameAs(data, bill, date); break;
                        case '6': applySponsor(data, bill, date); break;
                        case '7': applyCosponsors(data, bill, date); break;
                        case '8': applyMultisponsors(data, bill, date); break;
                        case '9': applyProgramInfo(data, bill, date); break;
                        case 'A': applyActClause(data, bill, date); break;
                        case 'B': applyLaw(data, bill, date); break;
                        case 'C': applySummary(data, bill, date); break;
                        case 'M':
                        case 'R':
                        case 'T': applyText(data, bill, date); break;
                        case 'V': applyVoteMemo(data, bill, date); break;
                        default: throw new ParseError("Invalid Line Code "+block.getType() );
                    }
                    logger.info("SAVING: "+bill.getSenateBillNo());
                    bill.addSobiReference(sobiFile.getName());
                    bill.setModified(date.getTime());
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301052/fstmerge_var1_1793518758982276531
                    String key = bill.getKey();
                    saveBill(bill, storage, date);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301052/fstmerge_base_5224716211808604904
                    saveBill(bill, storage);
=======
                    saveBill(bill, storage);
                    ChangeLogger.record(bill.getKey(), storage);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301052/fstmerge_var2_8737490152475035424
                }
            }
            catch (ParseError e) {
                logger.error("ParseError at "+block.getLocation(), e);
            }
            catch (Exception e) {
                logger.error("Unexpected Exception at "+block.getLocation(), e);
            }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301060/fstmerge_var1_8379256651646434645
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301060/fstmerge_base_5931054185440008120
public Bill getOrCreateBill(SOBIBlock block, Storage storage) throws ParseError
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill != null) {
            // We retrieved the bill successfully!
            return bill;
        }
        else {
            // We need to create a new bill with this key
            if (block.getAmendment().isEmpty()) {
                // We need to create an original bill, this is easy!
                return new Bill(billKey, block.getYear());
            }
            else {
                // We need to create an amendment, this is trickier
                Bill amendment = new Bill(billKey, block.getYear());

                // All new amendments are based on the original bill
                String baseKey = block.getPrintNo()+"-"+block.getYear();
                Bill baseBill = storage.getBill(baseKey);

                if (baseBill == null) {
                    // Amendments should always have original bills already made, make it happen
                    logger.error("Bill Amendment filed without initial bill at "+block.getLocation()+" - "+block.getHeader());
                    baseBill = new Bill(baseKey, block.getYear());
                    storage.saveBill(baseBill);
                }

                // Pull sponsor information up from the base bill
                amendment.setSponsor(baseBill.getSponsor());
                amendment.setCoSponsors(baseBill.getCoSponsors());
                amendment.setMultiSponsors(baseBill.getMultiSponsors());

                // Pull up the list of existing versions and add yourself
                amendment.addAmendment(baseKey);
                amendment.addAmendments(baseBill.getAmendments());

                // Broadcast yourself to all other versions and deactivate them
                Bill activeBill = null;
                for (String versionKey : amendment.getAmendments()) {
                    Bill billVersion = storage.getBill(versionKey);
                    if (billVersion == null) {
                        throw new ParseError("Recorded bill version not found in storage: "+versionKey);
                    }
                    else {
                        billVersion.addAmendment(billKey);
                        if(billVersion.isActive()) {
                            activeBill = billVersion;
                            billVersion.setActive(false);
                        }
                        storage.saveBill(billVersion);
                    }
                }

                if (activeBill == null) {
                    logger.error("Unable to find active bill for "+amendment.getSenateBillNo()+". BIG PROBLEM!");
                    activeBill = baseBill;
                }

                // Pull some other information up from previously active bill
                amendment.setSummary(activeBill.getSummary());
                amendment.setLaw(activeBill.getLaw());

                // Activate yourself
                amendment.setActive(true);
                storage.saveBill(amendment);
                return amendment;
            }
        }
    }
=======
public Bill getOrCreateBill(SOBIBlock block, Storage storage) throws ParseError
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill != null) {
            // We retrieved the bill successfully!
            return bill;
        }
        else {
            // Check to see if we've previously deleted this bill
            bill = (Bill)storage.restore(billKey, Bill.class);

            if (block.getAmendment().isEmpty()) {
                if (bill == null) {
                    // New base bill. Easy.
                    return new Bill(billKey, block.getYear());
                }
                else {
                    // Bringing back deleted base bill, also easy.
                    return bill;
                }
            }

            if (bill == null) {
                // No previous record found, create a new amendment
                bill = new Bill(billKey, block.getYear());
            }

            // All amendments are based on the original bill
            // We need to do this for resurrected bills too because there
            // may have been updates to other versions since the bill was deleted.
            String baseKey = block.getPrintNo()+"-"+block.getYear();
            Bill baseBill = storage.getBill(baseKey);

            if (baseBill == null) {
                // Amendments should always have original bills already made, make it happen
                logger.error("Bill Amendment filed without initial bill at "+block.getLocation()+" - "+block.getHeader());
                baseBill = new Bill(baseKey, block.getYear());
                storage.saveBill(baseBill);
                ChangeLogger.record(baseBill.getKey(), storage);
            }

            // Pull sponsor information up from the base bill
            bill.setSponsor(baseBill.getSponsor());
            bill.setCoSponsors(baseBill.getCoSponsors());
            bill.setMultiSponsors(baseBill.getMultiSponsors());

            // Pull up the list of existing versions and add yourself
            bill.addAmendment(baseKey);
            bill.addAmendments(baseBill.getAmendments());

            // Broadcast yourself to all other versions and deactivate them
            Bill activeBill = null;
            for (String versionKey : bill.getAmendments()) {
                Bill billVersion = storage.getBill(versionKey);
                if (billVersion == null) {
                    throw new ParseError("Recorded bill version not found in storage: "+versionKey);
                }
                else {
                    billVersion.addAmendment(billKey);
                    if(billVersion.isActive()) {
                        activeBill = billVersion;
                        billVersion.setActive(false);
                    }
                    storage.saveBill(billVersion);
                    ChangeLogger.record(billVersion.getKey(), storage);
                }
            }

            if (activeBill == null) {
                logger.error("Unable to find active bill for "+bill.getSenateBillNo()+". BIG PROBLEM!");
                logger.error("Versions: "+bill.getAmendments());
                activeBill = baseBill;
            }

            if (activeBill.getModified() > bill.getModified()) {
                // Pull some other information up from previously active bill
                bill.setSummary(activeBill.getSummary());
                bill.setLaw(activeBill.getLaw());

                // Activate yourself
                bill.setActive(true);
                storage.saveBill(bill);
                ChangeLogger.record(bill.getKey(), storage);
            }

            return bill;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301060/fstmerge_var2_1821542315030307489

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301065/fstmerge_var1_5145720771034913287
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301065/fstmerge_base_5926819975014578741
public void saveBill(Bill bill, Storage storage)
    {
        // Sponsor information needs to be synced at all times.
        // Normally it is always sent to the base bill and broadcasted to amendments
        // In our 2009 data set we are missing tons of base amendments and it actually
        // needs to be broadcasted backwards to the original bill.
        for (String versionKey : bill.getAmendments()) {
            Bill billVersion = storage.getBill(versionKey);
            billVersion.setSponsor(bill.getSponsor());
            billVersion.setCoSponsors(bill.getCoSponsors());
            billVersion.setMultiSponsors(bill.getMultiSponsors());
            storage.saveBill(billVersion);
        }
        storage.saveBill(bill);
    }
=======
public void saveBill(Bill bill, Storage storage)
    {
        // Sponsor and summary information needs to be synced at all times.
        // Uni bills share text, always sent to the senate bill.
        // Normally it is always sent to the base bill and broadcasted to amendments
        // In our 2009 data set we are missing tons of base amendments and it actually
        // needs to be broadcasted backwards to the original bill.
        for (String versionKey : bill.getAmendments()) {
            Bill billVersion = storage.getBill(versionKey);
            billVersion.setSponsor(bill.getSponsor());
            billVersion.setCoSponsors(bill.getCoSponsors());
            billVersion.setMultiSponsors(bill.getMultiSponsors());
            billVersion.setSummary(bill.getSummary());
            storage.saveBill(billVersion);
            ChangeLogger.record(billVersion.getKey(), storage);
        }
        if (bill.isUniBill()) {
            // logger.error("UNIBILL: "+bill.getSenateBillNo()+", "+bill.getSameAs());
            Bill uniBill = storage.getBill(bill.getSameAs());
            if (uniBill != null) {
                String billText = bill.getFulltext();
                String uniBillText = uniBill.getFulltext();

                if (billText.isEmpty()) {
                    logger.info(bill.getSenateBillNo()+" is empty");
                    if (!uniBillText.isEmpty()) {
                        // if we are empty then we must need their text
                        logger.info("taking text from "+bill.getSameAs());
                        bill.setFulltext(uniBillText);
                    }
                    else {
                        logger.info("but there is no text to grab from "+bill.getSameAs());
                    }
                }
                else if (!billText.equals(uniBillText)) {
                    logger.info("My text has been updated, sharing with "+bill.getSameAs());
                    // If we differ, then we must have just changed, share the text
                    uniBill.setFulltext(bill.getFulltext());
                }
                else {
                    logger.info("we have the same text");
                }

                storage.saveBill(uniBill);
            }
        }
        storage.saveBill(bill);
        ChangeLogger.record(bill.getKey(), storage);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301065/fstmerge_var2_4853606624295680146

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301068/fstmerge_var1_919672570204347286
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301068/fstmerge_base_9187414761432727947
public void deleteBill(SOBIBlock block, Storage storage) throws ParseError
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill == null) {
            // If we can't find a bill they are asking us to delete, don't worry about it.
            throw new ParseError("New bill with DELETE command only. Skipping "+block.getHeader()+block.getData().toString());
        }
        else {
            List<String> amendments = bill.getAmendments();
            if (amendments.size() > 0) {
                // Set the previous amendment to be the active one
                // TODO: In rare cases with multiple substitutions this might not be the right thing to do!
                String newActiveBill = amendments.get(amendments.size()-1);

                // Remove all references to the current bill/amendment.
                for (String versionKey : bill.getAmendments()) {
                    Bill billVersion = storage.getBill(versionKey);
                    billVersion.removeAmendment(billKey);
                    if (bill.isActive() && versionKey.equals(newActiveBill)) {
                        billVersion.setActive(true);
                    }
                    storage.saveBill(billVersion);
                }
            }
            storage.del(bill.getYear()+"/bill/"+billKey);
        }
    }
=======
public void deleteBill(SOBIBlock block, Storage storage) throws ParseError, IOException
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill == null) {
            // If we can't find a bill they are asking us to delete, don't worry about it.
            throw new ParseError("New bill with DELETE command only. Skipping "+block.getHeader()+block.getData().toString());
        }
        else {
            List<String> amendments = bill.getAmendments();
            if (amendments.size() > 0) {
                // Set the previous amendment to be the active one
                // TODO: In rare cases with multiple substitutions this might not be the right thing to do!
                String newActiveBill = amendments.get(amendments.size()-1);

                // Remove all references to the current bill/amendment.
                for (String versionKey : bill.getAmendments()) {
                    Bill billVersion = storage.getBill(versionKey);
                    billVersion.removeAmendment(billKey);
                    if (bill.isActive() && versionKey.equals(newActiveBill)) {
                        billVersion.setActive(true);
                    }
                    storage.saveBill(billVersion);
                    ChangeLogger.record(billVersion.getKey(), storage);
                }
            }
            String key = bill.getYear()+"/bill/"+billKey;
            storage.del(key);
            ChangeLogger.delete(key, storage);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749301068/fstmerge_var2_1796141556952838203

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
protected void execute(CommandLine opts) throws Exception
    {
        String[] required = opts.getArgs();
        if (required.length != 2) {
            System.err.println("Both source and storage directories are required.");
            printUsage(opts);
            System.exit(1);
        }

        Timer timer = new Timer();
        Storage storage = new Storage(required[1]);
        Collection<File> files = FileUtils.listFiles(new File(required[0]), null, true);
        Collections.sort((List<File>)files, new FileNameComparator());

        BillProcessor billProcessor = new BillProcessor();
        CalendarProcessor calendarProcessor = new CalendarProcessor();
        AgendaProcessor agendaProcessor = new AgendaProcessor();
        TranscriptProcessor transcriptProcessor = new TranscriptProcessor();

        // Process each file individually, flushing changes to storage as necessary
        // Each file processor should produce a change log indicating what happened
        timer.start();
        for(File file : files) {
            try {
                logger.debug("Ingesting: "+file);
                String type = file.getParentFile().getName();
                if (type.equals("bills")) {
                    billProcessor.process(file, storage);
                } else if (type.equals("calendars")) {
                    calendarProcessor.process(file, storage);
                } else if (type.equals("agendas")) {
                    agendaProcessor.process(file, storage);
                } else if (type.equals("annotations")) {
                    continue;
                } else if (type.equals("transcripts")) {
                    transcriptProcessor.process(file, storage);
                }

                // To avoid memory issues, occasionally flush changes to file-system and truncate memory
                if (storage.memory.size() > 4000) {
                    storage.flush();
                    storage.clearCache();
                }

            } catch (IOException e) {
                logger.error("Issue with "+file.getName(), e);
            } catch (UnmarshalException e) {
                logger.error("Issue with "+file.getName(), e);
            }
        }
        storage.flush();
        logger.info(timer.stop()+" seconds to injest "+files.size()+" files.");

        // Dump out the change log
        StringBuffer out = new StringBuffer();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749302888/fstmerge_var1_4751367804940932094
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date;
        for (Entry<String, Change> entry : ChangeLogger.getChangeLog().entrySet()) {
            date = entry.getValue().getDate();
            if (date != null) {
                out.append(entry.getKey()+"\t"+entry.getValue().getStatus()+"\t"+sdf.format(date).toString()+"\n");
            } else {
                // TODO temporary solution.
                // If no date information available, set date to current time.
                out.append(entry.getKey()+"\t"+entry.getValue().getStatus()+"\t"+sdf.format(new Date()).toString() +"\n");
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749302888/fstmerge_base_3946001523815558813
        for (Entry<String, Status> entry : storage.changeLog.entrySet()) {
            out.append(entry.getKey()+"\t"+entry.getValue()+"\n");
=======
        for (Entry<String, Status> entry : ChangeLogger.getChangeLog().entrySet()) {
            out.append(entry.getKey()+"\t"+entry.getValue()+"\n");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749302888/fstmerge_var2_4599761368814677637
        }

        if (opts.hasOption("change-file")) {
            try {
                FileUtils.write(new File(opts.getOptionValue("change-file")), out);
            } catch (IOException e) {
                logger.error("Could not open changeLog for writing", e);
            }
        } else {
            System.out.print(out);
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_7f6be/rev_186ac-7f6be/src/main/java/gov/nysenate/openleg/scripts/Ingest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c.revisions
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## String title; ##FSTMerge## private String title;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## String sponsor; ##FSTMerge## private String sponsor;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## String summary; ##FSTMerge## private String summary;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## ArrayList<String> actions; ##FSTMerge## private ArrayList<String> actions;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## ArrayList<String> cosponsors; ##FSTMerge## private ArrayList<String> cosponsors;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329254/fstmerge_var1_5325798521968968731
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329254/fstmerge_base_2665824323382113287
public SpotCheckBill() {
            pages = year = 0;
            id = sponsor = title = summary = law = "";
            cosponsors = new ArrayList<String>();
            multisponsors = new ArrayList<String>();
            actions = new ArrayList<String>();
            amendments = new ArrayList<String>();
        }
=======
public SpotCheckBill() {
            pages = year = 0;
            id = setSponsor(setTitle(setSummary(law = "")));
            setCosponsors(new ArrayList<String>());
            multisponsors = new ArrayList<String>();
            setActions(new ArrayList<String>());
            amendments = new ArrayList<String>();
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329254/fstmerge_var2_5156710286569369122

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: LineBasedMCFd
Conflict body: 
public static void main(String[] args) throws Exception {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329282/fstmerge_var1_578011247691177740
        new SpotCheck().run(args);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329282/fstmerge_base_2221884412565102371
        Storage storage = new Storage("/data/openleg/lbdc_test/json");

        HashMap<String, Integer> errors = new HashMap<String, Integer>();
        for (String error_type : new String[] {"title", "summary", "sponsor", "cosponsors", "events"}) {
            errors.put(error_type, 0);
        }

        HashMap<String, SpotCheckBill> bills = new HashMap<String, SpotCheckBill>();

        for (String arg : args) {
            bills.putAll(SpotCheck.readDaybreak(new File(arg)));
        }

        for(String id : bills.keySet()) {
            String billNo = id+"-2013";
            Bill bill = (Bill)storage.get("2013/bill/"+billNo, Bill.class);

            // Compare the titles, ignore white space differences
            String jsonTitle = unescapeHTML(bill.getTitle());
            String lbdcTitle = bills.get(id).title;
            if (!stringEquals(jsonTitle, lbdcTitle, true, true)) {
                // What is this D?
                if (!id.startsWith("D")) {
                    logger.error("Title: "+billNo);
                    logger.error("  LBDC: "+lbdcTitle);
                    logger.error("  JSON: "+jsonTitle);
                    errors.put("title", errors.get("title")+1);
                }
            }

            // Compare the summaries. LBDC reports summary and law changes together
            String jsonLaw = bill.getLaw();
            String jsonSummary = unescapeHTML(bill.getSummary());
            String lbdcSummary = bills.get(id).summary;

            if( jsonLaw != null && jsonLaw != "" && jsonLaw != "null") {
                jsonSummary = unescapeHTML(jsonLaw)+" "+jsonSummary;
            }

            if ( !jsonSummary.replace(" ","").equals(lbdcSummary.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Summary: "+billNo);
                    logger.error("  LBDC: "+lbdcSummary);
                    logger.error("  JSON: "+jsonSummary);
                    errors.put("summary", errors.get("summary")+1);
                }
            }

            String jsonSponsor = unescapeHTML(bill.getSponsor().getFullname()).toUpperCase().replace(" (MS)","").replace("BILL", "").replace("COM", "");
            String lbdcSponsor = bills.get(id).sponsor.toUpperCase().replace("BILL", "").replace("COM", "");
            if ( !jsonSponsor.replace(" ","").equals(lbdcSponsor.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Sponsor: "+billNo);
                    logger.error("  LBDC: "+lbdcSponsor);
                    logger.error("  JSON: "+jsonSponsor);
                    errors.put("sponsor", errors.get("sponsor")+1);
                }
            }


            TreeSet<String> lbdcCosponsors = new TreeSet<String>(bills.get(id).cosponsors);
            TreeSet<String> jsonCosponsors = new TreeSet<String>();
            if ( bill.getCoSponsors() != null ) {
                List<Person> cosponsors = bill.getCoSponsors();
                for(Person cosponsor : cosponsors) {
                    jsonCosponsors.add(cosponsor.getFullname().toUpperCase());
                }
            }

            if ( lbdcCosponsors.size() != jsonCosponsors.size() || (!lbdcCosponsors.isEmpty() && !lbdcCosponsors.containsAll(jsonCosponsors)) ) {
                if (!id.startsWith("D")) {
                    logger.error("Cosponsors: "+billNo);
                    logger.error("  LBDC: "+lbdcCosponsors);
                    logger.error("  JSON: "+jsonCosponsors);
                    errors.put("cosponsors", errors.get("cosponsors")+1);
                }
            }

            ArrayList<String> lbdcEvents = bills.get(id).actions;
            ArrayList<String> jsonEvents = new ArrayList<String>();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");

            for (Action action : bill.getActions()) {
                jsonEvents.add(dateFormat.format(action.getDate())+" "+action.getText());
            }

            if ( lbdcEvents.size() != jsonEvents.size() || (!lbdcEvents.isEmpty() && !lbdcEvents.containsAll(jsonEvents)) ) {
                if (!id.startsWith("D")) {
                    logger.error("Events: "+billNo);
                    logger.error("  LBDC: "+lbdcEvents);
                    logger.error("  JSON: "+jsonEvents);
                    errors.put("events", errors.get("events")+1);
                }
            }
        }

        System.out.println(errors);

        System.out.println(bills.keySet().size());
        System.exit(0);

        int total = 0;
        for(SpotCheck.SpotCheckBill bill : bills.values()) {
            total += 1+bill.amendments.size();
        }
        System.out.println("Estimated Total: "+total);
        SpotCheck.loadPageFile(new File("PageFile.csv"), bills);
        System.out.println(bills.size());
=======
        Storage storage = new Storage("/home/shweta/test/processed/lbdc_test/json");

        HashMap<String, Integer> errors = new HashMap<String, Integer>();
        for (String error_type : new String[] {"title", "summary", "sponsor", "cosponsors", "events"}) {
            errors.put(error_type, 0);
        }

        HashMap<String, SpotCheckBill> bills = new HashMap<String, SpotCheckBill>();

        for (String arg : args) {
            bills.putAll(SpotCheck.readDaybreak(new File(arg)));
        }

        for(String id : bills.keySet()) {
            String billNo = id+"-2013";
           
            Bill bill = (Bill)storage.get("2013/bill/"+billNo, Bill.class);

            // Compare the titles, ignore white space differences
            String jsonTitle = unescapeHTML(bill.getTitle());
            String lbdcTitle = bills.get(id).getTitle();
            if (!stringEquals(jsonTitle, lbdcTitle, true, true)) {
                // What is this D?
                if (!id.startsWith("D")) {
                    logger.error("Title: "+billNo);
                    logger.error("  LBDC: "+lbdcTitle);
                    logger.error("  JSON: "+jsonTitle);
                    errors.put("title", errors.get("title")+1);
                }
            }

            // Compare the summaries. LBDC reports summary and law changes together
            String jsonLaw = bill.getLaw();
            String jsonSummary = unescapeHTML(bill.getSummary());
            String lbdcSummary = bills.get(id).getSummary();

            if( jsonLaw != null && jsonLaw != "" && jsonLaw != "null") {
                jsonSummary = unescapeHTML(jsonLaw)+" "+jsonSummary;
            }

            if ( !jsonSummary.replace(" ","").equals(lbdcSummary.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Summary: "+billNo);
                    logger.error("  LBDC: "+lbdcSummary);
                    logger.error("  JSON: "+jsonSummary);
                    errors.put("summary", errors.get("summary")+1);
                }
            }

            String jsonSponsor = unescapeHTML(bill.getSponsor().getFullname()).toUpperCase().replace(" (MS)","").replace("BILL", "").replace("COM", "");
            String lbdcSponsor = bills.get(id).getSponsor().toUpperCase().replace("BILL", "").replace("COM", "");
            if ( !jsonSponsor.replace(" ","").equals(lbdcSponsor.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Sponsor: "+billNo);
                    logger.error("  LBDC: "+lbdcSponsor);
                    logger.error("  JSON: "+jsonSponsor);
                    errors.put("sponsor", errors.get("sponsor")+1);
                }
            }


            TreeSet<String> lbdcCosponsors = new TreeSet<String>(bills.get(id).getCosponsors());
            TreeSet<String> jsonCosponsors = new TreeSet<String>();
            if ( bill.getCoSponsors() != null ) {
                List<Person> cosponsors = bill.getCoSponsors();
                for(Person cosponsor : cosponsors) {
                    jsonCosponsors.add(cosponsor.getFullname().toUpperCase());
                }
            }

            if ( lbdcCosponsors.size() != jsonCosponsors.size() || (!lbdcCosponsors.isEmpty() && !lbdcCosponsors.containsAll(jsonCosponsors)) ) {
                if (!id.startsWith("D")) {
                    logger.error("Cosponsors: "+billNo);
                    logger.error("  LBDC: "+lbdcCosponsors);
                    logger.error("  JSON: "+jsonCosponsors);
                    errors.put("cosponsors", errors.get("cosponsors")+1);
                }
            }

            ArrayList<String> lbdcEvents = bills.get(id).getActions();
            ArrayList<String> jsonEvents = new ArrayList<String>();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");

            for (Action action : bill.getActions()) {
                jsonEvents.add(dateFormat.format(action.getDate())+" "+action.getText());
            }

            if ( lbdcEvents.size() != jsonEvents.size() || (!lbdcEvents.isEmpty() && !lbdcEvents.containsAll(jsonEvents)) ) {
                if (!id.startsWith("D")) {
                    logger.error("Events: "+billNo);
                    logger.error("  LBDC: "+lbdcEvents);
                    logger.error("  JSON: "+jsonEvents);
                    errors.put("events", errors.get("events")+1);
                }
            }
        }

        System.out.println(errors);

        System.out.println(bills.keySet().size());
        System.exit(0);

        int total = 0;
        for(SpotCheck.SpotCheckBill bill : bills.values()) {
            total += 1+bill.amendments.size();
        }
        System.out.println("Estimated Total: "+total);
        SpotCheck.loadPageFile(new File("PageFile.csv"), bills);
        System.out.println(bills.size());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749329282/fstmerge_var2_4056829255714321842
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_186ac_f759c/rev_186ac-f759c/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_e49ff_7fb60/rev_e49ff-7fb60.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Test
	   public void verifyWholeBill2011S1462A() throws IOException  // Testing Amendment A of the bill 2011S1462
	  {
		Bill theBill;
		File sobiDirectory = new File("/home/shweta/test/processed/2013/bills/");
	    Storage storage = new Storage(env.getStorageDirectory());
	    ArrayList<File> file = (ArrayList<File>) TestHelper.getFilesByNameCollection(sobiDirectory,"SOBI.D110110.T142112.TXT",
	    		"SOBI.D110613.T222123.TXT", "SOBI.D110614.T192241.TXT", "SOBI.D110210.T221519.TXT", "SOBI.D120130.T202912.TXT",
	    		"SOBI.D110209.T171647.TXT", "SOBI.D120126.T103841.TXT", "SOBI.D110614.T195743.TXT", "SOBI.D120104.T223233.TXT",
	    		"SOBI.D110215.T151615.TXT", "SOBI.D110209.T105617.TXT", "SOBI.D110209.T110618.TXT", "SOBI.D110614.T152729.TXT",
	    		"SOBI.D110210.T102843.TXT", "SOBI.D110112.T175532.TXT", "SOBI.D110107.T144910.TXT", "SOBI.D110614.T185240.TXT",
	    		"SOBI.D120125.T130337.TXT", "SOBI.D110209.T171147.TXT", "SOBI.D110107.T150914.TXT", "SOBI.D110209.T170214.TXT",
	    		"SOBI.D110107.T141407.TXT");



	      // Test for SOBI.D110209.T105617.TXT
		 TestHelper.processFileC(env ,file.get(10));
		 theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
		 assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
		 assertNotNull("The title should not be null",theBill.getTitle());

		  // Test for SOBI.D110209.T110618.TXT
		  TestHelper.processFileC(env ,file.get(11));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
	      assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
	      assertNotNull("The title should not be null",theBill.getTitle());

	      // Test for SOBI.D110215.T151615.TXT
	      TestHelper.processFileC(env ,file.get(9));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
	      assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
	      assertNotNull("The title should not be null",theBill.getTitle());

	      // Test for SOBI.D110613.T222123.TXT
	      TestHelper.processFileC(env ,file.get(1));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
	      assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
	      assertNotNull("The title should not be null",theBill.getTitle());

	      // Test for SOBI.D110614.T152729.TXT
	      TestHelper.processFileC(env ,file.get(12));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
	      assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
	      assertNotNull("The title should not be null",theBill.getTitle());

	      // Test for SOBI.D110209.T170214.TXT,
	      TestHelper.processFileC(env ,file.get(20));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
	      assertEquals(theBill.getSponsor().getFullname(),"LAVALLE");
	      assertNotNull("The title should not be null",theBill.getTitle());

	      // Test for SOBI.D110209.T171147.TXT
	      TestHelper.processFileC(env ,file.get(18));
	      theBill=(Bill)storage.get("2011/bill/S1462A-2011", Bill.class);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749357020/fstmerge_var1_6246332455180497014
	      //assertEquals(theBill.getSameAs(),"A1415A");
	      
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749357020/fstmerge_base_6143945802585694659
	      assertEquals(theBill.getSameAs(),"A1415A");
	      
=======
	      assertEquals(theBill.getSameAs(),"A1415A");

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749357020/fstmerge_var2_6713925085114703406
	      // NO test for SOBI.D110210.T102843.TXT ,SOBI.D110210.T221519.TXT (Memo)









	  }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_e49ff_7fb60/rev_e49ff-7fb60/src/test/java/gov/nysenate/openleg/tests/AllTests.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_741dc_00f65/rev_741dc-00f65.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_53b01_a7f95/rev_53b01-a7f95.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_3146d_21068/rev_3146d-21068.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f774c_21587/rev_f774c-21587.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_36905_5c92f/rev_36905-5c92f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f5d21_2b763/rev_f5d21-2b763.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_6f3e0_72468/rev_6f3e0-72468.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_14433_db17a/rev_14433-db17a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_44868_1ac74/rev_44868-1ac74.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_cb2ee_28348/rev_cb2ee-28348.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749678952/fstmerge_var1_6368927900852302662
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749678952/fstmerge_base_8957397654851531539
private SearchEngine() {
        super(Config.get("data.lucene"));
        logger = Logger.getLogger(SearchEngine.class);
    }
=======
private SearchEngine() {
        super(Application.getConfig().getValue("data.lucene"));
        logger = Logger.getLogger(SearchEngine.class);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749678952/fstmerge_var2_7607861562112722780

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/search/SearchEngine.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679438/fstmerge_var1_3126531014644810383
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679438/fstmerge_base_7620932674131622464
@Override
    public boolean process(HashMap<String, Storage.Status> changeLog, Storage storage) throws IOException {
        for(Entry<String, Storage.Status> entry : changeLog.entrySet()) {
            // Key format is YEAR/OTYPE/OID
            String key = entry.getKey();
            String otype = key.split("/")[1];
            String oid = key.split("/")[2];

            if(entry.getValue()!=Storage.Status.NEW && !otype.equals("agenda")) {
                purgeUri("doc:"+oid);
            }
        }
        purgeUri("search");
        purgeUri("views");
        return true;
    }
=======
@Override
    public boolean process(HashMap<String, Storage.Status> changeLog, Storage storage) throws IOException {
        for(Entry<String, Storage.Status> entry : changeLog.entrySet()) {
            // Key format is YEAR/OTYPE/OID
            String key = entry.getKey();
            String otype = key.split("/")[1];
            String oid = key.split("/")[2];

            if(!otype.equals("agenda")) {
                purgeUri("doc:"+oid);
            }
        }
        purgeUri("search");
        purgeUri("views");
        return true;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679438/fstmerge_var2_7932084158614691622

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/services/Varnish.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679446/fstmerge_var1_4514633516013595775
private static void insertUpdates(List<Update> updates)
    {
        // Insert changes into database.
        DataSource datasource = Application.getDB().getDataSource();
        QueryRunner run = new QueryRunner(datasource);
        try {
            run.update("BEGIN");
            for(Update update: updates){
                run.update("INSERT INTO updates(otype, oid, date, status) values(?, ?, ?, ?)",
                        update.getOtype(), update.getOid(), update.getDate(), update.getStatus());
            }
            run.update("COMMIT");
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679446/fstmerge_base_7046266499598591316
=======
private static void insertUpdates(List<Update> updates)
    {
        // Insert changes into database.
        DataSource datasource = Application.getDB().getDataSource();
        QueryRunner run = new QueryRunner(datasource);
        try {
            for(Update update: updates){
                run.update("INSERT INTO updates(otype, oid, date, status) values(?, ?, ?, ?)",
                        update.getOtype(), update.getOid(), update.getDate(), update.getStatus());
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679446/fstmerge_var2_5401500849242750214

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/services/UpdateReporter.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public static Pattern keyPattern = Pattern.compile("([ASLREJKBC][0-9]{1,5}[A-Z]?)-([0-9]{4})"); ##FSTMerge## ##FSTMerge## public static Pattern keyPattern = Pattern.compile("([ASLREJK][0-9]{1,5}[A-Z]?)-([0-9]{4})");
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/model/Bill.java
Conflict type: LineBasedMCFd
Conflict body: 
@JsonIgnore
    @Override
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679792/fstmerge_base_7083561985813479671
    public HashMap<String,Fieldable> luceneFields() {
=======
    public HashMap<String,Fieldable> luceneFields()
    {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679792/fstmerge_var2_3221965197881812866
        HashMap<String,Fieldable> map = new HashMap<String,Fieldable>();

        if(this.getPastCommittees() != null) {
            String pcoms = "";
            for(String committee:pastCommittees) {
                pcoms += committee + ", ";
            }
            pcoms.replaceFirst(", $", "");
            map.put("pastcommittees", new Field("pastcommittees",pcoms, DocumentBuilder.DEFAULT_STORE, DocumentBuilder.DEFAULT_INDEX));
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679792/fstmerge_var1_4037159632100801719
        String billStatus = "";
        if (!actions.isEmpty()) {
            billStatus = actions.get(actions.size()-1).getText();
        }
        map.put("status", new Field("status", billStatus, DocumentBuilder.DEFAULT_STORE, DocumentBuilder.DEFAULT_INDEX));
        map.put("when", new Field("when", String.valueOf(this.getModified()), DocumentBuilder.DEFAULT_STORE, DocumentBuilder.DEFAULT_INDEX));

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679792/fstmerge_base_7083561985813479671
=======
        String billStatus = "";
        if (!actions.isEmpty()) {
            billStatus = actions.get(actions.size()-1).getText();
        }
        map.put("status", new Field("status", billStatus, DocumentBuilder.DEFAULT_STORE, DocumentBuilder.DEFAULT_INDEX));

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749679792/fstmerge_var2_3221965197881812866
        /*
         * the following creates a sortable index so we can sort
         * s1,s2,s3,s11 instead of s1,s11,s2,s3.  senate bills take
         * precedence, followed by assembly and finally anything else
         */
        String num = senateBillNo.split("-")[0];
        num = num.substring(1, (Character.isDigit(num.charAt(num.length()-1))) ? num.length() : num.length() - 1);
        while(num.length() < 6)
            num = "0" + num;

        if(senateBillNo.charAt(0) == 'S')
            num = "A" + num;
        else if(senateBillNo.charAt(0) == 'A')
            num = "B" + num;
        else
            num = "Z" + num;
        map.put("sortindex", new Field("sortindex",num, DocumentBuilder.DEFAULT_STORE, DocumentBuilder.DEFAULT_INDEX));

        return map;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/model/Bill.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681409/fstmerge_var1_2686488835453887078
public static boolean bootstrap(String propertyFileName)
    {
        try
        {
            appInstance.config = new Config(propertyFileName);
            appInstance.db = new DB(appInstance.config, "mysqldb");
            appInstance.mailer = new Mailer(appInstance.config, "mailer");
            appInstance.environment = new Environment(appInstance.config, "env");
            appInstance.searchEngine = new SearchEngine(appInstance.config, "lucene");
            appInstance.storage = new Storage(appInstance.environment.getStorageDirectory());
            return true;
        }
        catch (ConfigurationException ce)
        {
            logger.fatal("Failed to load configuration file " + propertyFileName);
            logger.fatal(ce.getMessage());
        }
        catch (Exception ex)
        {
            logger.fatal("An exception occurred while building dependencies");
            logger.fatal(ex.getMessage());
        }
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681409/fstmerge_base_9135457220191138446
=======
public static boolean bootstrap(String propertyFileName)
    {
        try
        {
            appInstance.config = new Config(propertyFileName);
            appInstance.db = new DB(appInstance.config, "mysqldb");
            appInstance.mailer = new Mailer(appInstance.config, "mailer");
            return true;
        }
        catch (ConfigurationException ce)
        {
            logger.fatal("Failed to load configuration file " + propertyFileName);
            logger.fatal(ce.getMessage());
        }
        catch (Exception ex)
        {
            logger.fatal("An exception occurred while building dependencies");
            logger.fatal(ex.getMessage());
        }
        return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681409/fstmerge_var2_8476358042817179209

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Application.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681541/fstmerge_var1_273924234461277805
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681541/fstmerge_base_1109498568590678563
public static String lrsPrinter(String fulltext) {
        StringTokenizer st = new StringTokenizer(fulltext, "\n");
        StringBuffer out = new StringBuffer("");

        boolean redact = false;
        int r_start = -1;
        int r_end = -1;
        boolean cap = false;
        int capCount = 0;
        int start = -1;
        int end = -1;

        ArrayList<TextPoint> points;

        while(st.hasMoreTokens()) {
            String line = st.nextToken();

            Pattern pagePattern = Pattern.compile("(^\\s+\\w\\.\\s\\d+(--\\w)?\\s+\\d+(\\s+\\w\\.\\s\\d+(--\\w)?)?$|^\\s+\\d+\\s+\\d+\\-\\d+\\-\\d$|^\\s+\\d{1,4}$)");
            Matcher pageMatcher = pagePattern.matcher(line);

            Pattern linePattern = Pattern.compile("^\\s{3,4}\\d{1,2}\\s*");
            Matcher lineMatcher = linePattern.matcher(line);

            points = new ArrayList<TextPoint>();

            if(lineMatcher.find()) {
                String text = line.substring(lineMatcher.end());
                String lineNo = line.substring(lineMatcher.start(), lineMatcher.end());

                char[] textChar = text.toCharArray();

                for(int i = 0; i < textChar.length; i++) {
                    if(textChar[i] == '[') {
                        redact = true;
                        r_start = i+1;
                    }
                    else if(textChar[i] == ']') {
                        r_end = i;
                        points.add(new TextPoint(r_start,r_end,false));

                        r_start = -1;
                        r_end = -1;
                        redact = false;
                    }

                    if(Character.toString(textChar[i]).matches("\\s")) {

                    }
                    else {
                        if(Character.isUpperCase(textChar[i])) {
                            if(!cap) {
                                cap = true;
                                if(i < 6) {
                                    start = 0;
                                }
                                else {
                                    start = i;
                                }
                            }
                            capCount++;
                        }
                        else if(Character.isLowerCase(textChar[i])) {
                            if(cap) {
                                if(capCount > 2) {
                                    end = i - 1;
                                    points.add(new TextPoint(start,end,true));
                                }
                                start = -1;
                                end = -1;
                                capCount = 0;
                                cap = false;
                            }
                        }
                    }
                }

                if(redact) {
                    text += "</del>";

                    if(r_start != -1) {
                        text = text.substring(0,r_start) + "<del>" + text.substring(r_start);
                    }
                    else {
                        text = "<del>" + text;
                    }
                    r_start = -1;
                    r_end = -1;
                }

                Collections.reverse(points);
                for(TextPoint tp:points) {
                    if(tp.s == -1) {
                        tp.s = 0;
                    }

                    text = text.substring(0, tp.e) + (tp.uOrDel ? ""/*"</u>"*/ : "</del>") + text.substring(tp.e);
                    text = text.substring(0,tp.s) + (tp.uOrDel ? ""/*"<u>"*/ : "<del>") + text.substring(tp.s);


                }

                out.append(lineNo + text + "\n");

                start = -1;
                end = -1;
                cap = false;
                capCount = 0;
            }
            else {
                if(pageMatcher.find()) {
                    out.append("<div style=\"page-break-after:always\"></div>"+line + "\n");
                }
                else {
                    out.append(line + "\n");
                }
            }
        }
        return out.toString();
    }
=======
public static String lrsPrinter(String fulltext) {
        StringBuffer out = new StringBuffer("");

        boolean redact = false;
        int r_start = -1;
        int r_end = -1;
        boolean cap = false;
        int capCount = 0;
        int start = -1;
        int end = -1;

        ArrayList<TextPoint> points;

        int linenum = 0;
        for (String line : fulltext.split("\n")) {
            linenum++;

            Pattern pagePattern = Pattern.compile("(^\\s+\\w\\.\\s\\d+(--\\w)?\\s+\\d+(\\s+\\w\\.\\s\\d+(--\\w)?)?$|^\\s+\\d+\\s+\\d+\\-\\d+\\-\\d$|^\\s+\\d{1,4}$)");
            Matcher pageMatcher = pagePattern.matcher(line);

            Pattern linePattern = Pattern.compile("^\\s{3,4}\\d{1,2}\\s*");
            Matcher lineMatcher = linePattern.matcher(line);

            points = new ArrayList<TextPoint>();

            if(lineMatcher.find()) {
                String text = line.substring(lineMatcher.end());
                String lineNo = line.substring(lineMatcher.start(), lineMatcher.end());

                char[] textChar = text.toCharArray();

                for(int i = 0; i < textChar.length; i++) {
                    if(textChar[i] == '[') {
                        redact = true;
                        r_start = i+1;
                    }
                    else if(textChar[i] == ']') {
                        r_end = i;
                        points.add(new TextPoint(r_start,r_end,false));

                        r_start = -1;
                        r_end = -1;
                        redact = false;
                    }

                    if(Character.toString(textChar[i]).matches("\\s")) {

                    }
                    else {
                        if(Character.isUpperCase(textChar[i])) {
                            if(!cap) {
                                cap = true;
                                if(i < 6) {
                                    start = 0;
                                }
                                else {
                                    start = i;
                                }
                            }
                            capCount++;
                        }
                        else if(Character.isLowerCase(textChar[i])) {
                            if(cap) {
                                if(capCount > 2) {
                                    end = i - 1;
                                    points.add(new TextPoint(start,end,true));
                                }
                                start = -1;
                                end = -1;
                                capCount = 0;
                                cap = false;
                            }
                        }
                    }
                }

                if(redact) {
                    text += "</del>";

                    if(r_start != -1) {
                        text = text.substring(0,r_start) + "<del>" + text.substring(r_start);
                    }
                    else {
                        text = "<del>" + text;
                    }
                    r_start = -1;
                    r_end = -1;
                }

                Collections.reverse(points);
                for(TextPoint tp:points) {
                    if(tp.s == -1) {
                        tp.s = 0;
                    }

                    text = text.substring(0, tp.e) + (tp.uOrDel ? ""/*"</u>"*/ : "</del>") + text.substring(tp.e);
                    text = text.substring(0,tp.s) + (tp.uOrDel ? ""/*"<u>"*/ : "<del>") + text.substring(tp.s);


                }

                out.append(lineNo + text + "\n");

                start = -1;
                end = -1;
                cap = false;
                capCount = 0;
            }
            else {
                // We need to wait till we hit the 10th line to avoid breaking on the bill header
                if(pageMatcher.find() && linenum > 10) {
                    out.append("<div style=\"page-break-after:always\"></div>"+line.substring(6) + "\n");
                }
                else {
                    out.append(line + "\n");
                }
            }
        }
        return out.toString();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681541/fstmerge_var2_7558156710135998980

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/TextFormatter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681688/fstmerge_var1_2760595678006853003
public static String getPersonLink(String person, String base)
    {
        if (person != null && person.trim().length() > 0) {
            return "<a href=\""+base+"/search/?term=sponsor:"+person+"\" class=\"sublink\">"+person+"</a>";
        }
        else {
            return "None";
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681688/fstmerge_base_8927237755502164397
=======
public static String getPersonLink(String person, String base)
    {
        return "<a href=\""+base+"/search/?term=sponsor:"+person+"\" class=\"sublink\">"+person+"</a>";
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681688/fstmerge_var2_8069349559712179013

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/JSPHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681692/fstmerge_var1_3664339201712767764
public static String getPersonLink(Person person, String base)
    {
        if (person != null) {
            return getPersonLink(person.getFullname(), base);
        }
        else {
            return "None";
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681692/fstmerge_base_6459037249410390082
=======
public static String getPersonLink(Person person, String base)
    {
        return getPersonLink(person.getFullname(), base);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681692/fstmerge_var2_4002506900070474864

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/JSPHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681717/fstmerge_var1_7156207496364272926
public static void clearLog()
    {
        ChangeLogger.changeLog.clear();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681717/fstmerge_base_6685502966905610011
=======
public void clearLog()
    {
        ChangeLogger.changeLog.clear();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681717/fstmerge_var2_7251613254736210225

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/ChangeLogger.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ ##FSTMerge## private final String storage; ##FSTMerge## private final File storage;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681770/fstmerge_var1_4823065074703176613
public Storage(File storageDir, Boolean autoFlush) {
        this.storageDir = storageDir;
        this.logger  = Logger.getLogger(this.getClass());
        this.memory  = new HashMap<String, Object>();
        this.dirty   = new HashSet<String>();
        this.autoFlush = autoFlush;

        this.objectMapper = new ObjectMapper();
        this.objectMapper.enable(Feature.INDENT_OUTPUT);
        this.jsonFactory = this.objectMapper.getJsonFactory();
        this.prettyPrinter = new DefaultPrettyPrinter();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681770/fstmerge_base_3275815747544655335
=======
public Storage(File storageDir, Boolean autoFlush) {
        this.storage = storageDir;
        this.logger  = Logger.getLogger(this.getClass());
        this.memory  = new HashMap<String, Object>();
        this.dirty   = new HashSet<String>();
        this.autoFlush = autoFlush;

        this.objectMapper = new ObjectMapper();
        this.objectMapper.enable(Feature.INDENT_OUTPUT);
        this.jsonFactory = this.objectMapper.getJsonFactory();
        this.prettyPrinter = new DefaultPrettyPrinter();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681770/fstmerge_var2_7817519033858863946

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681783/fstmerge_var1_7469326715735610529
public Object restore(String key, Class<?> cls) {
        try {
            File file = new File(new File(storageDir, "unpublished"), key+".json");
            if (file.exists()) {
                Object value;
                logger.info("Unpublishing: "+file.getPath());
                if (cls == Bill.class) {
                    value = this.readBill(file);
                }
                else {
                    value = objectMapper.readValue(FileUtils.readFileToString(file,encoding), cls);
                }
                if (!file.delete()) {
                    logger.error("Unable to delete unpublished file: "+key);
                }
                return value;
            }
            else {
                logger.info("Can't restore non-existing file: "+file.getPath());
            }
        } catch (IOException e) {
            logger.error("Unexpected restoration error",e);
        }
        return null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681783/fstmerge_base_3629356992915340732
=======
public Object restore(String key, Class<?> cls) {
        try {
            File file = new File(new File(storage, "unpublished"), key+".json");
            if (file.exists()) {
                Object value;
                logger.info("Unpublishing: "+file.getPath());
                if (cls == Bill.class) {
                    value = this.readBill(file);
                }
                else {
                    value = objectMapper.readValue(FileUtils.readFileToString(file,encoding), cls);
                }
                if (!file.delete()) {
                    logger.error("Unable to delete unpublished file: "+key);
                }
                return value;
            }
            else {
                logger.info("Can't restore non-existing file: "+file.getPath());
            }
        } catch (IOException e) {
            logger.error("Unexpected restoration error",e);
        }
        return null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681783/fstmerge_var2_6405375089169072156

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_base_919418729220686049
public Boolean del(String key) {
=======
public Boolean del(String key) throws IOException {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_var2_1751864025050070961
        // Deletions are always automatically flushed
        logger.debug("Deleting key: "+key);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_var1_5536518315976204549

        // Instead, move to storage/unpublished
        if (flushKey(key)) {
            FileUtils.moveFileToDirectory(storageFile(key), new File(storageDir, "unpublished"), true);
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_base_919418729220686049
=======

        // Instead, move to storage/unpublished
        if (flushKey(key)) {
            FileUtils.moveFileToDirectory(storageFile(key), new File(storage, "unpublished"), true);
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_var2_1751864025050070961
        memory.remove(key);
        dirty.remove(key);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_base_919418729220686049

        // Log the change
        Status keyStatus = changeLog.get(key);
        if (keyStatus == Status.NEW) {
            changeLog.remove(key);
        } else {
            changeLog.put(key, Status.DELETED);
        }
        return storageFile(key).delete();
=======
        return true;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681797/fstmerge_var2_1751864025050070961
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681811/fstmerge_var1_6852555132889891972
public File storageFile(String key) {
        return new File(storageDir, key+".json");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681811/fstmerge_base_434319726182643557
private File storageFile(String key) {
        return new File(storage, key+".json");
=======
public File storageFile(String key) {
        return new File(storage, key+".json");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681811/fstmerge_var2_3193130388673532806
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681869/fstmerge_var1_7749097190866548801
public void writeBill(Bill bill) throws IOException
    {
        logger.debug("Writing Bill: "+bill.getSenateBillNo());
        ObjectNode node = mapper.createObjectNode();
        node.put("actClause", bill.getActClause());
        node.put("active", bill.isActive());
        node.put("currentCommittee", bill.getCurrentCommittee());
        node.put("fulltext", bill.getFulltext());
        node.put("law", bill.getLaw());
        node.put("lawSection", bill.getLawSection());
        node.put("memo", bill.getMemo());
        node.put("modified", bill.getModified());
        node.put("sameAs", bill.getSameAs());

        ArrayNode otherSponsors = mapper.createArrayNode();
        for (Person otherSponsor : bill.getOtherSponsors()) {
            otherSponsors.add(personToObjectNode(otherSponsor));
        }
        node.put("otherSponsors", otherSponsors);

        ArrayNode multisponsors = mapper.createArrayNode();
        for (Person multisponsor : bill.getMultiSponsors()) {
            multisponsors.add(personToObjectNode(multisponsor));
        }
        node.put("multiSponsors", multisponsors);

        ArrayNode cosponsors = mapper.createArrayNode();
        for (Person cosponsor : bill.getCoSponsors()) {
            cosponsors.add(personToObjectNode(cosponsor));
        }
        node.put("coSponsors", cosponsors);

        ArrayNode actions = mapper.createArrayNode();
        for (Action action : bill.getActions()) {
            actions.add(actionToObjectNode(action));
        }
        node.put("actions", actions);

        node.put("sponsor", personToObjectNode(bill.getSponsor()));
        node.put("stricken", bill.isStricken());
        node.put("pastCommittees", listToArrayNode(bill.getPastCommittees()));
        node.put("previousVersions", listToArrayNode(bill.getPreviousVersions()));
        node.put("senateBillNo", bill.getSenateBillNo());
        node.put("summary", bill.getSummary());
        node.put("title", bill.getTitle());
        node.put("year", bill.getYear());
        node.put("uniBill", bill.isUniBill());
        node.put("sobiReferenceList", arrayToArrayNode(bill.getSobiReferenceList().toArray()));
        node.put("amendments", listToArrayNode(bill.getAmendments()));

        ArrayNode votes = mapper.createArrayNode();
        for (Vote vote : bill.getVotes()) {
            votes.add(voteToObjectNode(vote));
        }
        node.put("votes", votes);

        File file = new File(storageDir, bill.getYear()+"/bill/"+bill.getSenateBillNo()+".json");
        JsonGenerator generator = this.jsonFactory.createJsonGenerator(file, JsonEncoding.UTF8);
        generator.writeTree(node);
        generator.close();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681869/fstmerge_base_369901724415271596
=======
public void writeBill(Bill bill) throws IOException
    {
        logger.debug("Writing Bill: "+bill.getSenateBillNo());
        ObjectNode node = mapper.createObjectNode();
        node.put("actClause", bill.getActClause());
        node.put("active", bill.isActive());
        node.put("currentCommittee", bill.getCurrentCommittee());
        node.put("fulltext", bill.getFulltext());
        node.put("law", bill.getLaw());
        node.put("lawSection", bill.getLawSection());
        node.put("memo", bill.getMemo());
        node.put("modified", bill.getModified());
        node.put("sameAs", bill.getSameAs());

        ArrayNode otherSponsors = mapper.createArrayNode();
        for (Person otherSponsor : bill.getOtherSponsors()) {
            otherSponsors.add(personToObjectNode(otherSponsor));
        }
        node.put("otherSponsors", otherSponsors);

        ArrayNode multisponsors = mapper.createArrayNode();
        for (Person multisponsor : bill.getMultiSponsors()) {
            multisponsors.add(personToObjectNode(multisponsor));
        }
        node.put("multiSponsors", multisponsors);

        ArrayNode cosponsors = mapper.createArrayNode();
        for (Person cosponsor : bill.getCoSponsors()) {
            cosponsors.add(personToObjectNode(cosponsor));
        }
        node.put("coSponsors", cosponsors);

        ArrayNode actions = mapper.createArrayNode();
        for (Action action : bill.getActions()) {
            actions.add(actionToObjectNode(action));
        }
        node.put("actions", actions);

        node.put("sponsor", personToObjectNode(bill.getSponsor()));
        node.put("stricken", bill.isStricken());
        node.put("pastCommittees", listToArrayNode(bill.getPastCommittees()));
        node.put("previousVersions", listToArrayNode(bill.getPreviousVersions()));
        node.put("senateBillNo", bill.getSenateBillNo());
        node.put("summary", bill.getSummary());
        node.put("title", bill.getTitle());
        node.put("year", bill.getYear());
        node.put("uniBill", bill.isUniBill());
        node.put("sobiReferenceList", arrayToArrayNode(bill.getSobiReferenceList().toArray()));
        node.put("amendments", listToArrayNode(bill.getAmendments()));

        ArrayNode votes = mapper.createArrayNode();
        for (Vote vote : bill.getVotes()) {
            votes.add(voteToObjectNode(vote));
        }
        node.put("votes", votes);

        File file = new File(storage, bill.getYear()+"/bill/"+bill.getSenateBillNo()+".json");
        JsonGenerator generator = this.jsonFactory.createJsonGenerator(file, JsonEncoding.UTF8);
        generator.writeTree(node);
        generator.close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749681869/fstmerge_var2_825290008343348219

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/util/Storage.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216
public void process(File sobiFile, Storage storage) throws IOException {

        // Initialize file variables
        String oldBlock = "";
        String newBlock = "";
        StringBuffer blockData = new StringBuffer();
        String billYear = "";
        String billId = "";
        String billAmendment = "";
        String lineCode = "";
        String fileName = sobiFile.getName();

        Date date;
=======
public void process(File sobiFile, Storage storage) throws IOException
    {
        Date date = null;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216
            date = BillProcessor.sobiDateFormat.parse(fileName);
        } catch (ParseException e) {
            logger.error("Unparseable date: "+fileName);
=======
            date = BillProcessor.sobiDateFormat.parse(sobiFile.getName());
        }
        catch (ParseException e) {
            logger.error("Unparseable date: "+sobiFile.getName());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
            return;
        }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216
        // Loop through the lines in the file
        logger.info("Reading file: "+fileName);
        List<String> lines = FileUtils.readLines(sobiFile);
        lines.add(""); // Add a line to remove last line edge case
        for(int lineNum=0; lineNum<lines.size(); lineNum++) {
            String line = lines.get(lineNum);

            // Check to see if the current line is in the SOBI format
            Matcher sobiHeader = sobiHeaderPattern.matcher(line);

            // Supply a default newBlock identifier for non-matching lines
            newBlock = sobiHeader.find() ? sobiHeader.group(1) : "";

            // If we previously had a block and the new block is different
            // commit the old block before starting a new one.
            if (!oldBlock.equals("") && !newBlock.equals(oldBlock)) {

                try {
                    Bill bill = loadBill(storage, billId, billYear, billAmendment, oldBlock, blockData, fileName, lineNum);

                    // commit block
                    try {
                        switch (lineCode.charAt(0)) {
                            case '1': applyBillData(blockData.toString(), bill, date); break;
                            case '2': applyLawSection(blockData.toString(), bill, date); break;
                            case '3': applyTitle(blockData.toString(), bill, date); break;
                            case '4': applyBillEvent(blockData.toString(), bill, date); break;
                            case '5': applySameAs(blockData.toString(), bill, date); break;
                            case '6': applySponsor(blockData.toString(), bill, date); break;
                            case '7': applyCosponsors(blockData.toString(), bill, date); break;
                            case '8': applyMultisponsors(blockData.toString(), bill, date); break;
                            case '9': applyProgramInfo(blockData.toString(), bill, date); break;
                            case 'A': applyActClause(blockData.toString(), bill, date); break;
                            case 'B': applyLaw(blockData.toString(), bill, date); break;
                            case 'C': applySummary(blockData.toString(), bill, date); break;
                            case 'M':
                            case 'R':
                            case 'T': applyText(blockData.toString(), bill, date); break;
                            case 'V': applyVoteMemo(blockData.toString(), bill, date); break;
                            default: throw new ParseError("Invalid Line Code", lineCode);
                        }

                        bill.addSobiReference(sobiFile.getName());
                        bill.setModified(date.getTime());
                        saveBill(storage, bill);
                    } catch (ParseError e) {
                        throw e;
                    } catch (Exception e) {
                        logger.error("Unexpected Exception", e);
                        throw new ParseError(e.getMessage(), blockData.toString());
=======
        // Catch exceptions on a per-block basis so that a single error won't corrupt the whole file.
        for (SOBIBlock block : getBlocks(sobiFile)) {
            logger.info("Processing "+block);
            try {

                if (block.getType() == '1' && block.getData().startsWith("DELETE")) {
                    // Special case here were we delete the whole bill
                    // TODO: This might actually be a soft delete!
                    logger.info("DELETING "+block.getHeader());
                    deleteBill(block, storage, date);
                }
                else {
                    // Otherwise, apply the block to the bill normally
                    String data = block.getData().toString();
                    Bill bill = getOrCreateBill(block, storage, date);
                    switch (block.getType()) {
                        case '1': applyBillInfo(data, bill, date); break;
                        case '2': applyLawSection(data, bill, date); break;
                        case '3': applyTitle(data, bill, date); break;
                        case '4': applyBillEvent(data, bill, date); break;
                        case '5': applySameAs(data, bill, date); break;
                        case '6': applySponsor(data, bill, date); break;
                        case '7': applyCosponsors(data, bill, date); break;
                        case '8': applyMultisponsors(data, bill, date); break;
                        case '9': applyProgramInfo(data, bill, date); break;
                        case 'A': applyActClause(data, bill, date); break;
                        case 'B': applyLaw(data, bill, date); break;
                        case 'C': applySummary(data, bill, date); break;
                        case 'M':
                        case 'R':
                        case 'T': applyText(data, bill, date); break;
                        case 'V': applyVoteMemo(data, bill, date); break;
                        default: throw new ParseError("Invalid Line Code "+block.getType() );
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
                    }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var1_6832018512956329882
                    logger.info("SAVING: "+bill.getSenateBillNo());
                    bill.addSobiReference(sobiFile.getName());
                    bill.setModified(date.getTime());
                    saveBill(bill, storage, date);

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216

                } catch (ParseError e) {
                    logger.error("ParseError at "+fileName+":"+lineNum, e);
=======
                    logger.info("SAVING: "+bill.getSenateBillNo());
                    bill.addSobiReference(sobiFile.getName());
                    bill.setModified(date.getTime());
                    String key = bill.getKey();
                    saveBill(bill, storage, date);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
                }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216

                // cleanup
                blockData = new StringBuffer();
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216

            // Move our identifier forward
            oldBlock = newBlock;

            // Skip lines that did not match the SOBI format
            if (newBlock.equals("")) continue;


            if (blockData.length()==0) {
                // If we're starting from a blank slate, initialize block values
                billYear = sobiHeader.group(2);
                billId = sobiHeader.group(3).replaceAll("(?<=[A-Z])0*", "");
                billAmendment = sobiHeader.group(4).trim();
                lineCode = sobiHeader.group(5);
                blockData.append(sobiHeader.group(6));

            } else {
                // Otherwise, build the data string, carry the new lines
                blockData.append("\r\n"+sobiHeader.group(6));
=======
            catch (ParseError e) {
                logger.error("ParseError at "+block.getLocation(), e);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_base_6325192933824418216

            // Special case for the type 1 deletes!
            if (lineCode.equals("1") && sobiHeader.group(6).startsWith("DELETE")) {
                String bucket = billYear+"/bill/";
                String key = billId+billAmendment+"-"+String.valueOf(billYear);
                storage.del(bucket+key);

                if (!billAmendment.isEmpty()) {
                    // We need to remove all references to this amendment
                    String oldKey = billId+"-"+billYear;
                    Bill oldBill = (Bill)storage.get(bucket+oldKey, Bill.class);
                    oldBill.amendments.remove(key);
                    storage.set(bucket+oldKey, oldBill);
                    for (String ammendment : oldBill.amendments) {
                        Bill bill = (Bill)storage.get(bucket+ammendment, Bill.class);
                        bill.amendments.remove(key);
                        storage.set(bucket+ammendment, bill);
                    }
                }

                blockData = new StringBuffer();
                oldBlock = "";
=======
            catch (Exception e) {
                logger.error("Unexpected Exception at "+block.getLocation(), e);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682236/fstmerge_var2_7069013548721575998
            }
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682248/fstmerge_var1_5869974193835324513
public Bill getOrCreateBill(SOBIBlock block, Storage storage, Date date) throws ParseError
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill != null) {
            // We retrieved the bill successfully!
            return bill;
        }
        else {
            // Check to see if we've previously deleted this bill
            bill = (Bill)storage.restore(billKey, Bill.class);

            if (block.getAmendment().isEmpty()) {
                if (bill == null) {
                    // New base bill. Easy.
                    return new Bill(billKey, block.getYear());
                }
                else {
                    // Bringing back deleted base bill, also easy.
                    return bill;
                }
            }

            if (bill == null) {
                // No previous record found, create a new amendment
                bill = new Bill(billKey, block.getYear());
            }

            // All amendments are based on the original bill
            // We need to do this for resurrected bills too because there
            // may have been updates to other versions since the bill was deleted.
            String baseKey = block.getPrintNo()+"-"+block.getYear();
            Bill baseBill = storage.getBill(baseKey);

            if (baseBill == null) {
                // Amendments should always have original bills already made, make it happen
                logger.error("Bill Amendment filed without initial bill at "+block.getLocation()+" - "+block.getHeader());
                baseBill = new Bill(baseKey, block.getYear());
                storage.saveBill(baseBill);
                ChangeLogger.record(baseBill.getKey(), storage, date);
            }

            // Pull sponsor information up from the base bill
            bill.setSponsor(baseBill.getSponsor());
            bill.setCoSponsors(baseBill.getCoSponsors());
            bill.setOtherSponsors(baseBill.getOtherSponsors());
            bill.setMultiSponsors(baseBill.getMultiSponsors());

            // Pull up the list of existing versions and add yourself
            bill.addAmendment(baseKey);
            bill.addAmendments(baseBill.getAmendments());

            // Broadcast yourself to all other versions and deactivate them
            Bill activeBill = null;
            for (String versionKey : bill.getAmendments()) {
                Bill billVersion = storage.getBill(versionKey);
                if (billVersion == null) {
                    throw new ParseError("Recorded bill version not found in storage: "+versionKey);
                }
                else {
                    billVersion.addAmendment(billKey);
                    if(billVersion.isActive()) {
                        activeBill = billVersion;
                        billVersion.setActive(false);
                    }
                    storage.saveBill(billVersion);
                    ChangeLogger.record(billVersion.getKey(), storage, date);
                }
            }

            if (activeBill == null) {
                logger.error("Unable to find active bill for "+bill.getSenateBillNo()+". BIG PROBLEM!");
                logger.error("Versions: "+bill.getAmendments());
                activeBill = baseBill;
            }

            if (activeBill.getModified() > bill.getModified()) {
                // Pull some other information up from previously active bill
                bill.setSummary(activeBill.getSummary());
                bill.setTitle(activeBill.getTitle());
                bill.setActClause(activeBill.getActClause());
                bill.setLawSection(activeBill.getLawSection());
                bill.setLaw(activeBill.getLaw());

                // Activate yourself
                bill.setActive(true);
                storage.saveBill(bill);
                ChangeLogger.record(bill.getKey(), storage, date);
            }

            return bill;
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682248/fstmerge_base_4952458495712648150
=======
public Bill getOrCreateBill(SOBIBlock block, Storage storage, Date date) throws ParseError
    {
        String billKey = block.getPrintNo()+block.getAmendment()+"-"+block.getYear();
        Bill bill = storage.getBill(billKey);

        if (bill != null) {
            // We retrieved the bill successfully!
            return bill;
        }
        else {
            // Check to see if we've previously deleted this bill
            bill = (Bill)storage.restore(billKey, Bill.class);

            if (block.getAmendment().isEmpty()) {
                if (bill == null) {
                    // New base bill. Easy.
                    return new Bill(billKey, block.getYear());
                }
                else {
                    // Bringing back deleted base bill, also easy.
                    return bill;
                }
            }

            if (bill == null) {
                // No previous record found, create a new amendment
                bill = new Bill(billKey, block.getYear());
            }

            // All amendments are based on the original bill
            // We need to do this for resurrected bills too because there
            // may have been updates to other versions since the bill was deleted.
            String baseKey = block.getPrintNo()+"-"+block.getYear();
            Bill baseBill = storage.getBill(baseKey);

            if (baseBill == null) {
                // Amendments should always have original bills already made, make it happen
                logger.error("Bill Amendment filed without initial bill at "+block.getLocation()+" - "+block.getHeader());
                baseBill = new Bill(baseKey, block.getYear());
                storage.saveBill(baseBill);
                ChangeLogger.record(baseBill.getKey(), storage, date);
            }

            // Pull sponsor information up from the base bill
            bill.setSponsor(baseBill.getSponsor());
            bill.setCoSponsors(baseBill.getCoSponsors());
            bill.setMultiSponsors(baseBill.getMultiSponsors());

            // Pull up the list of existing versions and add yourself
            bill.addAmendment(baseKey);
            bill.addAmendments(baseBill.getAmendments());

            // Broadcast yourself to all other versions and deactivate them
            Bill activeBill = null;
            for (String versionKey : bill.getAmendments()) {
                Bill billVersion = storage.getBill(versionKey);
                if (billVersion == null) {
                    throw new ParseError("Recorded bill version not found in storage: "+versionKey);
                }
                else {
                    billVersion.addAmendment(billKey);
                    if(billVersion.isActive()) {
                        activeBill = billVersion;
                        billVersion.setActive(false);
                    }
                    storage.saveBill(billVersion);
                    ChangeLogger.record(billVersion.getKey(), storage, date);
                }
            }

            if (activeBill == null) {
                logger.error("Unable to find active bill for "+bill.getSenateBillNo()+". BIG PROBLEM!");
                logger.error("Versions: "+bill.getAmendments());
                activeBill = baseBill;
            }

            if (activeBill.getModified() > bill.getModified()) {
                // Pull some other information up from previously active bill
                bill.setSummary(activeBill.getSummary());
                bill.setLaw(activeBill.getLaw());

                // Activate yourself
                bill.setActive(true);
                storage.saveBill(bill);
                ChangeLogger.record(bill.getKey(), storage, date);
            }

            return bill;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682248/fstmerge_var2_7931540327065862802

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682254/fstmerge_var1_8344489607652852840
public void saveBill(Bill bill, Storage storage, Date date)
    {
        // Until LBDC starts sending coPrime information for real we need overrides
        // for the following set of bills and resolutions
        if (bill.getSenateBillNo().equals("R314-2013")) {
            // For reso R314  - Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("J375-2013")) {
            // For reso J375  - Stewart-Cousins, Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("SKELOS"), new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("R633-2013")) {
            // For reso R633  - Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("J694-2013")) {
            // For reso J694  - Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("J758-2013")) {
            // For reso J758 - Klein, Skelos as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("SKELOS")));
        }
        else if (bill.getSenateBillNo().equals("R818-2013")) {
            // For reso J818 -  Skelos, Klein as sponsors (there is no J818, typo?)
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("J844-2013")) {
            // For reso J844  - Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("J860-2013")) {
            // For reso J860  - Gianaris, Skelos as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("SKELOS")));
        }
        else if (bill.getSenateBillNo().equals("J1608-2013")) {
            // For reso J1608 - Skelos, Klein, Stewart-Cousins as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN"), new Person("STEWART-COUSINS")));
        }
        else if (bill.getSenateBillNo().equals("J1938-2013")) {
            // For reso J1938 - Skelos, Klein, Stewart-Cousins as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN"), new Person("STEWART-COUSINS")));
        }
        else if (bill.getSenateBillNo().equals("J3100-2013")) {
            // For reso J3100 - Skelos, Hannon as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("HANNON")));
        }
        else if (bill.getSenateBillNo().equals("S2107-2013")) {
            // For bill S2107 - Skelos, Klein as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("KLEIN")));
        }
        else if (bill.getSenateBillNo().equals("S3953-2013")) {
            // For bill S3953  - Klein, Espaillat as sponsors
            bill.setOtherSponsors(Arrays.asList(new Person("ESPAILLAT")));
        }
        else if (bill.getSenateBillNo().equals("S5441-2013")) {
            // For bill S5441 - KENNEDY, GRISANTI, RANZENHOFER, GALLIVAN
            bill.setOtherSponsors(Arrays.asList(new Person("GRISANTI"), new Person("RANZENHOFER"), new Person("GALLIVAN")));
        }
        else if (bill.getSenateBillNo().equals("S5656-2013")) {
            // For bill S5656 - MARCELLINO, FUSCHILLO
            bill.setOtherSponsors(Arrays.asList(new Person("FUSCHILLO")));
        }
        else if (bill.getSenateBillNo().equals("S5657-2013")) {
            // For bill S5657 - GALLIVAN, MARCHIONE, CARLUCCI
            bill.setOtherSponsors(Arrays.asList(new Person("MARCHIONE"), new Person("CARLUCCI")));
        }
        else if (bill.getSenateBillNo().equals("S5683-2013")) {
            // For bill S5683 - MARTINS, VALESKY
            bill.setOtherSponsors(Arrays.asList(new Person("VALESKY")));
        }

        // Sponsor and summary information needs to be synced at all times.
        // Uni bills share text, always sent to the senate bill.
        // Normally it is always sent to the base bill and broadcasted to amendments
        // In our 2009 data set we are missing tons of base amendments and it actually
        // needs to be broadcasted backwards to the original bill.
        for (String versionKey : bill.getAmendments()) {
            Bill billVersion = storage.getBill(versionKey);
            billVersion.setSponsor(bill.getSponsor());
            billVersion.setCoSponsors(bill.getCoSponsors());
            billVersion.setOtherSponsors(bill.getOtherSponsors());
            billVersion.setMultiSponsors(bill.getMultiSponsors());
            billVersion.setLawSection(bill.getLawSection());
            billVersion.setSummary(bill.getSummary());
            storage.saveBill(billVersion);
            ChangeLogger.record(billVersion.getKey(), storage, date);
        }

        if (bill.isUniBill()) {
            // logger.error("UNIBILL: "+bill.getSenateBillNo()+", "+bill.getSameAs());
            Bill uniBill = storage.getBill(bill.getSameAs());
            if (uniBill != null) {
                String billText = bill.getFulltext();
                String uniBillText = uniBill.getFulltext();

                if (billText.isEmpty()) {
                    logger.info(bill.getSenateBillNo()+" is empty");
                    if (!uniBillText.isEmpty()) {
                        // if we are empty then we must need their text
                        logger.info("taking text from "+bill.getSameAs());
                        bill.setFulltext(uniBillText);
                    }
                    else {
                        logger.info("but there is no text to grab from "+bill.getSameAs());
                    }
                }
                else if (!billText.equals(uniBillText)) {
                    logger.info("My text has been updated, sharing with "+bill.getSameAs());
                    // If we differ, then we must have just changed, share the text
                    uniBill.setFulltext(bill.getFulltext());
                }
                else {
                    logger.info("we have the same text");
                }

                storage.saveBill(uniBill);
            }
        }
        storage.saveBill(bill);
        ChangeLogger.record(bill.getKey(), storage, date);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682254/fstmerge_base_1393845831418688688
=======
public void saveBill(Bill bill, Storage storage, Date date)
    {
        // Sponsor and summary information needs to be synced at all times.
        // Uni bills share text, always sent to the senate bill.
        // Normally it is always sent to the base bill and broadcasted to amendments
        // In our 2009 data set we are missing tons of base amendments and it actually
        // needs to be broadcasted backwards to the original bill.
        for (String versionKey : bill.getAmendments()) {
            Bill billVersion = storage.getBill(versionKey);
            billVersion.setSponsor(bill.getSponsor());
            billVersion.setCoSponsors(bill.getCoSponsors());
            billVersion.setMultiSponsors(bill.getMultiSponsors());
            billVersion.setSummary(bill.getSummary());
            storage.saveBill(billVersion);
            ChangeLogger.record(billVersion.getKey(), storage, date);
        }
        if (bill.isUniBill()) {
            // logger.error("UNIBILL: "+bill.getSenateBillNo()+", "+bill.getSameAs());
            Bill uniBill = storage.getBill(bill.getSameAs());
            if (uniBill != null) {
                String billText = bill.getFulltext();
                String uniBillText = uniBill.getFulltext();

                if (billText.isEmpty()) {
                    logger.info(bill.getSenateBillNo()+" is empty");
                    if (!uniBillText.isEmpty()) {
                        // if we are empty then we must need their text
                        logger.info("taking text from "+bill.getSameAs());
                        bill.setFulltext(uniBillText);
                    }
                    else {
                        logger.info("but there is no text to grab from "+bill.getSameAs());
                    }
                }
                else if (!billText.equals(uniBillText)) {
                    logger.info("My text has been updated, sharing with "+bill.getSameAs());
                    // If we differ, then we must have just changed, share the text
                    uniBill.setFulltext(bill.getFulltext());
                }
                else {
                    logger.info("we have the same text");
                }

                storage.saveBill(uniBill);
            }
        }
        storage.saveBill(bill);
        ChangeLogger.record(bill.getKey(), storage, date);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682254/fstmerge_var2_7500816940513039386

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682265/fstmerge_var1_1757311621675779931
public void applyTitle(String data, Bill bill, Date date) throws ParseError
    {
        // No DELETE code for titles, they just get replaced
        // Combine the lines with a space
        bill.setTitle(data.replace("\n", " ").trim());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682265/fstmerge_base_7906724319838754929
public void applyTitle(String data, Bill bill, Date date) throws ParseError {
        // No DELETE code for titles
        // Combine the lines with a space and handle special character issues..
        // Again, I don't have any examples of these special characters right now
        // data = data.replace("","S").replaceAll("\\x27(\\W|\\s)", "&apos;$1");
        bill.setTitle(data.replace("\r\n", " ").trim());
=======
public void applyTitle(String data, Bill bill, Date date) throws ParseError
    {
        // No DELETE code for titles, they just get replaced
        // Combine the lines with a space and handle special character issues..
        // I don't have any examples of these special characters right now, here is some legacy code:
        //      data = data.replace("","S").replaceAll("\\x27(\\W|\\s)", "&apos;$1");
        bill.setTitle(data.replace("\n", " ").trim());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682265/fstmerge_var2_313117646029780431
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_base_8645895259722874864
public void applyLaw(String data, Bill bill, Date date) throws ParseError {
=======
public void applyLaw(String data, Bill bill, Date date) throws ParseError
    {
        // This is theoretically not safe because a law line *could* start with DELETE
        // We can't do an exact match because B can be multi-line
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_var2_5086080111826198558
        if (data.trim().startsWith("DELETE")) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_base_8645895259722874864
            // The Law delete code should also remove the summary information
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_var2_5086080111826198558
            bill.setLaw("");
            bill.setSummary("");

        } else {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_var1_7522954575403248675
            bill.setLaw(data.replace("\n", " ").trim());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_base_8645895259722874864
            // We'll definitely need to clean this data up more than a little bit..
            // data = data.replaceAll("\\xBD", "");
            bill.setLaw(data.replace("\r\n", " ").replace("õ", "S").replace("ô","P").replace("ï¿½","S").replace((char)65533+"", "S").trim());
=======
            // We'll definitely need to clean this data up more than a little bit, these encoding issues are terrible!
            // data = data.replaceAll("\\xBD", ""); // I don't think we still need this
            bill.setLaw(data.replace("\n", " ").replace("õ", "S").replace("ô","P").replace("ï¿½","S").replace((char)65533+"", "S").trim());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682287/fstmerge_var2_5086080111826198558
        }
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682292/fstmerge_var1_8095191841190615333
public void applySummary(String data, Bill bill, Date date) throws ParseError
    {
        bill.setSummary(data.replace("\n", " ").trim());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682292/fstmerge_base_8707357584337445879
public void applySummary(String data, Bill bill, Date date) throws ParseError{
        // The DELETE code for the summary goes through the law block (B)
        // Combine the lines with a space and handle special character issues..
        // Again, I don't have any examples of these special characters right now
        // data = data.replace("","S").replaceAll("\\x27(\\W|\\s)", "&apos;$1");
        bill.setSummary(data.replace("\r\n", " ").trim());
=======
public void applySummary(String data, Bill bill, Date date) throws ParseError
    {
        // I don't have any examples of these special characters right now, here is some legacy code:
        //      data = data.replace("","S").replaceAll("\\x27(\\W|\\s)", "&apos;$1");
        bill.setSummary(data.replace("\n", " ").trim());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682292/fstmerge_var2_8225269805640893871
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/processors/BillProcessor.java
Conflict type: LineBasedMCFd
Conflict body: 
public static ArrayList<Result> buildSearchResultList(SenateResponse sr) {

        ArrayList<Result> resultList = new ArrayList<Result>();

        if (sr.getResults() == null || sr.getResults().isEmpty())
            return resultList;

        for (Result result : sr.getResults()) {
            try {
                String type = result.getOtype();
                String jsonData = result.getData();

                if (jsonData == null)
                    continue;

                jsonData = unwrapJson(jsonData);

                ApiType apiType = getApiType(type);
                Class<? extends ISenateObject> clazz = apiType.clazz();

                ISenateObject resultObj = null;
                try {
                    resultObj = mapper.readValue(jsonData, clazz);
                    result.setObject(resultObj);
                } catch (Exception e) {
                    logger.error("error binding:" + clazz.getName(), e);
                }

                if (resultObj == null)
                    continue;

                resultObj.setModified(result.getLastModified());
                resultObj.setActive(result.isActive());

                String title = "";
                String summary = "";

                HashMap<String, String> fields = new HashMap<String, String>();
                fields.put("type", type);

                /*
                 * populate result objects with any relevant fields, this
                 * provides our more generic, non type-specific search
                 */
                if (type.equals("bill")) {
                    Bill bill = (Bill) resultObj;

                    if (bill.getTitle() != null)
                        title += bill.getTitle();
                    else
                        title += "(no title)";

                    if (bill.getSponsor() != null)
                        fields.put("sponsor", bill.getSponsor().getFullname());
                    else
                        fields.put("sponsor", null);

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_base_8933199411921932167
=======
                    fields.put("otherSponsors", StringUtils.join(bill.getOtherSponsors(), ", "));
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var2_3992650224372779347
                    summary = bill.getSummary();

                    fields.put("committee", bill.getCurrentCommittee());
                    fields.put("billno", bill.getSenateBillNo());
                    fields.put("summary", bill.getSummary());
                    fields.put("year", bill.getYear() + "");
                } else if (type.equals("calendar")) {
                    Calendar calendar = (Calendar) resultObj;

                    title = calendar.getNo() + "-" + calendar.getYear();

                    if (calendar.getType() == null)
                        fields.put("type", "");
                    else if (calendar.getType().equals("active"))
                        fields.put("type", "Active List");
                    else if (calendar.getType().equals("floor"))
                        fields.put("type", "Floor Calendar");
                    else
                        fields.put("type", calendar.getType());

                    Supplemental supp = calendar.getSupplementals().get(0);

                    if (supp.getCalendarDate() != null) {
                        fields.put("date", DATE_FORMAT_CUSTOM.format(supp.getCalendarDate()));

                        summary = "";

                        if (supp.getSections() != null) {
                            Iterator<Section> itSections = supp.getSections()
                                    .iterator();
                            while (itSections.hasNext()) {
                                Section section = itSections.next();

                                summary += section.getName() + ": ";
                                summary += section.getCalendarEntries().size() + " items;";
                            }
                        }
                    } else if (supp.getSequences() != null && supp.getSequences().size() > 0) {

                        fields.put("date", DATE_FORMAT_CUSTOM.format(supp.getSequences().get(0).getActCalDate()));

                        int total = 0;
                        for(Sequence seq:supp.getSequences()) {
                            total += seq.getCalendarEntries().size();
                        }
                        summary = total + " item(s)";

                    }
                } else if (type.equals("transcript")) {
                    Transcript transcript = (Transcript) resultObj;

                    if (transcript.getTimeStamp() != null)
                        title = DATE_FORMAT_CUSTOM.format(transcript.getTimeStamp());
                    else
                        title = "Transcript - " + transcript.getLocation();

                    summary = TextFormatter.append(transcript.getType(), ": ", transcript.getLocation());

                    fields.put("location", transcript.getLocation());

                } else if (type.equals("meeting")) {
                    Meeting meeting = (Meeting) resultObj;
                    title = TextFormatter.append(meeting.getCommitteeName(), " (",
                            new SimpleDateFormat("MMM d, yyyy - h:mm a").format(meeting.getMeetingDateTime()), ")");

                    fields.put("location", meeting.getLocation());
                    fields.put("chair", meeting.getCommitteeChair());
                    fields.put("committee", meeting.getCommitteeName());

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_base_8933199411921932167
                    summary = meeting.getNotes();
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var2_3992650224372779347
                } else if (type.equals("action")) {
                    Action billEvent = (Action) resultObj;
                    String billId = billEvent.getBill().getSenateBillNo();

                    title = billEvent.getText();

                    fields.put("date", DATE_FORMAT_MED.format(billEvent
                            .getDate()));
                    fields.put("billno", billId);
                } else if (type.equals("vote")) {
                    Vote vote = (Vote) resultObj;

                    if (vote.getVoteType() == Vote.VOTE_TYPE_COMMITTEE)
                        fields.put("type", "Committee Vote");
                    else if (vote.getVoteType() == Vote.VOTE_TYPE_FLOOR)
                        fields.put("type", "Floor Vote");

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var1_4049710016549827121
                    HashMap<String, String> resultFields = result.getFields();
                    fields.put("sponsor", resultFields.get("sponsor"));
                    fields.put("billno", resultFields.get("billno"));
                    fields.put("otherSponsors", resultFields.get("otherSponsors"));
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_base_8933199411921932167
                    if (vote.getBill() != null) {
                        Bill bill = vote.getBill();
=======
                    HashMap<String, String> resultFields = result.getFields();
                    fields.put("sponsor", resultFields.get("sponsor"));
                    fields.put("billno", resultFields.get("billno"));
                    fields.put("otherSponsors", resultFields.get("otherSponsors"));
                    if (vote.getBill() != null) {
                        Bill bill = vote.getBill();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var2_3992650224372779347

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var1_4049710016549827121
                    if (vote.getVoteType() == Vote.VOTE_TYPE_COMMITTEE)
                        fields.put("committee", vote.getDescription());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_base_8933199411921932167
                        if (bill.getSponsor() != null)
                            fields.put("sponsor", bill.getSponsor()
                                    .getFullname());

                        if (vote.getVoteType() == Vote.VOTE_TYPE_COMMITTEE)
                            fields.put("committee", bill.getCurrentCommittee());

                        fields.put("billno", bill.getSenateBillNo());
                        fields.put("year", bill.getYear() + "");
                    }
=======
                        if (bill.getSponsor() != null)
                            fields.put("sponsor", bill.getSponsor().getFullname());

                        if (vote.getVoteType() == Vote.VOTE_TYPE_COMMITTEE)
                            fields.put("committee", bill.getCurrentCommittee());

                        fields.put("billno", bill.getSenateBillNo());
                        fields.put("year", bill.getYear() + "");
                    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749682322/fstmerge_var2_3992650224372779347

                    title +=  DATE_FORMAT_CUSTOM.format(vote.getVoteDate());
                }

                result.setTitle(title);
                result.setSummary(summary);
                result.setFields(fields);
            } catch (Exception e) {
                logger.error(TextFormatter.append(
                        "problem parsing result: ", result.getOtype(), "-", result.getOid()),
                        e);
            }
        }

        return sr.getResults();
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/api/ApiHelper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684126/fstmerge_var1_7442756080961426200
protected Options getOptions()
    {
        Options options = new Options();
        options.addOption("l", "lucene", true, "Push changes to the Lucene service");
        options.addOption("v", "varnish", false, "Push changes to the Varnish service");
        options.addOption("u", "updateReporter", false, "Push updates to html");
        options.addOption("f", "change-file", true, "Path of changeLog file.");
        options.addOption("c", "changes", true, "A newline delimited list of changes");
        options.addOption("h", "help", false, "Print this message");
        return options;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684126/fstmerge_base_6253415160692150239
=======
protected Options getOptions()
    {
        Options options = new Options();
        options.addOption("l", "lucene", true, "Push changes to the Lucene service");
        options.addOption("v", "varnish", false, "Push changes to the Varnish service");
        options.addOption("f", "change-file", true, "Path of changeLog file.");
        options.addOption("c", "changes", true, "A newline delimited list of changes");
        options.addOption("h", "help", false, "Print this message");
        options.addOption("u", "updateReporter", false, "Push updates to html");
        return options;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684126/fstmerge_var2_7109858281797621281

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/Push.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684131/fstmerge_var1_5721623723358187045
protected void execute(CommandLine opts)
    {
        String[] required = opts.getArgs();
        if (required.length != 1) {
            System.err.println("Storage is a required argument.");
            printUsage(opts);
            System.exit(1);
        }

        // Parse the specified changes into a hash
        if (opts.hasOption("change-file")) {
            try {
                ChangeLogger.readFromFile(new File(opts.getOptionValue("change-file")));
            } catch (IOException e) {
                System.err.println("Error reading change-file: "+opts.getOptionValue("changes"));
                System.exit(1);
            }
        } else if (opts.hasOption("changes")) {
            ChangeLogger.readFromLines(Arrays.asList(opts.getOptionValue("changes").split("\n")));
        } else {
            System.err.println("Changes to push must be specified with either --change-file or --changes");
            System.exit(1);
        }

        // Currently there is a Lucene hook and varnish hook, more to come
        ArrayList<ServiceBase> services = new ArrayList<ServiceBase>();
        if(opts.hasOption("lucene")) {
            services.add(new Lucene(opts.getOptionValue("lucene")));
        }

        if(opts.hasOption("varnish")) {
            services.add(new Varnish("127.0.0.1", 80));
        }

        if(opts.hasOption("updateReporter")) {
            services.add(new UpdateReporter());
        }

        // Pass the change log through a set of service hooks
        Storage storage = new Storage(required[0]);
        for(ServiceBase service:services) {
            try {
                service.process(ChangeLogger.getEntries(), storage);
            } catch (Exception e) {
                logger.error("Fatal Error handling Service "+service.getClass().getName(), e);
            }
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684131/fstmerge_base_6147684955050598581
=======
protected void execute(CommandLine opts)
    {
        String[] required = opts.getArgs();
        if (required.length != 1) {
            System.err.println("Storage is a required argument.");
            printUsage(opts);
            System.exit(1);
        }

        // Parse the specified changes into a hash
        HashMap<String, Storage.Status> changes = null;
        Iterable<String> changeFileLines = null;
        if (opts.hasOption("change-file")) {
            try {
                File changeFile = new File(opts.getOptionValue("change-file"));
                changeFileLines = FileUtils.readLines(changeFile, "UTF-8");
            } catch (IOException e) {
                System.err.println("Error reading change-file: "+opts.getOptionValue("changes"));
                System.exit(1);
            }
            changes = ChangeLogger.parseChanges(changeFileLines);
        } else if (opts.hasOption("changes")) {
            changes = ChangeLogger.parseChanges(Arrays.asList(opts.getOptionValue("changes").split("\n")));
        } else {
            System.err.println("Changes to push must be specified with either --change-file or --changes");
            System.exit(1);
        }

        // Currently there is a Lucene hook and varnish hook, more to come
        ArrayList<ServiceBase> services = new ArrayList<ServiceBase>();
        if(opts.hasOption("lucene")) {
            services.add(new Lucene(opts.getOptionValue("lucene")));
        }

        if(opts.hasOption("varnish")) {
            services.add(new Varnish("127.0.0.1", 80));
        }

        if(opts.hasOption("updateReporter")) {
            UpdateReporter.process(ChangeLogger.parseChangesDetailed(changeFileLines));
        }

        // Pass the change log through a set of service hooks
        Storage storage = new Storage(required[0]);
        for(ServiceBase service:services) {
            try {
                service.process(changes, storage);
            } catch (Exception e) {
                logger.error("Fatal Error handling Service "+service.getClass().getName(), e);
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684131/fstmerge_var2_718994585061344025

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/Push.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684148/fstmerge_var1_1164038897867834376
public void execute(CommandLine opts) throws IOException, ParseException, SQLException
    {
        QueryRunner runner = new QueryRunner(Application.getDB().getDataSource());

        String[] args = opts.getArgs();
        Storage storage = new Storage("/data/openleg/lbdc_test/json");

        HashMap<String, Integer> errors = new HashMap<String, Integer>();
        for (String error_type : new String[] {"title", "summary", "sponsor", "cosponsors", "events", "pages"}) {
            errors.put(error_type, 0);
        }

        String prefix = args[1];
        Date date = dateFormat.parse(prefix);
        logger.info("Processing daybreak files for: "+date);
        File directory = new File(args[0]);
        HashMap<String, SpotCheckBill> bills = new HashMap<String, SpotCheckBill>();
        bills.putAll(readDaybreak(new File(directory, prefix+".senate.low.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".senate.high.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".assembly.low.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".assembly.high.html")));
        loadPageFile(new File(directory, prefix+".page_file.txt"), bills);


        runner.update("insert ignore into report(date) values(?)", date);
        Report report = runner.query("select * from report where date = ?", new BeanHandler<Report>(Report.class), date);
        runner.update("delete from error where reportId = ?", report.getId());

        for(String id : bills.keySet()) {
            String billNo = id+"-2013";
            Bill bill = (Bill)storage.get("2013/bill/"+billNo, Bill.class);

            // Compare the titles, ignore white space differences
            String jsonTitle = unescapeHTML(bill.getTitle());
            String lbdcTitle = bills.get(id).getTitle();
            if (!lbdcTitle.isEmpty() && !stringEquals(jsonTitle, lbdcTitle, true, true)) {
                // What is this D?
                if (!id.startsWith("D")) {
                    logger.error("Title: "+billNo);
                    logger.error("  LBDC: "+lbdcTitle);
                    logger.error("  JSON: "+jsonTitle);
                    runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getId(), billNo, "title", lbdcTitle, jsonTitle);
                    errors.put("title", errors.get("title")+1);
                }
            }

            // Compare the summaries. LBDC reports summary and law changes together
            String jsonLaw = bill.getLaw();
            String jsonSummary = unescapeHTML(bill.getSummary());
            String lbdcSummary = bills.get(id).getSummary().replaceAll("\\s+", " ");


            if( jsonLaw != null && jsonLaw != "" && jsonLaw != "null") {
                jsonSummary = unescapeHTML(jsonLaw)+" "+jsonSummary;
            }

            if (lbdcSummary.equals("BILL SUMMARY NOT FOUND")) {
                lbdcSummary = "";
            }

            jsonSummary = jsonSummary.replace('�', 'S').replace('�', 'P');
            if (!lbdcSummary.isEmpty() && !jsonSummary.replace(" ","").equals(lbdcSummary.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Summary: "+billNo);
                    logger.error("  LBDC: "+lbdcSummary);
                    logger.error("  JSON: "+jsonSummary);
                    runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getId(), billNo, "summary", lbdcSummary, jsonSummary);
                    errors.put("summary", errors.get("summary")+1);
                }
            }

            String jsonSponsor = unescapeHTML(bill.getSponsor().getFullname()).toUpperCase().replace(" (MS)","").replace("BILL", "").replace("COM", "");
            String lbdcSponsor = bills.get(id).getSponsor().toUpperCase().replace("BILL", "").replace("COM", "");
            if (!lbdcSponsor.isEmpty() && !jsonSponsor.replace(" ","").equals(lbdcSponsor.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Sponsor: "+billNo);
                    logger.error("  LBDC: "+lbdcSponsor);
                    logger.error("  JSON: "+jsonSponsor);
                    runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getId(), billNo, "sponsor", lbdcSponsor, jsonSponsor);
                    errors.put("sponsor", errors.get("sponsor")+1);
                }
            }


            TreeSet<String> lbdcCosponsors = new TreeSet<String>(bills.get(id).getCosponsors());
            TreeSet<String> jsonCosponsors = new TreeSet<String>();
            if ( bill.getCoSponsors() != null ) {
                List<Person> cosponsors = bill.getCoSponsors();
                for(Person cosponsor : cosponsors) {
                    jsonCosponsors.add(cosponsor.getFullname().toUpperCase());
                }
            }

            if (!lbdcCosponsors.isEmpty() && (lbdcCosponsors.size() != jsonCosponsors.size() || (!lbdcCosponsors.isEmpty() && !lbdcCosponsors.containsAll(jsonCosponsors))) ) {
                if (!id.startsWith("D")) {
                    logger.error("Cosponsors: "+billNo);
                    logger.error("  LBDC: "+lbdcCosponsors);
                    logger.error("  JSON: "+jsonCosponsors);
                    runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getId(), billNo, "cosponsor", StringUtils.join(lbdcCosponsors, " "), StringUtils.join(jsonCosponsors, " "));
                    errors.put("cosponsors", errors.get("cosponsors")+1);
                }
            }

            ArrayList<String> lbdcEvents = bills.get(id).getActions();
            ArrayList<String> jsonEvents = new ArrayList<String>();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");

            for (Action action : bill.getActions()) {
                jsonEvents.add(dateFormat.format(action.getDate())+" "+action.getText());
            }

            if (!lbdcEvents.isEmpty() &&  (lbdcEvents.size() != jsonEvents.size() || (!lbdcEvents.isEmpty() && !lbdcEvents.containsAll(jsonEvents))) ) {
                if (!id.startsWith("D")) {
                    logger.error("Events: "+billNo);
                    logger.error("  LBDC: "+lbdcEvents);
                    logger.error("  JSON: "+jsonEvents);
                    runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getId(), billNo, "action", StringUtils.join(lbdcEvents,"\n"), StringUtils.join(jsonEvents,"\n"));
                    errors.put("events", errors.get("events")+1);
                }
            }

            int lbdcPages = bills.get(id).pages;
            int jsonPages = 0;
            Pattern pagePattern = Pattern.compile("(^\\s+\\w\\.\\s\\d+(--\\w)?\\s+\\d*(\\s+\\w\\.\\s\\d+(--\\w)?)?$|^\\s+\\d+\\s+\\d+\\-\\d+\\-\\d$|^\\s{11,}\\d{1,4}(--\\w)?$)");
            for (String line : bill.getFulltext().split("\n")) {
                if (pagePattern.matcher(line).find()) {
                    // logger.info(billNo+": "+line);
                    jsonPages++;
                }
            }

            if (jsonPages != lbdcPages) {
                logger.error("Pages: "+billNo);
                logger.error("  LBDC: "+lbdcPages);
                logger.error("  JSON: "+jsonPages);
                // runner.update("insert into error(reportId,billId,errorType,lbdc,json) values(?,?,?,?,?)", report.getReport_id(), billNo, "page", lbdcPages, jsonPages);
                errors.put("pages", errors.get("pages")+1);
            }
        }

        System.out.println(errors);

        System.out.println(bills.keySet().size());
        System.exit(0);

        int total = 0;
        for(SpotCheckBill bill : bills.values()) {
            total += 1+bill.amendments.size();
        }
        System.out.println("Estimated Total: "+total);

        System.out.println(bills.size());

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684148/fstmerge_base_2871929608124255432
=======
public void execute(CommandLine opts) throws IOException, ParseException
    {
        String[] args = opts.getArgs();
        Storage storage = new Storage("/data/openleg/lbdc_test/json");

        HashMap<String, Integer> errors = new HashMap<String, Integer>();
        for (String error_type : new String[] {"title", "summary", "sponsor", "cosponsors", "events", "pages"}) {
            errors.put(error_type, 0);
        }

        String prefix = args[1];
        Date date = new SimpleDateFormat("yyyyMMdd").parse(prefix);
        logger.info("Processing daybreak files for: "+date);
        File directory = new File(args[0]);
        HashMap<String, SpotCheckBill> bills = new HashMap<String, SpotCheckBill>();
        bills.putAll(readDaybreak(new File(directory, prefix+".senate.low.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".senate.high.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".assembly.low.html")));
        bills.putAll(readDaybreak(new File(directory, prefix+".assembly.high.html")));
        loadPageFile(new File(directory, prefix+".page_file.txt"), bills);

        for(String id : bills.keySet()) {
            String billNo = id+"-2013";
            Bill bill = (Bill)storage.get("2013/bill/"+billNo, Bill.class);

            // Compare the titles, ignore white space differences
            String jsonTitle = unescapeHTML(bill.getTitle());
            String lbdcTitle = bills.get(id).title;
            if (!lbdcTitle.isEmpty() && !stringEquals(jsonTitle, lbdcTitle, true, true)) {
                // What is this D?
                if (!id.startsWith("D")) {
                    logger.error("Title: "+billNo);
                    logger.error("  LBDC: "+lbdcTitle);
                    logger.error("  JSON: "+jsonTitle);
                    errors.put("title", errors.get("title")+1);
                }
            }

            // Compare the summaries. LBDC reports summary and law changes together
            String jsonLaw = bill.getLaw();
            String jsonSummary = unescapeHTML(bill.getSummary());
            String lbdcSummary = bills.get(id).summary.replaceAll("\\s+", " ");

            if( jsonLaw != null && jsonLaw != "" && jsonLaw != "null") {
                jsonSummary = unescapeHTML(jsonLaw)+" "+jsonSummary;
            }

            if (lbdcSummary.equals("BILL SUMMARY NOT FOUND")) {
                lbdcSummary = "";
            }


            // Hack around encoding issues
            jsonSummary = jsonSummary.replace("P", "S");
            lbdcSummary = lbdcSummary.replace("P", "S");

            if (!lbdcSummary.isEmpty() && !jsonSummary.replace(" ","").equals(lbdcSummary.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Summary: "+billNo);
                    logger.error("  LBDC: "+lbdcSummary);
                    logger.error("  JSON: "+jsonSummary);
                    errors.put("summary", errors.get("summary")+1);
                }
            }

            String jsonSponsor = unescapeHTML(bill.getSponsor().getFullname()).toUpperCase().replace(" (MS)","").replace("BILL", "").replace("COM", "");
            String lbdcSponsor = bills.get(id).sponsor.toUpperCase().replace("BILL", "").replace("COM", "");
            if (!lbdcSponsor.isEmpty() && !jsonSponsor.replace(" ","").equals(lbdcSponsor.replace(" ", "")) ) {
                if (!id.startsWith("D")) {
                    logger.error("Sponsor: "+billNo);
                    logger.error("  LBDC: "+lbdcSponsor);
                    logger.error("  JSON: "+jsonSponsor);
                    errors.put("sponsor", errors.get("sponsor")+1);
                }
            }


            TreeSet<String> lbdcCosponsors = new TreeSet<String>(bills.get(id).cosponsors);
            TreeSet<String> jsonCosponsors = new TreeSet<String>();
            if ( bill.getCoSponsors() != null ) {
                List<Person> cosponsors = bill.getCoSponsors();
                for(Person cosponsor : cosponsors) {
                    jsonCosponsors.add(cosponsor.getFullname().toUpperCase());
                }
            }

            if (!lbdcCosponsors.isEmpty() && (lbdcCosponsors.size() != jsonCosponsors.size() || (!lbdcCosponsors.isEmpty() && !lbdcCosponsors.containsAll(jsonCosponsors))) ) {
                if (!id.startsWith("D")) {
                    logger.error("Cosponsors: "+billNo);
                    logger.error("  LBDC: "+lbdcCosponsors);
                    logger.error("  JSON: "+jsonCosponsors);
                    errors.put("cosponsors", errors.get("cosponsors")+1);
                }
            }

            ArrayList<String> lbdcEvents = bills.get(id).actions;
            ArrayList<String> jsonEvents = new ArrayList<String>();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yy");

            for (Action action : bill.getActions()) {
                jsonEvents.add(dateFormat.format(action.getDate())+" "+action.getText());
            }

            if (!lbdcEvents.isEmpty() &&  (lbdcEvents.size() != jsonEvents.size() || (!lbdcEvents.isEmpty() && !lbdcEvents.containsAll(jsonEvents))) ) {
                if (!id.startsWith("D")) {
                    logger.error("Events: "+billNo);
                    logger.error("  LBDC: "+lbdcEvents);
                    logger.error("  JSON: "+jsonEvents);
                    errors.put("events", errors.get("events")+1);
                }
            }

            int lbdcPages = bills.get(id).pages;
            int jsonPages = 0;
            Pattern pagePattern = Pattern.compile("(^\\s+\\w\\.\\s\\d+(--\\w)?\\s+\\d*(\\s+\\w\\.\\s\\d+(--\\w)?)?$|^\\s+\\d+\\s+\\d+\\-\\d+\\-\\d$|^\\s{11,}\\d{1,4}(--\\w)?$)");
            for (String line : bill.getFulltext().split("\n")) {
                if (pagePattern.matcher(line).find()) {
                    // logger.info(billNo+": "+line);
                    jsonPages++;
                }
            }

            if (jsonPages != lbdcPages) {
                logger.error("Pages: "+billNo);
                logger.error("  LBDC: "+lbdcPages);
                logger.error("  JSON: "+jsonPages);
                errors.put("pages", errors.get("pages")+1);
            }
        }

        System.out.println(errors);

        System.out.println(bills.keySet().size());
        System.exit(0);

        int total = 0;
        for(SpotCheckBill bill : bills.values()) {
            total += 1+bill.amendments.size();
        }
        System.out.println("Estimated Total: "+total);

        System.out.println(bills.size());
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684148/fstmerge_var2_1505942359864451954

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684161/fstmerge_var1_4604887060230386881
public void loadPageFile(File dataFile, HashMap<String, SpotCheckBill> bills) throws IOException {
        List<String> entries = FileUtils.readLines(dataFile, "latin1");
        entries.remove(0); // Remove the header line
        System.out.println(entries.size());
        for(String entry : entries) {
            String[] parts = entry.split(",");
            String sen_id = (parts[1]+parts[2].replaceAll("^0*", "")+parts[3]).trim();
            String asm_id = (parts[4]+parts[5].replaceAll("^0*", "")+parts[6]).trim();
            int pages = Integer.parseInt(parts[8]);

            if(!sen_id.isEmpty()) {
                if (bills.containsKey(sen_id)) {
                    bills.get(sen_id).pages = pages;
                }
                else {
                    // logger.error("Unknown bill '"+sen_id+"'");
                    SpotCheckBill bill = new SpotCheckBill();
                    bill.id = sen_id;
                    bill.pages = pages;
                    bills.put(sen_id, bill);
                }
            }

            if(!asm_id.isEmpty()) {
                if (bills.containsKey(asm_id)) {
                    bills.get(asm_id).pages = pages;
                }
                else {
                    //logger.error("Unknown bill '"+asm_id+"'");
                    SpotCheckBill bill = new SpotCheckBill();
                    bill.id = asm_id;
                    bill.pages = pages;
                    bills.put(asm_id, bill);
                }
            }

            if (!sen_id.isEmpty() && !asm_id.isEmpty()) {
                bills.get(sen_id).sameas = asm_id;
                bills.get(asm_id).sameas = sen_id;
            }
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684161/fstmerge_base_8261385005973461407
=======
public void loadPageFile(File dataFile, HashMap<String, SpotCheckBill> bills) throws IOException {
        List<String> entries = FileUtils.readLines(dataFile, "latin1");
        entries.remove(0); // Remove the header line
        System.out.println(entries.size());
        for(String entry : entries) {
            String[] parts = entry.split(",");
            String sen_id = (parts[1]+parts[2].replaceAll("^0*", "")+parts[3]).trim();
            String asm_id = (parts[4]+parts[5].replaceAll("^0*", "")+parts[6]).trim();
            int pages = Integer.parseInt(parts[8]);

            if(!sen_id.isEmpty()) {
                if (bills.containsKey(sen_id)) {
                    bills.get(sen_id).pages = pages;
                }
                else {
                    logger.error("Unknown bill '"+sen_id+"'");
                    SpotCheckBill bill = new SpotCheckBill();
                    bill.id = sen_id;
                    bill.pages = pages;
                    bills.put(sen_id, bill);
                }
            }

            if(!asm_id.isEmpty()) {
                if (bills.containsKey(asm_id)) {
                    bills.get(asm_id).pages = pages;
                }
                else {
                    //logger.error("Unknown bill '"+asm_id+"'");
                    SpotCheckBill bill = new SpotCheckBill();
                    bill.id = asm_id;
                    bill.pages = pages;
                    bills.put(asm_id, bill);
                }
            }

            if (!sen_id.isEmpty() && !asm_id.isEmpty()) {
                bills.get(sen_id).sameas = asm_id;
                bills.get(asm_id).sameas = sen_id;
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684161/fstmerge_var2_4646661836189704625

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/SpotCheck.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684173/fstmerge_var1_3453284630303696127
public void run(String[] args) throws Exception
    {

        try {
            Options options = getOptions();
            options.addOption("e","environment",true,"Path to a configuration file for this environment");
            options.addOption("h", "help", false, "Print this message");
            CommandLine opts = new PosixParser().parse(options, args);
            if(opts.hasOption("-h")) {
                printUsage(options);
                System.exit(0);
            } else {
                if (opts.hasOption("environment")) {
                    File propertiesFile = new File(opts.getOptionValue("environment"));
                    if (!propertiesFile.canRead()) {
                        System.err.println("Cannot read: "+propertiesFile);
                        System.exit(1);
                    }
                    else {
                        Application.bootstrap(propertiesFile.getAbsolutePath());
                    }
                }
                else {
                    Application.bootstrap("app.properties");
                }

                execute(opts);
            }
        }
        catch (ParseException e) {
            logger.fatal("Error parsing arguments: ", e);
            System.exit(1);
        }
        catch (Exception e) {
            logger.error("Unexpected Exception.",e);
            throw e;
        }
        finally {
            Application.shutdown();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684173/fstmerge_base_8872086619157695007
=======
public void run(String[] args) throws Exception
    {

        try {
            Application.bootstrap();
            Options options = getOptions();
            options.addOption("h", "help", false, "Print this message");
            CommandLine opts = new PosixParser().parse(options, args);
            if(opts.hasOption("-h")) {
                printUsage(options);
                System.exit(0);
            } else {
                execute(opts);
                System.exit(0);
            }
            Application.shutdown();
        }
        catch (ParseException e) {
            logger.fatal("Error parsing arguments: ", e);
            System.exit(1);
        }
        catch (Exception e) {
            logger.error("Unexpected Exception.",e);
            throw e;
        }

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684173/fstmerge_var2_6883503126672041360

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/BaseScript.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684262/fstmerge_var1_4965472449533724376
protected void execute(CommandLine opts) throws Exception
    {
        String[] required = opts.getArgs();
        if (required.length != 2) {
            System.err.println("Both source and storage directories are required.");
            printUsage(opts);
            System.exit(1);
        }

        Timer timer = new Timer();
        Storage storage = new Storage(required[1]);
        Collection<File> files = FileUtils.listFiles(new File(required[0]), null, true);
        Collections.sort((List<File>)files, new FileNameComparator());

        BillProcessor billProcessor = new BillProcessor();
        CalendarProcessor calendarProcessor = new CalendarProcessor();
        AgendaProcessor agendaProcessor = new AgendaProcessor();
        TranscriptProcessor transcriptProcessor = new TranscriptProcessor();

        // Process each file individually, flushing changes to storage as necessary
        // Each file processor should produce a change log indicating what happened
        timer.start();
        for(File file : files) {
            try {
                logger.debug("Ingesting: "+file);
                String type = file.getParentFile().getName();
                if (type.equals("bills")) {
                    billProcessor.process(file, storage);
                } else if (type.equals("calendars")) {
                    calendarProcessor.process(file, storage);
                } else if (type.equals("agendas")) {
                    agendaProcessor.process(file, storage);
                } else if (type.equals("annotations")) {
                    continue;
                } else if (type.equals("transcripts")) {
                    transcriptProcessor.process(file, storage);
                }

                // To avoid memory issues, occasionally flush changes to file-system and truncate memory
                if (storage.memory.size() > 4000) {
                    storage.flush();
                    storage.clearCache();
                }

            } catch (IOException e) {
                logger.error("Issue with "+file.getName(), e);
            } catch (UnmarshalException e) {
                logger.error("Issue with "+file.getName(), e);
            }
        }
        storage.flush();
        logger.info(timer.stop()+" seconds to injest "+files.size()+" files.");

        // Dump out the change log
        Date date;
        StringBuffer out = new StringBuffer();
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        for (Entry<String, Change> entry : ChangeLogger.getEntries()) {
            date = entry.getValue().getDate();
            out.append(entry.getKey()+"\t"+entry.getValue().getStatus()+"\t"+sdf.format(date).toString()+"\n");
        }

        if (opts.hasOption("change-file")) {
            try {
                FileUtils.write(new File(opts.getOptionValue("change-file")), out);
            } catch (IOException e) {
                logger.error("Could not open changeLog for writing", e);
            }
        } else {
            System.out.print(out);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684262/fstmerge_base_8555344241700608007
=======
protected void execute(CommandLine opts) throws Exception
    {
        String[] required = opts.getArgs();
        if (required.length != 2) {
            System.err.println("Both source and storage directories are required.");
            printUsage(opts);
            System.exit(1);
        }

        Timer timer = new Timer();
        Storage storage = new Storage(required[1]);
        Collection<File> files = FileUtils.listFiles(new File(required[0]), null, true);
        Collections.sort((List<File>)files, new FileNameComparator());

        BillProcessor billProcessor = new BillProcessor();
        CalendarProcessor calendarProcessor = new CalendarProcessor();
        AgendaProcessor agendaProcessor = new AgendaProcessor();
        TranscriptProcessor transcriptProcessor = new TranscriptProcessor();

        // Process each file individually, flushing changes to storage as necessary
        // Each file processor should produce a change log indicating what happened
        timer.start();
        for(File file : files) {
            try {
                logger.debug("Ingesting: "+file);
                String type = file.getParentFile().getName();
                if (type.equals("bills")) {
                    billProcessor.process(file, storage);
                } else if (type.equals("calendars")) {
                    calendarProcessor.process(file, storage);
                } else if (type.equals("agendas")) {
                    agendaProcessor.process(file, storage);
                } else if (type.equals("annotations")) {
                    continue;
                } else if (type.equals("transcripts")) {
                    transcriptProcessor.process(file, storage);
                }

                // To avoid memory issues, occasionally flush changes to file-system and truncate memory
                if (storage.memory.size() > 4000) {
                    storage.flush();
                    storage.clearCache();
                }

            } catch (IOException e) {
                logger.error("Issue with "+file.getName(), e);
            } catch (UnmarshalException e) {
                logger.error("Issue with "+file.getName(), e);
            }
        }
        storage.flush();
        logger.info(timer.stop()+" seconds to injest "+files.size()+" files.");

        // Dump out the change log
        StringBuffer out = new StringBuffer();
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date;
        for (Entry<String, Change> entry : ChangeLogger.getChangeLog().entrySet()) {
            date = entry.getValue().getDate();
            if (date != null) {
                out.append(entry.getKey()+"\t"+entry.getValue().getStatus()+"\t"+sdf.format(date).toString()+"\n");
            } else {
                // TODO temporary solution.
                // If no date information available, set date to current time.
                out.append(entry.getKey()+"\t"+entry.getValue().getStatus()+"\t"+sdf.format(new Date()).toString() +"\n");
            }
        }

        if (opts.hasOption("change-file")) {
            try {
                FileUtils.write(new File(opts.getOptionValue("change-file")), out);
            } catch (IOException e) {
                logger.error("Could not open changeLog for writing", e);
            }
        } else {
            System.out.print(out);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420749684262/fstmerge_var2_7716494199104690170

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_45e30_da053/rev_45e30-da053/src/main/java/gov/nysenate/openleg/scripts/Ingest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_377f6_5b01e/rev_377f6-5b01e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_1a7f3_bad5e/rev_1a7f3-bad5e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ac377_8b524/rev_ac377-8b524.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4e667_91c04/rev_4e667-91c04.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_e3ee5_58ab2/rev_e3ee5-58ab2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5d666_053d7/rev_5d666-053d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_e8a5d_9dae6/rev_e8a5d-9dae6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_28632_a1e3d/rev_28632-a1e3d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_a2523_54c15/rev_a2523-54c15.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_d0c64_62f7a/rev_d0c64-62f7a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7a76f_76cf4/rev_7a76f-76cf4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_27d6e_0557e/rev_27d6e-0557e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_59ce7_afd6d/rev_59ce7-afd6d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_6d3c1_87886/rev_6d3c1-87886.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420750109257/fstmerge_var1_5300265397792951578
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420750109257/fstmerge_base_4313988509043959276
public void addVote(Vote vote) {
        if (!votes.contains(vote)) {
            votes.add(vote);
        }
    }
=======
public void addVote(Vote vote) {
        votes.remove(vote);
        votes.add(vote);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420750109257/fstmerge_var2_1373121077578614097

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_6d3c1_87886/rev_6d3c1-87886/src/main/java/gov/nysenate/openleg/model/Bill.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_d42fa_68050/rev_d42fa-68050.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_d9b5c_e94e8/rev_d9b5c-e94e8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_c29e5_d28c0/rev_c29e5-d28c0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4362f_54df1/rev_4362f-54df1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_6fd72_3a1b5/rev_6fd72-3a1b5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_224ef_cea0d/rev_224ef-cea0d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_3f524_e42b7/rev_3f524-e42b7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_9d021_b58a6/rev_9d021-b58a6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_3e071_475fe/rev_3e071-475fe.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ef902_53f1f/rev_ef902-53f1f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ab37e_36f6d/rev_ab37e-36f6d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_67465_b419a/rev_67465-b419a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_444fd_67d84/rev_444fd-67d84.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_dad87_16949/rev_dad87-16949.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_bd5bf_9feae/rev_bd5bf-9feae.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_62ede_39eff/rev_62ede-39eff.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_cfe73_0b465/rev_cfe73-0b465.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5e242_e03cf/rev_5e242-e03cf.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_46ab1_45f3c/rev_46ab1-45f3c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_caba8_d409b/rev_caba8-d409b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ad57b_ba4a2/rev_ad57b-ba4a2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_54dd0_73040/rev_54dd0-73040.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ba39d_da055/rev_ba39d-da055.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_c4eb2_20a9b/rev_c4eb2-20a9b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_a81cf_3bb45/rev_a81cf-3bb45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_17df3_fcb95/rev_17df3-fcb95.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_f0f6f_b41db/rev_f0f6f-b41db.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_c6b28_d5ea5/rev_c6b28-d5ea5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_4cfa7_45c7b/rev_4cfa7-45c7b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_dce98_95fd2/rev_dce98-95fd2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ad9c5_deef8/rev_ad9c5-deef8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_2a556_827e9/rev_2a556-827e9.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_b92af_7cee1/rev_b92af-7cee1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ac3b4_c8dda/rev_ac3b4-c8dda.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_6cb20_dfe5c/rev_6cb20-dfe5c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_866e9_dfe5c/rev_866e9-dfe5c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_77e76_efa78/rev_77e76-efa78.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_866e9_5b7f4/rev_866e9-5b7f4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_2d70d_174f2/rev_2d70d-174f2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_c6d9d_d64d2/rev_c6d9d-d64d2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_15dab_8925e/rev_15dab-8925e.revisions
Conflict type: LineBasedMCFd
Conflict body: 
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
	    String jspPath;
	    String reportIdParam = request.getParameter("id");
	    if (reportIdParam == null) {
	        List<Report> reportList;
	        try {
	            reportList = ReportDAO.getReports();
	        }
	        catch (SQLException e) {
	            logger.error(e);
	            reportList =  new ArrayList<Report>();
	        }
            request.setAttribute("reportList",reportList);
            jspPath = "/admin/reports.jsp";
	    }
	    else {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var1_1633096664387479237
            int reportId = Integer.parseInt(reportIdParam);
            List<Report> reportList;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_base_2278833620681390272
=======
            List<Report> reportList = null;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var2_5143001931171958809
            Report report = null;
            try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var1_1633096664387479237
                reportList = ReportDAO.getReports();
                for (Report rep : reportList) {
                    if (rep.getId() == reportId)
                        report = rep;
                }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_base_2278833620681390272
                report = ReportDAO.getReport(Integer.parseInt(reportIdParam));
=======
                reportList = ReportDAO.getReports();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var2_5143001931171958809
            }
            catch (SQLException e) {
                logger.error("Error querying reports", e);
            }
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var1_1633096664387479237

||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_base_2278833620681390272
=======

            for (Report rep : reportList) {
                if (rep.getId() == Integer.parseInt(reportIdParam))
                    report = rep;
            }

>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751420164/fstmerge_var2_5143001931171958809
            request.setAttribute("report",report);
            jspPath = "/admin/reports-view.jsp";
	    }

        getServletContext().getRequestDispatcher(jspPath).forward(request, response);
	}

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_15dab_8925e/rev_15dab-8925e/src/main/java/gov/nysenate/openleg/api/servlets/admin/ReportsServlet.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_23f83_d684e/rev_23f83-d684e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea.revisions
Conflict type: LineBasedMCFd
Conflict body: 
public boolean isTranscriptNumber() {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751485730/fstmerge_var1_8782616225948559638
        String trim = line.replaceAll(invalidCharactersRegex,"").trim();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751485730/fstmerge_base_8176617732229286082
        String trim = line.trim();
=======
        String trim = line.replaceAll("[^a-zA-Z0-9]+","").trim();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751485730/fstmerge_var2_6873491317125994374
        if (!isNumber(trim)) {
            return false;
        }
        int startIndex = line.indexOf(trim);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751485730/fstmerge_base_8176617732229286082
        if (startIndex > PAGE_NUM_INDEX || Integer.valueOf(trim) > MAX_PAGE_NUM) {
=======
        if (startIndex > PAGE_NUM_INDEX || Integer.valueOf(trim) > PAGE_NUM_MAX) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751485730/fstmerge_var2_6873491317125994374
            return true;
        }
        return false;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/util/TranscriptLine.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487066/fstmerge_var1_3063165223726568145
private static void drawPageText(TranscriptPage page, PDPageContentStream contentStream) throws IOException {
        if (page.getTranscriptNumber() == null) {
            contentStream.moveTextPositionByAmount(0, top - fontWidth);
        } else {
            float offset = right - (page.getTranscriptNumber().length() + 1) * fontWidth;
            drawTranscriptNumber(page.getTranscriptNumber(), offset, contentStream);
        }

        for (TranscriptLine line : page.getLines()) {
            int indent;
            String text;
            if (line.hasLineNumber()) {
                indent = lineNumberLength(line) + 1;
                text = line.fullText().trim();
            }
            else {
                indent = NO_LINE_NUM_INDENT;
                text = line.fullText();
            }

            float offset = left - indent * fontWidth;
            drawLine(text, offset, contentStream);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487066/fstmerge_base_7972632935662135532
=======
private static void drawPageText(TranscriptPage page, PDPageContentStream contentStream) throws IOException {
        if (page.getTranscriptNumber() == null) {
            contentStream.moveTextPositionByAmount(0, top - fontWidth);
        } else {
            float offset = right - (page.getTranscriptNumber().removeLineNumber().trim().length() + 1) * fontWidth;
            drawTranscriptNumber(page.getTranscriptNumber().fullText().trim(), offset, contentStream);
        }

        for (TranscriptLine line : page.getLines()) {
            int indent;
            String text;
            if (line.hasLineNumber()) {
                indent = lineNumberLength(line) + 1;
                text = line.fullText().trim();
            }
            else {
                indent = NO_LINE_NUM_INDENT;
                text = line.fullText();
            }

            float offset = left - indent * fontWidth;
            drawLine(text, offset, contentStream);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487066/fstmerge_var2_3187651208371794200

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/PDFConverter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487094/fstmerge_var1_7935793580516159918
private TranscriptPage parseWithManualSpacing(List<String> pageLines) {
        TranscriptPage page = new TranscriptPage();
        int lineCount = 0;
        for (int i = 0; i < pageLines.size(); i++) {
            TranscriptLine line = new TranscriptLine(pageLines.get(i));

            if (line.isTranscriptNumber()) {
                page.setTranscriptNumber(line.removeInvalidCharacters());
                lineCount++;
            }
            else if (!line.isEmpty() && !line.isStenographer()) {
                page.addLine(line);
                lineCount++;

                if (line.fullText().trim().equals("NEW YORK STATE SENATE")) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.fullText().trim().contains("STENOGRAPHIC RECORD")) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.isTime()) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.isSession()) {
                    addBlankLines(page, 3);
                    lineCount += 3;
                }
            }
        }

        page.setLineCount(lineCount);
        return page;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487094/fstmerge_base_1367876166469650310
=======
private TranscriptPage parseWithManualSpacing(List<String> pageLines) {
        TranscriptPage page = new TranscriptPage();
        int lineCount = 0;
        for (int i = 0; i < pageLines.size(); i++) {
            TranscriptLine line = new TranscriptLine(pageLines.get(i));

            if (line.isTranscriptNumber()) {
                page.setTranscriptNumber(line);
                lineCount++;
            }
            else if (!line.isEmpty() && !line.isStenographer()) {
                page.addLine(line);
                lineCount++;

                if (line.removeLineNumber().trim().equals("NEW YORK STATE SENATE")) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.removeLineNumber().trim().contains("STENOGRAPHIC RECORD")) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.isTime()) {
                    addBlankLines(page, 2);
                    lineCount += 2;
                }

                else if (line.isSession()) {
                    addBlankLines(page, 3);
                    lineCount += 3;
                }
            }
        }

        page.setLineCount(lineCount);
        return page;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487094/fstmerge_var2_7685060259452479828

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/TranscriptPageParser.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487098/fstmerge_var1_5893227439972668123
private TranscriptPage parseWithOriginalSpacing(List<String> pageLines) {
        TranscriptPage page = new TranscriptPage();
        int lineCount = 0;

        for (String pageLine : pageLines) {
            TranscriptLine line = new TranscriptLine(pageLine);

            if (line.isTranscriptNumber()) {
                page.setTranscriptNumber(line.removeInvalidCharacters());
                lineCount++;
            }
            else if (!line.isEmpty() && !line.isStenographer()) {
                page.addLine(line);
                lineCount++;
            }
        }

        page.setLineCount(lineCount);
        return page;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487098/fstmerge_base_270213432827154268
=======
private TranscriptPage parseWithOriginalSpacing(List<String> pageLines) {
        TranscriptPage page = new TranscriptPage();
        int lineCount = 0;

        for (String pageLine : pageLines) {
            TranscriptLine line = new TranscriptLine(pageLine);

            if (line.isTranscriptNumber()) {
                page.setTranscriptNumber(line);
                lineCount++;
            }
            else if (!line.isEmpty() && !line.isStenographer()) {
                page.addLine(line);
                lineCount++;
            }
        }

        page.setLineCount(lineCount);
        return page;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487098/fstmerge_var2_2107628800372144639

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/TranscriptPageParser.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487102/fstmerge_var1_7597458040468538610
private void fixErrorsOnFirstPage(List<List<String>> pages) {
        List<String> correctedFirstPage = new ArrayList<String>();
        List<String> firstPage = pages.get(0);

        for (int i = 0; i < firstPage.size(); i++) {
            TranscriptLine line = new TranscriptLine(firstPage.get(i));

            if (!line.isEmpty()) {
                if (line.fullText().endsWith(",") || line.fullText().endsWith(", Acting")) {
                    // Combine two lines into one; corrects formatting. i.e. 123096.v1
                    TranscriptLine nextLine = getNextLine(firstPage, i);
                    if (nextLine.fullText().trim().equals("President") || nextLine.fullText().trim().equals("Acting President")) {
                        line = new TranscriptLine(line.fullText() + " " + nextLine.fullText().trim());
                        // Skip next line since we combined it with the previous line.
                        i++;
                    }
                }

                correctedFirstPage.add(line.fullText());
            }
        }

        pages.set(pages.indexOf(firstPage), correctedFirstPage);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487102/fstmerge_base_998711512455500399
=======
private void fixErrorsOnFirstPage(List<List<String>> pages) {
        List<String> correctedFirstPage = new ArrayList<String>();
        List<String> firstPage = pages.get(0);

        boolean firstLineWithContent = true;
        for (int i = 0; i < firstPage.size(); i++) {
            TranscriptLine line = new TranscriptLine(firstPage.get(i));

            if (!line.isEmpty()) {
                // Remove the first 3 lines if invalid. i.e. 052600.V1
                if (firstLineWithContent && firstPage.get(i).contains("SESSION")) {
                    i += 3;
                }
                else if (line.fullText().endsWith(",") || line.fullText().endsWith(", Acting")) {
                    // Combine two lines into one; corrects formatting. i.e. 123096.v1
                    TranscriptLine nextLine = getNextLine(firstPage, i);
                    if (nextLine.fullText().trim().equals("President") || nextLine.fullText().trim().equals("Acting President")) {
                        line = new TranscriptLine(line.fullText() + " " + nextLine.fullText());
                        // Skip next line since we combined it with the previous line.
                        i++;
                    }

                    correctedFirstPage.add(line.fullText());
                }
                else {
                    correctedFirstPage.add(line.fullText());
                }

                firstLineWithContent = false;
            }
        }

        pages.set(pages.indexOf(firstPage), correctedFirstPage);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487102/fstmerge_var2_4864253806274916046

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/TranscriptPageParser.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ private String transcriptNumber; ##FSTMerge## ##FSTMerge## private TranscriptLine transcriptNumber;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/TranscriptPage.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487133/fstmerge_var1_168720806633456667
public String getTranscriptNumber() {
        return transcriptNumber;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487133/fstmerge_base_4090116329038873531
=======
public TranscriptLine getTranscriptNumber() {
        return transcriptNumber;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751487133/fstmerge_var2_6845240268774611336

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/main/java/gov/nysenate/openleg/converter/pdf/TranscriptPage.java
Conflict type: LineBasedMCFd
Conflict body: 
@Test
    public void timeTypoNotInterpretedAsLineNumber() {
        TranscriptLine line = new TranscriptLine("           10 00 a.m.");
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751489033/fstmerge_var1_6860857135107549772
        assertEquals("1000am", line.getTimeString());
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751489033/fstmerge_base_1832778456062085592
        assertEquals("10 00 a.m.", line.textTrimmed());
=======
        assertEquals("10 00 a.m.", line.removeLineNumber().trim());
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751489033/fstmerge_var2_3164699828127495632
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_7aabd_b33ea/rev_7aabd-b33ea/src/test/java/gov/nysenate/openleg/util/TranscriptLineTest.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_03cc6_84109/rev_03cc6-84109.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_14087_cbb67/rev_14087-cbb67.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_3b6f7_39398/rev_3b6f7-39398.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_3b6f7_88947/rev_3b6f7-88947.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ee1ae_08121/rev_ee1ae-08121.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_9a860_6a91f/rev_9a860-6a91f.revisions
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ public Pattern spotcheckBillId = Pattern.compile("([A-Z])(\\d+)([A-Z]?)"); ##FSTMerge## ##FSTMerge## public Pattern spotcheckBillId = Pattern.compile("([A-Z]\\d+)([A-Z])");
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_9a860_6a91f/rev_9a860-6a91f/src/main/java/gov/nysenate/openleg/scripts/admin/SpotCheck.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692041/fstmerge_var1_3077087018860869534
private void addAmendments(SpotCheckBill bill, String[] parts) {
        bill.id = parts[0].trim();
        Matcher idMatcher = spotcheckBillId.matcher(bill.id);

        if(anAmendmentExists(idMatcher)) {
            String billNo = idMatcher.group(2).trim();
            String billId = idMatcher.group(1).trim() + billNo;
            char amendment = idMatcher.group(3).charAt(0);
            for (int i = amendment-1; i >= 'A'; i--) {
                bill.amendments.add(billId + String.valueOf((char)i) + "-" + SESSION_YEAR);
            }
            // Also add the base bill
            bill.amendments.add(billId + "-" + SESSION_YEAR);
        }

        // Add bill itself as an amendment.
        bill.amendments.add(bill.id + "-" + SESSION_YEAR);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692041/fstmerge_base_6059670670891159250
=======
private void addAmendments(SpotCheckBill bill, String[] parts) {
        bill.id = parts[0].trim();
        Matcher idMatcher = spotcheckBillId.matcher(bill.id);

        if(anAmendmentExists(idMatcher)) {
            String billId = idMatcher.group(1);
            char amendment = idMatcher.group(2).charAt(0);
            for (int i = amendment-1; i >= 'A'; i--) {
                bill.amendments.add(billId + String.valueOf((char)i) + "-" + SESSION_YEAR);
            }
            // Also add the base bill
            bill.amendments.add(billId + "-" + SESSION_YEAR);
        }

        // Add bill itself as an amendment.
        bill.amendments.add(bill.id + "-" + SESSION_YEAR);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692041/fstmerge_var2_574739812547311665

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_9a860_6a91f/rev_9a860-6a91f/src/main/java/gov/nysenate/openleg/scripts/admin/SpotCheck.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692046/fstmerge_var1_7332834075933948380
private boolean anAmendmentExists(Matcher idMatcher) {
        return idMatcher.find() && !idMatcher.group(3).isEmpty();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692046/fstmerge_base_882219099769764178
=======
private boolean anAmendmentExists(Matcher idMatcher) {
        return idMatcher.find();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420751692046/fstmerge_var2_5112807683146490828

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_9a860_6a91f/rev_9a860-6a91f/src/main/java/gov/nysenate/openleg/scripts/admin/SpotCheck.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5393d_eecb3/rev_5393d-eecb3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5393d_f4031/rev_5393d-f4031.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5e6c8_8de67/rev_5e6c8-8de67.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ce2b0_ecdfa/rev_ce2b0-ecdfa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ce2b0_fffb0/rev_ce2b0-fffb0.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_60e4f_b1e5a/rev_60e4f-b1e5a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_8578c_90adb/rev_8578c-90adb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_d8ec8_5bac5/rev_d8ec8-5bac5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_ce2dd_9674e/rev_ce2dd-9674e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenLegislation/revisions/rev_5802c_3d953/rev_5802c-3d953.revisions

=========================================================