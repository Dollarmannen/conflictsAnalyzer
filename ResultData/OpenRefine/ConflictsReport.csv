=========================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1.revisions
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982486/fstmerge_var1_4103784497006265943
private boolean registerCommands(String[][] commands) {
        boolean status = true;
        for (String[] command : commandNames) {
            String commandName = command[0];
            String className = command[1];
            logger.debug("Loading command " + commandName + " class: " + className);
            Command cmd;
            try {
                cmd = (Command) this.getClass().getClassLoader().loadClass(className).newInstance();
                cmd.init(this);
            } catch (InstantiationException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            } catch (IllegalAccessException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            } catch (ClassNotFoundException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            }
            status |= registerCommand(commandName, cmd);
        }
        return status;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982486/fstmerge_base_1886967102213956737
=======
private boolean registerCommands(String[][] commands) {
        boolean status = true;
        for (String[] command : commandNames) {
            String commandName = command[0];
            String className = command[1];
            logger.debug("Loading command " + commandName + " class: " + className);
            Command cmd;
            try {
                cmd = (Command) this.getClass().getClassLoader().loadClass(className).newInstance();
            } catch (InstantiationException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            } catch (IllegalAccessException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            } catch (ClassNotFoundException e) {
                logger.error("Failed to load command class " + className, e);
                status = false;
                continue;
            }
            status |= registerCommand(commandName, cmd);
        }
        return status;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982486/fstmerge_var2_111714603895406142

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/GridworksServlet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982663/fstmerge_var1_5942332298296282560
@Override
        public void start(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982663/fstmerge_base_3860292411209263782
=======
public void start(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982663/fstmerge_var2_8080168262703823830

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/commands/row/GetRowsCommand.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982668/fstmerge_var1_7219858756451997860
@Override
        public void end(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982668/fstmerge_base_4518493393147975405
=======
public void end(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982668/fstmerge_var2_7095139152525258854

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/commands/row/GetRowsCommand.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982677/fstmerge_var1_2316741964986671077
@Override
        public boolean visit(Project project, Record record) {
            if (total >= start && total < start + limit) {
                internalVisit(project, record);
            }
        	total++;
        	
            return false;
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982677/fstmerge_base_3283185799487736320
=======
public boolean visit(Project project, Record record) {
            if (total >= start && total < start + limit) {
                internalVisit(project, record);
            }
        	total++;
        	
            return false;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730982677/fstmerge_var2_4307740389861650206

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/commands/row/GetRowsCommand.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983097/fstmerge_var1_9141726049471245010
public CsvExporter(){
        separator = ','; //Comma separated-value is default
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983097/fstmerge_base_6735161963137688912
=======
public CsvExporter() {
        separator = ','; //Comma separated-value is default
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983097/fstmerge_var2_1197854051022392599

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983101/fstmerge_var1_9108992771338480729
public CsvExporter(char separator){
        this.separator = separator;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983101/fstmerge_base_1006388917406104273
=======
public CsvExporter(char separator) {
        this.separator = separator;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983101/fstmerge_var2_8276558053172316327

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983106/fstmerge_var1_2601744612619150678
@Override
    public void export(Project project, Properties options, Engine engine, OutputStream outputStream)
            throws IOException {
        throw new RuntimeException("Not implemented");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983106/fstmerge_base_2670242923079345831
=======
public void export(Project project, Properties options, Engine engine, OutputStream outputStream) throws IOException {
        throw new RuntimeException("Not implemented");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983106/fstmerge_var2_1465627826041483441

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983110/fstmerge_var1_2206346831795481199
@Override
    public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
        boolean printColumnHeader = true;

        if (options != null) {
            printColumnHeader = Boolean.parseBoolean(options.getProperty("printColumnHeader"));
        }

        RowVisitor visitor = new RowVisitor() {
            CSVWriter csvWriter;
            boolean printColumnHeader = true;
            boolean isFirstRow = true; //the first row should also add the column headers

            public RowVisitor init(CSVWriter writer, boolean printColumnHeader){
                this.csvWriter = writer;
                this.printColumnHeader = printColumnHeader;
                return this;
            }

            public boolean visit(Project project, int rowIndex, Row row) {
                String[] cols = new String[project.columnModel.columns.size()];
                String[] vals = new String[row.cells.size()];

                int i = 0;
                for(Column col : project.columnModel.columns){
                    int cellIndex = col.getCellIndex();
                    cols[i] = col.getName();

                    Cell cell = row.cells.get(cellIndex);
                    if(cell != null){
                        vals[i] = cell.value.toString();
                    }
                    i++;
                }

                if( printColumnHeader && isFirstRow ){
                    csvWriter.writeNext(cols,false);
                    isFirstRow = false; //switch off flag
                }
                csvWriter.writeNext(vals,false);

                return false;
            }

            @Override
            public void start(Project project) {
                // nothing to do
            }

            @Override
            public void end(Project project) {
                try {
                    csvWriter.close();
                } catch (IOException e) {
                    logger.error("CsvExporter could not close writer : " + e.getMessage());
                }
            }

        }.init(new CSVWriter(writer, separator), printColumnHeader);

        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, visitor);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983110/fstmerge_base_3353884406642313228
=======
public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {

        boolean printColumnHeader = true;

        if (options != null) {
            String printColHead = options.getProperty("printColumnHeader");
            if(printColHead != null)
                printColumnHeader = !printColHead.toLowerCase().equals("false");
        }

        RowVisitor visitor = new RowVisitor() {
            CSVWriter csvWriter;
            boolean printColumnHeader = true;
            boolean isFirstRow = true; //the first row should also add the column headers

            public RowVisitor init(CSVWriter writer, boolean printColumnHeader){
                this.csvWriter = writer;
                this.printColumnHeader = printColumnHeader;
                return this;
            }

            public boolean visit(Project project, int rowIndex, Row row) {
                String[] cols = new String[project.columnModel.columns.size()];
                String[] vals = new String[row.cells.size()];

                int i = 0;
                for(Column col : project.columnModel.columns){
                    int cellIndex = col.getCellIndex();
                    cols[i] = col.getName();

                    Cell cell = row.cells.get(cellIndex);
                    if(cell != null){
                        vals[i] = cell.value.toString();
                    }
                    i++;
                }

                if( printColumnHeader && isFirstRow ){
                    csvWriter.writeNext(cols,false);
                    isFirstRow = false; //switch off flag
                }
                csvWriter.writeNext(vals,false);

                return false;
            }

            public void start(Project project) {
                // nothing to do
            }

            public void end(Project project) {
                try {
                    csvWriter.close();
                } catch (IOException e) {
                    logger.error("CsvExporter could not close writer : " + e.getMessage());
                }
            }

        }.init(new CSVWriter(writer, separator), printColumnHeader);

        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, visitor);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983110/fstmerge_var2_1246416760723504394

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983116/fstmerge_var1_6202395793617882293
@Override
    public String getContentType() {
        return "application/x-unknown";
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983116/fstmerge_base_7512780239920018298
=======
public String getContentType() {
        return "application/x-unknown";
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983116/fstmerge_var2_6909800637588634887

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983120/fstmerge_var1_692618705373102654
@Override
    public boolean takeWriter() {
        return true;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983120/fstmerge_base_5693365025209975656
=======
public boolean takeWriter() {
        return true;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983120/fstmerge_var2_6592310300749034095

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/CsvExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983137/fstmerge_var1_5026536227872230845
public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
        writer.write("<html>\n");
        writer.write("<head><title>"); 
            writer.write(ProjectManager.singleton.getProjectMetadata(project.id).getName());
            writer.write("</title></head>\n");
        
        writer.write("<body>\n");
        writer.write("<table>\n");
        
        writer.write("<tr>");
        {
            for (Column column : project.columnModel.columns) {
                writer.write("<th>");
                writer.write(column.getName());
                writer.write("</th>");
            }
        }
        writer.write("</tr>\n");
        
        {
            RowVisitor visitor = new RowVisitor() {
                Writer writer;
                
                public RowVisitor init(Writer writer) {
                    this.writer = writer;
                    return this;
                }
                
                @Override
                public void start(Project project) {
                	// nothing to do
                }
                
                @Override
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    try {
                        writer.write("<tr>");
                        
                        for (Column column : project.columnModel.columns) {
                            writer.write("<td>");
                            
                            int cellIndex = column.getCellIndex();
                            if (cellIndex < row.cells.size()) {
                                Cell cell = row.cells.get(cellIndex);
                                if (cell != null && cell.value != null) {
                                    Object v = cell.value;
                                    writer.write(v instanceof String ? ((String) v) : v.toString());
                                }
                            }
                            
                            writer.write("</td>");
                        }
                        
                        writer.write("</tr>\n");
                    } catch (IOException e) {
                        // ignore
                    }
                    return false;
                }
            }.init(writer);
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(project, visitor);
        }
        
        writer.write("</table>\n");
        writer.write("</body>\n");
        writer.write("</html>\n");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983137/fstmerge_base_5031321641200595526
=======
public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
        writer.write("<html>\n");
        writer.write("<head><title>"); 
            writer.write(ProjectManager.singleton.getProjectMetadata(project.id).getName());
            writer.write("</title></head>\n");
        
        writer.write("<body>\n");
        writer.write("<table>\n");
        
        writer.write("<tr>");
        {
            for (Column column : project.columnModel.columns) {
                writer.write("<th>");
                writer.write(column.getName());
                writer.write("</th>");
            }
        }
        writer.write("</tr>\n");
        
        {
            RowVisitor visitor = new RowVisitor() {
                Writer writer;
                
                public RowVisitor init(Writer writer) {
                    this.writer = writer;
                    return this;
                }
                
                public void start(Project project) {
                	// nothing to do
                }
                
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    try {
                        writer.write("<tr>");
                        
                        for (Column column : project.columnModel.columns) {
                            writer.write("<td>");
                            
                            int cellIndex = column.getCellIndex();
                            if (cellIndex < row.cells.size()) {
                                Cell cell = row.cells.get(cellIndex);
                                if (cell != null && cell.value != null) {
                                    Object v = cell.value;
                                    writer.write(v instanceof String ? ((String) v) : v.toString());
                                }
                            }
                            
                            writer.write("</td>");
                        }
                        
                        writer.write("</tr>\n");
                    } catch (IOException e) {
                        // ignore
                    }
                    return false;
                }
            }.init(writer);
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(project, visitor);
        }
        
        writer.write("</table>\n");
        writer.write("</body>\n");
        writer.write("</html>\n");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983137/fstmerge_var2_5922452248647610812

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/HtmlTableExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983200/fstmerge_var1_5676862347257299209
public void export(Project project, Properties options, Engine engine,
        OutputStream outputStream) throws IOException {
        
        Workbook wb = new HSSFWorkbook();
        Sheet s = wb.createSheet();
        wb.setSheetName(0, ProjectManager.singleton.getProjectMetadata(project.id).getName());
        
        int rowCount = 0;
        
        {
            org.apache.poi.ss.usermodel.Row r = s.createRow(rowCount++);
            
            int cellCount = 0;
            for (Column column : project.columnModel.columns) {
                org.apache.poi.ss.usermodel.Cell c = r.createCell(cellCount++);
                c.setCellValue(column.getName());
            }
        }
        
        {
            RowVisitor visitor = new RowVisitor() {
                Sheet sheet;
                int rowCount;
                
                public RowVisitor init(Sheet sheet, int rowCount) {
                    this.sheet = sheet;
                    this.rowCount = rowCount;
                    return this;
                }
                
                @Override
                public void start(Project project) {
                	// nothing to do
                }
                
                @Override
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    org.apache.poi.ss.usermodel.Row r = sheet.createRow(rowCount++);
                    
                    int cellCount = 0;
                    for (Column column : project.columnModel.columns) {
                        org.apache.poi.ss.usermodel.Cell c = r.createCell(cellCount++);
                        
                        int cellIndex = column.getCellIndex();
                        if (cellIndex < row.cells.size()) {
                            Cell cell = row.cells.get(cellIndex);
                            if (cell != null) {
                                if (cell.recon != null && cell.recon.match != null) {
                                    c.setCellValue(cell.recon.match.topicName);
                                    
                                    HSSFHyperlink hl = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                                    hl.setLabel(cell.recon.match.topicName);
                                    hl.setAddress("http://www.freebase.com/view" + cell.recon.match.topicID);
                                    
                                    c.setHyperlink(hl);
                                } else if (cell.value != null) {
                                    Object v = cell.value;
                                    
                                    if (v instanceof Number) {
                                        c.setCellValue(((Number) v).doubleValue());
                                    } else if (v instanceof Boolean) {
                                        c.setCellValue(((Boolean) v).booleanValue());
                                    } else if (v instanceof Date) {
                                        c.setCellValue((Date) v);
                                    } else if (v instanceof Calendar) {
                                        c.setCellValue((Calendar) v);
                                    } else if (v instanceof String) {
                                        c.setCellValue((String) v);
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
            }.init(s, rowCount);
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(project, visitor);
        }
        
        wb.write(outputStream);
        outputStream.flush();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983200/fstmerge_base_2212918470772115765
=======
public void export(Project project, Properties options, Engine engine,
        OutputStream outputStream) throws IOException {
        
        Workbook wb = new HSSFWorkbook();
        Sheet s = wb.createSheet();
        wb.setSheetName(0, ProjectManager.singleton.getProjectMetadata(project.id).getName());
        
        int rowCount = 0;
        
        {
            org.apache.poi.ss.usermodel.Row r = s.createRow(rowCount++);
            
            int cellCount = 0;
            for (Column column : project.columnModel.columns) {
                org.apache.poi.ss.usermodel.Cell c = r.createCell(cellCount++);
                c.setCellValue(column.getName());
            }
        }
        
        {
            RowVisitor visitor = new RowVisitor() {
                Sheet sheet;
                int rowCount;
                
                public RowVisitor init(Sheet sheet, int rowCount) {
                    this.sheet = sheet;
                    this.rowCount = rowCount;
                    return this;
                }
                
                public void start(Project project) {
                	// nothing to do
                }
                
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    org.apache.poi.ss.usermodel.Row r = sheet.createRow(rowCount++);
                    
                    int cellCount = 0;
                    for (Column column : project.columnModel.columns) {
                        org.apache.poi.ss.usermodel.Cell c = r.createCell(cellCount++);
                        
                        int cellIndex = column.getCellIndex();
                        if (cellIndex < row.cells.size()) {
                            Cell cell = row.cells.get(cellIndex);
                            if (cell != null) {
                                if (cell.recon != null && cell.recon.match != null) {
                                    c.setCellValue(cell.recon.match.topicName);
                                    
                                    HSSFHyperlink hl = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                                    hl.setLabel(cell.recon.match.topicName);
                                    hl.setAddress("http://www.freebase.com/view" + cell.recon.match.topicID);
                                    
                                    c.setHyperlink(hl);
                                } else if (cell.value != null) {
                                    Object v = cell.value;
                                    
                                    if (v instanceof Number) {
                                        c.setCellValue(((Number) v).doubleValue());
                                    } else if (v instanceof Boolean) {
                                        c.setCellValue(((Boolean) v).booleanValue());
                                    } else if (v instanceof Date) {
                                        c.setCellValue((Date) v);
                                    } else if (v instanceof Calendar) {
                                        c.setCellValue((Calendar) v);
                                    } else if (v instanceof String) {
                                        c.setCellValue((String) v);
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
            }.init(s, rowCount);
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(project, visitor);
        }
        
        wb.write(outputStream);
        outputStream.flush();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730983200/fstmerge_var2_9172402544810097518

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/exporters/XlsExporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986008/fstmerge_var1_2211489877985058501
@Override
        public void start(Project project) {
        	bindings = ExpressionUtils.createBindings(project);
        	
        	try {
        		if (_prefix != null) {
					writer.write(_prefix);
				}
			} catch (IOException e) {
				// ignore
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986008/fstmerge_base_3065576247225973378
=======
public void start(Project project) {
        	bindings = ExpressionUtils.createBindings(project);
        	
        	try {
        		if (_prefix != null) {
					writer.write(_prefix);
				}
			} catch (IOException e) {
				// ignore
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986008/fstmerge_var2_347252271072060976

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/templating/Template.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986012/fstmerge_var1_2012922606555133259
@Override
        public void end(Project project) {
        	try {
        		if (_suffix != null) {
					writer.write(_suffix);
				}
			} catch (IOException e) {
				// ignore
            }
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986012/fstmerge_base_7211490315544672193
=======
public void end(Project project) {
        	try {
        		if (_suffix != null) {
					writer.write(_suffix);
				}
			} catch (IOException e) {
				// ignore
            }
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986012/fstmerge_var2_7465704628016208382

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/templating/Template.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986017/fstmerge_var1_7210607630732709369
@Override
        public boolean visit(Project project, Record record) {
            if (limit <= 0 || total < limit) {
                internalVisit(project, record);
            }
        	total++;
        	
            return limit > 0 && total >= limit;
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986017/fstmerge_base_1525029741602589498
=======
public boolean visit(Project project, Record record) {
            if (limit <= 0 || total < limit) {
                internalVisit(project, record);
            }
        	total++;
        	
            return limit > 0 && total >= limit;
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986017/fstmerge_var2_1483094063218057973

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/templating/Template.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986047/fstmerge_var1_9206154987552011102
public FilteredRows getAllRows() {
        return new FilteredRows() {
			@Override
			public void accept(Project project, RowVisitor visitor) {
		    	try {
		    		visitor.start(project);
		    		
			        int c = project.rows.size();
			        for (int rowIndex = 0; rowIndex < c; rowIndex++) {
			            Row row = project.rows.get(rowIndex);
			            visitor.visit(project, rowIndex, row);
			        }
		    	} finally {
		    		visitor.end(project);
		    	}
			}
        };
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986047/fstmerge_base_7405052320884978647
=======
public FilteredRows getAllRows() {
        return new FilteredRows() {
			public void accept(Project project, RowVisitor visitor) {
		    	try {
		    		visitor.start(project);
		    		
			        int c = project.rows.size();
			        for (int rowIndex = 0; rowIndex < c; rowIndex++) {
			            Row row = project.rows.get(rowIndex);
			            visitor.visit(project, rowIndex, row);
			        }
		    	} finally {
		    		visitor.end(project);
		    	}
			}
        };
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986047/fstmerge_var2_4400075780345600352

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/Engine.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986062/fstmerge_var1_4374980739878658494
public FilteredRecords getAllRecords() {
        return new FilteredRecords() {
			@Override
			public void accept(Project project, RecordVisitor visitor) {
		    	try {
		    		visitor.start(project);
		    		
			        int c = project.recordModel.getRecordCount();
			        for (int r = 0; r < c; r++) {
			            visitor.visit(project, project.recordModel.getRecord(r));
			        }
		    	} finally {
		    		visitor.end(project);
		    	}
			}
        };
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986062/fstmerge_base_6071794236413690435
=======
public FilteredRecords getAllRecords() {
        return new FilteredRecords() {
			public void accept(Project project, RecordVisitor visitor) {
		    	try {
		    		visitor.start(project);
		    		
			        int c = project.recordModel.getRecordCount();
			        for (int r = 0; r < c; r++) {
			            visitor.visit(project, project.recordModel.getRecord(r));
			        }
		    	} finally {
		    		visitor.end(project);
		    	}
			}
        };
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986062/fstmerge_var2_3511921853118944001

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/Engine.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986147/fstmerge_var1_183953314043852765
@Override
    public void start(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986147/fstmerge_base_8966186295940191230
=======
public void start(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986147/fstmerge_var2_8451862471327256052

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNumericValueBinner.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986152/fstmerge_var1_8607022131647168787
@Override
    public void end(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986152/fstmerge_base_7194096349200816631
=======
public void end(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986152/fstmerge_var2_5357653283854356288

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNumericValueBinner.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986156/fstmerge_var1_3962647185102752975
@Override
    public boolean visit(Project project, int rowIndex, Row row) {
        resetFlags();
        
        Properties bindings = ExpressionUtils.createBindings(project);
        processRow(project, rowIndex, row, bindings);
        
        updateCounts();
        
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986156/fstmerge_base_510693834405177856
=======
public boolean visit(Project project, int rowIndex, Row row) {
        resetFlags();
        
        Properties bindings = ExpressionUtils.createBindings(project);
        processRow(project, rowIndex, row, bindings);
        
        updateCounts();
        
        return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986156/fstmerge_var2_964872930439967721

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNumericValueBinner.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986161/fstmerge_var1_6969345539144016504
@Override
    public boolean visit(Project project, Record record) {
        resetFlags();
        
        Properties bindings = ExpressionUtils.createBindings(project);
        for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
        	processRow(project, r, project.rows.get(r), bindings);
        }
        
        updateCounts();
        
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986161/fstmerge_base_621338493881259079
=======
public boolean visit(Project project, Record record) {
        resetFlags();
        
        Properties bindings = ExpressionUtils.createBindings(project);
        for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
        	processRow(project, r, project.rows.get(r), bindings);
        }
        
        updateCounts();
        
        return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986161/fstmerge_var2_5509624170855429187

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNumericValueBinner.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986250/fstmerge_var1_5360686759721610592
@Override
    public void accept(Project project, RecordVisitor visitor) {
    	try {
    		visitor.start(project);
    		
	    	int c = project.recordModel.getRecordCount();
	        for (int r = 0; r < c; r++) {
	        	Record record = project.recordModel.getRecord(r);
	            if (matchRecord(project, record)) {
	            	if (visitor.visit(project, record)) {
	            		return;
	            	}
	            }
	        }
    	} finally {
    		visitor.end(project);
    	}
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986250/fstmerge_base_4342345819570071509
=======
public void accept(Project project, RecordVisitor visitor) {
    	try {
    		visitor.start(project);
    		
	    	int c = project.recordModel.getRecordCount();
	        for (int r = 0; r < c; r++) {
	        	Record record = project.recordModel.getRecord(r);
	            if (matchRecord(project, record)) {
	            	if (visitor.visit(project, record)) {
	            		return;
	            	}
	            }
	        }
    	} finally {
    		visitor.end(project);
    	}
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986250/fstmerge_var2_3425610129252658820

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ConjunctiveFilteredRecords.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986277/fstmerge_var1_5348334524379060593
public FilteredRecordsAsFilteredRows(FilteredRecords filteredRecords) {
        _filteredRecords = filteredRecords;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986277/fstmerge_base_5258189043632291609
=======
public FilteredRecordsAsFilteredRows(FilteredRecords filteredRecords) {
		_filteredRecords = filteredRecords;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986277/fstmerge_var2_1892042380232667555

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/FilteredRecordsAsFilteredRows.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986281/fstmerge_var1_1462167743137815973
@Override
    public void accept(Project project, RowVisitor visitor) {
        _filteredRecords.accept(project, new RowVisitorAsRecordVisitor(visitor));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986281/fstmerge_base_514688113623355280
=======
public void accept(Project project, RowVisitor visitor) {
		_filteredRecords.accept(project, new RowVisitorAsRecordVisitor(visitor));
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986281/fstmerge_var2_1597419427806247592

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/FilteredRecordsAsFilteredRows.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986295/fstmerge_var1_8643878039864460022
@Override
    public void start(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986295/fstmerge_base_1706237086222345850
=======
public void start(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986295/fstmerge_var2_3887042139504729855

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNominalValueGrouper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986299/fstmerge_var1_4151201406165650621
@Override
    public void end(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986299/fstmerge_base_862434005137336860
=======
public void end(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986299/fstmerge_var2_5946977775266768276

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNominalValueGrouper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986308/fstmerge_var1_321967049231031491
@Override
    public boolean visit(Project project, Record record) {
    	hasError = false;
    	hasBlank = false;
    	
        Properties bindings = ExpressionUtils.createBindings(project);
        
        for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
        	Row row = project.rows.get(r);
            visitRow(project, r, row, bindings, record.recordIndex);
        }
        
        if (hasError) {
        	errorCount++;
        }
        if (hasBlank) {
        	blankCount++;
        }
        
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986308/fstmerge_base_3078511844063376370
=======
public boolean visit(Project project, Record record) {
    	hasError = false;
    	hasBlank = false;
    	
        Properties bindings = ExpressionUtils.createBindings(project);
        
        for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
        	Row row = project.rows.get(r);
            visitRow(project, r, row, bindings, record.recordIndex);
        }
        
        if (hasError) {
        	errorCount++;
        }
        if (hasBlank) {
        	blankCount++;
        }
        
        return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986308/fstmerge_var2_7939517865102548835

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNominalValueGrouper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986323/fstmerge_var1_3010598708067769084
public RowEvaluable getChoiceCountRowEvaluable() {
    	return new RowEvaluable() {
			@Override
			public Object eval(Project project, int rowIndex, Row row, Properties bindings) {
		    	Object value = evalRow(project, rowIndex, row, bindings);
		    	return getChoiceValueCountMultiple(value);
			}
    	
    	};
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986323/fstmerge_base_1834259154483386776
=======
public RowEvaluable getChoiceCountRowEvaluable() {
    	return new RowEvaluable() {
			public Object eval(Project project, int rowIndex, Row row, Properties bindings) {
		    	Object value = evalRow(project, rowIndex, row, bindings);
		    	return getChoiceValueCountMultiple(value);
			}
    	};
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986323/fstmerge_var2_2283747198388506252

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionNominalValueGrouper.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986333/fstmerge_var1_6677700045997609271
public RowVisitorAsRecordVisitor(RowVisitor rowVisitor) {
        _rowVisitor = rowVisitor;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986333/fstmerge_base_5325859374189603695
=======
public RowVisitorAsRecordVisitor(RowVisitor rowVisitor) {
		_rowVisitor = rowVisitor;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986333/fstmerge_var2_3375375450988303946

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/RowVisitorAsRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986336/fstmerge_var1_3698718531363678788
@Override
    public void start(Project project) {
        _rowVisitor.start(project);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986336/fstmerge_base_8263763272031772703
=======
public void start(Project project) {
        _rowVisitor.start(project);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986336/fstmerge_var2_126701900213776108

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/RowVisitorAsRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986340/fstmerge_var1_9123190065730550211
@Override
    public void end(Project project) {
        _rowVisitor.end(project);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986340/fstmerge_base_5655989429047965068
=======
public void end(Project project) {
        _rowVisitor.end(project);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986340/fstmerge_var2_4149230274243319670

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/RowVisitorAsRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986344/fstmerge_var1_8050921812339625534
@Override
    public boolean visit(Project project, Record record) {
        for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
            if (_rowVisitor.visit(project, r, project.rows.get(r))) {
                return true;
            }
        }
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986344/fstmerge_base_6385313599256581432
=======
public boolean visit(Project project, Record record) {
		for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
			if (_rowVisitor.visit(project, r, project.rows.get(r))) {
				return true;
			}
		}
		return false;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986344/fstmerge_var2_7250077294071875148

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/RowVisitorAsRecordVisitor.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ final protected String         _columnName; ##FSTMerge## ##FSTMerge## final protected String 		_columnName;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionBasedRowEvaluable.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ final protected int            _cellIndex; ##FSTMerge## ##FSTMerge## final protected int	   		_cellIndex;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionBasedRowEvaluable.java
Conflict type: SameIdFd
Conflict body: 
~~FSTMerge~~ final protected Evaluable      _eval; ##FSTMerge## ##FSTMerge## final protected Evaluable 	_eval;
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionBasedRowEvaluable.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986371/fstmerge_var1_1086660121500080819
public ExpressionBasedRowEvaluable(
        String columnName, int cellIndex, Evaluable eval) {
    
        _columnName = columnName;
        _cellIndex = cellIndex;
        _eval = eval;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986371/fstmerge_base_5101820330672627271
=======
public ExpressionBasedRowEvaluable(String columnName, int cellIndex, Evaluable eval) {
	
		_columnName = columnName;
		_cellIndex = cellIndex;
		_eval = eval;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986371/fstmerge_var2_1569513941259717137

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionBasedRowEvaluable.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986376/fstmerge_var1_4521544203776824311
@Override
    public Object eval(
            Project project, int rowIndex, Row row, Properties bindings) {
        
        Cell cell = row.getCell(_cellIndex);

        ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
        
        return _eval.evaluate(bindings);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986376/fstmerge_base_2930253385490495789
=======
public Object eval(Project project, int rowIndex, Row row, Properties bindings) {
		
        Cell cell = row.getCell(_cellIndex);

        ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
        
        return _eval.evaluate(bindings);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986376/fstmerge_var2_5443227525433919284

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/util/ExpressionBasedRowEvaluable.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986385/fstmerge_var1_5521319173320054593
@Override
    public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("columnName"); writer.value(_columnName);
        writer.key("query"); writer.value(_query);
        writer.key("mode"); writer.value(_mode);
        writer.key("caseSensitive"); writer.value(_caseSensitive);
        writer.endObject();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986385/fstmerge_base_2312707761986101580
=======
public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("columnName"); writer.value(_columnName);
        writer.key("query"); writer.value(_query);
        writer.key("mode"); writer.value(_mode);
        writer.key("caseSensitive"); writer.value(_caseSensitive);
        writer.endObject();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986385/fstmerge_var2_804849033308727728

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986390/fstmerge_var1_6297648535878456824
@Override
    public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _name = o.getString("name");
        _columnName = o.getString("columnName");
        
        _cellIndex = project.columnModel.getColumnByName(_columnName).getCellIndex();
        
        if (!o.isNull("query")) {
            _query = o.getString("query"); 
        }
        
        _mode = o.getString("mode");
        _caseSensitive = o.getBoolean("caseSensitive");
        if (_query != null) {
            if ("regex".equals(_mode)) {
                try {
                    _pattern = Pattern.compile(
                    		_query, 
                    		_caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
                } catch (java.util.regex.PatternSyntaxException e) {
                    e.printStackTrace();
                }
            } else if (!_caseSensitive) {
        		_query = _query.toLowerCase();
            }
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986390/fstmerge_base_4445795247710593005
=======
public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _name = o.getString("name");
        _columnName = o.getString("columnName");
        
        _cellIndex = project.columnModel.getColumnByName(_columnName).getCellIndex();
        
        if (!o.isNull("query")) {
            _query = o.getString("query"); 
        }
        
        _mode = o.getString("mode");
        _caseSensitive = o.getBoolean("caseSensitive");
        if (_query != null) {
            if ("regex".equals(_mode)) {
                try {
                    _pattern = Pattern.compile(
                    		_query, 
                    		_caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);
                } catch (java.util.regex.PatternSyntaxException e) {
                    e.printStackTrace();
                }
            } else if (!_caseSensitive) {
        		_query = _query.toLowerCase();
            }
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986390/fstmerge_var2_1917299786003254510

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986396/fstmerge_var1_6883510312481074859
@Override
    public RowFilter getRowFilter(Project project) {
        if (_query == null || _query.length() == 0) {
            return null;
        } else if ("regex".equals(_mode) && _pattern == null) {
            return null;
        }
        
        Evaluable eval = new VariableExpr("value");
        
        if ("regex".equals(_mode)) {
            return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
                protected boolean checkValue(String s) {
                    return _pattern.matcher(s).find();
                };
            };
        } else {
            return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
                protected boolean checkValue(String s) {
                    return (_caseSensitive ? s : s.toLowerCase()).contains(_query);
                };
            };
        }        
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986396/fstmerge_base_7563918681951992601
=======
public RowFilter getRowFilter(Project project) {
        if (_query == null || _query.length() == 0) {
            return null;
        } else if ("regex".equals(_mode) && _pattern == null) {
            return null;
        }
        
        Evaluable eval = new VariableExpr("value");
        
        if ("regex".equals(_mode)) {
            return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
                protected boolean checkValue(String s) {
                    return _pattern.matcher(s).find();
                };
            };
        } else {
            return new ExpressionStringComparisonRowFilter(eval, _columnName, _cellIndex) {
                protected boolean checkValue(String s) {
                    return (_caseSensitive ? s : s.toLowerCase()).contains(_query);
                };
            };
        }        
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986396/fstmerge_var2_195575299893149882

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986400/fstmerge_var1_2096958187458163584
@Override
    public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986400/fstmerge_base_1500023744249396987
=======
public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986400/fstmerge_var2_3092187823410289529

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986404/fstmerge_var1_1040626928807435543
@Override
    public void computeChoices(Project project, FilteredRows filteredRows) {
        // nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986404/fstmerge_base_7848574583657210826
=======
public void computeChoices(Project project, FilteredRows filteredRows) {
        // nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986404/fstmerge_var2_2327927848116452391

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986409/fstmerge_var1_5919438316403787248
@Override
    public void computeChoices(Project project, FilteredRecords filteredRecords) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986409/fstmerge_base_4649312806148382292
=======
public void computeChoices(Project project, FilteredRecords filteredRecords) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986409/fstmerge_var2_4874953735355499786

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/TextSearchFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986428/fstmerge_var1_4442787649885999086
@Override
    public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("expression"); writer.value(_expression);
        writer.key("columnName"); writer.value(_columnName);
        writer.key("invert"); writer.value(_invert);
        
        if (_errorMessage != null) {
            writer.key("error"); writer.value(_errorMessage);
        } else if (_choices.size() > 2000) {
            writer.key("error"); writer.value("Too many choices");
        } else {
            writer.key("choices"); writer.array();
            for (NominalFacetChoice choice : _choices) {
                choice.write(writer, options);
            }
            writer.endArray();
            
            if (!_omitBlank && (_selectBlank || _blankCount > 0)) {
                writer.key("blankChoice");
                writer.object();
                writer.key("s"); writer.value(_selectBlank);
                writer.key("c"); writer.value(_blankCount);
                writer.endObject();
            }
            if (!_omitError && (_selectError || _errorCount > 0)) {
                writer.key("errorChoice");
                writer.object();
                writer.key("s"); writer.value(_selectError);
                writer.key("c"); writer.value(_errorCount);
                writer.endObject();
            }
        }
        
        writer.endObject();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986428/fstmerge_base_313522696178184949
=======
public void write(JSONWriter writer, Properties options) throws JSONException {
        
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("expression"); writer.value(_expression);
        writer.key("columnName"); writer.value(_columnName);
        writer.key("invert"); writer.value(_invert);
        
        if (_errorMessage != null) {
            writer.key("error"); writer.value(_errorMessage);
        } else if (_choices.size() > 2000) {
            writer.key("error"); writer.value("Too many choices");
        } else {
            writer.key("choices"); writer.array();
            for (NominalFacetChoice choice : _choices) {
                choice.write(writer, options);
            }
            writer.endArray();
            
            if (!_omitBlank && (_selectBlank || _blankCount > 0)) {
                writer.key("blankChoice");
                writer.object();
                writer.key("s"); writer.value(_selectBlank);
                writer.key("c"); writer.value(_blankCount);
                writer.endObject();
            }
            if (!_omitError && (_selectError || _errorCount > 0)) {
                writer.key("errorChoice");
                writer.object();
                writer.key("s"); writer.value(_selectError);
                writer.key("c"); writer.value(_errorCount);
                writer.endObject();
            }
        }
        
        writer.endObject();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986428/fstmerge_var2_7628464876425906288

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986433/fstmerge_var1_6586477701022030887
@Override
    public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _name = o.getString("name");
        _expression = o.getString("expression");
        _columnName = o.getString("columnName");
        _invert = o.has("invert") && o.getBoolean("invert");
        
        if (_columnName.length() > 0) {
            Column column = project.columnModel.getColumnByName(_columnName);
            if (column != null) {
                _cellIndex = column.getCellIndex();
            } else {
                _errorMessage = "No column named " + _columnName;
            }
        } else {
            _cellIndex = -1;
        }
        
        try {
            _eval = MetaParser.parse(_expression);
        } catch (ParsingException e) {
            _errorMessage = e.getMessage();
        }
        
        _selection.clear();
        
        JSONArray a = o.getJSONArray("selection");
        int length = a.length();
        
        for (int i = 0; i < length; i++) {
            JSONObject oc = a.getJSONObject(i);
            JSONObject ocv = oc.getJSONObject("v");
            
            DecoratedValue decoratedValue = new DecoratedValue(
                ocv.get("v"), ocv.getString("l"));
            
            NominalFacetChoice nominalFacetChoice = new NominalFacetChoice(decoratedValue);
            nominalFacetChoice.selected = true;
            
            _selection.add(nominalFacetChoice);
        }
        
        _omitBlank = JSONUtilities.getBoolean(o, "omitBlank", false);
        _omitError = JSONUtilities.getBoolean(o, "omitError", false);
        
        _selectBlank = JSONUtilities.getBoolean(o, "selectBlank", false);
        _selectError = JSONUtilities.getBoolean(o, "selectError", false);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986433/fstmerge_base_8230163152843493873
=======
public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _name = o.getString("name");
        _expression = o.getString("expression");
        _columnName = o.getString("columnName");
        _invert = o.has("invert") && o.getBoolean("invert");
        
        if (_columnName.length() > 0) {
            Column column = project.columnModel.getColumnByName(_columnName);
            if (column != null) {
                _cellIndex = column.getCellIndex();
            } else {
                _errorMessage = "No column named " + _columnName;
            }
        } else {
            _cellIndex = -1;
        }
        
        try {
            _eval = MetaParser.parse(_expression);
        } catch (ParsingException e) {
            _errorMessage = e.getMessage();
        }
        
        _selection.clear();
        
        JSONArray a = o.getJSONArray("selection");
        int length = a.length();
        
        for (int i = 0; i < length; i++) {
            JSONObject oc = a.getJSONObject(i);
            JSONObject ocv = oc.getJSONObject("v");
            
            DecoratedValue decoratedValue = new DecoratedValue(
                ocv.get("v"), ocv.getString("l"));
            
            NominalFacetChoice nominalFacetChoice = new NominalFacetChoice(decoratedValue);
            nominalFacetChoice.selected = true;
            
            _selection.add(nominalFacetChoice);
        }
        
        _omitBlank = JSONUtilities.getBoolean(o, "omitBlank", false);
        _omitError = JSONUtilities.getBoolean(o, "omitError", false);
        
        _selectBlank = JSONUtilities.getBoolean(o, "selectBlank", false);
        _selectError = JSONUtilities.getBoolean(o, "selectError", false);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986433/fstmerge_var2_4185212365111776479

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986438/fstmerge_var1_921112879424662178
@Override
    public RowFilter getRowFilter(Project project) {
        return 
            _eval == null || 
            _errorMessage != null ||
            (_selection.size() == 0 && !_selectBlank && !_selectError) ? 
                null :
                new ExpressionEqualRowFilter(
                    _eval, 
                    _columnName,
                    _cellIndex, 
                    createMatches(), 
                    _selectBlank, 
                    _selectError,
                    _invert);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986438/fstmerge_base_5672105672859514222
=======
public RowFilter getRowFilter(Project project) {
        return 
            _eval == null || 
            _errorMessage != null ||
            (_selection.size() == 0 && !_selectBlank && !_selectError) ? 
                null :
                new ExpressionEqualRowFilter(
                    _eval, 
                    _columnName,
                    _cellIndex, 
                    createMatches(), 
                    _selectBlank, 
                    _selectError,
                    _invert);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986438/fstmerge_var2_1312153601199964239

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986443/fstmerge_var1_1931177382213859094
@Override
    public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986443/fstmerge_base_5900450987028312532
=======
public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986443/fstmerge_var2_3508142882118197672

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986448/fstmerge_var1_9100946149163676917
@Override
    public void computeChoices(Project project, FilteredRows filteredRows) {
        if (_eval != null && _errorMessage == null) {
            ExpressionNominalValueGrouper grouper = 
                new ExpressionNominalValueGrouper(_eval, _columnName, _cellIndex);
            
            filteredRows.accept(project, grouper);
            
            postProcessGrouper(grouper);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986448/fstmerge_base_8902160157473779667
=======
public void computeChoices(Project project, FilteredRows filteredRows) {
        if (_eval != null && _errorMessage == null) {
            ExpressionNominalValueGrouper grouper = 
                new ExpressionNominalValueGrouper(_eval, _columnName, _cellIndex);
            
            filteredRows.accept(project, grouper);
            
            postProcessGrouper(grouper);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986448/fstmerge_var2_328610772128321119

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986452/fstmerge_var1_3041688751596306644
@Override
    public void computeChoices(Project project, FilteredRecords filteredRecords) {
        if (_eval != null && _errorMessage == null) {
            ExpressionNominalValueGrouper grouper = 
                new ExpressionNominalValueGrouper(_eval, _columnName, _cellIndex);
            
            filteredRecords.accept(project, grouper);
            
            postProcessGrouper(grouper);
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986452/fstmerge_base_6134233760570295492
=======
public void computeChoices(Project project, FilteredRecords filteredRecords) {
        if (_eval != null && _errorMessage == null) {
            ExpressionNominalValueGrouper grouper = 
                new ExpressionNominalValueGrouper(_eval, _columnName, _cellIndex);
            
            filteredRecords.accept(project, grouper);
            
            postProcessGrouper(grouper);
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986452/fstmerge_var2_3129591845038870850

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ListFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986485/fstmerge_var1_5433788151809411484
@Override
    public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986485/fstmerge_base_6843523865054338999
=======
public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986485/fstmerge_var2_4297419718691291081

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/RangeFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986530/fstmerge_var1_8644362203027796771
@Override
    public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986530/fstmerge_base_5603155614709292422
=======
public RecordFilter getRecordFilter(Project project) {
    	RowFilter rowFilter = getRowFilter(project);
    	return rowFilter == null ? null : new AnyRowRecordFilter(rowFilter);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986530/fstmerge_var2_2157486675563648821

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ScatterplotFacet.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986616/fstmerge_var1_4809191816947479583
@Override
    public void start(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986616/fstmerge_base_95718619167263925
=======
public void start(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986616/fstmerge_var2_3590461720817991497

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ScatterplotDrawingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986621/fstmerge_var1_5605158482227357916
@Override
    public void end(Project project) {
    	// nothing to do
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986621/fstmerge_base_5573606643953010607
=======
public void end(Project project) {
    	// nothing to do
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986621/fstmerge_var2_6743680747796604158

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ScatterplotDrawingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986626/fstmerge_var1_3190871625673197921
@Override
    public boolean visit(Project project, int rowIndex, Row row) {
        Cell cellx = row.getCell(col_x);
        Cell celly = row.getCell(col_y);
        if ((cellx != null && cellx.value != null && cellx.value instanceof Number) &&
            (celly != null && celly.value != null && celly.value instanceof Number)) 
        {
            double xv = ((Number) cellx.value).doubleValue();
            double yv = ((Number) celly.value).doubleValue();

            Point2D.Double p = new Point2D.Double(xv,yv);
            
            p = ScatterplotFacet.translateCoordinates(
                    p, min_x, max_x, min_y, max_y, dim_x, dim_y, l, r);
            
            g2.fill(new Rectangle2D.Double(p.x - dot / 2, p.y - dot / 2, dot, dot));
        }
        
        return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986626/fstmerge_base_1665739303514810655
=======
public boolean visit(Project project, int rowIndex, Row row) {
        Cell cellx = row.getCell(col_x);
        Cell celly = row.getCell(col_y);
        if ((cellx != null && cellx.value != null && cellx.value instanceof Number) &&
            (celly != null && celly.value != null && celly.value instanceof Number)) 
        {
            double xv = ((Number) cellx.value).doubleValue();
            double yv = ((Number) celly.value).doubleValue();

            Point2D.Double p = new Point2D.Double(xv,yv);
            
            p = ScatterplotFacet.translateCoordinates(
                    p, min_x, max_x, min_y, max_y, dim_x, dim_y, l, r);
            
            g2.fill(new Rectangle2D.Double(p.x - dot / 2, p.y - dot / 2, dot, dot));
        }
        
        return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986626/fstmerge_var2_7367866240620299578

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ScatterplotDrawingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986631/fstmerge_var1_3763648207975235938
@Override
    public boolean visit(Project project, Record record) {
    	for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
    		visit(project, r, project.rows.get(r));
    	}
    	return false;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986631/fstmerge_base_8632640392134565513
=======
public boolean visit(Project project, Record record) {
    	for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
    		visit(project, r, project.rows.get(r));
    	}
    	return false;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986631/fstmerge_var2_1085075613230960110

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/facets/ScatterplotDrawingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986716/fstmerge_var1_4532347808245992823
@Override
	public boolean filterRecord(Project project, Record record) {
		for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
			if (_rowFilter.filterRow(project, r, project.rows.get(r))) {
				return true;
			}
		}
		return false;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986716/fstmerge_base_2615594608458725904
=======
public boolean filterRecord(Project project, Record record) {
		for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
			if (_rowFilter.filterRow(project, r, project.rows.get(r))) {
				return true;
			}
		}
		return false;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730986716/fstmerge_var2_2474940126157436459

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/browsing/filters/AnyRowRecordFilter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987044/fstmerge_var1_1447696410471008937
@Override
    public void read(Reader reader, Project project, Properties options) throws Exception {
        String baseUrl = options.getProperty("base-url");

        Graph graph = JrdfFactory.getNewGraph();
        LineHandler lineHandler = nTriplesParserFactory.createParser(graph, newMapFactory);
        GraphLineParser parser = new GraphLineParser(graph, lineHandler);
        parser.parse(reader, baseUrl); // fills JRDF graph

        Map<String, List<Row>> subjectToRows = new HashMap<String, List<Row>>();

        Column subjectColumn = new Column(0, "subject");
        project.columnModel.columns.add(0, subjectColumn);
        project.columnModel.setKeyColumnIndex(0);

        ClosableIterable<Triple> triples = graph.find(ANY_SUBJECT_NODE, ANY_PREDICATE_NODE, ANY_OBJECT_NODE);
        try {
            for (Triple triple : triples) {
                String subject = triple.getSubject().toString();
                String predicate = triple.getPredicate().toString();
                String object = triple.getObject().toString();

                Column column = project.columnModel.getColumnByName(predicate);
                if (column == null) {
                	column = new Column(project.columnModel.allocateNewCellIndex(), predicate);
                	try {
            			project.columnModel.addColumn(-1, column, true);
            		} catch (ModelException e) {
            			// ignore
            		}
                }

                int cellIndex = column.getCellIndex();
                if (subjectToRows.containsKey(subject)) {
                	List<Row> rows = subjectToRows.get(subject);
                	for (Row row : rows) {
                		if (!ExpressionUtils.isNonBlankData(row.getCellValue(cellIndex))) {
                        	row.setCell(cellIndex, new Cell(object, null));
                        	object = null;
                        	break;
                		}
                	}

                	if (object != null) {
                    	Row row = new Row(project.columnModel.getMaxCellIndex() + 1);
                    	rows.add(row);

                    	row.setCell(cellIndex, new Cell(object, null));
                	}
                } else {
                	List<Row> rows = new ArrayList<Row>();
                	subjectToRows.put(subject, rows);

                	Row row = new Row(project.columnModel.getMaxCellIndex() + 1);
                	rows.add(row);

                	row.setCell(subjectColumn.getCellIndex(), new Cell(subject, null));
                	row.setCell(cellIndex, new Cell(object, null));
                }
            }

            for (Entry<String, List<Row>> entry : subjectToRows.entrySet()) {
            	project.rows.addAll(entry.getValue());
            }
        } finally {
            triples.iterator().close();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987044/fstmerge_base_2883009333555962775
=======
public void read(Reader reader, Project project, Properties options) throws Exception {
        String baseUrl = options.getProperty("base-url");

        Graph graph = JrdfFactory.getNewGraph();
        LineHandler lineHandler = nTriplesParserFactory.createParser(graph, newMapFactory);
        GraphLineParser parser = new GraphLineParser(graph, lineHandler);
        parser.parse(reader, baseUrl); // fills JRDF graph

        Map<String, List<Row>> subjectToRows = new HashMap<String, List<Row>>();

        Column subjectColumn = new Column(0, "subject");
        project.columnModel.columns.add(0, subjectColumn);
        project.columnModel.setKeyColumnIndex(0);

        ClosableIterable<Triple> triples = graph.find(ANY_SUBJECT_NODE, ANY_PREDICATE_NODE, ANY_OBJECT_NODE);
        try {
            for (Triple triple : triples) {
                String subject = triple.getSubject().toString();
                String predicate = triple.getPredicate().toString();
                String object = triple.getObject().toString();

                Column column = project.columnModel.getColumnByName(predicate);
                if (column == null) {
                	column = new Column(project.columnModel.allocateNewCellIndex(), predicate);
                	try {
            			project.columnModel.addColumn(-1, column, true);
            		} catch (ModelException e) {
            			// ignore
            		}
                }

                int cellIndex = column.getCellIndex();
                if (subjectToRows.containsKey(subject)) {
                	List<Row> rows = subjectToRows.get(subject);
                	for (Row row : rows) {
                		if (!ExpressionUtils.isNonBlankData(row.getCellValue(cellIndex))) {
                        	row.setCell(cellIndex, new Cell(object, null));
                        	object = null;
                        	break;
                		}
                	}

                	if (object != null) {
                    	Row row = new Row(project.columnModel.getMaxCellIndex() + 1);
                    	rows.add(row);

                    	row.setCell(cellIndex, new Cell(object, null));
                	}
                } else {
                	List<Row> rows = new ArrayList<Row>();
                	subjectToRows.put(subject, rows);

                	Row row = new Row(project.columnModel.getMaxCellIndex() + 1);
                	rows.add(row);

                	row.setCell(subjectColumn.getCellIndex(), new Cell(subject, null));
                	row.setCell(cellIndex, new Cell(object, null));
                }
            }

            for (Entry<String, List<Row>> entry : subjectToRows.entrySet()) {
            	project.rows.addAll(entry.getValue());
            }
        } finally {
            triples.iterator().close();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987044/fstmerge_var2_3679127357971033282

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/importers/RdfTripleImporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987049/fstmerge_var1_8126923413851597975
@Override
    public void read(InputStream inputStream, Project project, Properties options) throws Exception {
        // TODO
        throw new UnsupportedOperationException();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987049/fstmerge_base_6577462936196209488
=======
public void read(InputStream inputStream, Project project, Properties options) throws Exception {
        // TODO
        throw new UnsupportedOperationException();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987049/fstmerge_var2_6737983483038990468

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/importers/RdfTripleImporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987053/fstmerge_var1_5250034641737937176
@Override
    public boolean takesReader() {
        return true;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987053/fstmerge_base_1178906460550769306
=======
public boolean takesReader() {
        return true;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987053/fstmerge_var2_4403001298938912071

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/importers/RdfTripleImporter.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987228/fstmerge_var1_825177927985306984
@Override
	public void start(Project project) {
		int count = project.recordModel.getRecordCount();
		_records = new ArrayList<Record>(count);
		_keys = new ArrayList<Object[]>(count);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987228/fstmerge_base_7697009218724905438
=======
public void start(Project project) {
		int count = project.recordModel.getRecordCount();
		_records = new ArrayList<Record>(count);
		_keys = new ArrayList<Object[]>(count);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987228/fstmerge_var2_8499478519729254932

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987233/fstmerge_var1_2276797546083139763
@Override
	public void end(Project project) {
		_visitor.start(project);
		
		Collections.sort(_records, new Comparator<Record>() {
			Project project;
			
			Comparator<Record> init(Project project) {
				this.project = project;
				return this;
			}
			
			@Override
			public int compare(Record o1, Record o2) {
				return SortingRecordVisitor.this.compare(project, o1, o1.recordIndex, o2, o2.recordIndex);
			}
		}.init(project));
		
		for (Record record : _records) {
			_visitor.visit(project, record);
		}
		
		_visitor.end(project);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987233/fstmerge_base_4642516346369599355
=======
public void end(Project project) {
		_visitor.start(project);
		
		Collections.sort(_records, new Comparator<Record>() {
			Project project;
			
			Comparator<Record> init(Project project) {
				this.project = project;
				return this;
			}
			
			public int compare(Record o1, Record o2) {
				return SortingRecordVisitor.this.compare(project, o1, o1.recordIndex, o2, o2.recordIndex);
			}
		}.init(project));
		
		for (Record record : _records) {
			_visitor.visit(project, record);
		}
		
		_visitor.end(project);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987233/fstmerge_var2_7935236613009361327

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987238/fstmerge_var1_1752287690497910959
@Override
	public boolean visit(Project project, Record record) {
		_records.add(record);
		return false;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987238/fstmerge_base_7757254129224800396
=======
public boolean visit(Project project, Record record) {
		_records.add(record);
		return false;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987238/fstmerge_var2_2953865998026614199

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987243/fstmerge_var1_1853709515643479804
@Override
	protected Object makeKey(
			Project project, KeyMaker keyMaker, Criterion c, Object o, int index) {
		
		return keyMaker.makeKey(project, (Record) o);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987243/fstmerge_base_6217534074817188508
=======
protected Object makeKey(Project project, KeyMaker keyMaker, Criterion c, Object o, int index) {
		return keyMaker.makeKey(project, (Record) o);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987243/fstmerge_var2_2081888703011663100

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRecordVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987256/fstmerge_var1_3050580610415315685
@Override
	public void start(Project project) {
		int count = project.rows.size();
		_indexedRows = new ArrayList<IndexedRow>(count);
		_keys = new ArrayList<Object[]>(count);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987256/fstmerge_base_5174378702237347438
=======
public void start(Project project) {
		int count = project.rows.size();
		_indexedRows = new ArrayList<IndexedRow>(count);
		_keys = new ArrayList<Object[]>(count);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987256/fstmerge_var2_3899134546188420723

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987261/fstmerge_var1_37405498412852996
@Override
	public void end(Project project) {
		_visitor.start(project);
		
		Collections.sort(_indexedRows, new Comparator<IndexedRow>() {
			Project project;
			
			Comparator<IndexedRow> init(Project project) {
				this.project = project;
				return this;
			}
			
			@Override
			public int compare(IndexedRow o1, IndexedRow o2) {
				return SortingRowVisitor.this.compare(project, o1.row, o1.index, o2.row, o2.index);
			}
		}.init(project));
		
		for (IndexedRow indexedRow : _indexedRows) {
			_visitor.visit(project, indexedRow.index, indexedRow.row);
		}
		
		_visitor.end(project);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987261/fstmerge_base_6658682826689125144
=======
public void end(Project project) {
		_visitor.start(project);
		
		Collections.sort(_indexedRows, new Comparator<IndexedRow>() {
			Project project;
			
			Comparator<IndexedRow> init(Project project) {
				this.project = project;
				return this;
			}
			
			public int compare(IndexedRow o1, IndexedRow o2) {
				return SortingRowVisitor.this.compare(project, o1.row, o1.index, o2.row, o2.index);
			}
		}.init(project));
		
		for (IndexedRow indexedRow : _indexedRows) {
			_visitor.visit(project, indexedRow.index, indexedRow.row);
		}
		
		_visitor.end(project);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987261/fstmerge_var2_514099476505473850

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987266/fstmerge_var1_4674536492393478908
@Override
	public boolean visit(Project project, int rowIndex, Row row) {
		_indexedRows.add(new IndexedRow(rowIndex, row));
		return false;
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987266/fstmerge_base_3984951622020782137
=======
public boolean visit(Project project, int rowIndex, Row row) {
		_indexedRows.add(new IndexedRow(rowIndex, row));
		return false;
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987266/fstmerge_var2_2930805483325364853

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987271/fstmerge_var1_6627282672303423119
@Override
	protected Object makeKey(
			Project project, KeyMaker keyMaker, Criterion c, Object o, int index) {
		
		return keyMaker.makeKey(project, (Row) o, index);
	}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987271/fstmerge_base_8814551385525399942
=======
protected Object makeKey(Project project, KeyMaker keyMaker, Criterion c, Object o, int index) {
		return keyMaker.makeKey(project, (Row) o, index);
	}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987271/fstmerge_var2_9215070242933311488

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/sorting/SortingRowVisitor.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987434/fstmerge_var1_3468813524091796088
protected void populateRowsWithMatches(List<Integer> rowIndices) throws Exception {
            Engine engine = new Engine(_project);
            engine.initializeFromJSON(_engineConfig);
            
            Column column = _project.columnModel.getColumnByName(_baseColumnName);
            if (column == null) {
                throw new Exception("No column named " + _baseColumnName);
            }
            
            _cellIndex = column.getCellIndex();
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(_project, new RowVisitor() {
                List<Integer> _rowIndices;
                
                public RowVisitor init(List<Integer> rowIndices) {
                    _rowIndices = rowIndices;
                    return this;
                }
                
                @Override
                public void start(Project project) {
                	// nothing to do
                }
                
                @Override
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    Cell cell = row.getCell(_cellIndex);
                    if (cell != null && cell.recon != null && cell.recon.match != null) {
                        _rowIndices.add(rowIndex);
                    }
                    
                    return false;
                }
            }.init(rowIndices));
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987434/fstmerge_base_2537143826155547610
=======
protected void populateRowsWithMatches(List<Integer> rowIndices) throws Exception {
            Engine engine = new Engine(_project);
            engine.initializeFromJSON(_engineConfig);
            
            Column column = _project.columnModel.getColumnByName(_baseColumnName);
            if (column == null) {
                throw new Exception("No column named " + _baseColumnName);
            }
            
            _cellIndex = column.getCellIndex();
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(_project, new RowVisitor() {
                List<Integer> _rowIndices;
                
                public RowVisitor init(List<Integer> rowIndices) {
                    _rowIndices = rowIndices;
                    return this;
                }
                
                public void start(Project project) {
                	// nothing to do
                }
                
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    Cell cell = row.getCell(_cellIndex);
                    if (cell != null && cell.recon != null && cell.recon.match != null) {
                        _rowIndices.add(rowIndex);
                    }
                    
                    return false;
                }
            }.init(rowIndices));
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987434/fstmerge_var2_3785159263479232038

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/column/ExtendDataOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987476/fstmerge_var1_2060382868154675779
protected RowVisitor createRowVisitor(Project project, List<CellAtRow> cellsAtRows) throws Exception {
        Column column = project.columnModel.getColumnByName(_baseColumnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        return new RowVisitor() {
            int              cellIndex;
            Properties       bindings;
            List<CellAtRow>  cellsAtRows;
            Evaluable        eval;
            
            public RowVisitor init(int cellIndex, Properties bindings, List<CellAtRow> cellsAtRows, Evaluable eval) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellsAtRows = cellsAtRows;
                this.eval = eval;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;

                ExpressionUtils.bind(bindings, row, rowIndex, _baseColumnName, cell);
                
                Object o = eval.evaluate(bindings);
                if (o != null) {
                    if (o instanceof Cell) {
                        newCell = (Cell) o;
                    } else if (o instanceof WrappedCell) {
                        newCell = ((WrappedCell) o).cell;
                    } else {
                        Serializable v = ExpressionUtils.wrapStorable(o);
                        if (ExpressionUtils.isError(v)) {
                            if (_onError == OnError.SetToBlank) {
                                return false;
                            } else if (_onError == OnError.KeepOriginal) {
                                v = cell != null ? cell.value : null;
                            }
                        }
                        
                        if (v != null) {
                            newCell = new Cell(v, null);
                        }
                    }
                }
                
                if (newCell != null) {
                    cellsAtRows.add(new CellAtRow(rowIndex, newCell));
                }
                
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellsAtRows, eval);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987476/fstmerge_base_7226069417878603043
=======
protected RowVisitor createRowVisitor(Project project, List<CellAtRow> cellsAtRows) throws Exception {
        Column column = project.columnModel.getColumnByName(_baseColumnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        return new RowVisitor() {
            int              cellIndex;
            Properties       bindings;
            List<CellAtRow>  cellsAtRows;
            Evaluable        eval;
            
            public RowVisitor init(int cellIndex, Properties bindings, List<CellAtRow> cellsAtRows, Evaluable eval) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellsAtRows = cellsAtRows;
                this.eval = eval;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;

                ExpressionUtils.bind(bindings, row, rowIndex, _baseColumnName, cell);
                
                Object o = eval.evaluate(bindings);
                if (o != null) {
                    if (o instanceof Cell) {
                        newCell = (Cell) o;
                    } else if (o instanceof WrappedCell) {
                        newCell = ((WrappedCell) o).cell;
                    } else {
                        Serializable v = ExpressionUtils.wrapStorable(o);
                        if (ExpressionUtils.isError(v)) {
                            if (_onError == OnError.SetToBlank) {
                                return false;
                            } else if (_onError == OnError.KeepOriginal) {
                                v = cell != null ? cell.value : null;
                            }
                        }
                        
                        if (v != null) {
                            newCell = new Cell(v, null);
                        }
                    }
                }
                
                if (newCell != null) {
                    cellsAtRows.add(new CellAtRow(rowIndex, newCell));
                }
                
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellsAtRows, eval);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987476/fstmerge_var2_5360214178641915363

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/column/ColumnAdditionOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987533/fstmerge_var1_5512984721726267944
@Override
        public void start(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987533/fstmerge_base_6946516453639829483
=======
public void start(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987533/fstmerge_var2_5309708694764896030

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/column/ColumnSplitOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987539/fstmerge_var1_7591638428101923458
@Override
        public void end(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987539/fstmerge_base_2799162526912155251
=======
public void end(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987539/fstmerge_var2_7156347828862392165

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/column/ColumnSplitOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987578/fstmerge_var1_2097291137719233712
protected RowVisitor createRowVisitor(Project project, List<Integer> rowIndices) throws Exception {
        return new RowVisitor() {
            List<Integer> rowIndices;
            
            public RowVisitor init(List<Integer> rowIndices) {
                this.rowIndices = rowIndices;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                rowIndices.add(rowIndex);
                
                return false;
            }
        }.init(rowIndices);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987578/fstmerge_base_8906231379671735154
=======
protected RowVisitor createRowVisitor(Project project, List<Integer> rowIndices) throws Exception {
        return new RowVisitor() {
            List<Integer> rowIndices;
            
            public RowVisitor init(List<Integer> rowIndices) {
                this.rowIndices = rowIndices;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                rowIndices.add(rowIndex);
                
                return false;
            }
        }.init(rowIndices);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987578/fstmerge_var2_5498089071465685896

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowRemovalOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987587/fstmerge_var1_3262315575390365339
protected RowVisitor createRowVisitor(Project project, List<Change> changes) throws Exception {
        return new RowVisitor() {
            List<Change> changes;
            
            public RowVisitor init(List<Change> changes) {
                this.changes = changes;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (row.flagged != _flagged) {
                    RowFlagChange change = new RowFlagChange(rowIndex, _flagged);
                    
                    changes.add(change);
                }
                return false;
            }
        }.init(changes);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987587/fstmerge_base_6209731950731728233
=======
protected RowVisitor createRowVisitor(Project project, List<Change> changes) throws Exception {
        return new RowVisitor() {
            List<Change> changes;
            
            public RowVisitor init(List<Change> changes) {
                this.changes = changes;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (row.flagged != _flagged) {
                    RowFlagChange change = new RowFlagChange(rowIndex, _flagged);
                    
                    changes.add(change);
                }
                return false;
            }
        }.init(changes);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987587/fstmerge_var2_5882309570670365599

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowFlagOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987596/fstmerge_var1_6991182989919278472
protected RowVisitor createRowVisitor(Project project, List<Change> changes) throws Exception {
        return new RowVisitor() {
            List<Change> changes;
            
            public RowVisitor init(List<Change> changes) {
                this.changes = changes;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (row.starred != _starred) {
                    RowStarChange change = new RowStarChange(rowIndex, _starred);
                    
                    changes.add(change);
                }
                return false;
            }
        }.init(changes);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987596/fstmerge_base_1723193292333639196
=======
protected RowVisitor createRowVisitor(Project project, List<Change> changes) throws Exception {
        return new RowVisitor() {
            List<Change> changes;
            
            public RowVisitor init(List<Change> changes) {
                this.changes = changes;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (row.starred != _starred) {
                    RowStarChange change = new RowStarChange(rowIndex, _starred);
                    
                    changes.add(change);
                }
                return false;
            }
        }.init(changes);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987596/fstmerge_var2_589009638495611441

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowStarOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987606/fstmerge_var1_4948712412564458557
@Override
		public void start(Project project) {
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987606/fstmerge_base_3802090133557628692
=======
public void start(Project project) {
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987606/fstmerge_var2_4915680411855873965

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowReorderOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987608/fstmerge_var1_1182124380132687951
@Override
		public void end(Project project) {
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987608/fstmerge_base_1621169423638163536
=======
public void end(Project project) {
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987608/fstmerge_var2_3528643980224020401

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowReorderOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987609/fstmerge_var1_1744748190569212578
@Override
		public boolean visit(Project project, int rowIndex, Row row) {
			_indices.add(rowIndex);
			return false;
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987609/fstmerge_base_412253627848849286
=======
public boolean visit(Project project, int rowIndex, Row row) {
			_indices.add(rowIndex);
			return false;
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987609/fstmerge_var2_4467478424298147932

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowReorderOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987611/fstmerge_var1_535371852503670155
@Override
		public boolean visit(Project project, Record record) {
			for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
				_indices.add(r);
			}
			return false;
		}
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987611/fstmerge_base_336041708512391871
=======
public boolean visit(Project project, Record record) {
			for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
				_indices.add(r);
			}
			return false;
		}
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987611/fstmerge_var2_7611037452664311870

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/row/RowReorderOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987634/fstmerge_var1_3881995443700905904
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int cellIndex;
            List<CellChange> cellChanges;
            Map<Long, Recon> dupReconMap = new HashMap<Long, Recon>();
            long historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null) {
                    long reconID = cell.recon != null ? cell.recon.id : 0;
                    
                    Recon newRecon;
                    if (dupReconMap.containsKey(reconID)) {
                        newRecon = dupReconMap.get(reconID);
                        newRecon.judgmentBatchSize++;
                    } else {
                        newRecon = cell.recon != null ? cell.recon.dup(historyEntryID) : new Recon(historyEntryID);
                        newRecon.match = match;
                        newRecon.matchRank = -1;
                        newRecon.judgment = Judgment.Matched;
                        newRecon.judgmentAction = "mass";
                        newRecon.judgmentBatchSize = 1;
                        
                        dupReconMap.put(reconID, newRecon);
                    }
                    
                    Cell newCell = new Cell(
                        cell.value,
                        newRecon
                    );
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987634/fstmerge_base_4299299442984640406
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int cellIndex;
            List<CellChange> cellChanges;
            Map<Long, Recon> dupReconMap = new HashMap<Long, Recon>();
            long historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null) {
                    long reconID = cell.recon != null ? cell.recon.id : 0;
                    
                    Recon newRecon;
                    if (dupReconMap.containsKey(reconID)) {
                        newRecon = dupReconMap.get(reconID);
                        newRecon.judgmentBatchSize++;
                    } else {
                        newRecon = cell.recon != null ? cell.recon.dup(historyEntryID) : new Recon(historyEntryID);
                        newRecon.match = match;
                        newRecon.matchRank = -1;
                        newRecon.judgment = Judgment.Matched;
                        newRecon.judgmentAction = "mass";
                        newRecon.judgmentBatchSize = 1;
                        
                        dupReconMap.put(reconID, newRecon);
                    }
                    
                    Cell newCell = new Cell(
                        cell.value,
                        newRecon
                    );
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987634/fstmerge_var2_1325555586290127876

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconMatchSpecificTopicOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987650/fstmerge_var1_7336041840223560796
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 _cellIndex;
            List<CellChange>    _cellChanges;
            Recon               _sharedNewRecon = null;
            Map<Long, Recon>    _dupReconMap = new HashMap<Long, Recon>();
            long                _historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                _cellIndex = cellIndex;
                _cellChanges = cellChanges;
                _historyEntryID = historyEntryID;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(_cellIndex);
                if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                	String value = cell.value instanceof String ? 
                			((String) cell.value) : cell.value.toString();
                			
                    if (_similarValue.equals(value)) {
	                    Recon recon = null;
	                    if (_judgment == Judgment.New && _shareNewTopics) {
	                        if (_sharedNewRecon == null) {
	                            _sharedNewRecon = new Recon(_historyEntryID);
	                            _sharedNewRecon.judgment = Judgment.New;
	                            _sharedNewRecon.judgmentBatchSize = 0;
	                            _sharedNewRecon.judgmentAction = "similar";
	                        }
	                        _sharedNewRecon.judgmentBatchSize++;
	                        
	                        recon = _sharedNewRecon;
	                    } else {
	                        if (_dupReconMap.containsKey(cell.recon.id)) {
	                            recon = _dupReconMap.get(cell.recon.id);
	                            recon.judgmentBatchSize++;
	                        } else {
	                            recon = cell.recon.dup(_historyEntryID);
	                            recon.judgmentBatchSize = 1;
	                            recon.matchRank = -1;
	                            recon.judgmentAction = "similar";
	                            
	                            if (_judgment == Judgment.Matched) {
	                                recon.judgment = Recon.Judgment.Matched;
	                                recon.match = _match;
	                                
	                                if (recon.candidates != null) {
	                                    for (int m = 0; m < recon.candidates.size(); m++) {
	                                        if (recon.candidates.get(m).topicGUID.equals(_match.topicGUID)) {
	                                            recon.matchRank = m;
	                                            break;
	                                        }
	                                    }
	                                }
	                            } else if (_judgment == Judgment.New) {
	                                recon.judgment = Recon.Judgment.New;
	                                recon.match = null;
	                            } else if (_judgment == Judgment.None) {
	                                recon.judgment = Recon.Judgment.None;
	                                recon.match = null;
	                            }
	                            
	                            _dupReconMap.put(cell.recon.id, recon);
	                        }
	                    }
	                    
	                    Cell newCell = new Cell(cell.value, recon);
	                    
	                    CellChange cellChange = new CellChange(rowIndex, _cellIndex, cell, newCell);
	                    _cellChanges.add(cellChange);
                    }
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987650/fstmerge_base_9014409783726470018
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 _cellIndex;
            List<CellChange>    _cellChanges;
            Recon               _sharedNewRecon = null;
            Map<Long, Recon>    _dupReconMap = new HashMap<Long, Recon>();
            long                _historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                _cellIndex = cellIndex;
                _cellChanges = cellChanges;
                _historyEntryID = historyEntryID;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(_cellIndex);
                if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                	String value = cell.value instanceof String ? 
                			((String) cell.value) : cell.value.toString();
                			
                    if (_similarValue.equals(value)) {
	                    Recon recon = null;
	                    if (_judgment == Judgment.New && _shareNewTopics) {
	                        if (_sharedNewRecon == null) {
	                            _sharedNewRecon = new Recon(_historyEntryID);
	                            _sharedNewRecon.judgment = Judgment.New;
	                            _sharedNewRecon.judgmentBatchSize = 0;
	                            _sharedNewRecon.judgmentAction = "similar";
	                        }
	                        _sharedNewRecon.judgmentBatchSize++;
	                        
	                        recon = _sharedNewRecon;
	                    } else {
	                        if (_dupReconMap.containsKey(cell.recon.id)) {
	                            recon = _dupReconMap.get(cell.recon.id);
	                            recon.judgmentBatchSize++;
	                        } else {
	                            recon = cell.recon.dup(_historyEntryID);
	                            recon.judgmentBatchSize = 1;
	                            recon.matchRank = -1;
	                            recon.judgmentAction = "similar";
	                            
	                            if (_judgment == Judgment.Matched) {
	                                recon.judgment = Recon.Judgment.Matched;
	                                recon.match = _match;
	                                
	                                if (recon.candidates != null) {
	                                    for (int m = 0; m < recon.candidates.size(); m++) {
	                                        if (recon.candidates.get(m).topicGUID.equals(_match.topicGUID)) {
	                                            recon.matchRank = m;
	                                            break;
	                                        }
	                                    }
	                                }
	                            } else if (_judgment == Judgment.New) {
	                                recon.judgment = Recon.Judgment.New;
	                                recon.match = null;
	                            } else if (_judgment == Judgment.None) {
	                                recon.judgment = Recon.Judgment.None;
	                                recon.match = null;
	                            }
	                            
	                            _dupReconMap.put(cell.recon.id, recon);
	                        }
	                    }
	                    
	                    Cell newCell = new Cell(cell.value, recon);
	                    
	                    CellChange cellChange = new CellChange(rowIndex, _cellIndex, cell, newCell);
	                    _cellChanges.add(cellChange);
                    }
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987650/fstmerge_var2_2646351017323111738

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconJudgeSimilarCellsOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987665/fstmerge_var1_8932230542072520543
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int cellIndex;
            List<CellChange> cellChanges;
            Map<Long, Recon> dupReconMap = new HashMap<Long, Recon>();
            long historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null && cell.recon != null) {
                    Recon newRecon;
                    if (dupReconMap.containsKey(cell.recon.id)) {
                        newRecon = dupReconMap.get(cell.recon.id);
                        newRecon.judgmentBatchSize++;
                    } else {
                        newRecon = cell.recon.dup(historyEntryID);
                        newRecon.match = null;
                        newRecon.matchRank = -1;
                        newRecon.judgment = Judgment.None;
                        newRecon.judgmentAction = "mass";
                        newRecon.judgmentBatchSize = 1;
                        
                        dupReconMap.put(cell.recon.id, newRecon);
                    }
                    
                    Cell newCell = new Cell(cell.value, newRecon);
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987665/fstmerge_base_5973216972109014465
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int cellIndex;
            List<CellChange> cellChanges;
            Map<Long, Recon> dupReconMap = new HashMap<Long, Recon>();
            long historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null && cell.recon != null) {
                    Recon newRecon;
                    if (dupReconMap.containsKey(cell.recon.id)) {
                        newRecon = dupReconMap.get(cell.recon.id);
                        newRecon.judgmentBatchSize++;
                    } else {
                        newRecon = cell.recon.dup(historyEntryID);
                        newRecon.match = null;
                        newRecon.matchRank = -1;
                        newRecon.judgment = Judgment.None;
                        newRecon.judgmentAction = "mass";
                        newRecon.judgmentBatchSize = 1;
                        
                        dupReconMap.put(cell.recon.id, newRecon);
                    }
                    
                    Cell newCell = new Cell(cell.value, newRecon);
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987665/fstmerge_var2_389649576730319980

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconDiscardJudgmentsOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987675/fstmerge_var1_8276517898940783438
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 cellIndex;
            List<CellChange>    cellChanges;
            Map<Long, Recon>    dupReconMap = new HashMap<Long, Recon>();
            long                historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (cellIndex < row.cells.size()) {
                    Cell cell = row.cells.get(cellIndex);
                    if (cell != null && cell.recon != null) {
                        ReconCandidate candidate = cell.recon.getBestCandidate();
                        if (candidate != null) {
                            Recon newRecon;
                            if (dupReconMap.containsKey(cell.recon.id)) {
                                newRecon = dupReconMap.get(cell.recon.id);
                                newRecon.judgmentBatchSize++;
                            } else {
                                newRecon = cell.recon.dup(historyEntryID);
                                newRecon.judgmentBatchSize = 1;
                                newRecon.match = candidate;
                                newRecon.matchRank = 0;
                                newRecon.judgment = Judgment.Matched;
                                newRecon.judgmentAction = "mass";
                                
                                dupReconMap.put(cell.recon.id, newRecon);
                            }
                            Cell newCell = new Cell(
                                cell.value,
                                newRecon
                            );
                            
                            CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                            cellChanges.add(cellChange);
                        }
                    }
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987675/fstmerge_base_4602538055091026567
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 cellIndex;
            List<CellChange>    cellChanges;
            Map<Long, Recon>    dupReconMap = new HashMap<Long, Recon>();
            long                historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                if (cellIndex < row.cells.size()) {
                    Cell cell = row.cells.get(cellIndex);
                    if (cell != null && cell.recon != null) {
                        ReconCandidate candidate = cell.recon.getBestCandidate();
                        if (candidate != null) {
                            Recon newRecon;
                            if (dupReconMap.containsKey(cell.recon.id)) {
                                newRecon = dupReconMap.get(cell.recon.id);
                                newRecon.judgmentBatchSize++;
                            } else {
                                newRecon = cell.recon.dup(historyEntryID);
                                newRecon.judgmentBatchSize = 1;
                                newRecon.match = candidate;
                                newRecon.matchRank = 0;
                                newRecon.judgment = Judgment.Matched;
                                newRecon.judgmentAction = "mass";
                                
                                dupReconMap.put(cell.recon.id, newRecon);
                            }
                            Cell newCell = new Cell(
                                cell.value,
                                newRecon
                            );
                            
                            CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                            cellChanges.add(cellChange);
                        }
                    }
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987675/fstmerge_var2_3168767236898161119

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconMatchBestCandidatesOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987699/fstmerge_var1_6581296702313862528
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 cellIndex;
            List<CellChange>    cellChanges;
            Map<String, Recon>  sharedRecons = new HashMap<String, Recon>();
            long                historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null) {
                    Recon recon = null;
                    if (_shareNewTopics) {
                        String s = cell.value == null ? "" : cell.value.toString();
                        if (sharedRecons.containsKey(s)) {
                            recon = sharedRecons.get(s);
                            recon.judgmentBatchSize++;
                        } else {
                            recon = new Recon(historyEntryID);
                            recon.judgment = Judgment.New;
                            recon.judgmentBatchSize = 1;
                            recon.judgmentAction = "mass";
                            
                            sharedRecons.put(s, recon);
                        }
                    } else {
                        recon = cell.recon == null ? new Recon(historyEntryID) : cell.recon.dup(historyEntryID);
                        recon.match = null;
                        recon.matchRank = -1;
                        recon.judgment = Judgment.New;
                        recon.judgmentBatchSize = 1;
                        recon.judgmentAction = "mass";
                    }
                    
                    Cell newCell = new Cell(cell.value, recon);
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987699/fstmerge_base_6277151755647622005
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        return new RowVisitor() {
            int                 cellIndex;
            List<CellChange>    cellChanges;
            Map<String, Recon>  sharedRecons = new HashMap<String, Recon>();
            long                historyEntryID;
            
            public RowVisitor init(int cellIndex, List<CellChange> cellChanges, long historyEntryID) {
                this.cellIndex = cellIndex;
                this.cellChanges = cellChanges;
                this.historyEntryID = historyEntryID;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                if (cell != null) {
                    Recon recon = null;
                    if (_shareNewTopics) {
                        String s = cell.value == null ? "" : cell.value.toString();
                        if (sharedRecons.containsKey(s)) {
                            recon = sharedRecons.get(s);
                            recon.judgmentBatchSize++;
                        } else {
                            recon = new Recon(historyEntryID);
                            recon.judgment = Judgment.New;
                            recon.judgmentBatchSize = 1;
                            recon.judgmentAction = "mass";
                            
                            sharedRecons.put(s, recon);
                        }
                    } else {
                        recon = cell.recon == null ? new Recon(historyEntryID) : cell.recon.dup(historyEntryID);
                        recon.match = null;
                        recon.matchRank = -1;
                        recon.judgment = Judgment.New;
                        recon.judgmentBatchSize = 1;
                        recon.judgmentAction = "mass";
                    }
                    
                    Cell newCell = new Cell(cell.value, recon);
                    
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), cellChanges, historyEntryID);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987699/fstmerge_var2_5550204531874319662

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconMarkNewTopicsOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987721/fstmerge_var1_7727191820060797293
protected void populateEntries() throws Exception {
            Engine engine = new Engine(_project);
            engine.initializeFromJSON(_engineConfig);
            
            Column column = _project.columnModel.getColumnByName(_columnName);
            if (column == null) {
                throw new Exception("No column named " + _columnName);
            }
            
            _entries = new ArrayList<ReconEntry>(_project.rows.size());
            _cellIndex = column.getCellIndex();
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(_project, new RowVisitor() {
                @Override
                public void start(Project project) {
                	// nothing to do
                }
                
                @Override
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    if (_cellIndex < row.cells.size()) {
                        Cell cell = row.cells.get(_cellIndex);
                        if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                            _entries.add(new ReconEntry(rowIndex, cell));
                        }
                    }
                    return false;
                }
            });
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987721/fstmerge_base_2254061481983691724
=======
protected void populateEntries() throws Exception {
            Engine engine = new Engine(_project);
            engine.initializeFromJSON(_engineConfig);
            
            Column column = _project.columnModel.getColumnByName(_columnName);
            if (column == null) {
                throw new Exception("No column named " + _columnName);
            }
            
            _entries = new ArrayList<ReconEntry>(_project.rows.size());
            _cellIndex = column.getCellIndex();
            
            FilteredRows filteredRows = engine.getAllFilteredRows();
            filteredRows.accept(_project, new RowVisitor() {
                public void start(Project project) {
                	// nothing to do
                }
                
                public void end(Project project) {
                	// nothing to do
                }
                
                public boolean visit(Project project, int rowIndex, Row row) {
                    if (_cellIndex < row.cells.size()) {
                        Cell cell = row.cells.get(_cellIndex);
                        if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                            _entries.add(new ReconEntry(rowIndex, cell));
                        }
                    }
                    return false;
                }
            });
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987721/fstmerge_var2_5628330712929090733

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/recon/ReconOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987771/fstmerge_var1_1326036533074191082
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        return new RowVisitor() {
            int                 cellIndex;
            Properties             bindings;
            List<CellChange>     cellChanges;
            Evaluable             eval;
            
            public RowVisitor init(int cellIndex, Properties bindings, List<CellChange> cellChanges, Evaluable eval) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellChanges = cellChanges;
                this.eval = eval;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;
                
                Object oldValue = cell != null ? cell.value : null;

                ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
                
                Object o = eval.evaluate(bindings);
                if (o == null) {
                	if (oldValue != null) {
                        CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, null);
                        cellChanges.add(cellChange);
                	}
                } else {
                    if (o instanceof Cell) {
                        newCell = (Cell) o;
                    } else if (o instanceof WrappedCell) {
                        newCell = ((WrappedCell) o).cell;
                    } else {
                        Serializable newValue = ExpressionUtils.wrapStorable(o);
                        if (ExpressionUtils.isError(newValue)) {
                            if (_onError == OnError.KeepOriginal) {
                                return false;
                            } else if (_onError == OnError.SetToBlank) {
                                newValue = null;
                            }
                        }
                        
                        if (!ExpressionUtils.sameValue(oldValue, newValue)) {
                            newCell = new Cell(newValue, (cell != null) ? cell.recon : null);
                            
                            if (_repeat) {
                                for (int i = 0; i < _repeatCount; i++) {
                                    ExpressionUtils.bind(bindings, row, rowIndex, _columnName, newCell);
                                    
                                    newValue = ExpressionUtils.wrapStorable(eval.evaluate(bindings));
                                    if (ExpressionUtils.isError(newValue)) {
                                        break;
                                    } else if (ExpressionUtils.sameValue(newCell.value, newValue)) {
                                        break;
                                    }
                                    
                                    newCell = new Cell(newValue, newCell.recon);
                                }
                            }
                        }
                    }
                    
                    if (newCell != null) {
                        CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                        cellChanges.add(cellChange);
                    }
                }
                
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellChanges, eval);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987771/fstmerge_base_8326093571969663335
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        return new RowVisitor() {
            int                 cellIndex;
            Properties             bindings;
            List<CellChange>     cellChanges;
            Evaluable             eval;
            
            public RowVisitor init(int cellIndex, Properties bindings, List<CellChange> cellChanges, Evaluable eval) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellChanges = cellChanges;
                this.eval = eval;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;
                
                Object oldValue = cell != null ? cell.value : null;

                ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
                
                Object o = eval.evaluate(bindings);
                if (o == null) {
                	if (oldValue != null) {
                        CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, null);
                        cellChanges.add(cellChange);
                	}
                } else {
                    if (o instanceof Cell) {
                        newCell = (Cell) o;
                    } else if (o instanceof WrappedCell) {
                        newCell = ((WrappedCell) o).cell;
                    } else {
                        Serializable newValue = ExpressionUtils.wrapStorable(o);
                        if (ExpressionUtils.isError(newValue)) {
                            if (_onError == OnError.KeepOriginal) {
                                return false;
                            } else if (_onError == OnError.SetToBlank) {
                                newValue = null;
                            }
                        }
                        
                        if (!ExpressionUtils.sameValue(oldValue, newValue)) {
                            newCell = new Cell(newValue, (cell != null) ? cell.recon : null);
                            
                            if (_repeat) {
                                for (int i = 0; i < _repeatCount; i++) {
                                    ExpressionUtils.bind(bindings, row, rowIndex, _columnName, newCell);
                                    
                                    newValue = ExpressionUtils.wrapStorable(eval.evaluate(bindings));
                                    if (ExpressionUtils.isError(newValue)) {
                                        break;
                                    } else if (ExpressionUtils.sameValue(newCell.value, newValue)) {
                                        break;
                                    }
                                    
                                    newCell = new Cell(newValue, newCell.recon);
                                }
                            }
                        }
                    }
                    
                    if (newCell != null) {
                        CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                        cellChanges.add(cellChange);
                    }
                }
                
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellChanges, eval);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987771/fstmerge_var2_1489378511046461723

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/cell/TextTransformOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987788/fstmerge_var1_9115643888535882766
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        Map<String, Serializable> fromTo = new HashMap<String, Serializable>();
        Serializable fromBlankTo = null;
        Serializable fromErrorTo = null;
        
        for (Edit edit : _edits) {
            for (String s : edit.from) {
                fromTo.put(s, edit.to);
            }
            
            // the last edit wins
            if (edit.fromBlank) {
                fromBlankTo = edit.to;
            }
            if (edit.fromError) {
                fromErrorTo = edit.to;
            }
        }
        
        return new RowVisitor() {
            int                         cellIndex;
            Properties                  bindings;
            List<CellChange>            cellChanges;
            Evaluable                   eval;
            
            Map<String, Serializable>   fromTo;
            Serializable                fromBlankTo;
            Serializable                fromErrorTo;
            
            public RowVisitor init(
                int cellIndex, 
                Properties bindings, 
                List<CellChange> cellChanges, 
                Evaluable eval, 
                Map<String, Serializable> fromTo,
                Serializable fromBlankTo,
                Serializable fromErrorTo
            ) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellChanges = cellChanges;
                this.eval = eval;
                this.fromTo = fromTo;
                this.fromBlankTo = fromBlankTo;
                this.fromErrorTo = fromErrorTo;
                return this;
            }
            
            @Override
            public void start(Project project) {
            	// nothing to do
            }
            
            @Override
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;
                
                ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
                
                Object v = eval.evaluate(bindings);
                if (ExpressionUtils.isError(v)) {
                    if (fromErrorTo != null) {
                        newCell = new Cell(fromErrorTo, (cell != null) ? cell.recon : null);
                    }
                } else if (ExpressionUtils.isNonBlankData(v)) {
                    String from = v.toString();
                    Serializable to = fromTo.get(from);
                    if (to != null) {
                        newCell = new Cell(to, (cell != null) ? cell.recon : null);
                    }
                } else {
                    if (fromBlankTo != null) {
                        newCell = new Cell(fromBlankTo, (cell != null) ? cell.recon : null);
                    }
                }
                
                if (newCell != null) {
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellChanges, eval, fromTo, fromBlankTo, fromErrorTo);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987788/fstmerge_base_5092246928711013772
=======
protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        
        Evaluable eval = MetaParser.parse(_expression);
        Properties bindings = ExpressionUtils.createBindings(project);
        
        Map<String, Serializable> fromTo = new HashMap<String, Serializable>();
        Serializable fromBlankTo = null;
        Serializable fromErrorTo = null;
        
        for (Edit edit : _edits) {
            for (String s : edit.from) {
                fromTo.put(s, edit.to);
            }
            
            // the last edit wins
            if (edit.fromBlank) {
                fromBlankTo = edit.to;
            }
            if (edit.fromError) {
                fromErrorTo = edit.to;
            }
        }
        
        return new RowVisitor() {
            int                         cellIndex;
            Properties                  bindings;
            List<CellChange>            cellChanges;
            Evaluable                   eval;
            
            Map<String, Serializable>   fromTo;
            Serializable                fromBlankTo;
            Serializable                fromErrorTo;
            
            public RowVisitor init(
                int cellIndex, 
                Properties bindings, 
                List<CellChange> cellChanges, 
                Evaluable eval, 
                Map<String, Serializable> fromTo,
                Serializable fromBlankTo,
                Serializable fromErrorTo
            ) {
                this.cellIndex = cellIndex;
                this.bindings = bindings;
                this.cellChanges = cellChanges;
                this.eval = eval;
                this.fromTo = fromTo;
                this.fromBlankTo = fromBlankTo;
                this.fromErrorTo = fromErrorTo;
                return this;
            }
            
            public void start(Project project) {
            	// nothing to do
            }
            
            public void end(Project project) {
            	// nothing to do
            }
            
            public boolean visit(Project project, int rowIndex, Row row) {
                Cell cell = row.getCell(cellIndex);
                Cell newCell = null;
                
                ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
                
                Object v = eval.evaluate(bindings);
                if (ExpressionUtils.isError(v)) {
                    if (fromErrorTo != null) {
                        newCell = new Cell(fromErrorTo, (cell != null) ? cell.recon : null);
                    }
                } else if (ExpressionUtils.isNonBlankData(v)) {
                    String from = v.toString();
                    Serializable to = fromTo.get(from);
                    if (to != null) {
                        newCell = new Cell(to, (cell != null) ? cell.recon : null);
                    }
                } else {
                    if (fromBlankTo != null) {
                        newCell = new Cell(fromBlankTo, (cell != null) ? cell.recon : null);
                    }
                }
                
                if (newCell != null) {
                    CellChange cellChange = new CellChange(rowIndex, cellIndex, cell, newCell);
                    cellChanges.add(cellChange);
                }
                return false;
            }
        }.init(column.getCellIndex(), bindings, cellChanges, eval, fromTo, fromBlankTo, fromErrorTo);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987788/fstmerge_var2_7319469384919434648

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/operations/cell/MassEditOperation.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987991/fstmerge_var1_2381723913519146159
@Override
    public void flush() throws IOException {
        if (lastRootNode != null) {
            lastRootNode.write(null, null, null);
            lastRootNode = null;
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987991/fstmerge_base_7371350837241217385
=======
public void flush() throws IOException {
        if (lastRootNode != null) {
            lastRootNode.write(null, null, null);
            lastRootNode = null;
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730987991/fstmerge_var2_2819300617789107617

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/protograph/transpose/TripleLoaderTransposedNodeFactory.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988059/fstmerge_var1_3850007467965211052
@Override
    public void flush() throws IOException {
    	try {
        	JSONWriter jsonWriter = new JSONWriter(writer);
        	
        	jsonWriter.array();
        	for (JSONObject obj : rootObjects) {
        		jsonWriter.value(obj);
        	}
        	jsonWriter.endArray();
        	
		} catch (JSONException e) {
			e.printStackTrace();
		}
    	writer.flush();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988059/fstmerge_base_8657456290877006278
=======
public void flush() throws IOException {
    	try {
        	JSONWriter jsonWriter = new JSONWriter(writer);
        	
        	jsonWriter.array();
        	for (JSONObject obj : rootObjects) {
        		jsonWriter.value(obj);
        	}
        	jsonWriter.endArray();
        	
		} catch (JSONException e) {
			e.printStackTrace();
		}
    	writer.flush();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988059/fstmerge_var2_731391461949050295

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/protograph/transpose/MqlwriteLikeTransposedNodeFactory.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988174/fstmerge_var1_7601131221791275072
static public void transpose(
        Project                 project,
        FilteredRows			filteredRows,
        Protograph              protograph,
        Node                    rootNode,
        TransposedNodeFactory   nodeFactory,
        int                     limit
    ) {
        Context rootContext = new Context(rootNode, null, null, limit);
        
    	filteredRows.accept(project, new RowVisitor() {
    		Context 				rootContext;
            Protograph              protograph;
            Node                    rootNode;
            TransposedNodeFactory   nodeFactory;
    		
			@Override
			public boolean visit(Project project, int rowIndex, Row row) {
				if (rootContext.limit <= 0 || rootContext.count < rootContext.limit) {
					descend(project, protograph, nodeFactory, row, rootNode, rootContext);
				}
				
	            if (rootContext.limit > 0 && rootContext.count > rootContext.limit) {
	                return true;
	            }
				return false;
			}
			
			@Override
			public void start(Project project) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void end(Project project) {
				// TODO Auto-generated method stub
				
			}
			
			public RowVisitor init(
				Context 				rootContext,
	            Protograph              protograph,
	            Node                    rootNode,
	            TransposedNodeFactory   nodeFactory
			) {
				this.rootContext = rootContext;
				this.protograph = protograph;
				this.rootNode = rootNode;
				this.nodeFactory = nodeFactory;
				
				return this;
			}
		}.init(rootContext, protograph, rootNode, nodeFactory));
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988174/fstmerge_base_9023983483928687432
=======
static public void transpose(
        Project                 project,
        FilteredRows			filteredRows,
        Protograph              protograph,
        Node                    rootNode,
        TransposedNodeFactory   nodeFactory,
        int                     limit
    ) {
        Context rootContext = new Context(rootNode, null, null, limit);
        
    	filteredRows.accept(project, new RowVisitor() {
    		Context 				rootContext;
            Protograph              protograph;
            Node                    rootNode;
            TransposedNodeFactory   nodeFactory;
    		
			public boolean visit(Project project, int rowIndex, Row row) {
				if (rootContext.limit <= 0 || rootContext.count < rootContext.limit) {
					descend(project, protograph, nodeFactory, row, rootNode, rootContext);
				}
				
	            if (rootContext.limit > 0 && rootContext.count > rootContext.limit) {
	                return true;
	            }
				return false;
			}
			
			public void start(Project project) {
				// TODO Auto-generated method stub
				
			}
			
			public void end(Project project) {
				// TODO Auto-generated method stub
				
			}
			
			public RowVisitor init(
				Context 				rootContext,
	            Protograph              protograph,
	            Node                    rootNode,
	            TransposedNodeFactory   nodeFactory
			) {
				this.rootContext = rootContext;
				this.protograph = protograph;
				this.rootNode = rootNode;
				this.nodeFactory = nodeFactory;
				
				return this;
			}
		}.init(rootContext, protograph, rootNode, nodeFactory));
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988174/fstmerge_var2_8448295007133923943

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/protograph/transpose/Transposer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988208/fstmerge_var1_8060047220581573091
@Override
        public void start(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988208/fstmerge_base_2963409939050585584
=======
public void start(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988208/fstmerge_var2_8187605789209593520

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988213/fstmerge_var1_894619804714144823
@Override
        public void end(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988213/fstmerge_base_9077215062379346018
=======
public void end(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988213/fstmerge_var2_3960661242073303992

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988231/fstmerge_var1_7912163848279810198
@Override
        public void start(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988231/fstmerge_base_6452274767870038449
=======
public void start(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988231/fstmerge_var2_8494610653656019763

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988243/fstmerge_var1_8115433695426430981
@Override
        public void end(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988243/fstmerge_base_3945044394126243742
=======
public void end(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988243/fstmerge_var2_6562601176557302627

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/knn/kNNClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988283/fstmerge_var1_8090034319293777240
@Override
        public void start(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988283/fstmerge_base_505914135208787845
=======
public void start(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988283/fstmerge_var2_7755808980653442786

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/binning/BinningClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988288/fstmerge_var1_3011926324754713555
@Override
        public void end(Project project) {
        	// nothing to do
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988288/fstmerge_base_2952139960465490808
=======
public void end(Project project) {
        	// nothing to do
        }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988288/fstmerge_var2_5283603451638751643

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/src/com/metaweb/gridworks/clustering/binning/BinningClusterer.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988787/fstmerge_var1_8836904126572535935
public List<String> detectRecordElementWrapper(XMLStreamReader parser, String tag) throws XMLStreamException{
        return super.detectRecordElement(parser, tag);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988787/fstmerge_base_572617600590545480
=======
public List<String> detectRecordElementWrapper(XMLStreamReader parser, String tag) throws XMLStreamException{
        return super.detectRecordElement(parser, tag);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988787/fstmerge_var2_3954364102100895705

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesStub.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988791/fstmerge_var1_1280996512928427202
public void ProcessSubRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup columnGroup, ImportRecord record) throws XMLStreamException{
        super.processSubRecord(project, parser, columnGroup, record);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988791/fstmerge_base_5551088184847064733
=======
public void ProcessSubRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup columnGroup, ImportRecord record) throws XMLStreamException{
        super.processSubRecord(project, parser, columnGroup, record);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988791/fstmerge_var2_3792119779822764618

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesStub.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988795/fstmerge_var1_7887115454207367536
public void findRecordWrapper(Project project, XMLStreamReader parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.findRecord(project, parser, recordPath, pathIndex, rootColumnGroup);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988795/fstmerge_base_8913967641101263607
=======
public void findRecordWrapper(Project project, XMLStreamReader parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.findRecord(project, parser, recordPath, pathIndex, rootColumnGroup);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988795/fstmerge_var2_5985430164397957502

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesStub.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988800/fstmerge_var1_4711370914538816934
public void processRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.processRecord(project, parser, rootColumnGroup);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988800/fstmerge_base_2985128567935716890
=======
public void processRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.processRecord(project, parser, rootColumnGroup);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988800/fstmerge_var2_943163845618057471

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesStub.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988805/fstmerge_var1_3378591631288360071
public void addCellWrapper(Project project, ImportColumnGroup columnGroup, ImportRecord record, String columnLocalName, String text, int commonStartingRowIndex){
        super.addCell(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988805/fstmerge_base_1388735185794082243
=======
public void addCellWrapper(Project project, ImportColumnGroup columnGroup, ImportRecord record, String columnLocalName, String text, int commonStartingRowIndex){
        super.addCell(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988805/fstmerge_var2_6912687710292975536

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesStub.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988810/fstmerge_var1_1352851113776324376
@BeforeMethod
    public void SetUp(){
        SUT = new RdfTripleImporter();
        project = new Project();
        options = new Properties();
        options.put("base-url", "http://rdf.freebase.com");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988810/fstmerge_base_6447551425548760577
=======
@BeforeMethod
    public void SetUp(){
        SUT = new RdfTripleImporter();
        project = new Project();
        options = new Properties();
        options.put("base-url", "http://rdf.freebase.com");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988810/fstmerge_var2_7803774553375612186

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/RdfTripleImporterTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988815/fstmerge_var1_1172514512273498650
@Test(enabled=false)
    public void CanParseSingleLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988815/fstmerge_base_4550089761002279502
=======
@Test(enabled=false)
    public void CanParseSingleLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988815/fstmerge_var2_7458161717812188541

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/RdfTripleImporterTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988820/fstmerge_var1_5752240796804888607
@Test
    public void CanParseMultiLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.under_the_red_sky>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");

        //rows
        Assert.assertEquals(project.rows.size(), 3);
        
        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);

        //row2
        Assert.assertEquals(project.rows.get(2).cells.size(), 2);
        Assert.assertNull(project.rows.get(2).cells.get(0));
        Assert.assertEquals(project.rows.get(2).cells.get(1).value, "http://rdf.freebase.com/ns/en.under_the_red_sky"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].cellIndex, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988820/fstmerge_base_4230403000815613341
=======
@Test
    public void CanParseMultiLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.under_the_red_sky>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");

        //rows
        Assert.assertEquals(project.rows.size(), 3);
        
        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);

        //row2
        Assert.assertEquals(project.rows.get(2).cells.size(), 2);
        Assert.assertNull(project.rows.get(2).cells.get(0));
        Assert.assertEquals(project.rows.get(2).cells.get(1).value, "http://rdf.freebase.com/ns/en.under_the_red_sky"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].cellIndex, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988820/fstmerge_var2_8029304601784605533

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/RdfTripleImporterTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988825/fstmerge_var1_5815112681932848070
@Test
    public void CanParseMultiLineMultiPredicatesTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.genre> <http://rdf.freebase.com/ns/en.folk_rock>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "http://rdf.freebase.com/ns/music.artist.genre");
        
        //rows
        Assert.assertEquals(project.rows.size(), 2);

        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "http://rdf.freebase.com/ns/en.folk_rock");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home");
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988825/fstmerge_base_443005621574290636
=======
@Test
    public void CanParseMultiLineMultiPredicatesTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.genre> <http://rdf.freebase.com/ns/en.folk_rock>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "http://rdf.freebase.com/ns/music.artist.genre");
        
        //rows
        Assert.assertEquals(project.rows.size(), 2);

        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "http://rdf.freebase.com/ns/en.folk_rock");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home");
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988825/fstmerge_var2_6858602370199521443

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/RdfTripleImporterTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988829/fstmerge_var1_195805110237238235
@Test
    public void CanParseTripleWithValue(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/common.topic.alias> \"Robert Zimmerman\"@en.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/common.topic.alias");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "\"Robert Zimmerman\"@en");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988829/fstmerge_base_3334803040749913505
=======
@Test
    public void CanParseTripleWithValue(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/common.topic.alias> \"Robert Zimmerman\"@en.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/common.topic.alias");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "\"Robert Zimmerman\"@en");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988829/fstmerge_var2_7447602984761568883

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/RdfTripleImporterTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988937/fstmerge_var1_3294289114845323475
@BeforeMethod
    public void SetUp(){
        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel("trace"));
        SUT = new XmlImportUtilitiesStub();
        project = new Project();
        columnGroup = new ImportColumnGroup();
        record = new ImportRecord();
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988937/fstmerge_base_8969504710543364746
=======
@BeforeMethod
    public void SetUp(){
        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel("trace"));
        SUT = new XmlImportUtilitiesStub();
        project = new Project();
        columnGroup = new ImportColumnGroup();
        record = new ImportRecord();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988937/fstmerge_var2_385761164333762134

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988940/fstmerge_var1_8118682572585945514
@AfterMethod
    public void TearDown() throws IOException{
        SUT = null;
        project = null;
        parser = null;
        columnGroup = null;
        record = null;
        if(inputStream != null)
           inputStream.close();
        inputStream = null;
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988940/fstmerge_base_255050452993809187
=======
@AfterMethod
    public void TearDown() throws IOException{
        SUT = null;
        project = null;
        parser = null;
        columnGroup = null;
        record = null;
        if(inputStream != null)
           inputStream.close();
        inputStream = null;
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988940/fstmerge_var2_6216162598716648141

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988942/fstmerge_var1_2379444371000068849
@Test
    public void detectPathFromTagTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "library";

        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 1);
        Assert.assertEquals(response[0], "library");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988942/fstmerge_base_3579119175485988846
=======
@Test
    public void detectPathFromTagTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "library";

        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 1);
        Assert.assertEquals(response[0], "library");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988942/fstmerge_var2_9039114381688643

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988947/fstmerge_var1_3447396431279992418
@Test
    public void detectPathFromTagWithNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "book";
        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 2);
        Assert.assertEquals(response[0], "library");
        Assert.assertEquals(response[1], "book");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988947/fstmerge_base_750433514610129787
=======
@Test
    public void detectPathFromTagWithNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "book";
        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 2);
        Assert.assertEquals(response[0], "library");
        Assert.assertEquals(response[1], "book");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988947/fstmerge_var2_4442159782646627068

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988951/fstmerge_var1_847090828201835235
@Test
    public void detectRecordElementTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="library";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 1);
        Assert.assertEquals(response.get(0), "library");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988951/fstmerge_base_7431757954629219002
=======
@Test
    public void detectRecordElementTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="library";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 1);
        Assert.assertEquals(response.get(0), "library");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988951/fstmerge_var2_503822129325232490

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988953/fstmerge_var1_2563574552726887978
@Test
    public void detectRecordElementCanHandleWithNestedElements(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="book";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 2);
        Assert.assertEquals(response.get(0), "library");
        Assert.assertEquals(response.get(1), "book");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988953/fstmerge_base_133213024599926454
=======
@Test
    public void detectRecordElementCanHandleWithNestedElements(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="book";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 2);
        Assert.assertEquals(response.get(0), "library");
        Assert.assertEquals(response.get(1), "book");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988953/fstmerge_var2_352762485409060313

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988954/fstmerge_var1_3179130335201129802
@Test
    public void detectRecordElementIsNullForUnfoundTag(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNull(response);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988954/fstmerge_base_3705708194779004986
=======
@Test
    public void detectRecordElementIsNullForUnfoundTag(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNull(response);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988954/fstmerge_var2_6574498428278395446

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988956/fstmerge_var1_9120700209252406703
@Test
    public void detectRecordElementRegressionTest(){
        loadSampleXml();

        String[] path = XmlImportUtilitiesStub.detectRecordElement(inputStream);
        Assert.assertNotNull(path);
        Assert.assertEquals(path.length, 2);
        Assert.assertEquals(path[0], "library");
        Assert.assertEquals(path[1], "book");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988956/fstmerge_base_7445244502010869148
=======
@Test
    public void detectRecordElementRegressionTest(){
        loadSampleXml();

        String[] path = XmlImportUtilitiesStub.detectRecordElement(inputStream);
        Assert.assertNotNull(path);
        Assert.assertEquals(path.length, 2);
        Assert.assertEquals(path[0], "library");
        Assert.assertEquals(path[1], "book");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988956/fstmerge_var2_2804730332701752892

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988957/fstmerge_var1_1867847783716428616
@Test
    public void importXmlTest(){
        loadSampleXml();

        String[] recordPath = new String[]{"library","book"};
        XmlImportUtilitiesStub.importXml(inputStream, project, recordPath, columnGroup );

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988957/fstmerge_base_1637272033712112324
=======
@Test
    public void importXmlTest(){
        loadSampleXml();

        String[] recordPath = new String[]{"library","book"};
        XmlImportUtilitiesStub.importXml(inputStream, project, recordPath, columnGroup );

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988957/fstmerge_var2_655809359850697370

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988959/fstmerge_var1_1401685581432782066
@Test
    public void createColumnsFromImportTest(){

        ImportColumnGroup columnGroup = new ImportColumnGroup();
        ImportColumn ic1 = new ImportColumn();
        ic1.name = "hello";
        ImportColumn ic2 = new ImportColumn();
        ic2.name = "world";
        ImportColumnGroup subGroup = new ImportColumnGroup();
        ImportColumn ic3 = new ImportColumn();
        ic3.name = "foo";
        ImportColumn ic4 = new ImportColumn();
        ic4.name = "bar";
        subGroup.columns.put("c", ic3);
        subGroup.columns.put("d", ic4);
        columnGroup.columns.put("a", ic1);
        columnGroup.columns.put("b", ic2);
        columnGroup.subgroups.put("e", subGroup);
        XmlImportUtilitiesStub.createColumnsFromImport(project, columnGroup);
        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 4, 0);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "world");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "hello");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "bar");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "foo");
        Assert.assertEquals(project.columnModel.columnGroups.get(0).keyColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).startColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).columnSpan, 2);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988959/fstmerge_base_7760308246187894983
=======
@Test
    public void createColumnsFromImportTest(){

        ImportColumnGroup columnGroup = new ImportColumnGroup();
        ImportColumn ic1 = new ImportColumn();
        ic1.name = "hello";
        ImportColumn ic2 = new ImportColumn();
        ic2.name = "world";
        ImportColumnGroup subGroup = new ImportColumnGroup();
        ImportColumn ic3 = new ImportColumn();
        ic3.name = "foo";
        ImportColumn ic4 = new ImportColumn();
        ic4.name = "bar";
        subGroup.columns.put("c", ic3);
        subGroup.columns.put("d", ic4);
        columnGroup.columns.put("a", ic1);
        columnGroup.columns.put("b", ic2);
        columnGroup.subgroups.put("e", subGroup);
        XmlImportUtilitiesStub.createColumnsFromImport(project, columnGroup);
        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 4, 0);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "world");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "hello");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "bar");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "foo");
        Assert.assertEquals(project.columnModel.columnGroups.get(0).keyColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).startColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).columnSpan, 2);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988959/fstmerge_var2_7582904694393033196

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988960/fstmerge_var1_372208862003051746
@Test
    public void findRecordTest(){
        loadSampleXml();
        createParser();
        ParserSkip();

        String[] recordPath = new String[]{"library","book"};
        int pathIndex = 0;

        try {
            SUT.findRecordWrapper(project, parser, recordPath, pathIndex, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988960/fstmerge_base_2760533445545743002
=======
@Test
    public void findRecordTest(){
        loadSampleXml();
        createParser();
        ParserSkip();

        String[] recordPath = new String[]{"library","book"};
        int pathIndex = 0;

        try {
            SUT.findRecordWrapper(project, parser, recordPath, pathIndex, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988960/fstmerge_var2_5676141315443857320

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988962/fstmerge_var1_3599195559181260496
@Test
    public void processRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");

    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988962/fstmerge_base_8050280383893399336
=======
@Test
    public void processRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");

    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988962/fstmerge_var2_837942833796581557

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988963/fstmerge_var1_786553245300556789
@Test
    public void processRecordTestDuplicateColumns(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><author>author2</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 2);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 3);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        row = project.rows.get(1);
        Assert.assertEquals(row.getCell(1).value, "author2");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988963/fstmerge_base_7162745272732078309
=======
@Test
    public void processRecordTestDuplicateColumns(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><author>author2</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 2);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 3);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        row = project.rows.get(1);
        Assert.assertEquals(row.getCell(1).value, "author2");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988963/fstmerge_var2_2020026488406642733

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988965/fstmerge_var1_3262442905821843930
@Test
    public void processRecordTestNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author><author-name>author1</author-name><author-dob>a date</author-dob></author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        Assert.assertNotNull(row.getCell(2));
        Assert.assertEquals(row.getCell(2).value, "a date");
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988965/fstmerge_base_71825842835709885
=======
@Test
    public void processRecordTestNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author><author-name>author1</author-name><author-dob>a date</author-dob></author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        Assert.assertNotNull(row.getCell(2));
        Assert.assertEquals(row.getCell(2).value, "a date");
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988965/fstmerge_var2_6352942882797420623

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988966/fstmerge_var1_4999656458618311230
@Test(groups={"broken"})
    public void processSubRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988966/fstmerge_base_2979368596604630903
=======
@Test(groups={"broken"})
    public void processSubRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988966/fstmerge_var2_8522125957089969350

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988968/fstmerge_var1_8959937836435161323
@Test(groups={"broken"})
    public void addCellTest(){
        String columnLocalName = "author";
        String text = "Author1, The";
        int commonStartingRowIndex = 0;
        project.rows.add(new Row(0));
        SUT.addCellWrapper(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);

        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988968/fstmerge_base_2987483177144594755
=======
@Test(groups={"broken"})
    public void addCellTest(){
        String columnLocalName = "author";
        String text = "Author1, The";
        int commonStartingRowIndex = 0;
        project.rows.add(new Row(0));
        SUT.addCellWrapper(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);

        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988968/fstmerge_var2_6096955330199333716

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988987/fstmerge_var1_3365493294117872896
public void loadSampleXml(){
        loadXml( XmlImporterTests.getSample() );
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988987/fstmerge_base_3939093721518158369
=======
public void loadSampleXml(){
        loadXml( XmlImporterTests.getSample() );
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988987/fstmerge_var2_2925783681465383405

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988993/fstmerge_var1_4835640681266985302
public void loadXml(String xml){
        try {
            inputStream = new ByteArrayInputStream( xml.getBytes( "UTF-8" ) );
        } catch (UnsupportedEncodingException e1) {
            Assert.fail();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988993/fstmerge_base_4077702120876768739
=======
public void loadXml(String xml){
        try {
            inputStream = new ByteArrayInputStream( xml.getBytes( "UTF-8" ) );
        } catch (UnsupportedEncodingException e1) {
            Assert.fail();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988993/fstmerge_var2_8652710951375481075

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988998/fstmerge_var1_493634020637753344
public void ParserSkip(){
        try {
            parser.next(); //move parser forward once e.g. skip the START_DOCUMENT parser event
        } catch (XMLStreamException e1) {
            Assert.fail();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988998/fstmerge_base_733129553759796848
=======
public void ParserSkip(){
        try {
            parser.next(); //move parser forward once e.g. skip the START_DOCUMENT parser event
        } catch (XMLStreamException e1) {
            Assert.fail();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730988998/fstmerge_var2_4522157622567711619

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989004/fstmerge_var1_8853385624197922445
public void createParser(){
        try {
            parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);
        } catch (XMLStreamException e1) {
            Assert.fail();
        } catch (FactoryConfigurationError e1) {
            Assert.fail();
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989004/fstmerge_base_8294101042733646849
=======
public void createParser(){
        try {
            parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);
        } catch (XMLStreamException e1) {
            Assert.fail();
        } catch (FactoryConfigurationError e1) {
            Assert.fail();
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989004/fstmerge_var2_7104369096768554644

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/XmlImportUtilitiesTests.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989009/fstmerge_var1_7654823022240988701
public static void AssertGridCreated(Project project, int numCols, int numRows){
        Assert.assertNotNull(project);
        Assert.assertNotNull(project.columnModel);
        Assert.assertNotNull(project.columnModel.columns);
        Assert.assertEquals(project.columnModel.columns.size(), numCols);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), numRows);
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989009/fstmerge_base_1119705124702871033
=======
public static void AssertGridCreated(Project project, int numCols, int numRows){
        Assert.assertNotNull(project);
        Assert.assertNotNull(project.columnModel);
        Assert.assertNotNull(project.columnModel.columns);
        Assert.assertEquals(project.columnModel.columns.size(), numCols);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), numRows);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989009/fstmerge_var2_2834795822848592875

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/TestTools.java
Conflict type: SameSignatureCM
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989014/fstmerge_var1_8124253566126817927
public static void PrintProject(Project project){
        //some quick and dirty debugging
        StringBuilder sb = new StringBuilder();
        for(Column c : project.columnModel.columns){
            sb.append(c.getName());
            sb.append("; ");
        }
        logger.info(sb.toString());
        for(Row r : project.rows){
            sb = new StringBuilder();
            for(int i = 0; i < r.cells.size(); i++){
                Cell c = r.getCell(i);
                if(c != null){
                   sb.append(c.value);
                   sb.append("; ");
                }else{
                    sb.append("null; ");
                }
            }
            logger.info(sb.toString());
        }
    }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989014/fstmerge_base_4839402257319756622
=======
public static void PrintProject(Project project){
        //some quick and dirty debugging
        StringBuilder sb = new StringBuilder();
        for(Column c : project.columnModel.columns){
            sb.append(c.getName());
            sb.append("; ");
        }
        logger.info(sb.toString());
        for(Row r : project.rows){
            sb = new StringBuilder();
            for(int i = 0; i < r.cells.size(); i++){
                Cell c = r.getCell(i);
                if(c != null){
                   sb.append(c.value);
                   sb.append("; ");
                }else{
                    sb.append("null; ");
                }
            }
            logger.info(sb.toString());
        }
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420730989014/fstmerge_var2_4234544953181826680

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e3fc7_ecca1/rev_e3fc7-ecca1/main/tests/server/src/com/metaweb/gridworks/tests/importers/TestTools.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_6e503_390ac/rev_6e503-390ac.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_7de87_6e503/rev_7de87-6e503.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_4493f_2279f/rev_4493f-2279f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3b85a_1541c/rev_3b85a-1541c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_90316_c6f30/rev_90316-c6f30.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_7dc7b_f1387/rev_7dc7b-f1387.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3b060_71d3d/rev_3b060-71d3d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_64cf6_e0003/rev_64cf6-e0003.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_fec35_b24b2/rev_fec35-b24b2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_2c59a_5e0a4/rev_2c59a-5e0a4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_f1387_98c64/rev_f1387-98c64.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_50888_95e13/rev_50888-95e13.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_389e7_7fb95/rev_389e7-7fb95.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_01de9_fef77/rev_01de9-fef77.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> idToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var1_7282901121341209888
                    jsonWriter.array();
                    jsonWriter.object();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_base_5690640985079080648
                jsonWriter.object();
                jsonWriter.key("query");
                    jsonWriter.array();
                    jsonWriter.object();
=======
                jsonWriter.array();
                jsonWriter.object();
                
                    jsonWriter.key("id"); jsonWriter.value(null);
                    jsonWriter.key("name"); jsonWriter.value(null);
                    jsonWriter.key("guid"); jsonWriter.value(null);
                    jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                    
                    jsonWriter.key("id|=");
                        jsonWriter.array();
                        for (ReconJob job : jobs) {
                            jsonWriter.value(((IdBasedReconJob) job).id);
                        }
                        jsonWriter.endArray();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var2_1925794101711408582
                    
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var1_7282901121341209888
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("id|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((IdBasedReconJob) job).id);
                            }
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_base_5690640985079080648
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("id|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((IdBasedReconJob) job).id);
                            }
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                jsonWriter.endObject();
=======
                jsonWriter.endObject();
                jsonWriter.endArray();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var2_1925794101711408582
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var1_7282901121341209888
            sb.append(s_mqlreadService);
            sb.append("query=");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_base_5690640985079080648
            sb.append(s_mqlreadService);
            sb.append("?query=");
=======
            sb.append(getMqlreadService());
            sb.append("&query=");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590161/fstmerge_var2_1925794101711408582
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String id = result.getString("id");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    id,
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;

                            idToRecon.put(id, recon);
                        }
                    }
                } finally {
                    is.close();
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }

        for (ReconJob job : jobs) {
            String id = ((IdBasedReconJob) job).id;
            Recon recon = idToRecon.get(id);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_01de9_fef77/rev_01de9-fef77/extensions/freebase/src/com/google/refine/freebase/model/recon/IdBasedReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> keyToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var1_4263321626026528734
                    jsonWriter.array();
                    jsonWriter.object();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_base_8988312307438383392
                jsonWriter.object();
                jsonWriter.key("query");
                    jsonWriter.array();
                    jsonWriter.object();
=======
                jsonWriter.array();
                jsonWriter.object();
                
                    jsonWriter.key("id"); jsonWriter.value(null);
                    jsonWriter.key("name"); jsonWriter.value(null);
                    jsonWriter.key("guid"); jsonWriter.value(null);
                    jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var2_5235304274994578833
                    
                    jsonWriter.key("key");
                        jsonWriter.array();
                        jsonWriter.object();
                        
                        jsonWriter.key("namespace");
                            jsonWriter.object();
                            jsonWriter.key("id"); jsonWriter.value(namespace.id);
                            jsonWriter.endObject();
                            
                        jsonWriter.key("value"); jsonWriter.value(null);
                        jsonWriter.key("value|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((KeyBasedReconJob) job).key);
                            }
                            jsonWriter.endArray();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var1_4263321626026528734
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_base_8988312307438383392
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                jsonWriter.endObject();
=======
                            
                        jsonWriter.endObject();
                        jsonWriter.endArray();
                    
                jsonWriter.endObject();
                jsonWriter.endArray();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var2_5235304274994578833
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var1_4263321626026528734
            sb.append(s_mqlreadService);
            sb.append("query=");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_base_8988312307438383392
            sb.append(s_mqlreadService);
            sb.append("?query=");
=======
            sb.append(getMqlreadService());
            sb.append("&query=");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590201/fstmerge_var2_5235304274994578833
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String key = result.getJSONArray("key").getJSONObject(0).getString("value");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;

                            keyToRecon.put(key, recon);
                        }
                    }
                } finally {
                    is.close();
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }
        

        for (ReconJob job : jobs) {
            String key = ((KeyBasedReconJob) job).key;
            Recon recon = keyToRecon.get(key);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_01de9_fef77/rev_01de9-fef77/extensions/freebase/src/com/google/refine/freebase/model/recon/KeyBasedReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ final static protected String s_mqlreadService = "https://www.googleapis.com/freebase/v1/mqlread?key=" + FreebaseUtils.API_KEY + "&"; ##FSTMerge## final static protected String s_mqlreadService = "http://api.freebase.com/api/service/mqlread"; ##FSTMerge## final static private String s_mqlreadService =
            "https://www.googleapis.com/freebase/v1/mqlread";
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_01de9_fef77/rev_01de9-fef77/extensions/freebase/src/com/google/refine/freebase/model/recon/StrictReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> guidToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_base_3620479715642180136
                jsonWriter.object();
                jsonWriter.key("query");
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_var2_9108246121783720781
                jsonWriter.array();
                jsonWriter.object();

                jsonWriter.key("id"); jsonWriter.value(null);
                jsonWriter.key("name"); jsonWriter.value(null);
                jsonWriter.key("guid"); jsonWriter.value(null);
                jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();

                jsonWriter.key("guid|=");
                jsonWriter.array();
                for (ReconJob job : jobs) {
                    jsonWriter.value(((GuidBasedReconJob) job).guid);
                }
                jsonWriter.endArray();

                jsonWriter.endObject();
                jsonWriter.endArray();
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_base_3620479715642180136
                jsonWriter.endObject();
=======
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_var2_9108246121783720781

                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_var1_4069505110550404222
            sb.append(s_mqlreadService);
            sb.append("query=");
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_base_3620479715642180136
            sb.append(s_mqlreadService);
            sb.append("?query=");
=======
            sb.append(getMqlreadService());
            sb.append("&query=");
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732590250/fstmerge_var2_9108246121783720781
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();

                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String guid = result.getString("guid");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;

                            guidToRecon.put(guid, recon);
                        }
                    }
                } finally {
                    is.close();
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }
        
        for (ReconJob job : jobs) {
            String guid = ((GuidBasedReconJob) job).guid;
            Recon recon = guidToRecon.get(guid);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_01de9_fef77/rev_01de9-fef77/extensions/freebase/src/com/google/refine/freebase/model/recon/GuidBasedReconConfig.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> idToRecon = new HashMap<String, Recon>();
        
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708906/fstmerge_var1_600341070135708902
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.array();
                jsonWriter.object();
                
                    jsonWriter.key("id"); jsonWriter.value(null);
                    jsonWriter.key("name"); jsonWriter.value(null);
                    jsonWriter.key("guid"); jsonWriter.value(null);
                    jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                    
                    jsonWriter.key("id|=");
                        jsonWriter.array();
                        for (ReconJob job : jobs) {
                            jsonWriter.value(((IdBasedReconJob) job).id);
                        }
                        jsonWriter.endArray();
                    
                jsonWriter.endObject();
                jsonWriter.endArray();
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(getMqlreadService());
            sb.append("&query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String id = result.getString("id");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    id,
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708906/fstmerge_base_7311399877873569520
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("id|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((IdBasedReconJob) job).id);
                            }
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String id = result.getString("id");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    id,
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
=======
            String query = buildQuery(jobs);
            String s = FreebaseUtils.mqlread(query);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708906/fstmerge_var2_3449023112545253696

            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
            if (o.has("result")) {
                JSONArray results = o.getJSONArray("result");
                int count = results.length();

                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);

                    String id = result.getString("id");

                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }

                    ReconCandidate candidate = new ReconCandidate(
                            id,
                            result.getString("name"),
                            typeIDs,
                            100
                            );

                    Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;

                    idToRecon.put(id, recon);
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }

        for (ReconJob job : jobs) {
            String id = ((IdBasedReconJob) job).id;
            Recon recon = idToRecon.get(id);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3/extensions/freebase/src/com/google/refine/freebase/model/recon/IdBasedReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> keyToRecon = new HashMap<String, Recon>();
        
        try {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_var1_7508792399719966940
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.array();
                jsonWriter.object();
                
                    jsonWriter.key("id"); jsonWriter.value(null);
                    jsonWriter.key("name"); jsonWriter.value(null);
                    jsonWriter.key("guid"); jsonWriter.value(null);
                    jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                    
                    jsonWriter.key("key");
                        jsonWriter.array();
                        jsonWriter.object();
                        
                        jsonWriter.key("namespace");
                            jsonWriter.object();
                            jsonWriter.key("id"); jsonWriter.value(namespace.id);
                            jsonWriter.endObject();
                            
                        jsonWriter.key("value"); jsonWriter.value(null);
                        jsonWriter.key("value|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((KeyBasedReconJob) job).key);
                            }
                            jsonWriter.endArray();
                            
                        jsonWriter.endObject();
                        jsonWriter.endArray();
                    
                jsonWriter.endObject();
                jsonWriter.endArray();
                
                query = stringWriter.toString();
            }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_base_6345074400538714388
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("key");
                            jsonWriter.array();
                            jsonWriter.object();
                            
                            jsonWriter.key("namespace");
                                jsonWriter.object();
                                jsonWriter.key("id"); jsonWriter.value(namespace.id);
                                jsonWriter.endObject();
                                
                            jsonWriter.key("value"); jsonWriter.value(null);
                            jsonWriter.key("value|=");
                                jsonWriter.array();
                                for (ReconJob job : jobs) {
                                    jsonWriter.value(((KeyBasedReconJob) job).key);
                                }
                                jsonWriter.endArray();
                                
                            jsonWriter.endObject();
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                
                query = stringWriter.toString();
            }
=======
            String query = buildQuery(jobs);
            String s = FreebaseUtils.mqlread(query);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_var2_284033224173444172
            
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_var1_7508792399719966940
            StringBuffer sb = new StringBuffer(1024);
            sb.append(getMqlreadService());
            sb.append("&query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String key = result.getJSONArray("key").getJSONObject(0).getString("value");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_base_6345074400538714388
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String key = result.getJSONArray("key").getJSONObject(0).getString("value");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
=======
            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
            if (o.has("result")) {
                JSONArray results = o.getJSONArray("result");
                int count = results.length();

                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);

                    String key = result.getJSONArray("key").getJSONObject(0).getString("value");

                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }

                    ReconCandidate candidate = new ReconCandidate(
                            result.getString("id"),
                            result.getString("name"),
                            typeIDs,
                            100
                            );

                    Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708935/fstmerge_var2_284033224173444172

                    keyToRecon.put(key, recon);
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }
        
        for (ReconJob job : jobs) {
            String key = ((KeyBasedReconJob) job).key;
            Recon recon = keyToRecon.get(key);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3/extensions/freebase/src/com/google/refine/freebase/model/recon/KeyBasedReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
~~FSTMerge~~ final static private String s_mqlreadService =
            "https://www.googleapis.com/freebase/v1/mqlread"; ##FSTMerge## final static protected String s_mqlreadService = "https://www.googleapis.com/freebase/v1/mqlread?key=" + FreebaseUtils.API_KEY + "&"; ##FSTMerge##
File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3/extensions/freebase/src/com/google/refine/freebase/model/recon/StrictReconConfig.java
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> guidToRecon = new HashMap<String, Recon>();
        
        try {
            String query = buildQuery(jobs);

            String s = FreebaseUtils.mqlread(query);
            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
            
            if (o.has("result")) {
                JSONArray results = o.getJSONArray("result");
                int count = results.length();

                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);

                    String guid = result.getString("guid");

                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }

<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708979/fstmerge_var1_5724889979551599915
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(getMqlreadService());
            sb.append("&query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();

                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String guid = result.getString("guid");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708979/fstmerge_base_4230044859321995223
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            if (connection.getResponseCode() >= 400) {
                String responseMessage = connection.getResponseMessage();
                String errorString = ParsingUtilities.inputStreamToString(connection.getErrorStream());
                LOGGER.error("HTTP response error during recon: " + connection.getResponseCode() 
                        + " : " + responseMessage + " : " + errorString);
            } else {
                InputStream is = connection.getInputStream();

                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                    if (o.has("result")) {
                        JSONArray results = o.getJSONArray("result");
                        int count = results.length();

                        for (int i = 0; i < count; i++) {
                            JSONObject result = results.getJSONObject(i);

                            String guid = result.getString("guid");

                            JSONArray types = result.getJSONArray("type");
                            String[] typeIDs = new String[types.length()];
                            for (int j = 0; j < typeIDs.length; j++) {
                                typeIDs[j] = types.getString(j);
                            }

                            ReconCandidate candidate = new ReconCandidate(
                                    result.getString("id"),
                                    result.getString("name"),
                                    typeIDs,
                                    100
                                    );

                            Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                            recon.addCandidate(candidate);
                            recon.service = "mql";
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                            recon.match = candidate;
                            recon.matchRank = 0;
=======
                    ReconCandidate candidate = new ReconCandidate(
                            result.getString("id"),
                            result.getString("name"),
                            typeIDs,
                            100
                            );

                    Recon recon = Recon.makeFreebaseRecon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420732708979/fstmerge_var2_4370895969764890829

                    guidToRecon.put(guid, recon);
                }
            }
        } catch (IOException e) {
            LOGGER.error("IOException during recon : ",e);
        } catch (JSONException e) {
            LOGGER.error("JSONException during recon : ",e);
        }

        for (ReconJob job : jobs) {
            String guid = ((GuidBasedReconJob) job).guid;
            Recon recon = guidToRecon.get(guid);
            if (recon == null) {
                recon = createNoMatchRecon(historyEntryID);
            }
            recons.add(recon);
        }
        
        return recons;
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8fb45_c91a3/rev_8fb45-c91a3/extensions/freebase/src/com/google/refine/freebase/model/recon/GuidBasedReconConfig.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_1f7ab_9852a/rev_1f7ab-9852a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8a61c_af947/rev_8a61c-af947.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_ebdc4_31cff/rev_ebdc4-31cff.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public void parseOneFile(
        Project project,
        ProjectMetadata metadata,
        ImportingJob job,
        String fileSource,
        Reader reader,
        int limit,
        JSONObject options,
        List<Exception> exceptions
    ) {
        String sep = JSONUtilities.getString(options, "separator", "\\t");
        if (sep == null || "".equals(sep)) {
            sep = "\\t";
        }
        sep = StringEscapeUtils.unescapeJava(sep);
        boolean processQuotes = JSONUtilities.getBoolean(options, "processQuotes", true);
        boolean strictQuotes = JSONUtilities.getBoolean(options, "strictQuotes", false);
        
        final CSVParser parser = new CSVParser(
            sep.toCharArray()[0],//HACK changing string to char - won't work for multi-char separators.
            CSVParser.DEFAULT_QUOTE_CHARACTER,
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733059383/fstmerge_var1_964244596084048490
            (char) 0, // escape character
            strictQuotes,
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733059383/fstmerge_base_6438424620561427963
            (char) 0, // escape character
            CSVParser.DEFAULT_STRICT_QUOTES,
=======
            (char) 127, // we don't want escape processing try DEL as a rare character until we can turn it off
            CSVParser.DEFAULT_STRICT_QUOTES,
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733059383/fstmerge_var2_19015985365739801
            CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE,
            !processQuotes);
        
        final LineNumberReader lnReader = new LineNumberReader(reader);
        
        TableDataReader dataReader = new TableDataReader() {
            @Override
            public List<Object> getNextRowOfCells() throws IOException {
                String line = lnReader.readLine();
                if (line == null) {
                    return null;
                } else {
                    return getCells(line, parser, lnReader);
                }
            }
        };
        
        TabularImportingParserBase.readTable(project, metadata, job, dataReader, fileSource, limit, options, exceptions);
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_ebdc4_31cff/rev_ebdc4-31cff/main/src/com/google/refine/importers/SeparatorBasedImporter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_47707_0bdd3/rev_47707-0bdd3.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_d1b2d_1e9a1/rev_d1b2d-1e9a1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_d1b2d_c0fb6/rev_d1b2d-c0fb6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_7e975_33046/rev_7e975-33046.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_67fc9_e1bea/rev_67fc9-e1bea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_5525d_b91fc/rev_5525d-b91fc.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_b09bb_4e4eb/rev_b09bb-4e4eb.revisions
Conflict type: LineBasedMCFd
Conflict body: 
@Override
    public Object call(Properties bindings, Object[] args) {
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733885628/fstmerge_var1_3121525040349731819
        if (args.length == 2 && 
                args[0] != null && args[0] instanceof Boolean && 
                args[1] != null && args[1] instanceof Boolean) {
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733885628/fstmerge_base_1197186488340853798
        if (args.length == 2 &&
                args[0] != null && args[0] instanceof Boolean &&
                args[1] != null && args[0] instanceof Boolean) {
=======
        if (args.length == 2 && 
                args[0] != null && args[0] instanceof Boolean && 
                args[1] != null && args[0] instanceof Boolean) {
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420733885628/fstmerge_var2_7682661812605654824
            boolean o1 = ((Boolean) args[0]).booleanValue();
            boolean o2 = ((Boolean) args[1]).booleanValue();
            return o1 != o2;
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 booleans");
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_b09bb_4e4eb/rev_b09bb-4e4eb/main/src/com/google/refine/expr/functions/booleans/Xor.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_349c3_b6e88/rev_349c3-b6e88.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_0cb02_8cb1d/rev_0cb02-8cb1d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_10913_5fc35/rev_10913-5fc35.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e0f16_e6e6c/rev_e0f16-e6e6c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_6e90b_e0f16/rev_6e90b-e0f16.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_6e90b_78bf5/rev_6e90b-78bf5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_0795b_70d42/rev_0795b-70d42.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_1e5f8_22a9a/rev_1e5f8-22a9a.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420734845743/fstmerge_var1_692511840359643645
static private void setProgress(ImportingJob job, String fileSource, int percent) {
        job.setProgress(percent, "Reading " + fileSource);
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420734845743/fstmerge_base_284816811589794754
static private void setProgress(ImportingJob job, String fileSource, int percent) {
        JSONObject progress = JSONUtilities.getObject(job.config, "progress");
        if (progress == null) {
            progress = new JSONObject();
            JSONUtilities.safePut(job.config, "progress", progress);
        }
        JSONUtilities.safePut(progress, "message", "Reading " + fileSource);
        JSONUtilities.safePut(progress, "percent", percent);
=======
static void setProgress(ImportingJob job, String fileSource, int percent) {
        JSONObject progress = JSONUtilities.getObject(job.config, "progress");
        if (progress == null) {
            progress = new JSONObject();
            JSONUtilities.safePut(job.config, "progress", progress);
        }
        JSONUtilities.safePut(progress, "message", "Reading " + fileSource);
        JSONUtilities.safePut(progress, "percent", percent);
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420734845743/fstmerge_var2_5616575503120239315
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_1e5f8_22a9a/rev_1e5f8-22a9a/extensions/gdata/src/com/google/refine/extension/gdata/GDataImporter.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_273ba_579d7/rev_273ba-579d7.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_66b47_914c5/rev_66b47-914c5.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_f8376_f87b8/rev_f8376-f87b8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_03029_ab42d/rev_03029-ab42d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18.revisions
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435311/fstmerge_var1_8917700836404319337
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435311/fstmerge_base_1017706860601788385
public SetLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
=======
public SetLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435311/fstmerge_var2_2587855428188860145

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/main/src/com/google/refine/commands/lang/SetLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435315/fstmerge_var1_986290415902618567
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435315/fstmerge_base_4258184245348198557
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
=======
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435315/fstmerge_var2_1345324560444967655

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/main/src/com/google/refine/commands/lang/SetLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435319/fstmerge_var1_3439928040826548818
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435319/fstmerge_base_3063354376025493673
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String lang = request.getParameter("lng");
        PreferenceStore pref = ProjectManager.singleton.getPreferenceStore();
        
        pref.put("userLang", lang);
    }
=======
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String lang = request.getParameter("lng");
        PreferenceStore pref = ProjectManager.singleton.getPreferenceStore();
        
        pref.put("userLang", lang);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435319/fstmerge_var2_6659904277964747636

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/main/src/com/google/refine/commands/lang/SetLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435324/fstmerge_var1_7576280972678762513
public LoadLanguageCommand() {
    	super();
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435324/fstmerge_base_7241453943799319538
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
=======
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435324/fstmerge_var2_2411142111329866962
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435333/fstmerge_var1_2185121827539783232
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String modname = request.getParameter("module");
        if (modname == null) {
            modname = "core";
        }
        ButterflyModule module = this.servlet.getModule(modname);

        String[] langs = request.getParameterValues("lang");
        if (langs == null || "".equals(langs[0])) {
            PreferenceStore ps = ProjectManager.singleton.getPreferenceStore();
            if (ps != null) {
                langs = new String[] {(String) ps.get("userLang")};
            }
        }
        langs = Arrays.copyOf(langs, langs.length+1);
        langs[langs.length-1] = "default";

        JSONObject json = null;
        boolean loaded = false;
        for (String lang : langs) {
            File langFile = new File(module.getPath(), "langs" + File.separator + "translation-" + lang + ".json");
            try {
                Reader reader = new BufferedReader(new InputStreamReader(new FileInputStream(langFile), "UTF-8"));
                json = new JSONObject(new JSONTokener(reader));
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/json");
                json.write(response.getWriter());
                response.getWriter().flush();
                response.getWriter().close();
                loaded = true;
                break;
            } catch (FileNotFoundException e1) {
                json = null;
                continue;
            } catch (JSONException e) {
                json = null;
                logger.error("JSON error reading/writing language file", e);
                continue;
            }
        }
        if (!loaded) {
        	logger.error("Failed to load any language files");
        }
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435333/fstmerge_base_7864069152363406052
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext().getRealPath("webapp/modules/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "main"
                + File.separator);

        BufferedReader reader = null;
        String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
=======
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext().getRealPath("webapp/modules/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "main"
                + File.separator);

        BufferedReader reader = null;
        String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735435333/fstmerge_var2_2914864575644196487
    }

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/main/src/com/google/refine/commands/lang/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446436/fstmerge_var1_6553287200740085132
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446436/fstmerge_base_7337810398452558571
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
=======
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446436/fstmerge_var2_5510352750840628453

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/gdata/src/com/google/refine/extension/gdata/commands/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446440/fstmerge_var1_4114394122868795371
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446440/fstmerge_base_2011236961742602894
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
=======
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446440/fstmerge_var2_6208924049347292045

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/gdata/src/com/google/refine/extension/gdata/commands/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446444/fstmerge_var1_8958564687878290806
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446444/fstmerge_base_5125854516599191210
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext()
                .getRealPath("extensions/gdata/module/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "");

        BufferedReader reader = null;
        String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
    }
=======
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext()
                .getRealPath("extensions/gdata/module/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "");

        BufferedReader reader = null;
        String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446444/fstmerge_var2_4014785951133359100

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/gdata/src/com/google/refine/extension/gdata/commands/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446562/fstmerge_var1_145593125116389560
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446562/fstmerge_base_5983775147300399055
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
=======
public LoadLanguageCommand() {
        // TODO Auto-generated constructor stub
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446562/fstmerge_var2_5268278010919008937

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/freebase/src/com/google/refine/freebase/commands/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446566/fstmerge_var1_7703818192993571813
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446566/fstmerge_base_112562186602051671
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
=======
@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446566/fstmerge_var2_7378954790682240638

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/freebase/src/com/google/refine/freebase/commands/LoadLanguageCommand.java
Conflict type: LineBasedMCFd
Conflict body: 
<<<<<<< /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446571/fstmerge_var1_9030161225642590970
||||||| /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446571/fstmerge_base_3748237272248300881
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext()
                .getRealPath("extensions/freebase/module/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "");

        BufferedReader reader = null;String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
    }
=======
public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String rawDirectoryFile = request.getSession().getServletContext()
                .getRealPath("extensions/freebase/module/langs/");
        String cleanedDirectory = rawDirectoryFile.replace("main" + File.separator + "webapp" + File.separator, "");

        BufferedReader reader = null;String param = null;
        try {
            param = (String) ProjectManager.singleton.getPreferenceStore().get("userLang");
        } catch (NullPointerException e) {
        }
        if (param == null) param = request.getParameter("lng");

        String[] langs = param.split(" ");
        try {
            String file = cleanedDirectory + File.separator + "translation-" + langs[0] + ".json";
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        } catch (FileNotFoundException e1) {
            try {
                String file = cleanedDirectory + File.separator + "translation-default.json";
                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            }
        }

        String line = null;
        String message = new String();
        if (reader != null) {
            while ((line = reader.readLine()) != null) {
                // buffer.append(line);
                message += line + System.getProperty("line.separator");
            }
        }

        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.getWriter().println(message);
        response.getWriter().flush();
        response.getWriter().close();
    }
>>>>>>> /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/conflictsAnalyzer/fstmerge_tmp1420735446571/fstmerge_var2_6845720301929779624

File path: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_3aa1e_f3b18/rev_3aa1e-f3b18/extensions/freebase/src/com/google/refine/freebase/commands/LoadLanguageCommand.java

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_f2c4e_fcb41/rev_f2c4e-fcb41.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_84c20_de3fb/rev_84c20-de3fb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_f45ea_84c20/rev_f45ea-84c20.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_e8f73_2c0cb/rev_e8f73-2c0cb.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_5aa23_e8f73/rev_5aa23-e8f73.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_ae56e_6a442/rev_ae56e-6a442.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_23be7_ae56e/rev_23be7-ae56e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_c2cad_8eac2/rev_c2cad-8eac2.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_c2cad_7064a/rev_c2cad-7064a.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_a1cd6_c2cad/rev_a1cd6-c2cad.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_1a2d9_6241f/rev_1a2d9-6241f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_cbcb2_dd18f/rev_cbcb2-dd18f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_6deda_ec771/rev_6deda-ec771.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_2bf35_cff45/rev_2bf35-cff45.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_a4d03_564ea/rev_a4d03-564ea.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_65c13_a4d03/rev_65c13-a4d03.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_c1685_8330e/rev_c1685-8330e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_2624e_d106d/rev_2624e-d106d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_af2ea_0d74d/rev_af2ea-0d74d.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_585e2_19fe4/rev_585e2-19fe4.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_4ee8e_7397e/rev_4ee8e-7397e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_a8ccd_4333b/rev_a8ccd-4333b.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_a0d4e_71b9c/rev_a0d4e-71b9c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_8c02a_8ff0c/rev_8c02a-8ff0c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_b4e5e_2fa9c/rev_b4e5e-2fa9c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_0c475_27e77/rev_0c475-27e77.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_62fb9_c934c/rev_62fb9-c934c.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_50585_31a3f/rev_50585-31a3f.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_85171_50585/rev_85171-50585.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_99cf3_cdda1/rev_99cf3-cdda1.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_2ae01_9f4c6/rev_2ae01-9f4c6.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_bf603_c15f8/rev_bf603-c15f8.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_f3e2b_d3305/rev_f3e2b-d3305.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_c3884_fddaa/rev_c3884-fddaa.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_2740a_ea723/rev_2740a-ea723.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_d1d43_d4644/rev_d1d43-d4644.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_ffad7_bfc39/rev_ffad7-bfc39.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_57a3d_14152/rev_57a3d-14152.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_dd32f_7186e/rev_dd32f-7186e.revisions

==================================================================================================================
Revision: /media/ines/b9d638e1-93ee-435a-af41-80d544917e00/gitClones/conflictsStudy/downloads/OpenRefine/revisions/rev_4d2b9_349d7/rev_4d2b9-349d7.revisions
